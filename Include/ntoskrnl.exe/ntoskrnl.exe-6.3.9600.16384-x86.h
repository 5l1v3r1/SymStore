struct BATTERY_REPORTING_SCALE;
struct CMP_OFFSET_ARRAY;
struct DOCK_INTERFACE;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct PEPHANDLE__;
struct POWER_ACTION_POLICY;
struct PO_MEMORY_IMAGE;
struct PROCESSOR_IDLESTATE_INFO;
struct PROCESSOR_IDLESTATE_POLICY;
struct PROCESSOR_PERFSTATE_POLICY;
struct SYSTEM_POWER_CAPABILITIES;
struct SYSTEM_POWER_LEVEL;
struct VACB_LEVEL_ALLOCATION_LIST;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACL;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
struct _ADAPTER_OBJECT;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _ALPC_COMMUNICATION_INFO;
struct _ALPC_COMPLETION_LIST;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _ALPC_COMPLETION_LIST_STATE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
struct _ALPC_DISPATCH_CONTEXT;
struct _ALPC_HANDLE_ENTRY;
struct _ALPC_HANDLE_TABLE;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _ALPC_PORT;
struct _ALPC_PORT_ATTRIBUTES;
struct _ALPC_PROCESS_CONTEXT;
struct _AMD64_DBGKD_CONTROL_SET;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
struct _ARBITER_ALLOCATION_STATE;
struct _ARBITER_ALTERNATIVE;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INSTANCE;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_ORDERING;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
struct _AUX_ACCESS_DATA;
struct _BITMAP_RANGE;
struct _BLOB;
struct _BLOB_COUNTERS;
struct _BLOB_TYPE;
struct _BUS_EXTENSION_LIST;
struct _CACHED_CHILD_LIST;
struct _CACHE_DESCRIPTOR;
struct _CACHE_MANAGER_CALLBACKS;
struct _CACHE_UNINITIALIZE_EVENT;
struct _CALLBACK_OBJECT;
struct _CALL_HASH_ENTRY;
struct _CALL_PERFORMANCE_DATA;
struct _CC_EXTERNAL_CACHE_INFO;
struct _CELL_DATA;
struct _CHILD_LIST;
struct _CLIENT_ID;
struct _CLIENT_ID32;
struct _CLIENT_ID64;
struct _CMHIVE;
struct _CM_BIG_DATA;
struct _CM_CACHED_VALUE_INDEX;
struct _CM_CELL_REMAP_BLOCK;
struct _CM_DIRTY_VECTOR_LOG;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_INDEX_HINT_BLOCK;
struct _CM_INTENT_LOCK;
struct _CM_KCB_UOW;
struct _CM_KEY_BODY;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_KEY_HASH;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _CM_KEY_INDEX;
struct _CM_KEY_NODE;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_SECURITY_CACHE;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _CM_KEY_VALUE;
struct _CM_NAME_CONTROL_BLOCK;
struct _CM_NAME_HASH;
struct _CM_NOTIFY_BLOCK;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _CM_RM;
struct _CM_TRANS;
struct _CM_WORKITEM;
struct _COLORED_PAGE_INFO;
struct _COMPRESSED_DATA_INFO;
struct _CONTEXT;
struct _CONTROL_AREA;
struct _COUNTER_READING;
struct _CURDIR;
struct _DBGKD_ANY_CONTROL_SET;
struct _DBGKD_BREAKPOINTEX;
struct _DBGKD_CONTEXT_EX;
struct _DBGKD_CONTINUE;
struct _DBGKD_CONTINUE2;
struct _DBGKD_FILL_MEMORY;
struct _DBGKD_GET_CONTEXT;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_GET_VERSION64;
struct _DBGKD_LOAD_SYMBOLS32;
struct _DBGKD_LOAD_SYMBOLS64;
struct _DBGKD_MANIPULATE_STATE32;
struct _DBGKD_MANIPULATE_STATE64;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_QUERY_SPECIAL_CALLS;
struct _DBGKD_READ_MEMORY32;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_READ_WRITE_IO32;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_SEARCH_MEMORY;
struct _DBGKD_SET_CONTEXT;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _DBGKD_SET_SPECIAL_CALL32;
struct _DBGKD_SET_SPECIAL_CALL64;
struct _DBGKD_SWITCH_PARTITION;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _DBGKD_WRITE_BREAKPOINT64;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_WRITE_MEMORY64;
struct _DBGKM_EXCEPTION32;
struct _DBGKM_EXCEPTION64;
struct _DEFERRED_WRITE;
struct _DELAY_ACK_FO;
struct _DESCRIPTOR;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_DESCRIPTION;
struct _DEVICE_MAP;
struct _DEVICE_NODE;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_LIST_ENTRY;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RELATIONS;
struct _DEVOBJ_EXTENSION;
struct _DIAGNOSTIC_BUFFER;
struct _DIAGNOSTIC_CONTEXT;
struct _DIRTY_PAGE_STATISTICS;
struct _DIRTY_PAGE_THRESHOLDS;
struct _DISPATCHER_HEADER;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DUAL;
struct _DUMMY_FILE_OBJECT;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _DUMP_STACK_CONTEXT;
struct _ECP_LIST;
struct _EJOB;
struct _ENODE;
struct _EPROCESS;
struct _EPROCESS_QUOTA_BLOCK;
struct _EPROCESS_VALUES;
struct _ERESOURCE;
struct _ETHREAD;
struct _ETIMER;
struct _ETWP_NOTIFICATION_HEADER;
struct _ETW_BUFFER_CONTEXT;
struct _ETW_BUFFER_QUEUE;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _ETW_FILTER_STRING_TOKEN;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
struct _ETW_GUID_ENTRY;
struct _ETW_LAST_ENABLE_INFO;
struct _ETW_LOGGER_HANDLE;
struct _ETW_PAYLOAD_FILTER;
struct _ETW_PERFECT_HASH_FUNCTION;
struct _ETW_PERF_COUNTERS;
struct _ETW_PMC_SUPPORT;
struct _ETW_QUEUE_ENTRY;
struct _ETW_REALTIME_CONSUMER;
struct _ETW_REF_CLOCK;
struct _ETW_REG_ENTRY;
struct _ETW_REPLY_QUEUE;
struct _ETW_SESSION_PERF_COUNTERS;
struct _ETW_STACK_CACHE;
struct _ETW_SYSTEMTIME;
struct _ETW_WMITRACE_WORK;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_FILTER_HEADER;
struct _EVENT_HEADER;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _EVENT_PAYLOAD_PREDICATE;
struct _EVENT_RECORD;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EXHANDLE;
struct _EXT_DELETE_PARAMETERS;
struct _EXT_SET_PARAMETERS_V0;
struct _EX_FAST_REF;
struct _EX_PUSH_LOCK;
struct _EX_PUSH_LOCK_CACHE_AWARE;
struct _EX_RUNDOWN_REF;
struct _EX_WORK_QUEUE;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FILESYSTEM_DISK_COUNTERS;
struct _FILE_BASIC_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FLOATING_SAVE_AREA;
struct _FLS_CALLBACK_INFO;
struct _FREE_DISPLAY;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _FS_FILTER_CALLBACKS;
struct _FS_FILTER_CALLBACK_DATA;
struct _GDI_TEB_BATCH;
struct _GDI_TEB_BATCH32;
struct _GDI_TEB_BATCH64;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GROUP_AFFINITY;
struct _GUID;
struct _HAL_PMC_COUNTERS;
struct _HANDLE_TABLE;
struct _HANDLE_TABLE_ENTRY;
struct _HANDLE_TABLE_ENTRY_INFO;
struct _HANDLE_TABLE_FREE_LIST;
struct _HANDLE_TRACE_DB_ENTRY;
struct _HANDLE_TRACE_DEBUG_INFO;
struct _HARDWARE_PTE;
struct _HBASE_BLOCK;
struct _HBIN;
struct _HCELL;
struct _HEAP;
struct _HEAP_COUNTERS;
struct _HEAP_ENTRY;
struct _HEAP_ENTRY_EXTRA;
struct _HEAP_FREE_ENTRY;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _HEAP_LIST_LOOKUP;
struct _HEAP_LOCK;
struct _HEAP_LOOKASIDE;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _HEAP_SEGMENT;
struct _HEAP_STOP_ON_TAG;
struct _HEAP_STOP_ON_VALUES;
struct _HEAP_TAG_ENTRY;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP_UCR_DESCRIPTOR;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _HHIVE;
struct _HIVE_LIST_ENTRY;
struct _HIVE_LOAD_FAILURE;
struct _HIVE_WAIT_PACKET;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _HMAP_DIRECTORY;
struct _HMAP_ENTRY;
struct _HMAP_TABLE;
struct _HV_ENLIGHTENMENT_INFORMATION;
struct _HV_HYPERVISOR_FEATURES;
struct _HV_HYPERVISOR_HARDWARE_FEATURES;
struct _HV_HYPERVISOR_INTERFACE_INFO;
struct _HV_HYPERVISOR_VERSION_INFO;
struct _HV_IMPLEMENTATION_LIMITS;
struct _HV_VENDOR_AND_MAX_FUNCTION;
struct _IA64_DBGKD_CONTROL_SET;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_SECURITY_CONTEXT;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
struct _INTERRUPT_CONNECTION_DATA;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _IOP_IRP_EXTENSION;
struct _IOP_IRP_EXTENSION_STATUS;
struct _IOV_FORCED_PENDING_TRACE;
struct _IOV_IRP_TRACE;
struct _IO_CACHE_INFO;
struct _IO_CLIENT_EXTENSION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _IO_PRIORITY_INFO;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IO_WORKITEM;
struct _IRP;
struct _ISRDPCSTATS;
struct _JOBOBJECT_WAKE_FILTER;
struct _JOB_ACCESS_STATE;
struct _JOB_CPU_RATE_CONTROL;
struct _JOB_NOTIFICATION_INFORMATION;
struct _KAFFINITY_EX;
struct _KALPC_HANDLE_DATA;
struct _KALPC_MESSAGE;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _KALPC_REGION;
struct _KALPC_RESERVE;
struct _KALPC_SECTION;
struct _KALPC_SECURITY_DATA;
struct _KALPC_VIEW;
struct _KAPC;
struct _KAPC_STATE;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KDPC_DATA;
struct _KDPC_LIST;
struct _KENLISTMENT;
struct _KENLISTMENT_HISTORY;
struct _KENTROPY_TIMING_STATE;
struct _KERNEL_STACK_SEGMENT;
struct _KEVENT;
struct _KGATE;
struct _KGDTENTRY;
struct _KIDTENTRY;
struct _KINTERRUPT;
struct _KLOCK_ENTRY;
struct _KLOCK_ENTRY_LOCK_STATE;
struct _KLOCK_QUEUE_HANDLE;
struct _KMUTANT;
struct _KNODE;
struct _KPCR;
struct _KPRCB;
struct _KPRIQUEUE;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KQUEUE;
struct _KRESOURCEMANAGER;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
struct _KSCB;
struct _KSCHEDULING_GROUP;
struct _KSECONDARY_IDT_ENTRY;
struct _KSEMAPHORE;
struct _KSHARED_READY_QUEUE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSTACK_CONTROL;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTHREAD_COUNTERS;
struct _KTIMER;
struct _KTIMER_TABLE;
struct _KTIMER_TABLE_ENTRY;
struct _KTM;
struct _KTMNOTIFICATION_PACKET;
struct _KTMOBJECT_NAMESPACE;
struct _KTMOBJECT_NAMESPACE_LINK;
struct _KTRANSACTION;
struct _KTRANSACTION_HISTORY;
struct _KTRAP_FRAME;
struct _KTSS;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
struct _KiIoAccessMap;
struct _LAZY_WRITER;
struct _LDRP_CSLIST;
struct _LDRP_DLL_SNAP_CONTEXT;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDR_DDAG_NODE;
struct _LDR_SERVICE_TAG_RECORD;
struct _LEARNING_MODE_DATA;
struct _LIST_ENTRY;
struct _LOCK_HEADER;
struct _LOCK_TRACKER;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _LOG_HANDLE_CONTEXT;
struct _LOOKASIDE_LIST_EX;
struct _LPCP_MESSAGE;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
struct _LPCP_PORT_QUEUE;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAPPED_FILE_SEGMENT;
struct _MBCB;
struct _MCGEN_TRACE_CONTEXT;
struct _MDL;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _MI_ACTIVE_WSLE_LISTHEAD;
struct _MI_CACHED_PTE;
struct _MI_CFG_BITMAP_INFO;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct _MI_IMAGE_SECURITY_REFERENCE;
struct _MI_LARGEPAGE_MEMORY_INFO;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct _MI_PHYSMEM_BLOCK;
struct _MI_PTE_CHAIN_HEAD;
struct _MI_REVERSE_VIEW_MAP;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _MI_SESSION_DRIVER_UNLOAD;
struct _MI_SPECIAL_POOL;
struct _MI_SYSTEM_PTE_TYPE;
struct _MI_TRIAGE_DUMP_DATA;
struct _MI_USER_VA_INFO;
struct _MI_VAD_EVENT_BLOCK;
struct _MI_VAD_SEQUENTIAL_INFO;
struct _MI_VERIFIER_POOL_HEADER;
struct _MMADDRESS_LIST;
struct _MMEXTEND_INFO;
struct _MMINPAGE_FLAGS;
struct _MMINPAGE_SUPPORT;
struct _MMIO_TRACKER;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _MMPAGING_FILE;
struct _MMPFN;
struct _MMPFNENTRY;
struct _MMPFNLIST;
struct _MMPTE;
struct _MMPTE_HARDWARE;
struct _MMPTE_HIGHLOW;
struct _MMPTE_LIST;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_SUBSECTION;
struct _MMPTE_TIMESTAMP;
struct _MMPTE_TRANSITION;
struct _MMSECTION_FLAGS;
struct _MMSECURE_FLAGS;
struct _MMSESSION;
struct _MMSUBSECTION_FLAGS;
struct _MMSUPPORT;
struct _MMSUPPORT_FLAGS;
struct _MMVAD;
struct _MMVAD_FLAGS;
struct _MMVAD_FLAGS1;
struct _MMVAD_FLAGS2;
struct _MMVAD_SHORT;
struct _MMVIEW;
struct _MMWSL;
struct _MMWSLE;
struct _MMWSLENTRY;
struct _MMWSLE_FREE_ENTRY;
struct _MMWSLE_HASH;
struct _MMWSLE_NONDIRECT_HASH;
struct _MM_DRIVER_VERIFIER_DATA;
struct _MM_PAGED_POOL_INFO;
struct _MM_PAGE_ACCESS_INFO;
struct _MM_PAGE_ACCESS_INFO_HEADER;
struct _MM_SESSION_SPACE;
struct _MM_SESSION_SPACE_FLAGS;
struct _MODWRITER_FLAGS;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NB10;
struct _NONOPAQUE_OPLOCK;
struct _NPAGED_LOOKASIDE_LIST;
struct _NT_TIB;
struct _NT_TIB32;
struct _NT_TIB64;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_CREATE_INFORMATION;
struct _OBJECT_DIRECTORY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _OBJECT_HANDLE_COUNT_ENTRY;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_HEADER;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_HEADER_PADDING_INFO;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _OBJECT_HEADER_QUOTA_INFO;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_REF_INFO;
struct _OBJECT_REF_STACK_INFO;
struct _OBJECT_REF_TRACE;
struct _OBJECT_SYMBOLIC_LINK;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBP_LOOKUP_CONTEXT;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _OPEN_PACKET;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PAGEFAULT_HISTORY;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _PCW_BUFFER;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_PROCESSOR_INFO;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEB;
struct _PEBS_DS_SAVE_AREA;
struct _PEB_LDR_DATA;
struct _PENDING_RELATIONS_LIST_ENTRY;
struct _PEP_CRASHDUMP_INFORMATION;
struct _PERFINFO_GROUPMASK;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _PF_KERNEL_GLOBALS;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _PHYSICAL_MEMORY_RUN;
struct _PI_BUS_EXTENSION;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _PNP_DEVICE_ACTION_ENTRY;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _PNP_DEVICE_COMPLETION_REQUEST;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _PNP_DEVICE_EVENT_LIST;
struct _PNP_RESOURCE_REQUEST;
struct _POOL_BLOCK_HEAD;
struct _POOL_DESCRIPTOR;
struct _POOL_HACKER;
struct _POOL_HEADER;
struct _POOL_TRACKER_BIG_PAGES;
struct _POOL_TRACKER_TABLE;
struct _POP_ACTION_TRIGGER;
struct _POP_CPU_INFO;
struct _POP_CURRENT_BROADCAST;
struct _POP_DEVICE_SYS_STATE;
struct _POP_FX_ACCOUNTING;
struct _POP_FX_COMPONENT;
struct _POP_FX_DEPENDENT;
struct _POP_FX_DEVICE;
struct _POP_FX_DRIVER_CALLBACKS;
struct _POP_FX_IDLE_STATE;
struct _POP_FX_PLUGIN;
struct _POP_FX_PROVIDER;
struct _POP_FX_WORK_ORDER;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _POP_HIBER_CONTEXT;
struct _POP_IO_INFO;
struct _POP_IRP_DATA;
struct _POP_IRP_WORKER_ENTRY;
struct _POP_PER_PROCESSOR_CONTEXT;
struct _POP_POLICY_DEVICE;
struct _POP_POWER_ACTION;
struct _POP_RW_LOCK;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _POP_SYSTEM_IDLE;
struct _POP_THERMAL_ZONE;
struct _POP_THERMAL_ZONE_METRICS;
struct _POP_TRIGGER_WAIT;
struct _PORT_MESSAGE;
struct _POWER_SEQUENCE;
struct _PO_DEVICE_NOTIFY;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _PO_DIAG_STACK_RECORD;
struct _PO_HIBER_PERF;
struct _PO_IRP_MANAGER;
struct _PO_IRP_QUEUE;
struct _PO_NOTIFY_ORDER_LEVEL;
struct _PPC_DBGKD_CONTROL_SET;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _PPM_IDLE_STATE;
struct _PPM_IDLE_STATES;
struct _PPM_SELECTION_STATISTICS;
struct _PPM_VETO_ACCOUNTING;
struct _PP_LOOKASIDE_LIST;
struct _PRIVATE_CACHE_MAP;
struct _PRIVATE_CACHE_MAP_FLAGS;
struct _PRIVILEGE_SET;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_DEPENDENCY;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PROCESSOR_NUMBER;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_POWER_STATE;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _PROCESS_DISK_COUNTERS;
struct _PROC_FEEDBACK;
struct _PROC_FEEDBACK_COUNTER;
struct _PROC_IDLE_ACCOUNTING;
struct _PROC_IDLE_POLICY;
struct _PROC_IDLE_SNAP;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_IDLE_STATE_BUCKET;
struct _PROC_PERF_CONSTRAINT;
struct _PROC_PERF_DOMAIN;
struct _PROC_PERF_HISTORY;
struct _PROC_PERF_HISTORY_ENTRY;
struct _PROC_PERF_LOAD;
struct _PROC_PERF_SNAP;
struct _PROC_PERF_UTILITY;
struct _PROVIDER_BINARY_ENTRY;
struct _PS_PROTECTION;
struct _PS_WAKE_INFORMATION;
struct _PTE_TRACKER;
struct _QUAD;
struct _RELATION_LIST;
struct _RELATION_LIST_ENTRY;
struct _RELATIVE_SYMLINK_INFO;
struct _REMOTE_PORT_VIEW;
struct _RH_OP_CONTEXT;
struct _RSDS;
struct _RTLP_RANGE_LIST_ENTRY;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_ATOM_TABLE;
struct _RTL_ATOM_TABLE_ENTRY;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _RTL_AVL_TABLE;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_LINKS;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_RANGE;
struct _RTL_RANGE_LIST;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_SRWLOCK;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_OBJECT;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_CLIENT_CONTEXT;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SEGMENT;
struct _SEGMENT_FLAGS;
struct _SEGMENT_OBJECT;
struct _SEP_AUDIT_POLICY;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _SEP_LOWBOX_HANDLES_ENTRY;
struct _SEP_LOWBOX_HANDLES_TABLE;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _SEP_TOKEN_PRIVILEGES;
struct _SESSION_LOWBOX_MAP;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
struct _SHARED_CACHE_MAP;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
struct _SID;
struct _SID_AND_ATTRIBUTES;
struct _SID_AND_ATTRIBUTES_HASH;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
struct _STACK_TABLE;
struct _STRING;
struct _STRING32;
struct _STRING64;
struct _SUBSECTION;
struct _SYNCH_COUNTERS;
struct _SYSPTES_HEADER;
struct _SYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TEB;
struct _TEB32;
struct _TEB64;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TERMINATION_PORT;
struct _THERMAL_INFORMATION;
struct _THERMAL_INFORMATION_EX;
struct _THERMAL_POLICY;
struct _THERMAL_ZONE_COUNTERS;
struct _THREAD_PERFORMANCE_DATA;
struct _TIME_FIELDS;
struct _TOKEN;
struct _TOKEN_AUDIT_POLICY;
struct _TOKEN_CONTROL;
struct _TOKEN_SOURCE;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
struct _TRACE_ENABLE_INFO;
struct _TRACE_LOGFILE_HEADER;
struct _TXN_PARAMETER_BLOCK;
struct _UNICODE_STRING;
struct _VACB;
struct _VACB_ARRAY_HEADER;
struct _VACB_LEVEL_REFERENCE;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _VF_ADDRESS_RANGE;
struct _VF_AVL_TABLE;
struct _VF_AVL_TREE;
struct _VF_AVL_TREE_NODE;
struct _VF_BTS_DATA_MANAGEMENT_AREA;
struct _VF_BTS_RECORD;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _VF_POOL_TRACE;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
struct _VF_TARGET_DRIVER;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _VF_TRACKER;
struct _VF_TRACKER_STAMP;
struct _VF_WATCHDOG_IRP;
struct _VI_DEADLOCK_GLOBALS;
struct _VI_DEADLOCK_NODE;
struct _VI_DEADLOCK_RESOURCE;
struct _VI_DEADLOCK_THREAD;
struct _VI_FAULT_TRACE;
struct _VI_POOL_ENTRY;
struct _VI_POOL_ENTRY_INUSE;
struct _VI_POOL_PAGE_HEADER;
struct _VI_TRACK_IRQL;
struct _VI_VERIFIER_ISSUE;
struct _VOLUME_CACHE_MAP;
struct _VPB;
struct _WAITING_IRP;
struct _WAIT_CONTEXT_BLOCK;
struct _WHEAP_ERROR_RECORD_WRAPPER;
struct _WHEAP_ERROR_SOURCE;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _WHEAP_INFO_BLOCK;
struct _WHEAP_WORK_QUEUE;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_PCI_SLOT_NUMBER;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WMI_BUFFER_HEADER;
struct _WMI_LOGGER_CONTEXT;
struct _WNF_STATE_NAME;
struct _WORK_QUEUE_ENTRY;
struct _WORK_QUEUE_ITEM;
struct _X86_DBGKD_CONTROL_SET;
struct _X86_KTRAP_FRAME;
struct _X86_KTRAP_FRAME_BLUE;
struct _XSAVE_AREA;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_SAVE;
struct _flags;
struct _iobuf;
struct tagSWITCH_CONTEXT;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct tagSWITCH_CONTEXT_DATA;

union _AER_BRIDGE_DESCRIPTOR_FLAGS;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
union _CLS_LSN;
union _CPU_INFO;
union _CVDD;
union _FILE_SEGMENT_ELEMENT;
union _FS_FILTER_PARAMETERS;
union _HV_CPUID_RESULT;
union _HV_PARTITION_PRIVILEGE_MASK;
union _KEXECUTE_OPTIONS;
union _KSTACK_COUNT;
union _KWAIT_STATUS_REGISTER;
union _LARGE_INTEGER;
union _MMVIEW_CONTROL_AREA;
union _MM_PAGE_ACCESS_INFO_FLAGS;
union _MM_STORE_KEY;
union _PCW_CALLBACK_INFORMATION;
union _POP_FX_COMPONENT_FLAGS;
union _POP_FX_DEVICE_STATUS;
union _POWER_STATE;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
union _PS_CLIENT_SECURITY_CONTEXT;
union _SLIST_HEADER;
union _ULARGE_INTEGER;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
union _WHEA_ERROR_PACKET_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
union _WHEA_ERROR_STATUS;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_NOTIFICATION_FLAGS;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
union _u;

enum BUS_QUERY_ID_TYPE;
enum CPU_VENDORS;
enum DEVICE_TEXT_TYPE;
enum HAL_APIC_DESTINATION_MODE;
enum HSTORAGE_TYPE;
enum INTERRUPT_CONNECTION_TYPE;
enum IRPLOCK;
enum KTM_STATE;
enum LSA_FOREST_TRUST_RECORD_TYPE;
enum POWER_ACTION;
enum POWER_POLICY_DEVICE_TYPE;
enum PPM_IDLE_BUCKET_TIME_TYPE;
enum PROFILE_DEPARTURE_STYLE;
enum PROFILE_STATUS;
enum ReplacesCorHdrNumericDefines;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum SYSTEM_POWER_CONDITION;
enum UoWActionType;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _ARBITER_ACTION;
enum _ARBITER_REQUEST_SOURCE;
enum _ARBITER_RESULT;
enum _BLOB_ID;
enum _CM_DIRTY_VECTOR_OPERATION;
enum _CM_LOAD_FAILURE_TYPE;
enum _CM_SHARE_DISPOSITION;
enum _CREATE_FILE_TYPE;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_LEVEL;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
enum _DEVPROP_OPERATOR;
enum _DMA_SPEED;
enum _DMA_WIDTH;
enum _DUMP_EVENTS;
enum _ETW_BUFFER_STATE;
enum _ETW_HEADER_TYPE;
enum _ETW_NOTIFICATION_TYPE;
enum _ETW_PERFECT_HASH_FUNCTION_TYPE;
enum _ETW_RT_EVENT_LOSS;
enum _ETW_STRING_TOKEN_TYPE;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
enum _EXQUEUEINDEX;
enum _EX_BALANCE_OBJECT;
enum _EX_GEN_RANDOM_DOMAIN;
enum _EX_POOL_PRIORITY;
enum _FILE_INFORMATION_CLASS;
enum _FILE_OBJECT_EXTENSION_TYPE;
enum _FSINFOCLASS;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE;
enum _HARDWARE_COUNTER_TYPE;
enum _HEAP_FAILURE_TYPE;
enum _HV_CPUID_FUNCTION;
enum _HV_HYPERVISOR_INTERFACE;
enum _INTERFACE_TYPE;
enum _IOP_PRIORITY_HINT;
enum _IO_ALLOCATION_ACTION;
enum _IO_PRIORITY_HINT;
enum _IO_SESSION_STATE;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
enum _KENLISTMENT_STATE;
enum _KERNEL_STACK_LIMITS;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
enum _KOBJECTS;
enum _KPROCESS_STATE;
enum _KPROFILE_SOURCE;
enum _KRESOURCEMANAGER_STATE;
enum _KSPIN_LOCK_QUEUE_NUMBER;
enum _KTHREAD_STATE;
enum _KTIMER2_TYPE;
enum _KTRANSACTION_OUTCOME;
enum _KTRANSACTION_STATE;
enum _KWAIT_BLOCK_STATE;
enum _KWAIT_REASON;
enum _KWAIT_STATE;
enum _LDR_DDAG_STATE;
enum _LDR_DLL_LOAD_REASON;
enum _LOCK_OPERATION;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _MI_CFG_BITMAP_TYPE;
enum _MI_DYNAMICBASE_BITMAP;
enum _MI_MEMORY_HIGHLOW;
enum _MI_PFN_CACHE_ATTRIBUTE;
enum _MI_STORE_BIT_TYPE;
enum _MI_SYSTEM_VA_TYPE;
enum _MMLISTS;
enum _MM_PAGE_ACCESS_TYPE;
enum _MM_POOL_FAILURE_REASONS;
enum _MM_POOL_PRIORITIES;
enum _MM_POOL_TYPES;
enum _MM_PREEMPTIVE_TRIMS;
enum _MODE;
enum _NT_PRODUCT_TYPE;
enum _OBJECT_INFORMATION_CLASS;
enum _OB_OPEN_REASON;
enum _PCW_CALLBACK_TYPE;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
enum _PF_FILE_ACCESS_TYPE;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _PNP_DEVICE_ACTION_REQUEST;
enum _PNP_DEVICE_DELETE_TYPE;
enum _PNP_DEVNODE_STATE;
enum _PNP_VETO_TYPE;
enum _POLICY_AUDIT_EVENT_TYPE;
enum _POOL_TYPE;
enum _POP_DEVICE_IDLE_TYPE;
enum _POP_IO_STATUS;
enum _POP_SPM_STATUS;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
enum _POWER_STATE_TYPE;
enum _PP_NPAGED_LOOKASIDE_NUMBER;
enum _PROCESSOR_CACHE_TYPE;
enum _PROCESS_SECTION_TYPE;
enum _PROCESS_VA_TYPE;
enum _PROC_HYPERVISOR_STATE;
enum _PROC_PERF_UTILITY_TYPE;
enum _PS_PROTECTED_SIGNER;
enum _PS_RESOURCE_TYPE;
enum _PS_WAKE_REASON;
enum _REG_NOTIFY_CLASS;
enum _REQUESTER_TYPE;
enum _RTL_GENERIC_COMPARE_RESULTS;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
enum _SYSTEM_POWER_STATE;
enum _TOKEN_INFORMATION_CLASS;
enum _TOKEN_TYPE;
enum _TP_CALLBACK_PRIORITY;
enum _TRACE_INFORMATION_CLASS;
enum _TRANSFER_TYPE;
enum _TYPE_OF_MEMORY;
enum _USER_ACTIVITY_PRESENCE;
enum _VI_DEADLOCK_RESOURCE_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_STATE;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
enum _WORKING_SET_TYPE;
enum _WOW64_SHARED_INFORMATION;

typedef struct BATTERY_REPORTING_SCALE {
    ULONG Granularity;
    ULONG Capacity;
};

typedef struct CMP_OFFSET_ARRAY {
    ULONG FileOffset;
    PVOID DataBuffer;
    ULONG DataLength;
};

typedef struct DOCK_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ProfileDepartureSetMode;
    PULONG ProfileDepartureUpdate;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct PEPHANDLE__ {
    LONG unused;
};

typedef struct POWER_ACTION_POLICY {
    enum POWER_ACTION Action;
    ULONG Flags;
    ULONG EventCode;
};

typedef struct PO_MEMORY_IMAGE {
    ULONG Signature;
    ULONG ImageType;
    ULONG CheckSum;
    ULONG LengthSelf;
    ULONG PageSelf;
    ULONG PageSize;
    union _LARGE_INTEGER SystemTime;
    ULONG64 InterruptTime;
    ULONG FeatureFlags;
    UCHAR HiberFlags;
    UCHAR spare[3];
    ULONG NoHiberPtes;
    ULONG HiberVa;
    ULONG NoFreePages;
    ULONG FreeMapCheck;
    ULONG WakeCheck;
    ULONG64 NumPagesForLoader;
    ULONG FirstBootRestorePage;
    ULONG FirstKernelRestorePage;
    struct _PO_HIBER_PERF PerfInfo;
    ULONG FirmwareRuntimeInformationPages;
    ULONG FirmwareRuntimeInformation[1];
    ULONG SiLogOffset;
    ULONG NoBootLoaderLogPages;
    ULONG BootLoaderLogPages[24];
    ULONG NotUsed;
    ULONG ResumeContextCheck;
    ULONG ResumeContextPages;
    UCHAR Hiberboot;
    ULONG64 HvCr3;
    ULONG64 HvEntryPoint;
    ULONG64 HvReservedTransitionAddress;
    ULONG64 HvReservedTransitionAddressSize;
    ULONG64 BootFlags;
    ULONG64 HalEntryPointPhysical;
    ULONG HighestPhysicalPage;
    ULONG BitlockerKeyPfns[4];
    ULONG HardwareSignature;
};

typedef struct PROCESSOR_IDLESTATE_INFO {
    ULONG TimeCheck;
    UCHAR DemotePercent;
    UCHAR PromotePercent;
    UCHAR Spare[2];
};

typedef struct PROCESSOR_IDLESTATE_POLICY {
    USHORT Revision;
    union {
        USHORT AsUSHORT;
        USHORT AllowScaling : 1;
        USHORT Disabled : 1;
        USHORT Reserved : 14;
    } Flags;
    ULONG PolicyCount;
    struct PROCESSOR_IDLESTATE_INFO Policy[3];
};

typedef struct PROCESSOR_PERFSTATE_POLICY {
    ULONG Revision;
    UCHAR MaxThrottle;
    UCHAR MinThrottle;
    UCHAR BusyAdjThreshold;
    UCHAR Spare;
    union {
        UCHAR AsUCHAR;
        UCHAR NoDomainAccounting : 1;
        UCHAR IncreasePolicy : 2;
        UCHAR DecreasePolicy : 2;
        UCHAR Reserved : 3;
    } Flags;
    ULONG TimeCheck;
    ULONG IncreaseTime;
    ULONG DecreaseTime;
    ULONG IncreasePercent;
    ULONG DecreasePercent;
};

typedef struct SYSTEM_POWER_CAPABILITIES {
    UCHAR PowerButtonPresent;
    UCHAR SleepButtonPresent;
    UCHAR LidPresent;
    UCHAR SystemS1;
    UCHAR SystemS2;
    UCHAR SystemS3;
    UCHAR SystemS4;
    UCHAR SystemS5;
    UCHAR HiberFilePresent;
    UCHAR FullWake;
    UCHAR VideoDimPresent;
    UCHAR ApmPresent;
    UCHAR UpsPresent;
    UCHAR ThermalControl;
    UCHAR ProcessorThrottle;
    UCHAR ProcessorMinThrottle;
    UCHAR ProcessorMaxThrottle;
    UCHAR FastSystemS4;
    UCHAR Hiberboot;
    UCHAR WakeAlarmPresent;
    UCHAR AoAc;
    UCHAR DiskSpinDown;
    UCHAR spare3[8];
    UCHAR SystemBatteriesPresent;
    UCHAR BatteriesAreShortTerm;
    struct BATTERY_REPORTING_SCALE BatteryScale[3];
    enum _SYSTEM_POWER_STATE AcOnLineWake;
    enum _SYSTEM_POWER_STATE SoftLidWake;
    enum _SYSTEM_POWER_STATE RtcWake;
    enum _SYSTEM_POWER_STATE MinDeviceWakeState;
    enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

typedef struct SYSTEM_POWER_LEVEL {
    UCHAR Enable;
    UCHAR Spare[3];
    ULONG BatteryLevel;
    struct POWER_ACTION_POLICY PowerPolicy;
    enum _SYSTEM_POWER_STATE MinSystemState;
};

typedef struct VACB_LEVEL_ALLOCATION_LIST {
    struct _LIST_ENTRY VacbLevelList;
    PVOID VacbLevelWithBcbListHeads;
    ULONG VacbLevelsAllocated;
};

typedef struct _ACCESS_REASONS {
    ULONG Data[32];
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
};

typedef struct _ACTIVATION_CONTEXT {
};

typedef struct _ACTIVATION_CONTEXT_DATA {
};

typedef struct _ACTIVATION_CONTEXT_STACK {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct _LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};

typedef struct _ADAPTER_OBJECT {
};

typedef struct _AGGREGATED_PAYLOAD_FILTER {
    USHORT MagicValue : 12;
    USHORT DescriptorVersion : 4;
    USHORT Size;
    USHORT PredicateCount;
    USHORT Reserved;
    ULONG64 HashedEventIdBitmap;
    struct _GUID ProviderGuid;
    USHORT EachEventTableOffset;
    USHORT EachEventTableLength;
    USHORT PayloadDecoderTableOffset;
    USHORT PayloadDecoderTableLength;
    USHORT EventFilterTableOffset;
    USHORT EventFilterTableLength;
    USHORT UNICODEStringTableOffset;
    USHORT UNICODEStringTableLength;
    USHORT ANSIStringTableOffset;
    USHORT ANSIStringTableLength;
    struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
};

typedef struct _ALPC_COMMUNICATION_INFO {
    struct _ALPC_PORT *ConnectionPort;
    struct _ALPC_PORT *ServerCommunicationPort;
    struct _ALPC_PORT *ClientCommunicationPort;
    struct _LIST_ENTRY CommunicationList;
    struct _ALPC_HANDLE_TABLE HandleTable;
    struct _KALPC_MESSAGE *CloseMessage;
};

typedef struct _ALPC_COMPLETION_LIST {
    struct _LIST_ENTRY Entry;
    struct _EPROCESS *OwnerProcess;
    struct _EX_PUSH_LOCK CompletionListLock;
    struct _MDL *Mdl;
    PVOID UserVa;
    PVOID UserLimit;
    PVOID DataUserVa;
    PVOID SystemVa;
    ULONG TotalSize;
    struct _ALPC_COMPLETION_LIST_HEADER *Header;
    PVOID List;
    ULONG ListSize;
    PVOID Bitmap;
    ULONG BitmapSize;
    PVOID Data;
    ULONG DataSize;
    ULONG BitmapLimit;
    ULONG BitmapNextHint;
    ULONG ConcurrencyCount;
    ULONG AttributeFlags;
    ULONG AttributeSize;
};

typedef struct _ALPC_COMPLETION_LIST_HEADER {
    ULONG64 StartMagic;
    ULONG TotalSize;
    ULONG ListOffset;
    ULONG ListSize;
    ULONG BitmapOffset;
    ULONG BitmapSize;
    ULONG DataOffset;
    ULONG DataSize;
    ULONG AttributeFlags;
    ULONG AttributeSize;
    struct _ALPC_COMPLETION_LIST_STATE State;
    ULONG LastMessageId;
    ULONG LastCallbackId;
    ULONG PostCount;
    ULONG ReturnCount;
    ULONG LogSequenceNumber;
    struct _RTL_SRWLOCK UserLock;
    ULONG64 EndMagic;
};

typedef struct _ALPC_COMPLETION_LIST_STATE {
    union {
        struct {
            ULONG64 Head : 24;
            ULONG64 Tail : 24;
            ULONG64 ActiveThreadCount : 16;
        } s1;
        LONG64 Value;
    } u1;
};

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE {
    ULONG Lock;
    ULONG Size;
    ULONG ActiveCount;
    ULONG PendingNullCount;
    ULONG PendingCheckCompletionListCount;
    ULONG PendingDelete;
    struct _SINGLE_LIST_ENTRY FreeListHead;
    PVOID CompletionPort;
    PVOID CompletionKey;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
};

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY {
    struct _SINGLE_LIST_ENTRY ListEntry;
    struct _IO_MINI_COMPLETION_PACKET_USER *Packet;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE *Lookaside;
};

typedef struct _ALPC_DISPATCH_CONTEXT {
    struct _ALPC_PORT *PortObject;
    struct _KALPC_MESSAGE *Message;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _ETHREAD *TargetThread;
    struct _ALPC_PORT *TargetPort;
    ULONG Flags;
    USHORT TotalLength;
    USHORT Type;
    USHORT DataInfoOffset;
    UCHAR SignalCompletion;
    UCHAR PostedToCompletionList;
};

typedef struct _ALPC_HANDLE_ENTRY {
    PVOID Object;
};

typedef struct _ALPC_HANDLE_TABLE {
    struct _ALPC_HANDLE_ENTRY *Handles;
    ULONG TotalHandles;
    ULONG Flags;
    struct _EX_PUSH_LOCK Lock;
};

typedef struct _ALPC_MESSAGE_ATTRIBUTES {
    ULONG AllocatedAttributes;
    ULONG ValidAttributes;
};

typedef struct _ALPC_PORT {
    struct _LIST_ENTRY PortListEntry;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _EPROCESS *OwnerProcess;
    PVOID CompletionPort;
    PVOID CompletionKey;
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE *CompletionPacketLookaside;
    PVOID PortContext;
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
    struct _EX_PUSH_LOCK IncomingQueueLock;
    struct _LIST_ENTRY MainQueue;
    struct _LIST_ENTRY LargeMessageQueue;
    struct _EX_PUSH_LOCK PendingQueueLock;
    struct _LIST_ENTRY PendingQueue;
    struct _EX_PUSH_LOCK WaitQueueLock;
    struct _LIST_ENTRY WaitQueue;
    struct _KSEMAPHORE *Semaphore;
    struct _KEVENT *DummyEvent;
    struct _ALPC_PORT_ATTRIBUTES PortAttributes;
    struct _EX_PUSH_LOCK ResourceListLock;
    struct _LIST_ENTRY ResourceListHead;
    struct _EX_PUSH_LOCK PortObjectLock;
    struct _ALPC_COMPLETION_LIST *CompletionList;
    struct _CALLBACK_OBJECT *CallbackObject;
    PVOID CallbackContext;
    struct _LIST_ENTRY CanceledQueue;
    LONG SequenceNo;
    LONG ReferenceNo;
    struct _PALPC_PORT_REFERENCE_WAIT_BLOCK *ReferenceNoWait;
    union {
        struct {
            ULONG Initialized : 1;
            ULONG Type : 2;
            ULONG ConnectionPending : 1;
            ULONG ConnectionRefused : 1;
            ULONG Disconnected : 1;
            ULONG Closed : 1;
            ULONG NoFlushOnClose : 1;
            ULONG ReturnExtendedInfo : 1;
            ULONG Waitable : 1;
            ULONG DynamicSecurity : 1;
            ULONG Wow64CompletionList : 1;
            ULONG Lpc : 1;
            ULONG LpcToLpc : 1;
            ULONG HasCompletionList : 1;
            ULONG HadCompletionList : 1;
            ULONG EnableCompletionList : 1;
        } s1;
        ULONG State;
    } u1;
    struct _ALPC_PORT *TargetQueuePort;
    struct _ALPC_PORT *TargetSequencePort;
    struct _KALPC_MESSAGE *CachedMessage;
    ULONG MainQueueLength;
    ULONG LargeMessageQueueLength;
    ULONG PendingQueueLength;
    ULONG CanceledQueueLength;
    ULONG WaitQueueLength;
};

typedef struct _ALPC_PORT_ATTRIBUTES {
    ULONG Flags;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    ULONG MaxMessageLength;
    ULONG MemoryBandwidth;
    ULONG MaxPoolUsage;
    ULONG MaxSectionSize;
    ULONG MaxViewSize;
    ULONG MaxTotalSectionSize;
    ULONG DupObjectTypes;
};

typedef struct _ALPC_PROCESS_CONTEXT {
    struct _EX_PUSH_LOCK Lock;
    struct _LIST_ENTRY ViewListHead;
    ULONG PagedPoolQuotaCache;
};

typedef struct _AMD64_DBGKD_CONTROL_SET {
    ULONG TraceFlag;
    ULONG64 Dr7;
    ULONG64 CurrentSymbolStart;
    ULONG64 CurrentSymbolEnd;
};

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
    struct _DEVICE_OBJECT *ReserveDevice;
};

typedef struct _ARBITER_ALLOCATION_STATE {
    ULONG64 Start;
    ULONG64 End;
    ULONG64 CurrentMinimum;
    ULONG64 CurrentMaximum;
    struct _ARBITER_LIST_ENTRY *Entry;
    struct _ARBITER_ALTERNATIVE *CurrentAlternative;
    ULONG AlternativeCount;
    struct _ARBITER_ALTERNATIVE *Alternatives;
    USHORT Flags;
    UCHAR RangeAttributes;
    UCHAR RangeAvailableAttributes;
    ULONG WorkSpace;
};

typedef struct _ARBITER_ALTERNATIVE {
    ULONG64 Minimum;
    ULONG64 Maximum;
    ULONG64 Length;
    ULONG64 Alignment;
    LONG Priority;
    ULONG Flags;
    struct _IO_RESOURCE_DESCRIPTOR *Descriptor;
    ULONG Reserved[3];
};

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_CONFLICT_INFO {
    struct _DEVICE_OBJECT *OwningObject;
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_INSTANCE {
    ULONG Signature;
    struct _KEVENT *MutexEvent;
    PUSHORT Name;
    PUSHORT OrderingName;
    LONG ResourceType;
    struct _RTL_RANGE_LIST *Allocation;
    struct _RTL_RANGE_LIST *PossibleAllocation;
    struct _ARBITER_ORDERING_LIST OrderingList;
    struct _ARBITER_ORDERING_LIST ReservedList;
    LONG ReferenceCount;
    struct _ARBITER_INTERFACE *Interface;
    ULONG AllocationStackMaxSize;
    struct _ARBITER_ALLOCATION_STATE *AllocationStack;
    PLONG UnpackRequirement;
    PLONG PackResource;
    PLONG UnpackResource;
    PLONG ScoreRequirement;
    PLONG TestAllocation;
    PLONG RetestAllocation;
    PLONG CommitAllocation;
    PLONG RollbackAllocation;
    PLONG BootAllocation;
    PLONG QueryArbitrate;
    PLONG QueryConflict;
    PLONG AddReserved;
    PLONG StartArbiter;
    PLONG PreprocessEntry;
    PLONG AllocateEntry;
    PUCHAR GetNextAllocationRange;
    PUCHAR FindSuitableRange;
    PVOID AddAllocation;
    PVOID BacktrackAllocation;
    PUCHAR OverrideConflict;
    PLONG InitializeRangeList;
    UCHAR TransactionInProgress;
    struct _KEVENT *TransactionEvent;
    PVOID Extension;
    struct _DEVICE_OBJECT *BusDeviceObject;
    PVOID ConflictCallbackContext;
    PUCHAR ConflictCallback;
};

typedef struct _ARBITER_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG ArbiterHandler;
    ULONG Flags;
};

typedef struct _ARBITER_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *Alternatives;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    enum _ARBITER_REQUEST_SOURCE RequestSource;
    ULONG Flags;
    LONG WorkSpace;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *Assignment;
    struct _IO_RESOURCE_DESCRIPTOR *SelectedAlternative;
    enum _ARBITER_RESULT Result;
};

typedef struct _ARBITER_ORDERING {
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_ORDERING_LIST {
    USHORT Count;
    USHORT Maximum;
    struct _ARBITER_ORDERING *Orderings;
};

typedef struct _ARBITER_PARAMETERS {
    union {
        struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
        struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
        struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
        struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
        struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
        struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
        struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    } Parameters;
};

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
    struct _CM_PARTIAL_RESOURCE_LIST **AllocatedResources;
};

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
};

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _IO_RESOURCE_DESCRIPTOR *ConflictingResource;
    PULONG ConflictCount;
    struct _ARBITER_CONFLICT_INFO **Conflicts;
};

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
    struct _LIST_ENTRY *ArbitrationList;
    ULONG AllocateFromCount;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
};

typedef struct _ARMCE_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _ARM_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _ASSEMBLY_STORAGE_MAP {
};

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION {
    ULONG DeviceGroupsCount;
    struct _SID_AND_ATTRIBUTES *pDeviceGroups;
    ULONG RestrictedDeviceGroupsCount;
    struct _SID_AND_ATTRIBUTES *pRestrictedDeviceGroups;
    struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
    struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pUserSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pDeviceSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pRestrictedUserSecurityAttributes;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pRestrictedDeviceSecurityAttributes;
};

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION {
    ULONG SecurityAttributeCount;
    struct _LIST_ENTRY SecurityAttributesList;
    ULONG WorkingSecurityAttributeCount;
    struct _LIST_ENTRY WorkingSecurityAttributesList;
};

typedef struct _AUX_ACCESS_DATA {
    struct _PRIVILEGE_SET *PrivilegesUsed;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG AccessesToAudit;
    ULONG MaximumAuditMask;
    struct _GUID TransactionId;
    PVOID NewSecurityDescriptor;
    PVOID ExistingSecurityDescriptor;
    PVOID ParentSecurityDescriptor;
    PVOID DeRefSecurityDescriptor;
    PVOID SDLock;
    struct _ACCESS_REASONS AccessReasons;
    UCHAR GenerateStagingEvents;
};

typedef struct _BITMAP_RANGE {
    struct _LIST_ENTRY Links;
    LONG64 BasePage;
    ULONG FirstDirtyPage;
    ULONG LastDirtyPage;
    ULONG DirtyPages;
    PULONG Bitmap;
};

typedef struct _BLOB {
    struct _LIST_ENTRY ResourceList;
    struct _SINGLE_LIST_ENTRY FreeListEntry;
    union {
        struct {
            UCHAR ReferenceCache : 1;
            UCHAR Lookaside : 1;
            UCHAR Initializing : 1;
            UCHAR Deleted : 1;
        } s1;
        UCHAR Flags;
    } u1;
    UCHAR ResourceId;
    SHORT CachedReferences;
    LONG ReferenceCount;
    ULONG Pad;
    struct _EX_PUSH_LOCK Lock;
};

typedef struct _BLOB_COUNTERS {
    ULONG CreatedObjects;
    ULONG DeletedObjects;
};

typedef struct _BLOB_TYPE {
    enum _BLOB_ID ResourceId;
    ULONG PoolTag;
    ULONG LookasideIndex;
    ULONG Flags;
    struct _BLOB_COUNTERS *Counters;
    PVOID DeleteProcedure;
    PLONG DestroyProcedure;
    ULONG UsualSize;
};

typedef struct _BUS_EXTENSION_LIST {
    PVOID Next;
    struct _PI_BUS_EXTENSION *BusExtension;
};

typedef struct _CACHED_CHILD_LIST {
    ULONG Count;
    ULONG ValueList;
    struct _CM_KEY_CONTROL_BLOCK *RealKcb;
};

typedef struct _CACHE_DESCRIPTOR {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG Size;
    enum _PROCESSOR_CACHE_TYPE Type;
};

typedef struct _CACHE_MANAGER_CALLBACKS {
    PUCHAR AcquireForLazyWrite;
    PVOID ReleaseFromLazyWrite;
    PUCHAR AcquireForReadAhead;
    PVOID ReleaseFromReadAhead;
};

typedef struct _CACHE_UNINITIALIZE_EVENT {
    struct _CACHE_UNINITIALIZE_EVENT *Next;
    struct _KEVENT Event;
};

typedef struct _CALLBACK_OBJECT {
};

typedef struct _CALL_HASH_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID CallersAddress;
    PVOID CallersCaller;
    ULONG CallCount;
};

typedef struct _CALL_PERFORMANCE_DATA {
    ULONG SpinLock;
    struct _LIST_ENTRY HashTable[64];
};

typedef struct _CC_EXTERNAL_CACHE_INFO {
    PVOID Callback;
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
    struct _LIST_ENTRY Links;
};

typedef struct _CELL_DATA {
    union _u u;
};

typedef struct _CHILD_LIST {
    ULONG Count;
    ULONG List;
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CLIENT_ID32 {
    ULONG UniqueProcess;
    ULONG UniqueThread;
};

typedef struct _CLIENT_ID64 {
    ULONG64 UniqueProcess;
    ULONG64 UniqueThread;
};

typedef struct _CMHIVE {
    struct _HHIVE Hive;
    PVOID FileHandles[6];
    struct _LIST_ENTRY NotifyList;
    struct _LIST_ENTRY HiveList;
    struct _LIST_ENTRY PreloadedHiveList;
    struct _EX_RUNDOWN_REF HiveRundown;
    struct _LIST_ENTRY ParseCacheEntries;
    struct _CM_KEY_HASH_TABLE_ENTRY *KcbCacheTable;
    ULONG KcbCacheTableSize;
    struct _CM_KEY_HASH_TABLE_ENTRY *DeletedKcbTable;
    ULONG DeletedKcbTableSize;
    ULONG Identity;
    struct _FAST_MUTEX *HiveLock;
    struct _FAST_MUTEX *WriterLock;
    struct _ERESOURCE *FlusherLock;
    struct _RTL_BITMAP FlushDirtyVector;
    ULONG FlushDirtyVectorSize;
    PUCHAR FlushLogEntry;
    ULONG FlushLogEntrySize;
    ULONG FlushHiveTruncated;
    UCHAR FlushBaseBlockDirty;
    struct _RTL_BITMAP CapturedUnreconciledVector;
    ULONG CapturedUnreconciledVectorSize;
    struct CMP_OFFSET_ARRAY *UnreconciledOffsetArray;
    ULONG UnreconciledOffsetArrayCount;
    struct _HBASE_BLOCK *UnreconciledBaseBlock;
    struct _EX_PUSH_LOCK SecurityLock;
    ULONG UseCount;
    ULONG LastShrinkHiveSize;
    union _LARGE_INTEGER ActualFileSize;
    union _LARGE_INTEGER LogFileSizes[2];
    struct _UNICODE_STRING FileFullPath;
    struct _UNICODE_STRING FileUserName;
    struct _UNICODE_STRING HiveRootPath;
    ULONG SecurityCount;
    ULONG SecurityCacheSize;
    LONG SecurityHitHint;
    struct _CM_KEY_SECURITY_CACHE_ENTRY *SecurityCache;
    struct _LIST_ENTRY SecurityHash[64];
    ULONG UnloadEventCount;
    struct _KEVENT **UnloadEventArray;
    struct _CM_KEY_CONTROL_BLOCK *RootKcb;
    UCHAR Frozen;
    struct _CM_WORKITEM *UnloadWorkItem;
    struct _CM_WORKITEM UnloadWorkItemHolder;
    UCHAR GrowOnlyMode;
    ULONG GrowOffset;
    struct _LIST_ENTRY KcbConvertListHead;
    struct _LIST_ENTRY KnodeConvertListHead;
    struct _CM_CELL_REMAP_BLOCK *CellRemapArray;
    struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
    ULONG Flags;
    struct _LIST_ENTRY TrustClassEntry;
    ULONG64 DirtyTime;
    ULONG64 UnreconciledTime;
    struct _CM_RM *CmRm;
    ULONG CmRmInitFailPoint;
    LONG CmRmInitFailStatus;
    struct _KTHREAD *CreatorOwner;
    struct _KTHREAD *RundownThread;
    union _LARGE_INTEGER LastWriteTime;
    struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
    struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
    ULONG FlushFlags;
    ULONG FlushActive : 1;
    ULONG ReconcileActive : 1;
    ULONG PrimaryFilePurged : 1;
    ULONG DiskFileBad : 1;
    ULONG PrimaryFileSizeBeforeLastFlush;
    LONG ReferenceCount;
    LONG UnloadHistoryIndex;
    ULONG UnloadHistory[128];
    ULONG BootStart;
    ULONG UnaccessedStart;
    ULONG UnaccessedEnd;
    ULONG LoadedKeyCount;
    ULONG HandleClosePending;
    struct _EX_PUSH_LOCK HandleClosePendingEvent;
};

typedef struct _CM_BIG_DATA {
    USHORT Signature;
    USHORT Count;
    ULONG List;
};

typedef struct _CM_CACHED_VALUE_INDEX {
    ULONG CellIndex;
    union {
        struct _CELL_DATA CellData;
        ULONG List[1];
    } Data;
};

typedef struct _CM_CELL_REMAP_BLOCK {
    ULONG OldCell;
    ULONG NewCell;
};

typedef struct _CM_DIRTY_VECTOR_LOG {
    ULONG Next;
    ULONG Size;
    struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
};

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY {
    struct _ETHREAD *Thread;
    enum _CM_DIRTY_VECTOR_OPERATION Operation;
    union {
        struct {
            ULONG Start;
            ULONG Length;
        } DirtyVectorModifiedContext;
        struct {
            ULONG RangeCount;
            ULONG SetBitCount;
        } DirtyDataCaptureContext;
        struct {
            ULONG Context1;
            ULONG Context2;
        } Raw;
    } Data;
    PVOID Stack[7];
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_INDEX_HINT_BLOCK {
    ULONG Count;
    ULONG HashKey[1];
};

typedef struct _CM_INTENT_LOCK {
    ULONG OwnerCount;
    struct _CM_KCB_UOW **OwnerTable;
};

typedef struct _CM_KCB_UOW {
    struct _LIST_ENTRY TransactionListEntry;
    struct _CM_INTENT_LOCK *KCBLock;
    struct _CM_INTENT_LOCK *KeyLock;
    struct _LIST_ENTRY KCBListEntry;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_TRANS *Transaction;
    ULONG UoWState;
    enum UoWActionType ActionType;
    enum HSTORAGE_TYPE StorageType;
    struct _CM_KEY_CONTROL_BLOCK *ChildKCB;
    ULONG VolatileKeyCell;
    ULONG OldValueCell;
    ULONG NewValueCell;
    ULONG UserFlags;
    union _LARGE_INTEGER LastWriteTime;
    ULONG TxSecurityCell;
    struct _CM_KEY_CONTROL_BLOCK *OldChildKCB;
    struct _CM_KEY_CONTROL_BLOCK *NewChildKCB;
    struct _CM_KEY_CONTROL_BLOCK *OtherChildKCB;
    ULONG ThisVolatileKeyCell;
};

typedef struct _CM_KEY_BODY {
    ULONG Type;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_NOTIFY_BLOCK *NotifyBlock;
    PVOID ProcessID;
    struct _LIST_ENTRY KeyBodyList;
    ULONG Flags : 16;
    ULONG HandleTags : 16;
    PVOID KtmTrans;
    struct _GUID *KtmUow;
    struct _LIST_ENTRY ContextListHead;
};

typedef struct _CM_KEY_CONTROL_BLOCK {
    ULONG RefCount;
    ULONG ExtFlags : 16;
    ULONG PrivateAlloc : 1;
    ULONG Delete : 1;
    ULONG HiveUnloaded : 1;
    ULONG Decommissioned : 1;
    ULONG LockTablePresent : 1;
    ULONG TotalLevels : 10;
    ULONG DelayedDeref : 1;
    ULONG DelayedClose : 1;
    ULONG Parking : 1;
    struct _CM_KEY_HASH KeyHash;
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
    struct _EX_PUSH_LOCK KcbPushlock;
    struct _KTHREAD *Owner;
    LONG SharedCount;
    ULONG SlotHint;
    struct _CM_KEY_CONTROL_BLOCK *ParentKcb;
    struct _CM_NAME_CONTROL_BLOCK *NameBlock;
    struct _CM_KEY_SECURITY_CACHE *CachedSecurity;
    struct _CACHED_CHILD_LIST ValueCache;
    struct _CM_INDEX_HINT_BLOCK *IndexHint;
    ULONG HashKey;
    ULONG SubKeyCount;
    struct _LIST_ENTRY KeyBodyListHead;
    struct _LIST_ENTRY FreeListEntry;
    struct _CM_KEY_BODY *KeyBodyArray[4];
    union _LARGE_INTEGER KcbLastWriteTime;
    USHORT KcbMaxNameLen;
    USHORT KcbMaxValueNameLen;
    ULONG KcbMaxValueDataLen;
    ULONG KcbUserFlags : 4;
    ULONG KcbVirtControlFlags : 4;
    ULONG KcbDebug : 8;
    ULONG Flags : 16;
    struct _LIST_ENTRY KCBUoWListHead;
    struct _LIST_ENTRY DelayQueueEntry;
    PUCHAR Stolen;
    struct _CM_TRANS *TransKCBOwner;
    struct _CM_INTENT_LOCK KCBLock;
    struct _CM_INTENT_LOCK KeyLock;
    struct _CHILD_LIST TransValueCache;
    struct _CM_TRANS *TransValueListOwner;
    struct _UNICODE_STRING *FullKCBName;
};

typedef struct _CM_KEY_HASH {
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
};

typedef struct _CM_KEY_HASH_TABLE_ENTRY {
    struct _EX_PUSH_LOCK Lock;
    struct _KTHREAD *Owner;
    struct _CM_KEY_HASH *Entry;
};

typedef struct _CM_KEY_INDEX {
    USHORT Signature;
    USHORT Count;
    ULONG List[1];
};

typedef struct _CM_KEY_NODE {
    USHORT Signature;
    USHORT Flags;
    union _LARGE_INTEGER LastWriteTime;
    ULONG AccessBits;
    ULONG Parent;
    ULONG SubKeyCounts[2];
    ULONG SubKeyLists[2];
    struct _CHILD_LIST ValueList;
    struct _CM_KEY_REFERENCE ChildHiveReference;
    ULONG Security;
    ULONG Class;
    ULONG MaxNameLen : 16;
    ULONG UserFlags : 4;
    ULONG VirtControlFlags : 4;
    ULONG Debug : 8;
    ULONG MaxClassLen;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    ULONG WorkVar;
    USHORT NameLength;
    USHORT ClassLength;
    WCHAR Name[1];
};

typedef struct _CM_KEY_REFERENCE {
    ULONG KeyCell;
    struct _HHIVE *KeyHive;
};

typedef struct _CM_KEY_SECURITY {
    USHORT Signature;
    USHORT Reserved;
    ULONG Flink;
    ULONG Blink;
    ULONG ReferenceCount;
    ULONG DescriptorLength;
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

typedef struct _CM_KEY_SECURITY_CACHE {
    ULONG Cell;
    ULONG ConvKey;
    struct _LIST_ENTRY List;
    ULONG DescriptorLength;
    ULONG RealRefCount;
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY {
    ULONG Cell;
    struct _CM_KEY_SECURITY_CACHE *CachedSecurity;
};

typedef struct _CM_KEY_VALUE {
    USHORT Signature;
    USHORT NameLength;
    ULONG DataLength;
    ULONG Data;
    ULONG Type;
    USHORT Flags;
    USHORT Spare;
    WCHAR Name[1];
};

typedef struct _CM_NAME_CONTROL_BLOCK {
    ULONG Compressed : 1;
    ULONG RefCount : 31;
    struct _CM_NAME_HASH NameHash;
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _CM_NAME_HASH {
    ULONG ConvKey;
    struct _CM_NAME_HASH *NextHash;
    USHORT NameLength;
    WCHAR Name[1];
};

typedef struct _CM_NOTIFY_BLOCK {
    struct _LIST_ENTRY HiveList;
    struct _LIST_ENTRY PostList;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_KEY_BODY *KeyBody;
    ULONG Filter : 30;
    ULONG WatchTree : 1;
    ULONG NotifyPending : 1;
    struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
        struct {
            USHORT Level;
            USHORT Group;
            ULONG Vector;
            ULONG Affinity;
        } Interrupt;
        struct {
            struct {
                USHORT Group;
                USHORT MessageCount;
                ULONG Vector;
                ULONG Affinity;
            } Raw;
            struct {
                USHORT Level;
                USHORT Group;
                ULONG Vector;
                ULONG Affinity;
            } Translated;
        } MessageInterrupt;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length40;
        } Memory40;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length48;
        } Memory48;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length64;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _CM_RM {
    struct _LIST_ENTRY RmListEntry;
    struct _LIST_ENTRY TransactionListHead;
    PVOID TmHandle;
    PVOID Tm;
    PVOID RmHandle;
    PVOID KtmRm;
    ULONG RefCount;
    ULONG ContainerNum;
    ULONG64 ContainerSize;
    struct _CMHIVE *CmHive;
    PVOID LogFileObject;
    PVOID MarshallingContext;
    ULONG RmFlags;
    LONG LogStartStatus1;
    LONG LogStartStatus2;
    ULONG64 BaseLsn;
    struct _ERESOURCE *RmLock;
};

typedef struct _CM_TRANS {
    struct _LIST_ENTRY TransactionListEntry;
    struct _LIST_ENTRY KCBUoWListHead;
    struct _LIST_ENTRY LazyCommitListEntry;
    PVOID KtmTrans;
    struct _CM_RM *CmRm;
    struct _KENLISTMENT *KtmEnlistmentObject;
    PVOID KtmEnlistmentHandle;
    struct _GUID KtmUow;
    ULONG64 StartLsn;
    ULONG TransState;
    ULONG HiveCount;
    struct _CMHIVE *HiveArray[7];
};

typedef struct _CM_WORKITEM {
    struct _LIST_ENTRY ListEntry;
    ULONG Private;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _COLORED_PAGE_INFO {
    LONG BeingZeroed;
    ULONG Processor;
    ULONG PagesQueued;
    struct _MMPFN *PfnAllocation;
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONTEXT {
    ULONG ContextFlags;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    struct _FLOATING_SAVE_AREA FloatSave;
    ULONG SegGs;
    ULONG SegFs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    ULONG Ebp;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG Esp;
    ULONG SegSs;
    UCHAR ExtendedRegisters[512];
};

typedef struct _CONTROL_AREA {
    struct _SEGMENT *Segment;
    struct _LIST_ENTRY ListHead;
    ULONG NumberOfSectionReferences;
    ULONG NumberOfPfnReferences;
    ULONG NumberOfMappedViews;
    ULONG NumberOfUserReferences;
    union {
        ULONG LongFlags;
        struct _MMSECTION_FLAGS Flags;
    } u;
    struct _EX_FAST_REF FilePointer;
    LONG ControlAreaLock;
    ULONG ModifiedWriteCount;
    struct _MI_CONTROL_AREA_WAIT_BLOCK *WaitList;
    union {
        struct {
            ULONG NumberOfSystemCacheViews;
            ULONG ImageRelocationStartBit;
            LONG WritableUserReferences;
            ULONG ImageRelocationSizeIn64k : 16;
            ULONG Unused : 12;
            ULONG CantMove : 1;
            ULONG BitMap : 2;
            ULONG ImageActive : 1;
            ULONG FlushInProgressCount;
            ULONG NumberOfSubsections;
            struct _MI_IMAGE_SECURITY_REFERENCE *SeImageStub;
        } e2;
    } u2;
    ULONG64 LockedPages;
    struct _EX_PUSH_LOCK FileObjectLock;
};

typedef struct _COUNTER_READING {
    enum _HARDWARE_COUNTER_TYPE Type;
    ULONG Index;
    ULONG64 Start;
    ULONG64 Total;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _DBGKD_ANY_CONTROL_SET {
    struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    ULONG AlphaControlSet;
    struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
};

typedef struct _DBGKD_BREAKPOINTEX {
    ULONG BreakPointCount;
    LONG ContinueStatus;
};

typedef struct _DBGKD_CONTEXT_EX {
    ULONG Offset;
    ULONG ByteCount;
    ULONG BytesCopied;
};

typedef struct _DBGKD_CONTINUE {
    LONG ContinueStatus;
};

typedef struct _DBGKD_CONTINUE2 {
    LONG ContinueStatus;
    struct _X86_DBGKD_CONTROL_SET ControlSet;
    struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
};

typedef struct _DBGKD_FILL_MEMORY {
    ULONG64 Address;
    ULONG Length;
    USHORT Flags;
    USHORT PatternLength;
};

typedef struct _DBGKD_GET_CONTEXT {
    ULONG Unused;
};

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32 {
    ULONG BreakpointAddress;
    ULONG Flags;
    ULONG Calls;
    ULONG MaxCallsPerPeriod;
    ULONG MinInstructions;
    ULONG MaxInstructions;
    ULONG TotalInstructions;
};

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64 {
    ULONG64 BreakpointAddress;
    ULONG Flags;
    ULONG Calls;
    ULONG MaxCallsPerPeriod;
    ULONG MinInstructions;
    ULONG MaxInstructions;
    ULONG TotalInstructions;
};

typedef struct _DBGKD_GET_SET_BUS_DATA {
    ULONG BusDataType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Offset;
    ULONG Length;
};

typedef struct _DBGKD_GET_VERSION32 {
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT ProtocolVersion;
    USHORT Flags;
    ULONG KernBase;
    ULONG PsLoadedModuleList;
    USHORT MachineType;
    USHORT ThCallbackStack;
    USHORT NextCallback;
    USHORT FramePointer;
    ULONG KiCallUserMode;
    ULONG KeUserCallbackDispatcher;
    ULONG BreakpointWithStatus;
    ULONG DebuggerDataList;
};

typedef struct _DBGKD_GET_VERSION64 {
    USHORT MajorVersion;
    USHORT MinorVersion;
    UCHAR ProtocolVersion;
    UCHAR KdSecondaryVersion;
    USHORT Flags;
    USHORT MachineType;
    UCHAR MaxPacketType;
    UCHAR MaxStateChange;
    UCHAR MaxManipulate;
    UCHAR Simulation;
    USHORT Unused[1];
    ULONG64 KernBase;
    ULONG64 PsLoadedModuleList;
    ULONG64 DebuggerDataList;
};

typedef struct _DBGKD_LOAD_SYMBOLS32 {
    ULONG PathNameLength;
    ULONG BaseOfDll;
    ULONG ProcessId;
    ULONG CheckSum;
    ULONG SizeOfImage;
    UCHAR UnloadSymbols;
};

typedef struct _DBGKD_LOAD_SYMBOLS64 {
    ULONG PathNameLength;
    ULONG64 BaseOfDll;
    ULONG64 ProcessId;
    ULONG CheckSum;
    ULONG SizeOfImage;
    UCHAR UnloadSymbols;
};

typedef struct _DBGKD_MANIPULATE_STATE32 {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    LONG ReturnStatus;
    union {
        struct _DBGKD_READ_MEMORY32 ReadMemory;
        struct _DBGKD_WRITE_MEMORY32 WriteMemory;
        struct _DBGKD_READ_MEMORY64 ReadMemory64;
        struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
        struct _DBGKD_GET_CONTEXT GetContext;
        struct _DBGKD_SET_CONTEXT SetContext;
        struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        struct _DBGKD_CONTINUE Continue;
        struct _DBGKD_CONTINUE2 Continue2;
        struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
        struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
        struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
        struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
        struct _DBGKD_GET_VERSION32 GetVersion32;
        struct _DBGKD_BREAKPOINTEX BreakPointEx;
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
        struct _DBGKD_SEARCH_MEMORY SearchMemory;
        struct _DBGKD_CONTEXT_EX GetContextEx;
        struct _DBGKD_CONTEXT_EX SetContextEx;
    } u;
};

typedef struct _DBGKD_MANIPULATE_STATE64 {
    ULONG ApiNumber;
    USHORT ProcessorLevel;
    USHORT Processor;
    LONG ReturnStatus;
    union {
        struct _DBGKD_READ_MEMORY64 ReadMemory;
        struct _DBGKD_WRITE_MEMORY64 WriteMemory;
        struct _DBGKD_GET_CONTEXT GetContext;
        struct _DBGKD_SET_CONTEXT SetContext;
        struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        struct _DBGKD_CONTINUE Continue;
        struct _DBGKD_CONTINUE2 Continue2;
        struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
        struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
        struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
        struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
        struct _DBGKD_GET_VERSION64 GetVersion64;
        struct _DBGKD_BREAKPOINTEX BreakPointEx;
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
        struct _DBGKD_SEARCH_MEMORY SearchMemory;
        struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
        struct _DBGKD_FILL_MEMORY FillMemory;
        struct _DBGKD_QUERY_MEMORY QueryMemory;
        struct _DBGKD_SWITCH_PARTITION SwitchPartition;
        struct _DBGKD_CONTEXT_EX GetContextEx;
        struct _DBGKD_CONTEXT_EX SetContextEx;
    } u;
};

typedef struct _DBGKD_QUERY_MEMORY {
    ULONG64 Address;
    ULONG64 Reserved;
    ULONG AddressSpace;
    ULONG Flags;
};

typedef struct _DBGKD_QUERY_SPECIAL_CALLS {
    ULONG NumberOfSpecialCalls;
};

typedef struct _DBGKD_READ_MEMORY32 {
    ULONG TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesRead;
};

typedef struct _DBGKD_READ_MEMORY64 {
    ULONG64 TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesRead;
};

typedef struct _DBGKD_READ_WRITE_IO32 {
    ULONG DataSize;
    ULONG IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO64 {
    ULONG64 IoAddress;
    ULONG DataSize;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32 {
    ULONG DataSize;
    ULONG InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
    ULONG IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64 {
    ULONG DataSize;
    ULONG InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
    ULONG64 IoAddress;
    ULONG DataValue;
};

typedef struct _DBGKD_READ_WRITE_MSR {
    ULONG Msr;
    ULONG DataValueLow;
    ULONG DataValueHigh;
};

typedef struct _DBGKD_RESTORE_BREAKPOINT {
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_SEARCH_MEMORY {
    ULONG64 SearchAddress;
    ULONG64 FoundAddress;
    ULONG64 SearchLength;
    ULONG PatternLength;
};

typedef struct _DBGKD_SET_CONTEXT {
    ULONG ContextFlags;
};

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32 {
    ULONG BreakpointAddress;
    ULONG Flags;
};

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64 {
    ULONG64 BreakpointAddress;
    ULONG Flags;
};

typedef struct _DBGKD_SET_SPECIAL_CALL32 {
    ULONG SpecialCall;
};

typedef struct _DBGKD_SET_SPECIAL_CALL64 {
    ULONG64 SpecialCall;
};

typedef struct _DBGKD_SWITCH_PARTITION {
    ULONG Partition;
};

typedef struct _DBGKD_WRITE_BREAKPOINT32 {
    ULONG BreakPointAddress;
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_WRITE_BREAKPOINT64 {
    ULONG64 BreakPointAddress;
    ULONG BreakPointHandle;
};

typedef struct _DBGKD_WRITE_MEMORY32 {
    ULONG TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesWritten;
};

typedef struct _DBGKD_WRITE_MEMORY64 {
    ULONG64 TargetBaseAddress;
    ULONG TransferCount;
    ULONG ActualBytesWritten;
};

typedef struct _DBGKM_EXCEPTION32 {
    struct _EXCEPTION_RECORD32 ExceptionRecord;
    ULONG FirstChance;
};

typedef struct _DBGKM_EXCEPTION64 {
    struct _EXCEPTION_RECORD64 ExceptionRecord;
    ULONG FirstChance;
};

typedef struct _DEFERRED_WRITE {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    struct _FILE_OBJECT *FileObject;
    ULONG BytesToWrite;
    struct _LIST_ENTRY DeferredWriteLinks;
    struct _KEVENT *Event;
    PVOID PostRoutine;
    PVOID Context1;
    PVOID Context2;
};

typedef struct _DELAY_ACK_FO {
    struct _LIST_ENTRY Links;
    struct _FILE_OBJECT *OriginalFileObject;
};

typedef struct _DESCRIPTOR {
    USHORT Pad;
    USHORT Limit;
    ULONG Base;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved1 : 1;
    ULONG WakeFromInterrupt : 1;
    ULONG Reserved : 12;
    ULONG Address;
    ULONG UINumber;
    enum _DEVICE_POWER_STATE DeviceState[7];
    enum _SYSTEM_POWER_STATE SystemWake;
    enum _DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    UCHAR Master;
    UCHAR ScatterGather;
    UCHAR DemandMode;
    UCHAR AutoInitialize;
    UCHAR Dma32BitAddresses;
    UCHAR IgnoreCount;
    UCHAR Reserved1;
    UCHAR Dma64BitAddresses;
    ULONG BusNumber;
    ULONG DmaChannel;
    enum _INTERFACE_TYPE InterfaceType;
    enum _DMA_WIDTH DmaWidth;
    enum _DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;
    ULONG DmaAddressWidth;
    ULONG DmaControllerInstance;
    ULONG DmaRequestLine;
    union _LARGE_INTEGER DeviceAddress;
};

typedef struct _DEVICE_MAP {
    struct _OBJECT_DIRECTORY *DosDevicesDirectory;
    struct _OBJECT_DIRECTORY *GlobalDosDevicesDirectory;
    PVOID DosDevicesDirectoryHandle;
    LONG ReferenceCount;
    ULONG DriveMap;
    UCHAR DriveType[32];
};

typedef struct _DEVICE_NODE {
    struct _DEVICE_NODE *Sibling;
    struct _DEVICE_NODE *Child;
    struct _DEVICE_NODE *Parent;
    struct _DEVICE_NODE *LastChild;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _UNICODE_STRING InstancePath;
    struct _UNICODE_STRING ServiceName;
    struct _IRP *PendingIrp;
    struct _POP_FX_DEVICE *FxDevice;
    LONG FxDeviceLock;
    struct _KEVENT FxRemoveEvent;
    LONG FxActivationCount;
    LONG FxSleepCount;
    struct _POP_FX_PLUGIN *Plugin;
    ULONG Level;
    union _POWER_STATE CurrentPowerState;
    struct _PO_DEVICE_NOTIFY Notify;
    struct _PO_IRP_MANAGER PoIrpManager;
    struct _UNICODE_STRING UniqueId;
    ULONG PowerFlags;
    enum _PNP_DEVNODE_STATE State;
    enum _PNP_DEVNODE_STATE PreviousState;
    enum _PNP_DEVNODE_STATE StateHistory[20];
    ULONG StateHistoryEntry;
    LONG CompletionStatus;
    ULONG Flags;
    ULONG UserFlags;
    ULONG Problem;
    LONG ProblemStatus;
    struct _CM_RESOURCE_LIST *ResourceList;
    struct _CM_RESOURCE_LIST *ResourceListTranslated;
    struct _DEVICE_OBJECT *DuplicatePDO;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *ResourceRequirements;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    enum _INTERFACE_TYPE ChildInterfaceType;
    ULONG ChildBusNumber;
    USHORT ChildBusTypeIndex;
    UCHAR RemovalPolicy;
    UCHAR HardwareRemovalPolicy;
    struct _LIST_ENTRY TargetDeviceNotify;
    struct _LIST_ENTRY DeviceArbiterList;
    struct _LIST_ENTRY DeviceTranslatorList;
    USHORT NoTranslatorMask;
    USHORT QueryTranslatorMask;
    USHORT NoArbiterMask;
    USHORT QueryArbiterMask;
    union {
        struct _DEVICE_NODE *LegacyDeviceNode;
        struct _DEVICE_RELATIONS *PendingDeviceRelations;
        PVOID Information;
    } OverUsed1;
    union {
        struct _DEVICE_NODE *NextResourceDeviceNode;
    } OverUsed2;
    struct _CM_RESOURCE_LIST *BootResources;
    struct _CM_RESOURCE_LIST *BootResourcesTranslated;
    ULONG CapabilityFlags;
    struct {
        enum PROFILE_STATUS DockStatus;
        struct _LIST_ENTRY ListEntry;
        PUSHORT SerialNumber;
    } DockInfo;
    ULONG DisableableDepends;
    struct _LIST_ENTRY PendedSetInterfaceState;
    struct _LIST_ENTRY LegacyBusListEntry;
    ULONG DriverUnloadRetryCount;
    struct _DEVICE_NODE *PreviousParent;
    ULONG DeletedChildren;
    ULONG NumaNodeIndex;
    struct _GUID ContainerID;
    UCHAR OverrideFlags;
    ULONG DeviceIdsHash;
    UCHAR RequiresUnloadedDriver;
    struct _PENDING_RELATIONS_LIST_ENTRY *PendingEjectRelations;
    ULONG StateFlags;
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
};

typedef struct _DEVICE_OBJECT_LIST_ENTRY {
    struct _DEVICE_OBJECT *DeviceObject;
    enum _DEVICE_RELATION_LEVEL RelationLevel;
    ULONG Flags;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
    ULONG IdleCount;
    ULONG BusyCount;
    ULONG BusyReference;
    ULONG TotalBusyCount;
    ULONG ConservationIdleTime;
    ULONG PerformanceIdleTime;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _LIST_ENTRY IdleList;
    enum _POP_DEVICE_IDLE_TYPE IdleType;
    enum _DEVICE_POWER_STATE IdleState;
    enum _DEVICE_POWER_STATE CurrentState;
    struct _LIST_ENTRY Volume;
    union {
        struct {
            ULONG IdleTime;
            ULONG NonIdleTime;
        } Disk;
    } Specific;
};

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    struct _DEVICE_OBJECT *Objects[1];
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    LONG StartIoCount;
    LONG StartIoKey;
    ULONG StartIoFlags;
    struct _VPB *Vpb;
    PVOID DependencyNode;
    PVOID VerifierContext;
};

typedef struct _DIAGNOSTIC_BUFFER {
    ULONG Size;
    enum _REQUESTER_TYPE CallerType;
    ULONG ProcessImageNameOffset;
    ULONG ProcessId;
    ULONG ServiceTag;
    ULONG DeviceDescriptionOffset;
    ULONG DevicePathOffset;
    ULONG ReasonOffset;
};

typedef struct _DIAGNOSTIC_CONTEXT {
    enum _REQUESTER_TYPE CallerType;
    struct _EPROCESS *Process;
    ULONG ServiceTag;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG ReasonSize;
};

typedef struct _DIRTY_PAGE_STATISTICS {
    ULONG DirtyPages;
    ULONG DirtyPagesLastScan;
    ULONG DirtyPagesScheduledLastScan;
};

typedef struct _DIRTY_PAGE_THRESHOLDS {
    ULONG DirtyPageThreshold;
    ULONG DirtyPageThresholdTop;
    ULONG DirtyPageThresholdBottom;
    ULONG DirtyPageTarget;
    ULONG64 AggregateAvailablePages;
    ULONG64 AggregateDirtyPages;
    ULONG AvailableHistory;
};

typedef struct _DISPATCHER_HEADER {
    UCHAR Type;
    UCHAR TimerControlFlags;
    UCHAR Absolute : 1;
    UCHAR Wake : 1;
    UCHAR EncodedTolerableDelay : 6;
    UCHAR QueueControlFlags;
    UCHAR Abandoned : 1;
    UCHAR DisableIncrement : 1;
    UCHAR Signalling;
    UCHAR Timer2Flags;
    UCHAR Timer2Inserted : 1;
    UCHAR Timer2Expiring : 1;
    UCHAR Timer2CancelPending : 1;
    UCHAR Timer2SetPending : 1;
    UCHAR Timer2Running : 1;
    UCHAR Timer2Disabled : 1;
    UCHAR Reserved1 : 2;
    UCHAR ThreadControlFlags;
    UCHAR CycleProfiling : 1;
    UCHAR CounterProfiling : 1;
    UCHAR GroupScheduling : 1;
    UCHAR AffinitySet : 1;
    UCHAR Reserved2 : 4;
    UCHAR Hand;
    UCHAR Reserved3;
    UCHAR Size;
    UCHAR TimerMiscFlags;
    UCHAR Index : 1;
    UCHAR Processor : 5;
    UCHAR Inserted : 1;
    UCHAR Expired : 1;
    UCHAR DebugActive;
    UCHAR DpcActive;
    UCHAR Reserved5;
    LONG Lock;
    LONG LockNV;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
    struct _IO_CLIENT_EXTENSION *ClientDriverExtension;
    struct _FS_FILTER_CALLBACKS *FsFilterCallbacks;
    PVOID KseCallbacks;
    PVOID DvCallbacks;
    PVOID VerifierContext;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _DUAL {
    ULONG Length;
    struct _HMAP_DIRECTORY *Map;
    struct _HMAP_TABLE *SmallDir;
    ULONG Guard;
    struct _FREE_DISPLAY FreeDisplay[24];
    struct _LIST_ENTRY FreeBins;
    ULONG FreeSummary;
};

typedef struct _DUMMY_FILE_OBJECT {
    struct _OBJECT_HEADER ObjectHeader;
    CHAR FileObjectBody[128];
};

typedef struct _DUMP_INITIALIZATION_CONTEXT {
    ULONG Length;
    ULONG Reserved;
    PVOID MemoryBlock;
    PVOID CommonBuffer[2];
    union _LARGE_INTEGER PhysicalAddress[2];
    PVOID StallRoutine;
    PUCHAR OpenRoutine;
    PLONG WriteRoutine;
    PVOID FinishRoutine;
    struct _ADAPTER_OBJECT *AdapterObject;
    PVOID MappedRegisterBase;
    PVOID PortConfiguration;
    UCHAR CrashDump;
    UCHAR MarkMemoryOnly;
    UCHAR HiberResume;
    UCHAR Reserved1;
    ULONG MaximumTransferSize;
    ULONG CommonBufferSize;
    PVOID TargetAddress;
    PLONG WritePendingRoutine;
    ULONG PartitionStyle;
    union {
        struct {
            ULONG Signature;
            ULONG CheckSum;
        } Mbr;
        struct {
            struct _GUID DiskId;
        } Gpt;
    } DiskInfo;
    PLONG ReadRoutine;
    PLONG GetDriveTelemetryRoutine;
    ULONG LogSectionTruncateSize;
    ULONG Parameters[16];
    PVOID GetTransferSizesRoutine;
    PVOID DumpNotifyRoutine;
};

typedef struct _DUMP_STACK_CONTEXT {
    struct _DUMP_INITIALIZATION_CONTEXT Init;
    union _LARGE_INTEGER PartitionOffset;
    PVOID DumpPointers;
    ULONG PointersLength;
    PUSHORT ModulePrefix;
    struct _LIST_ENTRY DriverList;
    struct _STRING InitMsg;
    struct _STRING ProgMsg;
    struct _STRING DoneMsg;
    PVOID FileObject;
    enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
};

typedef struct _ECP_LIST {
    ULONG Signature;
    ULONG Flags;
    struct _LIST_ENTRY EcpList;
};

typedef struct _EJOB {
    struct _KEVENT Event;
    struct _LIST_ENTRY JobLinks;
    struct _LIST_ENTRY ProcessListHead;
    struct _ERESOURCE JobLock;
    union _LARGE_INTEGER TotalUserTime;
    union _LARGE_INTEGER TotalKernelTime;
    union _LARGE_INTEGER TotalCycleTime;
    union _LARGE_INTEGER ThisPeriodTotalUserTime;
    union _LARGE_INTEGER ThisPeriodTotalKernelTime;
    ULONG64 TotalContextSwitches;
    ULONG TotalPageFaultCount;
    ULONG TotalProcesses;
    ULONG ActiveProcesses;
    ULONG TotalTerminatedProcesses;
    union _LARGE_INTEGER PerProcessUserTimeLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    ULONG LimitFlags;
    ULONG ActiveProcessLimit;
    struct _KAFFINITY_EX Affinity;
    struct _JOB_ACCESS_STATE *AccessState;
    PVOID AccessStateQuotaReference;
    ULONG UIRestrictionsClass;
    ULONG EndOfJobTimeAction;
    PVOID CompletionPort;
    PVOID CompletionKey;
    ULONG64 CompletionCount;
    ULONG SessionId;
    ULONG SchedulingClass;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
    struct _PROCESS_DISK_COUNTERS DiskIoInfo;
    ULONG ProcessMemoryLimit;
    ULONG JobMemoryLimit;
    ULONG PeakProcessMemoryUsed;
    ULONG PeakJobMemoryUsed;
    struct _KAFFINITY_EX EffectiveAffinity;
    union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
    ULONG EffectiveMinimumWorkingSetSize;
    ULONG EffectiveMaximumWorkingSetSize;
    ULONG EffectiveProcessMemoryLimit;
    struct _EJOB *EffectiveProcessMemoryLimitJob;
    struct _EJOB *EffectivePerProcessUserTimeLimitJob;
    ULONG EffectiveLimitFlags;
    ULONG EffectiveSchedulingClass;
    ULONG EffectiveFreezeCount;
    ULONG EffectiveBackgroundCount;
    ULONG EffectiveSwapCount;
    ULONG EffectiveNotificationLimitCount;
    UCHAR EffectivePriorityClass;
    UCHAR PriorityClass;
    UCHAR Reserved1[2];
    ULONG CompletionFilter;
    struct _WNF_STATE_NAME WakeChannel;
    struct _PS_WAKE_INFORMATION WakeInfo;
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;
    ULONG LowEdgeLatchFilter;
    ULONG OwnedHighEdgeFilters;
    struct _EJOB *NotificationLink;
    ULONG64 CurrentJobMemoryUsed;
    struct _JOB_NOTIFICATION_INFORMATION *NotificationInfo;
    PVOID NotificationInfoQuotaReference;
    struct _IO_MINI_COMPLETION_PACKET_USER *NotificationPacket;
    struct _JOB_CPU_RATE_CONTROL *CpuRateControl;
    PVOID EffectiveSchedulingGroup;
    ULONG64 ReadyTime;
    struct _EX_PUSH_LOCK MemoryLimitsLock;
    struct _LIST_ENTRY SiblingJobLinks;
    struct _LIST_ENTRY ChildJobListHead;
    struct _EJOB *ParentJob;
    struct _EJOB *RootJob;
    struct _LIST_ENTRY IteratorListHead;
    ULONG AncestorCount;
    struct _EJOB **Ancestors;
    struct _EPROCESS_VALUES Accounting;
    ULONG ShadowActiveProcessCount;
    ULONG SequenceNumber;
    ULONG TimerListLock;
    struct _LIST_ENTRY TimerListHead;
    ULONG JobFlags;
    ULONG CloseDone : 1;
    ULONG MultiGroup : 1;
    ULONG OutstandingNotification : 1;
    ULONG NotificationInProgress : 1;
    ULONG UILimits : 1;
    ULONG CpuRateControlActive : 1;
    ULONG OwnCpuRateControl : 1;
    ULONG Terminating : 1;
    ULONG WorkingSetLock : 1;
    ULONG JobFrozen : 1;
    ULONG Background : 1;
    ULONG WakeNotificationAllocated : 1;
    ULONG WakeNotificationEnabled : 1;
    ULONG WakeNotificationPending : 1;
    ULONG LimitNotificationRequired : 1;
    ULONG ZeroCountNotificationRequired : 1;
    ULONG CycleTimeNotificationRequired : 1;
    ULONG CycleTimeNotificationPending : 1;
    ULONG TimersVirtualized : 1;
    ULONG JobSwapped : 1;
    ULONG ViolationDetected : 1;
    ULONG EmptyJobNotified : 1;
    ULONG NoSystemCharge : 1;
    ULONG DropNoWakeCharges : 1;
    ULONG NoWakeChargePolicyDecided : 1;
    ULONG SpareJobFlags : 7;
    ULONG EffectiveHighEdgeFilters;
};

typedef struct _ENODE {
    struct _KNODE Ncb;
    struct _EX_WORK_QUEUE ExWorkQueue[2];
    struct _KEVENT ExpThreadSetManagerEvent;
    struct _KEVENT ExpBalancerExitEvent;
    struct _KTIMER ExpDeadlockTimer;
    struct _KEVENT ExpThreadReaperEvent;
    struct _KWAIT_BLOCK WaitBlocks[4];
    struct _ETHREAD *ExpWorkerThreadBalanceManagerPtr;
    ULONG ExpWorkerSeed;
    ULONG ExWorkerFullInit : 1;
    ULONG ExWorkerStructInit : 1;
    ULONG ExWorkerFlags;
};

typedef struct _EPROCESS {
    struct _KPROCESS Pcb;
    struct _EX_PUSH_LOCK ProcessLock;
    union _LARGE_INTEGER CreateTime;
    struct _EX_RUNDOWN_REF RundownProtect;
    PVOID UniqueProcessId;
    struct _LIST_ENTRY ActiveProcessLinks;
    ULONG Flags2;
    ULONG JobNotReallyActive : 1;
    ULONG AccountingFolded : 1;
    ULONG NewProcessReported : 1;
    ULONG ExitProcessReported : 1;
    ULONG ReportCommitChanges : 1;
    ULONG LastReportMemory : 1;
    ULONG ForceWakeCharge : 1;
    ULONG CrossSessionCreate : 1;
    ULONG NeedsHandleRundown : 1;
    ULONG RefTraceEnabled : 1;
    ULONG DisableDynamicCode : 1;
    ULONG EmptyJobEvaluated : 1;
    ULONG DefaultPagePriority : 3;
    ULONG PrimaryTokenFrozen : 1;
    ULONG ProcessVerifierTarget : 1;
    ULONG StackRandomizationDisabled : 1;
    ULONG AffinityPermanent : 1;
    ULONG AffinityUpdateEnable : 1;
    ULONG PropagateNode : 1;
    ULONG ExplicitAffinity : 1;
    ULONG ProcessExecutionState : 2;
    ULONG DisallowStrippedImages : 1;
    ULONG HighEntropyASLREnabled : 1;
    ULONG ExtensionPointDisable : 1;
    ULONG ForceRelocateImages : 1;
    ULONG ProcessStateChangeRequest : 2;
    ULONG ProcessStateChangeInProgress : 1;
    ULONG DisallowWin32kSystemCalls : 1;
    ULONG Flags;
    ULONG CreateReported : 1;
    ULONG NoDebugInherit : 1;
    ULONG ProcessExiting : 1;
    ULONG ProcessDelete : 1;
    ULONG ControlFlowGuardEnabled : 1;
    ULONG VmDeleted : 1;
    ULONG OutswapEnabled : 1;
    ULONG Outswapped : 1;
    ULONG ForkFailed : 1;
    ULONG Wow64VaSpace4Gb : 1;
    ULONG AddressSpaceInitialized : 2;
    ULONG SetTimerResolution : 1;
    ULONG BreakOnTermination : 1;
    ULONG DeprioritizeViews : 1;
    ULONG WriteWatch : 1;
    ULONG ProcessInSession : 1;
    ULONG OverrideAddressSpace : 1;
    ULONG HasAddressSpace : 1;
    ULONG LaunchPrefetched : 1;
    ULONG Background : 1;
    ULONG VmTopDown : 1;
    ULONG ImageNotifyDone : 1;
    ULONG PdeUpdateNeeded : 1;
    ULONG VdmAllowed : 1;
    ULONG ProcessRundown : 1;
    ULONG ProcessInserted : 1;
    ULONG DefaultIoPriority : 3;
    ULONG ProcessSelfDelete : 1;
    ULONG SetTimerResolutionLink : 1;
    ULONG ProcessQuotaUsage[2];
    ULONG ProcessQuotaPeak[2];
    ULONG PeakVirtualSize;
    ULONG VirtualSize;
    struct _LIST_ENTRY SessionProcessLinks;
    PVOID ExceptionPortData;
    ULONG ExceptionPortValue;
    ULONG ExceptionPortState : 3;
    struct _EX_FAST_REF Token;
    ULONG WorkingSetPage;
    struct _EX_PUSH_LOCK AddressCreationLock;
    struct _EX_PUSH_LOCK PageTableCommitmentLock;
    struct _ETHREAD *RotateInProgress;
    struct _ETHREAD *ForkInProgress;
    struct _EJOB *CommitChargeJob;
    struct _RTL_AVL_TREE CloneRoot;
    ULONG NumberOfPrivatePages;
    ULONG NumberOfLockedPages;
    PVOID Win32Process;
    struct _EJOB *Job;
    PVOID SectionObject;
    PVOID SectionBaseAddress;
    ULONG Cookie;
    PVOID VdmObjects;
    struct _PAGEFAULT_HISTORY *WorkingSetWatch;
    PVOID Win32WindowStation;
    PVOID InheritedFromUniqueProcessId;
    PVOID LdtInformation;
    ULONG OwnerProcessId;
    struct _PEB *Peb;
    PVOID Session;
    PVOID AweInfo;
    struct _EPROCESS_QUOTA_BLOCK *QuotaBlock;
    struct _HANDLE_TABLE *ObjectTable;
    PVOID DebugPort;
    PVOID PaeTop;
    PVOID DeviceMap;
    PVOID EtwDataSource;
    ULONG64 PageDirectoryPte;
    UCHAR ImageFileName[15];
    UCHAR PriorityClass;
    PVOID SecurityPort;
    struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
    struct _LIST_ENTRY JobLinks;
    PVOID HighestUserAddress;
    struct _LIST_ENTRY ThreadListHead;
    ULONG ActiveThreads;
    ULONG ImagePathHash;
    ULONG DefaultHardErrorProcessing;
    LONG LastThreadExitStatus;
    struct _EX_FAST_REF PrefetchTrace;
    PVOID LockedPagesList;
    union _LARGE_INTEGER ReadOperationCount;
    union _LARGE_INTEGER WriteOperationCount;
    union _LARGE_INTEGER OtherOperationCount;
    union _LARGE_INTEGER ReadTransferCount;
    union _LARGE_INTEGER WriteTransferCount;
    union _LARGE_INTEGER OtherTransferCount;
    ULONG CommitChargeLimit;
    ULONG CommitCharge;
    ULONG CommitChargePeak;
    struct _MMSUPPORT Vm;
    struct _LIST_ENTRY MmProcessLinks;
    ULONG ModifiedPageCount;
    LONG ExitStatus;
    struct _RTL_AVL_TREE VadRoot;
    PVOID VadHint;
    ULONG VadCount;
    ULONG VadPhysicalPages;
    ULONG VadPhysicalPagesLimit;
    struct _ALPC_PROCESS_CONTEXT AlpcContext;
    struct _LIST_ENTRY TimerResolutionLink;
    struct _PO_DIAG_STACK_RECORD *TimerResolutionStackRecord;
    ULONG RequestedTimerResolution;
    ULONG SmallestTimerResolution;
    union _LARGE_INTEGER ExitTime;
    ULONG ActiveThreadsHighWatermark;
    ULONG LargePrivateVadCount;
    struct _EX_PUSH_LOCK ThreadListLock;
    PVOID WnfContext;
    ULONG Spare0;
    UCHAR SignatureLevel;
    UCHAR SectionSignatureLevel;
    struct _PS_PROTECTION Protection;
    UCHAR SpareByte20[1];
    ULONG Flags3;
    ULONG Minimal : 1;
    LONG SvmReserved;
    PVOID SvmReserved1;
    ULONG SvmReserved2;
    ULONG64 LastFreezeInterruptTime;
    struct _PROCESS_DISK_COUNTERS *DiskCounters;
    ULONG KeepAliveCounter;
    ULONG NoWakeKeepAliveCounter;
};

typedef struct _EPROCESS_QUOTA_BLOCK {
};

typedef struct _EPROCESS_VALUES {
    ULONG64 KernelTime;
    ULONG64 UserTime;
    ULONG64 CycleTime;
    ULONG64 ContextSwitches;
    LONG64 ReadOperationCount;
    LONG64 WriteOperationCount;
    LONG64 OtherOperationCount;
    LONG64 ReadTransferCount;
    LONG64 WriteTransferCount;
    LONG64 OtherTransferCount;
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    UCHAR ReservedLowFlags;
    UCHAR WaiterPriority;
    struct _KSEMAPHORE *SharedWaiters;
    struct _KEVENT *ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;
    PVOID Address;
    ULONG CreatorBackTraceIndex;
    ULONG SpinLock;
};

typedef struct _ETHREAD {
    struct _KTHREAD Tcb;
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER ExitTime;
    struct _LIST_ENTRY KeyedWaitChain;
    PVOID ChargeOnlySession;
    struct _LIST_ENTRY PostBlockList;
    PVOID ForwardLinkShadow;
    PVOID StartAddress;
    struct _TERMINATION_PORT *TerminationPort;
    struct _ETHREAD *ReaperLink;
    PVOID KeyedWaitValue;
    ULONG ActiveTimerListLock;
    struct _LIST_ENTRY ActiveTimerListHead;
    struct _CLIENT_ID Cid;
    struct _KSEMAPHORE KeyedWaitSemaphore;
    struct _KSEMAPHORE AlpcWaitSemaphore;
    union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
    struct _LIST_ENTRY IrpList;
    ULONG TopLevelIrp;
    struct _DEVICE_OBJECT *DeviceToVerify;
    PVOID Win32StartAddress;
    PVOID LegacyPowerObject;
    struct _LIST_ENTRY ThreadListEntry;
    struct _EX_RUNDOWN_REF RundownProtect;
    struct _EX_PUSH_LOCK ThreadLock;
    ULONG ReadClusterSize;
    LONG MmLockOrdering;
    LONG CmLockOrdering;
    ULONG CrossThreadFlags;
    ULONG Terminated : 1;
    ULONG ThreadInserted : 1;
    ULONG HideFromDebugger : 1;
    ULONG ActiveImpersonationInfo : 1;
    ULONG HardErrorsAreDisabled : 1;
    ULONG BreakOnTermination : 1;
    ULONG SkipCreationMsg : 1;
    ULONG SkipTerminationMsg : 1;
    ULONG CopyTokenOnOpen : 1;
    ULONG ThreadIoPriority : 3;
    ULONG ThreadPagePriority : 3;
    ULONG RundownFail : 1;
    ULONG UmsForceQueueTermination : 1;
    ULONG ReservedCrossThreadFlags : 15;
    ULONG SameThreadPassiveFlags;
    ULONG ActiveExWorker : 1;
    ULONG MemoryMaker : 1;
    ULONG ClonedThread : 1;
    ULONG KeyedEventInUse : 1;
    ULONG SelfTerminate : 1;
    ULONG SameThreadApcFlags;
    UCHAR HardFaultBehavior : 1;
    UCHAR StartAddressInvalid : 1;
    UCHAR EtwCalloutActive : 1;
    UCHAR OwnsProcessWorkingSetExclusive : 1;
    UCHAR OwnsProcessWorkingSetShared : 1;
    UCHAR OwnsSystemCacheWorkingSetExclusive : 1;
    UCHAR OwnsSystemCacheWorkingSetShared : 1;
    UCHAR OwnsSessionWorkingSetExclusive : 1;
    UCHAR OwnsSessionWorkingSetShared : 1;
    UCHAR OwnsProcessAddressSpaceExclusive : 1;
    UCHAR OwnsProcessAddressSpaceShared : 1;
    UCHAR SuppressSymbolLoad : 1;
    UCHAR Prefetching : 1;
    UCHAR OwnsVadExclusive : 1;
    UCHAR OwnsChangeControlAreaExclusive : 1;
    UCHAR OwnsChangeControlAreaShared : 1;
    UCHAR OwnsPagedPoolWorkingSetExclusive : 1;
    UCHAR OwnsPagedPoolWorkingSetShared : 1;
    UCHAR OwnsSystemPtesWorkingSetExclusive : 1;
    UCHAR OwnsSystemPtesWorkingSetShared : 1;
    UCHAR TrimTrigger : 2;
    UCHAR Spare2 : 2;
    UCHAR SystemPagePriorityActive : 1;
    UCHAR SystemPagePriority : 3;
    UCHAR Spare3 : 4;
    UCHAR CacheManagerActive;
    UCHAR DisablePageFaultClustering;
    UCHAR ActiveFaultCount;
    UCHAR LockOrderState;
    ULONG AlpcMessageId;
    PVOID AlpcMessage;
    ULONG AlpcReceiveAttributeSet;
    LONG ExitStatus;
    struct _LIST_ENTRY AlpcWaitListEntry;
    ULONG CacheManagerCount;
    ULONG IoBoostCount;
    struct _LIST_ENTRY BoostList;
    struct _LIST_ENTRY DeboostList;
    ULONG BoostListLock;
    ULONG IrpListLock;
    PVOID ReservedForSynchTracking;
    struct _SINGLE_LIST_ENTRY CmCallbackListHead;
    struct _GUID *ActivityId;
    struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
    PVOID VerifierContext;
    ULONG KernelStackReference;
    PVOID AdjustedClientToken;
};

typedef struct _ETIMER {
    struct _KTIMER KeTimer;
    ULONG Lock;
    struct _KAPC TimerApc;
    struct _KDPC TimerDpc;
    struct _LIST_ENTRY ActiveTimerListEntry;
    ULONG Period;
    CHAR TimerFlags;
    UCHAR ApcAssociated : 1;
    UCHAR FlushDpcs : 1;
    UCHAR Paused : 1;
    UCHAR Spare1 : 5;
    UCHAR DueTimeType;
    USHORT Spare2;
    struct _DIAGNOSTIC_CONTEXT *WakeReason;
    struct _LIST_ENTRY WakeTimerListEntry;
    PVOID VirtualizedTimerCookie;
    struct _LIST_ENTRY VirtualizedTimerLinks;
    ULONG64 DueTime;
    ULONG CoalescingWindow;
};

typedef struct _ETWP_NOTIFICATION_HEADER {
    enum _ETW_NOTIFICATION_TYPE NotificationType;
    ULONG NotificationSize;
    LONG RefCount;
    UCHAR ReplyRequested;
    ULONG ReplyIndex;
    ULONG Timeout;
    ULONG ReplyCount;
    ULONG NotifyeeCount;
    ULONG64 ReplyHandle;
    PVOID ReplyObject;
    ULONG RegIndex;
    ULONG TargetPID;
    ULONG SourcePID;
    struct _GUID DestinationGuid;
    struct _GUID SourceGuid;
};

typedef struct _ETW_BUFFER_CONTEXT {
    UCHAR ProcessorNumber;
    UCHAR Alignment;
    USHORT ProcessorIndex;
    USHORT LoggerId;
};

typedef struct _ETW_BUFFER_QUEUE {
    struct _SINGLE_LIST_ENTRY *QueueHead;
    struct _SINGLE_LIST_ENTRY *QueueTail;
    struct _SINGLE_LIST_ENTRY QueueEntry;
};

typedef struct _ETW_FILTER_HEADER {
    LONG FilterFlags;
    struct _ETW_FILTER_PID *PidFilter;
    struct _ETW_FILTER_STRING_TOKEN *ExeFilter;
    struct _ETW_FILTER_STRING_TOKEN *PkgIdFilter;
    struct _ETW_FILTER_STRING_TOKEN *PkgAppIdFilter;
    struct _ETW_PERFECT_HASH_FUNCTION *StackWalkFilter;
    struct _ETW_PERFECT_HASH_FUNCTION *EventIdFilter;
    struct _ETW_PAYLOAD_FILTER *PayloadFilter;
    struct _EVENT_FILTER_HEADER *ProviderSideFilter;
};

typedef struct _ETW_FILTER_PID {
    ULONG Count;
    ULONG Pids[8];
};

typedef struct _ETW_FILTER_STRING_TOKEN {
    USHORT Count;
    struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
};

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT {
    USHORT Length;
    PUSHORT String;
};

typedef struct _ETW_GUID_ENTRY {
    struct _LIST_ENTRY GuidList;
    LONG RefCount;
    struct _GUID Guid;
    struct _LIST_ENTRY RegListHead;
    PVOID SecurityDescriptor;
    struct _ETW_LAST_ENABLE_INFO LastEnable;
    ULONG64 MatchId;
    struct _TRACE_ENABLE_INFO ProviderEnableInfo;
    struct _TRACE_ENABLE_INFO EnableInfo[8];
    struct _ETW_FILTER_HEADER *FilterData;
};

typedef struct _ETW_LAST_ENABLE_INFO {
    union _LARGE_INTEGER EnableFlags;
    USHORT LoggerId;
    UCHAR Level;
    UCHAR Enabled : 1;
    UCHAR InternalFlag : 7;
};

typedef struct _ETW_LOGGER_HANDLE {
    UCHAR DereferenceAndLeave;
};

typedef struct _ETW_PAYLOAD_FILTER {
    LONG RefCount;
    struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
};

typedef struct _ETW_PERFECT_HASH_FUNCTION {
};

typedef struct _ETW_PERF_COUNTERS {
    LONG TotalActiveSessions;
    LONG TotalBufferMemoryNonPagedPool;
    LONG TotalBufferMemoryPagedPool;
    LONG TotalGuidsEnabled;
    LONG TotalGuidsNotEnabled;
    LONG TotalGuidsPreEnabled;
};

typedef struct _ETW_PMC_SUPPORT {
    enum _KPROFILE_SOURCE Source[4];
    ULONG HookIdCount;
    USHORT HookId[4];
    ULONG CountersCount;
    struct _HAL_PMC_COUNTERS *ProcessorCtrs[1];
};

typedef struct _ETW_QUEUE_ENTRY {
    struct _LIST_ENTRY ListEntry;
    struct _ETWP_NOTIFICATION_HEADER *DataBlock;
    struct _ETW_REG_ENTRY *RegEntry;
    struct _ETW_REG_ENTRY *ReplyObject;
    PVOID WakeReference;
    USHORT RegIndex;
    USHORT ReplyIndex;
    ULONG Flags;
};

typedef struct _ETW_REALTIME_CONSUMER {
    struct _LIST_ENTRY Links;
    PVOID ProcessHandle;
    struct _EPROCESS *ProcessObject;
    PVOID NextNotDelivered;
    PVOID RealtimeConnectContext;
    struct _KEVENT *DisconnectEvent;
    struct _KEVENT *DataAvailableEvent;
    PULONG UserBufferCount;
    struct _SINGLE_LIST_ENTRY *UserBufferListHead;
    ULONG BuffersLost;
    ULONG EmptyBuffersCount;
    USHORT LoggerId;
    UCHAR Flags;
    UCHAR ShutDownRequested : 1;
    UCHAR NewBuffersLost : 1;
    UCHAR Disconnected : 1;
    UCHAR Notified : 1;
    struct _RTL_BITMAP ReservedBufferSpaceBitMap;
    PUCHAR ReservedBufferSpace;
    ULONG ReservedBufferSpaceSize;
    ULONG UserPagesAllocated;
    ULONG UserPagesReused;
    PULONG EventsLostCount;
    PULONG BuffersLostCount;
};

typedef struct _ETW_REF_CLOCK {
    union _LARGE_INTEGER StartTime;
    union _LARGE_INTEGER StartPerfClock;
};

typedef struct _ETW_REG_ENTRY {
    struct _LIST_ENTRY RegList;
    struct _ETW_GUID_ENTRY *GuidEntry;
    struct _ETW_REPLY_QUEUE *ReplyQueue;
    struct _ETW_QUEUE_ENTRY *ReplySlot[4];
    PVOID Caller;
    ULONG SessionId;
    struct _EPROCESS *Process;
    PVOID CallbackContext;
    PVOID Callback;
    USHORT Index;
    UCHAR Flags;
    UCHAR DbgKernelRegistration : 1;
    UCHAR DbgUserRegistration : 1;
    UCHAR DbgReplyRegistration : 1;
    UCHAR DbgClassicRegistration : 1;
    UCHAR DbgSessionSpaceRegistration : 1;
    UCHAR DbgModernRegistration : 1;
    UCHAR DbgClosed : 1;
    UCHAR DbgInserted : 1;
    UCHAR EnableMask;
};

typedef struct _ETW_REPLY_QUEUE {
    struct _KQUEUE Queue;
    LONG EventsLost;
};

typedef struct _ETW_SESSION_PERF_COUNTERS {
    LONG BufferMemoryPagedPool;
    LONG BufferMemoryNonPagedPool;
    ULONG64 EventsLoggedCount;
    LONG EventsLost;
    LONG NumConsumers;
};

typedef struct _ETW_STACK_CACHE {
};

typedef struct _ETW_SYSTEMTIME {
    USHORT Year;
    USHORT Month;
    USHORT DayOfWeek;
    USHORT Day;
    USHORT Hour;
    USHORT Minute;
    USHORT Second;
    USHORT Milliseconds;
};

typedef struct _ETW_WMITRACE_WORK {
    ULONG LoggerId;
    ULONG SpareUlong;
    CHAR LoggerName[65];
    CHAR FileName[129];
    ULONG MaximumFileSize;
    ULONG MinBuffers;
    ULONG MaxBuffers;
    ULONG BufferSize;
    ULONG Mode;
    ULONG FlushTimer;
    ULONG64 MatchAny;
    ULONG64 MatchAll;
    ULONG EnableProperty;
    struct _GUID Guid;
    UCHAR Level;
    LONG Status;
};

typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Reserved;
};

typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONG64 Keyword;
};

typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONG64 Ptr;
    ULONG Size;
    ULONG Type;
};

typedef struct _EVENT_FILTER_HEADER {
    USHORT Id;
    UCHAR Version;
    UCHAR Reserved[5];
    ULONG64 InstanceId;
    ULONG Size;
    ULONG NextOffset;
};

typedef struct _EVENT_HEADER {
    USHORT Size;
    USHORT HeaderType;
    USHORT Flags;
    USHORT EventProperty;
    ULONG ThreadId;
    ULONG ProcessId;
    union _LARGE_INTEGER TimeStamp;
    struct _GUID ProviderId;
    struct _EVENT_DESCRIPTOR EventDescriptor;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG64 ProcessorTime;
    struct _GUID ActivityId;
};

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM {
    USHORT Reserved1;
    USHORT ExtType;
    USHORT Linkage : 1;
    USHORT Reserved2 : 15;
    USHORT DataSize;
    ULONG64 DataPtr;
};

typedef struct _EVENT_PAYLOAD_PREDICATE {
    USHORT FieldIndex;
    USHORT CompareOp;
    ULONG64 Value[2];
};

typedef struct _EVENT_RECORD {
    struct _EVENT_HEADER EventHeader;
    struct _ETW_BUFFER_CONTEXT BufferContext;
    USHORT ExtendedDataCount;
    USHORT UserDataLength;
    struct _EVENT_HEADER_EXTENDED_DATA_ITEM *ExtendedData;
    PVOID UserData;
    PVOID UserContext;
};

typedef struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD *ExceptionRecord;
    struct _CONTEXT *ContextRecord;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD32 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG ExceptionRecord;
    ULONG ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_RECORD64 {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG NumberParameters;
    ULONG __unusedAlignment;
    ULONG64 ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    enum _EXCEPTION_DISPOSITION *Handler;
};

typedef struct _EXHANDLE {
    ULONG TagBits : 2;
    ULONG Index : 30;
    PVOID GenericHandleOverlay;
    ULONG Value;
};

typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PVOID DeleteCallback;
    PVOID DeleteContext;
};

typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONG64 NoWakeTolerance;
};

typedef struct _EX_FAST_REF {
    PVOID Object;
    ULONG RefCnt : 3;
    ULONG Value;
};

typedef struct _EX_PUSH_LOCK {
    ULONG Locked : 1;
    ULONG Waiting : 1;
    ULONG Waking : 1;
    ULONG MultipleShared : 1;
    ULONG Shared : 28;
    ULONG Value;
    PVOID Ptr;
};

typedef struct _EX_PUSH_LOCK_CACHE_AWARE {
    struct _EX_PUSH_LOCK *Locks[32];
};

typedef struct _EX_RUNDOWN_REF {
    ULONG Count;
    PVOID Ptr;
};

typedef struct _EX_WORK_QUEUE {
    struct _KPRIQUEUE WorkPriQueue;
    ULONG WorkItemsProcessed;
    ULONG WorkItemsProcessedLastPass;
    LONG ThreadCount;
    UCHAR TryFailed;
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
};

typedef struct _FILESYSTEM_DISK_COUNTERS {
    ULONG64 FsBytesRead;
    ULONG64 FsBytesWritten;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    struct _SID Sid;
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
    ULONG IrpListLock;
    struct _LIST_ENTRY IrpList;
    PVOID FileObjectExtension;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FLOATING_SAVE_AREA {
    ULONG ControlWord;
    ULONG StatusWord;
    ULONG TagWord;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    UCHAR RegisterArea[80];
    ULONG Spare0;
};

typedef struct _FLS_CALLBACK_INFO {
};

typedef struct _FREE_DISPLAY {
    ULONG RealVectorSize;
    ULONG Hint;
    struct _RTL_BITMAP Display;
};

typedef struct _FSRTL_ADVANCED_FCB_HEADER {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    UCHAR Flags;
    UCHAR IsFastIoPossible;
    UCHAR Flags2;
    UCHAR Reserved : 4;
    UCHAR Version : 4;
    struct _ERESOURCE *Resource;
    struct _ERESOURCE *PagingIoResource;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER FileSize;
    union _LARGE_INTEGER ValidDataLength;
    struct _FAST_MUTEX *FastMutex;
    struct _LIST_ENTRY FilterContexts;
    struct _EX_PUSH_LOCK PushLock;
    PVOID *FileContextSupportPointer;
    PVOID Oplock;
    PVOID ReservedForRemote;
    PVOID ReservedContext;
};

typedef struct _FS_FILTER_CALLBACKS {
    ULONG SizeOfFsFilterCallbacks;
    ULONG Reserved;
    PLONG PreAcquireForSectionSynchronization;
    PVOID PostAcquireForSectionSynchronization;
    PLONG PreReleaseForSectionSynchronization;
    PVOID PostReleaseForSectionSynchronization;
    PLONG PreAcquireForCcFlush;
    PVOID PostAcquireForCcFlush;
    PLONG PreReleaseForCcFlush;
    PVOID PostReleaseForCcFlush;
    PLONG PreAcquireForModifiedPageWriter;
    PVOID PostAcquireForModifiedPageWriter;
    PLONG PreReleaseForModifiedPageWriter;
    PVOID PostReleaseForModifiedPageWriter;
};

typedef struct _FS_FILTER_CALLBACK_DATA {
    ULONG SizeOfFsFilterCallbackData;
    UCHAR Operation;
    UCHAR Reserved;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    union _FS_FILTER_PARAMETERS Parameters;
};

typedef struct _GDI_TEB_BATCH {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG HDC;
    ULONG Buffer[310];
};

typedef struct _GDI_TEB_BATCH32 {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG HDC;
    ULONG Buffer[310];
};

typedef struct _GDI_TEB_BATCH64 {
    ULONG Offset : 31;
    ULONG HasRenderingCommand : 1;
    ULONG64 HDC;
    ULONG Buffer[310];
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERAL_LOOKASIDE_POOL {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    enum _POOL_TYPE Type;
    ULONG Tag;
    ULONG Size;
    PVOID *AllocateEx;
    PVOID *Allocate;
    PVOID FreeEx;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GROUP_AFFINITY {
    ULONG Mask;
    USHORT Group;
    USHORT Reserved[3];
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _HAL_PMC_COUNTERS {
};

typedef struct _HANDLE_TABLE {
    ULONG NextHandleNeedingPool;
    LONG ExtraInfoPages;
    ULONG TableCode;
    struct _EPROCESS *QuotaProcess;
    struct _LIST_ENTRY HandleTableList;
    ULONG UniqueProcessId;
    ULONG Flags;
    UCHAR StrictFIFO : 1;
    UCHAR EnableHandleExceptions : 1;
    UCHAR Rundown : 1;
    UCHAR Duplicated : 1;
    struct _EX_PUSH_LOCK HandleContentionEvent;
    struct _EX_PUSH_LOCK HandleTableLock;
    struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    UCHAR ActualEntry[20];
    struct _HANDLE_TRACE_DEBUG_INFO *DebugInfo;
};

typedef struct _HANDLE_TABLE_ENTRY {
    LONG VolatileLowValue;
    LONG LowValue;
    struct _HANDLE_TABLE_ENTRY_INFO *InfoTable;
    ULONG Unlocked : 1;
    ULONG Attributes : 2;
    ULONG ObjectPointerBits : 29;
    LONG HighValue;
    struct _HANDLE_TABLE_ENTRY *NextFreeHandleEntry;
    struct _EXHANDLE LeafHandleValue;
    ULONG GrantedAccessBits : 25;
    ULONG ProtectFromClose : 1;
    ULONG NoRightsUpgrade : 1;
    ULONG RefCnt : 5;
};

typedef struct _HANDLE_TABLE_ENTRY_INFO {
    ULONG AuditMask;
};

typedef struct _HANDLE_TABLE_FREE_LIST {
    struct _EX_PUSH_LOCK FreeListLock;
    struct _HANDLE_TABLE_ENTRY *FirstFreeHandleEntry;
    struct _HANDLE_TABLE_ENTRY *LastFreeHandleEntry;
    LONG HandleCount;
    ULONG HighWaterMark;
    ULONG Reserved[8];
};

typedef struct _HANDLE_TRACE_DB_ENTRY {
    struct _CLIENT_ID ClientId;
    PVOID Handle;
    ULONG Type;
    PVOID StackTrace[16];
};

typedef struct _HANDLE_TRACE_DEBUG_INFO {
    LONG RefCount;
    ULONG TableSize;
    ULONG BitMaskFlags;
    struct _FAST_MUTEX CloseCompactionLock;
    ULONG CurrentStackIndex;
    struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
};

typedef struct _HARDWARE_PTE {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;
    ULONG64 Prototype : 1;
    ULONG64 reserved0 : 1;
    ULONG64 PageFrameNumber : 26;
    ULONG64 reserved1 : 26;
    ULONG LowPart;
    ULONG HighPart;
};

typedef struct _HBASE_BLOCK {
    ULONG Signature;
    ULONG Sequence1;
    ULONG Sequence2;
    union _LARGE_INTEGER TimeStamp;
    ULONG Major;
    ULONG Minor;
    ULONG Type;
    ULONG Format;
    ULONG RootCell;
    ULONG Length;
    ULONG Cluster;
    UCHAR FileName[64];
    struct _GUID RmId;
    struct _GUID LogId;
    ULONG Flags;
    struct _GUID TmId;
    ULONG GuidSignature;
    ULONG64 LastReorganizeTime;
    ULONG Reserved1[83];
    ULONG CheckSum;
    ULONG Reserved2[882];
    struct _GUID ThawTmId;
    struct _GUID ThawRmId;
    struct _GUID ThawLogId;
    ULONG BootType;
    ULONG BootRecover;
};

typedef struct _HBIN {
    ULONG Signature;
    ULONG FileOffset;
    ULONG Size;
    ULONG Reserved1[2];
    union _LARGE_INTEGER TimeStamp;
    ULONG Spare;
};

typedef struct _HCELL {
    LONG Size;
    union {
        struct {
            union {
                ULONG UserData;
                ULONG Next;
            } u;
        } NewCell;
    } u;
};

typedef struct _HEAP {
    struct _HEAP_ENTRY Entry;
    ULONG SegmentSignature;
    ULONG SegmentFlags;
    struct _LIST_ENTRY SegmentListEntry;
    struct _HEAP *Heap;
    PVOID BaseAddress;
    ULONG NumberOfPages;
    struct _HEAP_ENTRY *FirstEntry;
    struct _HEAP_ENTRY *LastValidEntry;
    ULONG NumberOfUnCommittedPages;
    ULONG NumberOfUnCommittedRanges;
    USHORT SegmentAllocatorBackTraceIndex;
    USHORT Reserved;
    struct _LIST_ENTRY UCRSegmentList;
    ULONG Flags;
    ULONG ForceFlags;
    ULONG CompatibilityFlags;
    ULONG EncodeFlagMask;
    struct _HEAP_ENTRY Encoding;
    ULONG Interceptor;
    ULONG VirtualMemoryThreshold;
    ULONG Signature;
    ULONG SegmentReserve;
    ULONG SegmentCommit;
    ULONG DeCommitFreeBlockThreshold;
    ULONG DeCommitTotalFreeThreshold;
    ULONG TotalFreeSize;
    ULONG MaximumAllocationSize;
    USHORT ProcessHeapsListIndex;
    USHORT HeaderValidateLength;
    PVOID HeaderValidateCopy;
    USHORT NextAvailableTagIndex;
    USHORT MaximumTagIndex;
    struct _HEAP_TAG_ENTRY *TagEntries;
    struct _LIST_ENTRY UCRList;
    ULONG AlignRound;
    ULONG AlignMask;
    struct _LIST_ENTRY VirtualAllocdBlocks;
    struct _LIST_ENTRY SegmentList;
    USHORT AllocatorBackTraceIndex;
    ULONG NonDedicatedListLength;
    PVOID BlocksIndex;
    PVOID UCRIndex;
    struct _HEAP_PSEUDO_TAG_ENTRY *PseudoTagEntries;
    struct _LIST_ENTRY FreeLists;
    struct _HEAP_LOCK *LockVariable;
    PLONG CommitRoutine;
    PVOID FrontEndHeap;
    USHORT FrontHeapLockCount;
    UCHAR FrontEndHeapType;
    UCHAR RequestedFrontEndHeapType;
    PUSHORT FrontEndHeapUsageData;
    USHORT FrontEndHeapMaximumIndex;
    UCHAR FrontEndHeapStatusBitmap[257];
    struct _HEAP_COUNTERS Counters;
    struct _HEAP_TUNING_PARAMETERS TuningParameters;
};

typedef struct _HEAP_COUNTERS {
    ULONG TotalMemoryReserved;
    ULONG TotalMemoryCommitted;
    ULONG TotalMemoryLargeUCR;
    ULONG TotalSizeInVirtualBlocks;
    ULONG TotalSegments;
    ULONG TotalUCRs;
    ULONG CommittOps;
    ULONG DeCommitOps;
    ULONG LockAcquires;
    ULONG LockCollisions;
    ULONG CommitRate;
    ULONG DecommittRate;
    ULONG CommitFailures;
    ULONG InBlockCommitFailures;
    ULONG PollIntervalCounter;
    ULONG DecommitsSinceLastCheck;
    ULONG HeapPollInterval;
    ULONG AllocAndFreeOps;
    ULONG AllocationIndicesActive;
    ULONG InBlockDeccommits;
    ULONG InBlockDeccomitSize;
    ULONG HighWatermarkSize;
    ULONG LastPolledSize;
};

typedef struct _HEAP_ENTRY {
    USHORT Size;
    UCHAR Flags;
    UCHAR SmallTagIndex;
    ULONG SubSegmentCode;
    USHORT PreviousSize;
    UCHAR SegmentOffset;
    UCHAR LFHFlags;
    UCHAR UnusedBytes;
    USHORT FunctionIndex;
    USHORT ContextValue;
    ULONG InterceptorValue;
    USHORT UnusedBytesLength;
    UCHAR EntryOffset;
    UCHAR ExtendedBlockSignature;
    ULONG Code1;
    USHORT Code2;
    UCHAR Code3;
    UCHAR Code4;
    ULONG Code234;
    ULONG64 AgregateCode;
};

typedef struct _HEAP_ENTRY_EXTRA {
    USHORT AllocatorBackTraceIndex;
    USHORT TagIndex;
    ULONG Settable;
    ULONG64 ZeroInit;
};

typedef struct _HEAP_FREE_ENTRY {
    USHORT Size;
    UCHAR Flags;
    UCHAR SmallTagIndex;
    ULONG SubSegmentCode;
    USHORT PreviousSize;
    UCHAR SegmentOffset;
    UCHAR LFHFlags;
    UCHAR UnusedBytes;
    USHORT FunctionIndex;
    USHORT ContextValue;
    ULONG InterceptorValue;
    USHORT UnusedBytesLength;
    UCHAR EntryOffset;
    UCHAR ExtendedBlockSignature;
    ULONG Code1;
    USHORT Code2;
    UCHAR Code3;
    UCHAR Code4;
    ULONG Code234;
    ULONG64 AgregateCode;
    struct _LIST_ENTRY FreeList;
};

typedef struct _HEAP_FREE_ENTRY_EXTRA {
    USHORT TagIndex;
    USHORT FreeBackTraceIndex;
};

typedef struct _HEAP_LIST_LOOKUP {
    struct _HEAP_LIST_LOOKUP *ExtendedLookup;
    ULONG ArraySize;
    ULONG ExtraItem;
    ULONG ItemCount;
    ULONG OutOfRangeItems;
    ULONG BaseIndex;
    struct _LIST_ENTRY *ListHead;
    PULONG ListsInUseUlong;
    struct _LIST_ENTRY **ListHints;
};

typedef struct _HEAP_LOCK {
    union {
        struct _RTL_CRITICAL_SECTION CriticalSection;
        struct _ERESOURCE Resource;
    } Lock;
};

typedef struct _HEAP_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG Counters[2];
};

typedef struct _HEAP_PSEUDO_TAG_ENTRY {
    ULONG Allocs;
    ULONG Frees;
    ULONG Size;
};

typedef struct _HEAP_SEGMENT {
    struct _HEAP_ENTRY Entry;
    ULONG SegmentSignature;
    ULONG SegmentFlags;
    struct _LIST_ENTRY SegmentListEntry;
    struct _HEAP *Heap;
    PVOID BaseAddress;
    ULONG NumberOfPages;
    struct _HEAP_ENTRY *FirstEntry;
    struct _HEAP_ENTRY *LastValidEntry;
    ULONG NumberOfUnCommittedPages;
    ULONG NumberOfUnCommittedRanges;
    USHORT SegmentAllocatorBackTraceIndex;
    USHORT Reserved;
    struct _LIST_ENTRY UCRSegmentList;
};

typedef struct _HEAP_STOP_ON_TAG {
    ULONG HeapAndTagIndex;
    USHORT TagIndex;
    USHORT HeapIndex;
};

typedef struct _HEAP_STOP_ON_VALUES {
    ULONG AllocAddress;
    struct _HEAP_STOP_ON_TAG AllocTag;
    ULONG ReAllocAddress;
    struct _HEAP_STOP_ON_TAG ReAllocTag;
    ULONG FreeAddress;
    struct _HEAP_STOP_ON_TAG FreeTag;
};

typedef struct _HEAP_TAG_ENTRY {
    ULONG Allocs;
    ULONG Frees;
    ULONG Size;
    USHORT TagIndex;
    USHORT CreatorBackTraceIndex;
    WCHAR TagName[24];
};

typedef struct _HEAP_TUNING_PARAMETERS {
    ULONG CommittThresholdShift;
    ULONG MaxPreCommittThreshold;
};

typedef struct _HEAP_UCR_DESCRIPTOR {
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY SegmentEntry;
    PVOID Address;
    ULONG Size;
};

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY {
    struct _LIST_ENTRY Entry;
    struct _HEAP_ENTRY_EXTRA ExtraStuff;
    ULONG CommitSize;
    ULONG ReserveSize;
    struct _HEAP_ENTRY BusyBlock;
};

typedef struct _HHIVE {
    ULONG Signature;
    struct _CELL_DATA **GetCellRoutine;
    PVOID *Allocate;
    PVOID Free;
    PUCHAR FileWrite;
    PUCHAR FileRead;
    PVOID HiveLoadFailure;
    struct _HBASE_BLOCK *BaseBlock;
    struct _RTL_BITMAP DirtyVector;
    ULONG DirtyCount;
    ULONG DirtyAlloc;
    struct _RTL_BITMAP UnreconciledVector;
    ULONG UnreconciledCount;
    ULONG BaseBlockAlloc;
    ULONG Cluster;
    UCHAR Flat : 1;
    UCHAR ReadOnly : 1;
    UCHAR Reserved : 6;
    UCHAR DirtyFlag;
    ULONG HvBinHeadersUse;
    ULONG HvFreeCellsUse;
    ULONG HvUsedCellsUse;
    ULONG CmUsedCellsUse;
    ULONG HiveFlags;
    ULONG CurrentLog;
    ULONG CurrentLogSequence;
    ULONG CurrentLogOffset;
    ULONG MinimumLogSequence;
    UCHAR LogDataPresent[2];
    UCHAR PrimaryFileValid;
    UCHAR BaseBlockDirty;
    USHORT FirstLogFile : 3;
    USHORT SecondLogFile : 3;
    USHORT HeaderRecovered : 1;
    USHORT LegacyRecoveryIndicated : 1;
    USHORT RecoveryInformationReserved : 8;
    USHORT RecoveryInformation;
    UCHAR LogEntriesRecovered[2];
    ULONG RefreshCount;
    ULONG StorageTypeCount;
    ULONG Version;
    struct _DUAL Storage[2];
};

typedef struct _HIVE_LIST_ENTRY {
    PUSHORT FileName;
    PUSHORT BaseName;
    PUSHORT RegRootName;
    struct _CMHIVE *CmHive;
    ULONG HHiveFlags;
    ULONG CmHiveFlags;
    ULONG CmKcbCacheSize;
    struct _CMHIVE *CmHive2;
    UCHAR HiveMounted;
    UCHAR ThreadFinished;
    UCHAR ThreadStarted;
    UCHAR Allocate;
    UCHAR WinPERequired;
    struct _KEVENT StartEvent;
    struct _KEVENT FinishedEvent;
    struct _KEVENT MountLock;
};

typedef struct _HIVE_LOAD_FAILURE {
    struct _HHIVE *Hive;
    ULONG Index;
    ULONG RecoverableIndex;
    struct {
        enum _CM_LOAD_FAILURE_TYPE Failure;
        LONG Status;
        ULONG Point;
    } Locations[8];
    struct {
        enum _CM_LOAD_FAILURE_TYPE Failure;
        LONG Status;
        ULONG Point;
    } RecoverableLocations[8];
    struct {
        ULONG Action;
        PVOID Handle;
        LONG Status;
    } RegistryIO;
    struct {
        PVOID CheckStack;
    } CheckRegistry2;
    struct {
        ULONG Cell;
        struct _CELL_DATA *CellPoint;
        PVOID RootPoint;
        ULONG Index;
    } CheckKey;
    struct {
        struct _CELL_DATA *List;
        ULONG Index;
        ULONG Cell;
        struct _CELL_DATA *CellPoint;
    } CheckValueList;
    struct {
        ULONG Space;
        ULONG MapPoint;
        struct _HBIN *BinPoint;
    } CheckHive;
    struct {
        ULONG Space;
        ULONG MapPoint;
        struct _HBIN *BinPoint;
    } CheckHive1;
    struct {
        struct _HBIN *Bin;
        struct _HCELL *CellPoint;
    } CheckBin;
    struct {
        ULONG FileOffset;
    } RecoverData;
};

typedef struct _HIVE_WAIT_PACKET {
    struct _KEVENT WakeEvent;
    LONG Status;
    struct _HIVE_WAIT_PACKET *Next;
};

typedef struct _HIVE_WRITE_WAIT_QUEUE {
    struct _ETHREAD *ActiveThread;
    struct _HIVE_WAIT_PACKET *WaitList;
    ULONG OwnerBoosted;
};

typedef struct _HMAP_DIRECTORY {
    struct _HMAP_TABLE *Directory[1024];
};

typedef struct _HMAP_ENTRY {
    ULONG BlockAddress;
    ULONG BinAddress;
    ULONG MemAlloc;
};

typedef struct _HMAP_TABLE {
    struct _HMAP_ENTRY Table[512];
};

typedef struct _HV_ENLIGHTENMENT_INFORMATION {
    ULONG UseHypercallForAddressSpaceSwitch : 1;
    ULONG UseHypercallForLocalFlush : 1;
    ULONG UseHypercallForRemoteFlush : 1;
    ULONG UseApicMsrs : 1;
    ULONG UseMsrForReset : 1;
    ULONG UseRelaxedTiming : 1;
    ULONG UseDmaRemapping : 1;
    ULONG UseInterruptRemapping : 1;
    ULONG UseX2ApicMsrs : 1;
    ULONG DeprecateAutoEoi : 1;
    ULONG Reserved : 22;
    ULONG LongSpinWaitCount;
    ULONG ReservedEcx;
    ULONG ReservedEdx;
};

typedef struct _HV_HYPERVISOR_FEATURES {
    union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
    ULONG MaxSupportedCState : 4;
    ULONG HpetNeededForC3PowerState : 1;
    ULONG Reserved : 27;
    ULONG MwaitAvailable : 1;
    ULONG GuestDebuggingAvailable : 1;
    ULONG PerformanceMonitorsAvailable : 1;
    ULONG CpuDynamicPartitioningAvailable : 1;
    ULONG XmmRegistersForFastHypercallAvailable : 1;
    ULONG GuestIdleAvailable : 1;
    ULONG HypervisorSleepStateSupportAvailable : 1;
    ULONG NumaDistanceQueryAvailable : 1;
    ULONG FrequencyMsrsAvailable : 1;
    ULONG SyntheticMachineCheckAvailable : 1;
    ULONG GuestCrashMsrsAvailable : 1;
    ULONG DebugMsrsAvailable : 1;
    ULONG Npiep1Available : 1;
    ULONG DisableHypervisorAvailable : 1;
    ULONG Reserved1 : 18;
};

typedef struct _HV_HYPERVISOR_HARDWARE_FEATURES {
    ULONG ApicOverlayAssistInUse : 1;
    ULONG MsrBitmapsInUse : 1;
    ULONG ArchitecturalPerformanceCountersInUse : 1;
    ULONG SecondLevelAddressTranslationInUse : 1;
    ULONG DmaRemappingInUse : 1;
    ULONG InterruptRemappingInUse : 1;
    ULONG MemoryPatrolScrubberPresent : 1;
    ULONG Reserved : 25;
    ULONG ReservedEbx;
    ULONG ReservedEcx;
    ULONG ReservedEdx;
};

typedef struct _HV_HYPERVISOR_INTERFACE_INFO {
    ULONG Interface;
    ULONG ReservedEbx;
    ULONG ReservedEcx;
    ULONG ReservedEdx;
};

typedef struct _HV_HYPERVISOR_VERSION_INFO {
    ULONG BuildNumber;
    ULONG MinorVersion : 16;
    ULONG MajorVersion : 16;
    ULONG ServicePack;
    ULONG ServiceNumber : 24;
    ULONG ServiceBranch : 8;
};

typedef struct _HV_IMPLEMENTATION_LIMITS {
    ULONG MaxVirtualProcessorCount;
    ULONG MaxLogicalProcessorCount;
    ULONG MaxInterruptMappingCount;
    ULONG ReservedEdx;
};

typedef struct _HV_VENDOR_AND_MAX_FUNCTION {
    ULONG MaxFunction;
    UCHAR VendorName[12];
};

typedef struct _IA64_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG64 CurrentSymbolStart;
    ULONG64 CurrentSymbolEnd;
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DEBUG_DIRECTORY {
    ULONG Characteristics;
    ULONG TimeDateStamp;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG Type;
    ULONG SizeOfData;
    ULONG AddressOfRawData;
    ULONG PointerToRawData;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_NT_HEADERS {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG SizeOfStackReserve;
    ULONG SizeOfStackCommit;
    ULONG SizeOfHeapReserve;
    ULONG SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG BaseOfBss;
    ULONG GprMask;
    ULONG CprMask[4];
    ULONG GpValue;
};

typedef struct _IMAGE_SECTION_HEADER {
    UCHAR Name[8];
    union {
        ULONG PhysicalAddress;
        ULONG VirtualSize;
    } Misc;
    ULONG VirtualAddress;
    ULONG SizeOfRawData;
    ULONG PointerToRawData;
    ULONG PointerToRelocations;
    ULONG PointerToLinenumbers;
    USHORT NumberOfRelocations;
    USHORT NumberOfLinenumbers;
    ULONG Characteristics;
};

typedef struct _IMAGE_SECURITY_CONTEXT {
    PVOID PageHashes;
    ULONG Value;
    ULONG SecurityBeingCreated : 2;
    ULONG SecurityMandatory : 1;
    ULONG PageHashPointer : 29;
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _INTERRUPT_CONNECTION_DATA {
    ULONG Count;
    struct _GROUP_AFFINITY OriginalAffinity;
    struct _LIST_ENTRY SteeringListEntry;
    PVOID SteeringListRoot;
    ULONG64 IsrTime;
    ULONG64 DpcTime;
    ULONG IsrLoad;
    ULONG DpcLoad;
    UCHAR IsPrimaryInterrupt;
    struct _KINTERRUPT **InterruptObjectArray;
    ULONG InterruptObjectCount;
    struct _INTERRUPT_VECTOR_DATA Vectors[1];
};

typedef struct _INTERRUPT_HT_INTR_INFO {
    union {
        struct {
            ULONG Mask : 1;
            ULONG Polarity : 1;
            ULONG MessageType : 3;
            ULONG RequestEOI : 1;
            ULONG DestinationMode : 1;
            ULONG MessageType3 : 1;
            ULONG Destination : 8;
            ULONG Vector : 8;
            ULONG ExtendedAddress : 8;
        } bits;
        ULONG AsULONG;
    } LowPart;
    union {
        struct {
            ULONG ExtendedDestination : 24;
            ULONG Reserved : 6;
            ULONG PassPW : 1;
            ULONG WaitingForEOI : 1;
        } bits;
        ULONG AsULONG;
    } HighPart;
};

typedef struct _INTERRUPT_REMAPPING_INFO {
    ULONG IrtIndex : 30;
    ULONG FlagHalInternal : 1;
    ULONG FlagTranslated : 1;
    union {
        union _ULARGE_INTEGER RemappedFormat;
        struct {
            ULONG MessageAddressLow;
            USHORT MessageData;
            USHORT Reserved;
        } Msi;
    } u;
};

typedef struct _INTERRUPT_VECTOR_DATA {
    enum INTERRUPT_CONNECTION_TYPE Type;
    ULONG Vector;
    UCHAR Irql;
    enum _KINTERRUPT_POLARITY Polarity;
    enum _KINTERRUPT_MODE Mode;
    struct _GROUP_AFFINITY TargetProcessors;
    struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
    struct {
        ULONG Gsiv;
        ULONG WakeInterrupt : 1;
        ULONG ReservedFlags : 31;
    } ControllerInput;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } XapicMessage;
    struct {
        struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } Hypertransport;
    struct {
        union _LARGE_INTEGER Address;
        ULONG DataPayload;
    } GenericMessage;
    struct {
        enum HAL_APIC_DESTINATION_MODE DestinationMode;
    } MessageRequest;
};

typedef struct _IOP_FILE_OBJECT_EXTENSION {
    ULONG FoExtFlags;
    PVOID FoExtPerTypeExtension[7];
    enum _IOP_PRIORITY_HINT FoIoPriorityHint;
};

typedef struct _IOP_IRP_EXTENSION {
    USHORT ExtensionFlags;
    USHORT Allocated : 1;
    USHORT PropagateId : 1;
    USHORT TimeStamped : 1;
    USHORT SpareBits : 13;
    USHORT TypesAllocated;
    UCHAR GenericExtension[4];
    PVOID VerifierContext;
    struct _GUID ActivityId;
    union _LARGE_INTEGER Timestamp;
};

typedef struct _IOP_IRP_EXTENSION_STATUS {
    ULONG Flags;
    ULONG ActivityId;
    ULONG IoTracking;
};

typedef struct _IOV_FORCED_PENDING_TRACE {
    struct _IRP *Irp;
    struct _ETHREAD *Thread;
    PVOID StackTrace[62];
};

typedef struct _IOV_IRP_TRACE {
    struct _IRP *Irp;
    struct _KTHREAD *Thread;
    SHORT KernelApcDisable;
    SHORT SpecialApcDisable;
    ULONG CombinedApcDisable;
    UCHAR Irql;
    PVOID StackTrace[12];
};

typedef struct _IO_CACHE_INFO {
    UCHAR CacheAttribute;
};

typedef struct _IO_CLIENT_EXTENSION {
    struct _IO_CLIENT_EXTENSION *NextExtension;
    PVOID ClientIdentificationAddress;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    SHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    struct _TXN_PARAMETER_BLOCK *TxnParameters;
};

typedef struct _IO_MINI_COMPLETION_PACKET_USER {
    struct _LIST_ENTRY ListEntry;
    ULONG PacketType;
    PVOID KeyContext;
    PVOID ApcContext;
    LONG IoStatus;
    ULONG IoStatusInformation;
    PVOID MiniPacketCallback;
    PVOID Context;
    UCHAR Allocated;
};

typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    enum _IO_PRIORITY_HINT IoPriority;
};

typedef struct _IO_REMOVE_LOCK {
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
};

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    UCHAR Removed;
    UCHAR Reserved[3];
    LONG IoCount;
    struct _KEVENT RemoveEvent;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
            USHORT AffinityPolicy;
            USHORT Group;
            enum _IRQ_PRIORITY PriorityPolicy;
            ULONG TargetedProcessors;
        } Interrupt;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
        struct {
            ULONG Length40;
            ULONG Alignment40;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory40;
        struct {
            ULONG Length48;
            ULONG Alignment48;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory48;
        struct {
            ULONG Length64;
            ULONG Alignment64;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    enum _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
    union {
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
        struct {
            ULONG Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } Read;
        struct {
            ULONG Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } Write;
        struct {
            ULONG Length;
            struct _UNICODE_STRING *FileName;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
        } QueryFile;
        struct {
            ULONG Length;
            enum _FILE_INFORMATION_CLASS FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;
        struct {
            ULONG Length;
        } SetEa;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } QueryVolume;
        struct {
            ULONG Length;
            enum _FSINFOCLASS FsInformationClass;
        } SetVolume;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
        struct {
            ULONG Length;
            PVOID StartSid;
            struct _FILE_GET_QUOTA_INFORMATION *SidList;
            ULONG SidListLength;
        } QueryQuota;
        struct {
            ULONG Length;
        } SetQuota;
        struct {
            enum _DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
        struct {
            UCHAR Lock;
        } SetLock;
        struct {
            enum BUS_QUERY_ID_TYPE IdType;
        } QueryId;
        struct {
            enum DEVICE_TEXT_TYPE DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        } UsageNotification;
        struct {
            enum _SYSTEM_POWER_STATE PowerState;
        } WaitWake;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
        struct {
            ULONG SystemContext;
            struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            enum _POWER_STATE_TYPE Type;
            union _POWER_STATE State;
            enum POWER_ACTION ShutdownType;
        } Power;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
        struct {
            ULONG ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG Information;
};

typedef struct _IO_TIMER {
    SHORT Type;
    SHORT TimerFlag;
    struct _LIST_ENTRY TimerList;
    PVOID TimerRoutine;
    PVOID Context;
    struct _DEVICE_OBJECT *DeviceObject;
};

typedef struct _IO_WORKITEM {
    struct _WORK_QUEUE_ITEM WorkItem;
    PVOID Routine;
    PVOID IoObject;
    PVOID Context;
    ULONG Type;
    struct _GUID ActivityId;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    struct _MDL *MdlAddress;
    ULONG Flags;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
    union {
        struct {
            PVOID UserApcRoutine;
            PVOID IssuingProcess;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
    union {
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
            PVOID IrpExtension;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _ISRDPCSTATS {
    ULONG64 IsrTime;
    ULONG64 IsrTimeStart;
    ULONG64 IsrCount;
    ULONG64 DpcTime;
    ULONG64 DpcTimeStart;
    ULONG64 DpcCount;
    UCHAR IsrActive;
    UCHAR Reserved[15];
};

typedef struct _JOBOBJECT_WAKE_FILTER {
    ULONG HighEdgeFilter;
    ULONG LowEdgeFilter;
};

typedef struct _JOB_ACCESS_STATE {
};

typedef struct _JOB_CPU_RATE_CONTROL {
};

typedef struct _JOB_NOTIFICATION_INFORMATION {
};

typedef struct _KAFFINITY_EX {
    USHORT Count;
    USHORT Size;
    ULONG Reserved;
    ULONG Bitmap[1];
};

typedef struct _KALPC_HANDLE_DATA {
    ULONG Flags;
    ULONG ObjectType;
    struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
};

typedef struct _KALPC_MESSAGE {
    struct _LIST_ENTRY Entry;
    struct _ALPC_PORT *PortQueue;
    struct _ALPC_PORT *OwnerPort;
    struct _ETHREAD *WaitingThread;
    union {
        struct {
            ULONG QueueType : 2;
            ULONG QueuePortType : 4;
            ULONG Canceled : 1;
            ULONG Ready : 1;
            ULONG ReleaseMessage : 1;
            ULONG SharedQuota : 1;
            ULONG ReplyWaitReply : 1;
            ULONG OwnerPortReference : 1;
            ULONG ReserveReference : 1;
            ULONG ReceiverReference : 1;
            ULONG ViewAttributeRetrieved : 1;
            ULONG InDispatch : 1;
        } s1;
        ULONG State;
    } u1;
    LONG SequenceNo;
    struct _EPROCESS *QuotaProcess;
    PVOID QuotaBlock;
    struct _ALPC_PORT *CancelSequencePort;
    struct _ALPC_PORT *CancelQueuePort;
    LONG CancelSequenceNo;
    struct _LIST_ENTRY CancelListEntry;
    struct _KALPC_RESERVE *Reserve;
    struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
    PVOID DataUserVa;
    struct _ALPC_COMMUNICATION_INFO *CommunicationInfo;
    struct _ALPC_PORT *ConnectionPort;
    struct _ETHREAD *ServerThread;
    PVOID WakeReference;
    PVOID ExtensionBuffer;
    ULONG ExtensionBufferSize;
    struct _PORT_MESSAGE PortMessage;
};

typedef struct _KALPC_MESSAGE_ATTRIBUTES {
    PVOID ClientContext;
    PVOID ServerContext;
    PVOID PortContext;
    PVOID CancelPortContext;
    struct _KALPC_SECURITY_DATA *SecurityData;
    struct _KALPC_VIEW *View;
    struct _KALPC_HANDLE_DATA *HandleData;
};

typedef struct _KALPC_REGION {
    struct _LIST_ENTRY RegionListEntry;
    struct _KALPC_SECTION *Section;
    ULONG Offset;
    ULONG Size;
    ULONG ViewSize;
    union {
        struct {
            ULONG Secure : 1;
        } s1;
    } u1;
    ULONG NumberOfViews;
    struct _LIST_ENTRY ViewListHead;
    struct _KALPC_VIEW *ReadOnlyView;
    struct _KALPC_VIEW *ReadWriteView;
};

typedef struct _KALPC_RESERVE {
    struct _ALPC_PORT *OwnerPort;
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID Handle;
    struct _KALPC_MESSAGE *Message;
    LONG Active;
};

typedef struct _KALPC_SECTION {
    PVOID SectionObject;
    ULONG Size;
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID SectionHandle;
    struct _EPROCESS *OwnerProcess;
    struct _ALPC_PORT *OwnerPort;
    union {
        struct {
            ULONG Internal : 1;
            ULONG Secure : 1;
        } s1;
    } u1;
    ULONG NumberOfRegions;
    struct _LIST_ENTRY RegionListHead;
};

typedef struct _KALPC_SECURITY_DATA {
    struct _ALPC_HANDLE_TABLE *HandleTable;
    PVOID ContextHandle;
    struct _EPROCESS *OwningProcess;
    struct _ALPC_PORT *OwnerPort;
    struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
    union {
        struct {
            ULONG Revoked : 1;
            ULONG Impersonated : 1;
        } s1;
    } u1;
};

typedef struct _KALPC_VIEW {
    struct _LIST_ENTRY ViewListEntry;
    struct _KALPC_REGION *Region;
    struct _ALPC_PORT *OwnerPort;
    struct _EPROCESS *OwnerProcess;
    PVOID Address;
    ULONG Size;
    PVOID SecureViewHandle;
    PVOID WriteAccessHandle;
    union {
        struct {
            ULONG WriteAccess : 1;
            ULONG AutoRelease : 1;
            ULONG ForceUnlink : 1;
        } s1;
    } u1;
    ULONG NumberOfOwnerMessages;
    struct _LIST_ENTRY ProcessViewListEntry;
};

typedef struct _KAPC {
    UCHAR Type;
    UCHAR SpareByte0;
    UCHAR Size;
    UCHAR SpareByte1;
    ULONG SpareLong0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID KernelRoutine;
    PVOID RundownRoutine;
    PVOID NormalRoutine;
    PVOID Reserved[3];
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KAPC_STATE {
    struct _LIST_ENTRY ApcListHead[2];
    struct _KPROCESS *Process;
    UCHAR InProgressFlags;
    UCHAR KernelApcInProgress : 1;
    UCHAR SpecialApcInProgress : 1;
    UCHAR KernelApcPending;
    UCHAR UserApcPending;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG Lock;
    UCHAR Busy;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    ULONG TargetInfoAsUlong;
    UCHAR Type;
    UCHAR Importance;
    USHORT Number;
    struct _SINGLE_LIST_ENTRY DpcListEntry;
    ULONG ProcessorHistory;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PVOID DpcData;
};

typedef struct _KDPC_DATA {
    struct _KDPC_LIST DpcList;
    ULONG DpcLock;
    LONG DpcQueueDepth;
    ULONG DpcCount;
    struct _KDPC *ActiveDpc;
};

typedef struct _KDPC_LIST {
    struct _SINGLE_LIST_ENTRY ListHead;
    struct _SINGLE_LIST_ENTRY *LastEntry;
};

typedef struct _KENLISTMENT {
    ULONG cookie;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID EnlistmentId;
    struct _KMUTANT Mutex;
    struct _LIST_ENTRY NextSameTx;
    struct _LIST_ENTRY NextSameRm;
    struct _KRESOURCEMANAGER *ResourceManager;
    struct _KTRANSACTION *Transaction;
    enum _KENLISTMENT_STATE State;
    ULONG Flags;
    ULONG NotificationMask;
    PVOID Key;
    ULONG KeyRefCount;
    PVOID RecoveryInformation;
    ULONG RecoveryInformationLength;
    PVOID DynamicNameInformation;
    ULONG DynamicNameInformationLength;
    struct _KTMNOTIFICATION_PACKET *FinalNotification;
    struct _KENLISTMENT *SupSubEnlistment;
    PVOID SupSubEnlHandle;
    PVOID SubordinateTxHandle;
    struct _GUID CrmEnlistmentEnId;
    struct _GUID CrmEnlistmentTmId;
    struct _GUID CrmEnlistmentRmId;
    ULONG NextHistory;
    struct _KENLISTMENT_HISTORY History[20];
};

typedef struct _KENLISTMENT_HISTORY {
    ULONG Notification;
    enum _KENLISTMENT_STATE NewState;
};

typedef struct _KENTROPY_TIMING_STATE {
    ULONG EntropyCount;
    ULONG Buffer[64];
    struct _KDPC Dpc;
    ULONG LastDeliveredBuffer;
};

typedef struct _KERNEL_STACK_SEGMENT {
    ULONG StackBase;
    ULONG StackLimit;
    ULONG KernelStack;
    ULONG InitialStack;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
};

typedef struct _KGATE {
    struct _DISPATCHER_HEADER Header;
};

typedef struct _KGDTENTRY {
    USHORT LimitLow;
    USHORT BaseLow;
    union {
        struct {
            UCHAR BaseMid;
            UCHAR Flags1;
            UCHAR Flags2;
            UCHAR BaseHi;
        } Bytes;
        struct {
            ULONG BaseMid : 8;
            ULONG Type : 5;
            ULONG Dpl : 2;
            ULONG Pres : 1;
            ULONG LimitHi : 4;
            ULONG Sys : 1;
            ULONG Reserved_0 : 1;
            ULONG Default_Big : 1;
            ULONG Granularity : 1;
            ULONG BaseHi : 8;
        } Bits;
    } HighWord;
};

typedef struct _KIDTENTRY {
    USHORT Offset;
    USHORT Selector;
    USHORT Access;
    USHORT ExtendedOffset;
};

typedef struct _KINTERRUPT {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY InterruptListEntry;
    PUCHAR ServiceRoutine;
    PUCHAR MessageServiceRoutine;
    ULONG MessageIndex;
    PVOID ServiceContext;
    ULONG SpinLock;
    ULONG TickCount;
    PULONG ActualLock;
    PVOID DispatchAddress;
    ULONG Vector;
    UCHAR Irql;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    UCHAR Connected;
    ULONG Number;
    UCHAR ShareVector;
    UCHAR EmulateActiveBoth;
    USHORT ActiveCount;
    LONG InternalState;
    enum _KINTERRUPT_MODE Mode;
    enum _KINTERRUPT_POLARITY Polarity;
    ULONG ServiceCount;
    ULONG DispatchCount;
    struct _KEVENT *PassiveEvent;
    PVOID DisconnectData;
    struct _KTHREAD *ServiceThread;
    struct _ISRDPCSTATS IsrDpcStats;
    struct _INTERRUPT_CONNECTION_DATA *ConnectionData;
};

typedef struct _KLOCK_ENTRY {
    struct _RTL_BALANCED_NODE TreeNode;
    struct _SINGLE_LIST_ENTRY FreeListEntry;
    PVOID ThreadUnsafe;
    UCHAR HeadNodeByte;
    UCHAR Reserved1[2];
    UCHAR AcquiredByte;
    struct _KLOCK_ENTRY_LOCK_STATE LockState;
    PVOID LockUnsafe;
    UCHAR WaitingAndBusyByte;
    UCHAR Reserved[2];
    UCHAR InTreeByte;
    PVOID SessionState;
    ULONG SessionId;
    struct _RTL_RB_TREE OwnerTree;
    struct _RTL_RB_TREE WaiterTree;
    CHAR CpuPriorityKey;
    ULONG EntryLock;
    USHORT AllBoosts;
    USHORT IoBoost : 1;
    USHORT CpuBoostsBitmap : 15;
    USHORT IoNormalPriorityWaiterCount : 15;
    USHORT IoPriorityBit : 1;
};

typedef struct _KLOCK_ENTRY_LOCK_STATE {
    ULONG Waiting : 1;
    ULONG Busy : 1;
    ULONG Spare : 29;
    ULONG InTree : 1;
    PVOID LockState;
    PVOID SessionState;
    ULONG SessionId;
};

typedef struct _KLOCK_QUEUE_HANDLE {
    struct _KSPIN_LOCK_QUEUE LockQueue;
    UCHAR OldIrql;
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
};

typedef struct _KNODE {
    ULONG DeepIdleSet;
    ULONG SharedReadyQueueLeaders;
    ULONG ProximityId;
    USHORT NodeNumber;
    USHORT PrimaryNodeNumber;
    UCHAR MaximumProcessors;
    struct _flags Flags;
    UCHAR Stride;
    UCHAR LowIndex;
    struct _GROUP_AFFINITY Affinity;
    ULONG IdleCpuSet;
    ULONG IdleSmtSet;
    ULONG NonParkedSet;
    ULONG Seed;
    ULONG Lowest;
    ULONG Highest;
    LONG ParkLock;
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    struct _EXCEPTION_REGISTRATION_RECORD *Used_ExceptionList;
    PVOID Used_StackBase;
    ULONG MxCsr;
    PVOID TssCopy;
    ULONG ContextSwitches;
    ULONG SetMemberCopy;
    PVOID Used_Self;
    struct _KPCR *SelfPcr;
    struct _KPRCB *Prcb;
    UCHAR Irql;
    ULONG IRR;
    ULONG IrrActive;
    ULONG IDR;
    PVOID KdVersionBlock;
    struct _KIDTENTRY *IDT;
    struct _KGDTENTRY *GDT;
    struct _KTSS *TSS;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG SetMember;
    ULONG StallScaleFactor;
    UCHAR SpareUnused;
    UCHAR Number;
    UCHAR Spare0;
    UCHAR SecondLevelCacheAssociativity;
    ULONG VdmAlert;
    ULONG KernelReserved[14];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG InterruptMode;
    UCHAR Spare1;
    ULONG KernelReserved2[17];
    struct _KPRCB PrcbData;
};

typedef struct _KPRCB {
    USHORT MinorVersion;
    USHORT MajorVersion;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    UCHAR LegacyNumber;
    UCHAR NestingLevel;
    USHORT BuildType;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    UCHAR CpuStepping;
    UCHAR CpuModel;
    struct _KPROCESSOR_STATE ProcessorState;
    struct _KNODE *ParentNode;
    PCHAR PriorityState;
    ULONG KernelReserved[14];
    ULONG HalReserved[16];
    ULONG CFlushSize;
    UCHAR CoresPerPhysicalProcessor;
    UCHAR LogicalProcessorsPerCore;
    UCHAR CpuVendor;
    UCHAR PrcbPad0[1];
    ULONG MHz;
    UCHAR GroupIndex;
    UCHAR Group;
    UCHAR PrcbPad05[2];
    ULONG GroupSetMember;
    ULONG Number;
    UCHAR ClockOwner;
    UCHAR PendingTickFlags;
    UCHAR PendingTick : 1;
    UCHAR PendingBackupTick : 1;
    UCHAR PrcbPad10[70];
    struct _KSPIN_LOCK_QUEUE LockQueue[17];
    ULONG InterruptCount;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG DpcTime;
    ULONG DpcTimeCount;
    ULONG InterruptTime;
    ULONG AdjustDpcThreshold;
    ULONG PageColor;
    UCHAR DebuggerSavedIRQL;
    UCHAR NodeColor;
    UCHAR PrcbPad20[6];
    ULONG NodeShiftedColor;
    ULONG SecondaryColorMask;
    ULONG DpcTimeLimit;
    ULONG PrcbPad21[3];
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadNotPossible;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    LONG MmSpinLockOrdering;
    LONG IoReadOperationCount;
    LONG IoWriteOperationCount;
    LONG IoOtherOperationCount;
    union _LARGE_INTEGER IoReadTransferCount;
    union _LARGE_INTEGER IoWriteTransferCount;
    union _LARGE_INTEGER IoOtherTransferCount;
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcLazyWriteHotSpots;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG CcLostDelayedWrites;
    ULONG CcFastReadResourceMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    ULONG KeAlignmentFixupCount;
    ULONG KeExceptionDispatchCount;
    ULONG KeSystemCalls;
    ULONG AvailableTime;
    ULONG PrcbPad22[2];
    struct _PP_LOOKASIDE_LIST PPLookasideList[16];
    struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
    struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
    struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
    ULONG PacketBarrier;
    LONG ReverseStall;
    PVOID IpiFrame;
    UCHAR PrcbPad3[52];
    PVOID CurrentPacket[3];
    ULONG TargetSet;
    PVOID WorkerRoutine;
    ULONG IpiFrozen;
    UCHAR PrcbPad4[40];
    ULONG RequestSummary;
    struct _KPRCB *SignalDone;
    UCHAR PrcbPad50[40];
    ULONG InterruptLastCount;
    ULONG InterruptRate;
    ULONG DeviceInterrupts;
    PVOID IsrDpcStats;
    struct _KDPC_DATA DpcData[2];
    PVOID DpcStack;
    LONG MaximumDpcQueueDepth;
    ULONG DpcRequestRate;
    ULONG MinimumDpcRate;
    ULONG DpcLastCount;
    ULONG PrcbLock;
    struct _KGATE DpcGate;
    UCHAR ThreadDpcEnable;
    UCHAR QuantumEnd;
    UCHAR DpcRoutineActive;
    UCHAR IdleSchedule;
    LONG DpcRequestSummary;
    SHORT DpcRequestSlot[2];
    SHORT NormalDpcState;
    SHORT ThreadDpcState;
    ULONG DpcNormalProcessingActive : 1;
    ULONG DpcNormalProcessingRequested : 1;
    ULONG DpcNormalThreadSignal : 1;
    ULONG DpcNormalTimerExpiration : 1;
    ULONG DpcNormalDpcPresent : 1;
    ULONG DpcNormalLocalInterrupt : 1;
    ULONG DpcNormalSpare : 10;
    ULONG DpcThreadActive : 1;
    ULONG DpcThreadRequested : 1;
    ULONG DpcThreadSpare : 14;
    ULONG LastTimerHand;
    ULONG LastTick;
    ULONG PeriodicCount;
    ULONG PeriodicBias;
    ULONG ClockInterrupts;
    ULONG ReadyScanTick;
    UCHAR GroupSchedulingOverQuota;
    UCHAR PrcbPad41[3];
    struct _KTIMER_TABLE TimerTable;
    struct _KDPC CallDpc;
    LONG ClockKeepAlive;
    UCHAR PrcbPad6[4];
    LONG DpcWatchdogPeriod;
    LONG DpcWatchdogCount;
    LONG KeSpinLockOrdering;
    ULONG PrcbPad70[1];
    ULONG QueueIndex;
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
    ULONG ReadySummary;
    LONG AffinitizedSelectionMask;
    ULONG WaitLock;
    struct _LIST_ENTRY WaitListHead;
    ULONG ScbOffset;
    ULONG64 StartCycles;
    ULONG64 GenerationTarget;
    ULONG64 CycleTime;
    ULONG64 AffinitizedCycles;
    ULONG HighCycleTime;
    ULONG PrcbPad71;
    struct _LIST_ENTRY DispatcherReadyListHead[32];
    PVOID ChainedInterruptList;
    LONG LookasideIrpFloat;
    struct _RTL_RB_TREE ScbQueue;
    struct _LIST_ENTRY ScbList;
    LONG MmPageFaultCount;
    LONG MmCopyOnWriteCount;
    LONG MmTransitionCount;
    LONG MmCacheTransitionCount;
    LONG MmDemandZeroCount;
    LONG MmPageReadCount;
    LONG MmPageReadIoCount;
    LONG MmCacheReadCount;
    LONG MmCacheIoCount;
    LONG MmDirtyPagesWriteCount;
    LONG MmDirtyWriteIoCount;
    LONG MmMappedPagesWriteCount;
    LONG MmMappedWriteIoCount;
    ULONG CachedCommit;
    ULONG CachedResidentAvailable;
    PVOID HyperPte;
    UCHAR PrcbPad8[4];
    UCHAR VendorString[13];
    UCHAR InitialApicId;
    UCHAR LogicalProcessorsPerPhysicalProcessor;
    UCHAR PrcbPad9[5];
    ULONG FeatureBits;
    union _LARGE_INTEGER UpdateSignature;
    ULONG64 IsrTime;
    ULONG PrcbPad90[2];
    struct _PROCESSOR_POWER_STATE PowerState;
    ULONG PrcbPad91[13];
    struct _KDPC DpcWatchdogDpc;
    struct _KTIMER DpcWatchdogTimer;
    union _SLIST_HEADER HypercallPageList;
    PVOID HypercallPageVirtual;
    PVOID VirtualApicAssist;
    PULONG64 StatisticsPage;
    struct _CACHE_DESCRIPTOR Cache[5];
    ULONG CacheCount;
    struct _KAFFINITY_EX PackageProcessorSet;
    ULONG SharedReadyQueueMask;
    struct _KSHARED_READY_QUEUE *SharedReadyQueue;
    ULONG CoreProcessorSet;
    ULONG ScanSiblingMask;
    ULONG LLCMask;
    ULONG CacheProcessorMask[5];
    ULONG ScanSiblingIndex;
    PVOID WheaInfo;
    PVOID EtwSupport;
    union _SLIST_HEADER InterruptObjectPool;
    ULONG SharedReadyQueueOffset;
    ULONG PrcbPad92[2];
    ULONG PteBitCache;
    ULONG PteBitOffset;
    ULONG PrcbPad93;
    struct _PROCESSOR_PROFILE_CONTROL_AREA *ProcessorProfileControlArea;
    PVOID ProfileEventIndexAddress;
    struct _KDPC TimerExpirationDpc;
    struct _SYNCH_COUNTERS SynchCounters;
    struct _FILESYSTEM_DISK_COUNTERS FsCounters;
    struct _CONTEXT *Context;
    ULONG ContextFlagsInit;
    struct _XSAVE_AREA *ExtendedState;
    struct _KENTROPY_TIMING_STATE EntropyTimingState;
    PVOID IsrStack;
    struct _KINTERRUPT *VectorToInterruptObject[208];
    struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
    struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
    struct _KDPC AbDpc;
};

typedef struct _KPRIQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead[32];
    LONG CurrentCount[32];
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
};

typedef struct _KPROCESS {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY ProfileListHead;
    ULONG DirectoryTableBase;
    struct _KGDTENTRY LdtDescriptor;
    struct _KIDTENTRY Int21Descriptor;
    struct _LIST_ENTRY ThreadListHead;
    ULONG ProcessLock;
    struct _KAFFINITY_EX Affinity;
    struct _LIST_ENTRY ReadyListHead;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
    struct _KAFFINITY_EX ActiveProcessors;
    LONG AutoAlignment : 1;
    LONG DisableBoost : 1;
    LONG DisableQuantum : 1;
    LONG AffinitySet : 1;
    ULONG DeepFreeze : 1;
    ULONG TimerVirtualization : 1;
    ULONG CheckStackExtents : 1;
    ULONG ActiveGroupsMask : 1;
    LONG ReservedFlags : 24;
    LONG ProcessFlags;
    CHAR BasePriority;
    CHAR QuantumReset;
    UCHAR Visited;
    union _KEXECUTE_OPTIONS Flags;
    ULONG ThreadSeed[1];
    USHORT IdealNode[1];
    USHORT IdealGlobalNode;
    USHORT Spare1;
    USHORT IopmOffset;
    struct _KSCHEDULING_GROUP *SchedulingGroup;
    union _KSTACK_COUNT StackCount;
    struct _LIST_ENTRY ProcessListEntry;
    ULONG64 CycleTime;
    ULONG64 ContextSwitches;
    ULONG FreezeCount;
    ULONG KernelTime;
    ULONG UserTime;
    PVOID VdmTrapcHandler;
};

typedef struct _KPROCESSOR_STATE {
    struct _CONTEXT ContextFrame;
    struct _KSPECIAL_REGISTERS SpecialRegisters;
};

typedef struct _KQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead;
    ULONG CurrentCount;
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
};

typedef struct _KRESOURCEMANAGER {
    struct _KEVENT NotificationAvailable;
    ULONG cookie;
    enum _KRESOURCEMANAGER_STATE State;
    ULONG Flags;
    struct _KMUTANT Mutex;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID RmId;
    struct _KQUEUE NotificationQueue;
    struct _KMUTANT NotificationMutex;
    struct _LIST_ENTRY EnlistmentHead;
    ULONG EnlistmentCount;
    PLONG NotificationRoutine;
    PVOID Key;
    struct _LIST_ENTRY ProtocolListHead;
    struct _LIST_ENTRY PendingPropReqListHead;
    struct _LIST_ENTRY CRMListEntry;
    struct _KTM *Tm;
    struct _UNICODE_STRING Description;
    struct _KTMOBJECT_NAMESPACE Enlistments;
    struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
};

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING {
    struct _LIST_ENTRY NotificationListHead;
    PVOID Port;
    ULONG Key;
    struct _EPROCESS *BindingProcess;
};

typedef struct _KSCB {
    ULONG64 GenerationCycles;
    ULONG64 UnderQuotaCycleTarget;
    ULONG64 RankCycleTarget;
    ULONG64 LongTermCycles;
    ULONG64 LastReportedCycles;
    ULONG64 OverQuotaHistory;
    ULONG64 ReadyTime;
    ULONG64 InsertTime;
    struct _LIST_ENTRY PerProcessorList;
    struct _RTL_BALANCED_NODE QueueNode;
    UCHAR Inserted : 1;
    UCHAR OverQuota : 1;
    UCHAR HardCap : 1;
    UCHAR RankBias : 1;
    UCHAR Spare1 : 4;
    UCHAR Spare2;
    USHORT ReadySummary;
    ULONG Rank;
    struct _LIST_ENTRY ReadyListHead[16];
};

typedef struct _KSCHEDULING_GROUP {
    USHORT Value;
    UCHAR Type;
    UCHAR HardCap;
    ULONG RelativeWeight;
    ULONG64 QueryHistoryTimeStamp;
    LONG64 NotificationCycles;
    struct _LIST_ENTRY SchedulingGroupList;
    struct _KDPC *NotificationDpc;
    struct _KSCB PerProcessor[1];
};

typedef struct _KSECONDARY_IDT_ENTRY {
    ULONG SpinLock;
    struct _KEVENT ConnectLock;
    UCHAR LineMasked;
    struct _KINTERRUPT *InterruptList;
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
};

typedef struct _KSHARED_READY_QUEUE {
    ULONG Lock;
    ULONG ReadySummary;
    struct _LIST_ENTRY ReadyListHead[32];
    CHAR RunningSummary[32];
    ULONG Span;
    ULONG LowProcIndex;
    ULONG QueueIndex;
    ULONG ProcCount;
    ULONG Affinity;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG Cr0;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONG KernelDr0;
    ULONG KernelDr1;
    ULONG KernelDr2;
    ULONG KernelDr3;
    ULONG KernelDr6;
    ULONG KernelDr7;
    struct _DESCRIPTOR Gdtr;
    struct _DESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG64 Xcr0;
    ULONG ExceptionList;
    ULONG Reserved[3];
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG Lock;
};

typedef struct _KSTACK_CONTROL {
    ULONG StackBase;
    ULONG ActualLimit;
    ULONG StackExpansion : 1;
    struct _KTRAP_FRAME *PreviousTrapFrame;
    PVOID PreviousExceptionList;
    struct _KERNEL_STACK_SEGMENT Previous;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTHREAD {
    struct _DISPATCHER_HEADER Header;
    PVOID SListFaultAddress;
    ULONG64 QuantumTarget;
    PVOID InitialStack;
    PVOID StackLimit;
    PVOID StackBase;
    ULONG ThreadLock;
    ULONG64 CycleTime;
    ULONG HighCycleTime;
    PVOID ServiceTable;
    ULONG CurrentRunTime;
    ULONG ExpectedRunTime;
    PVOID KernelStack;
    struct _XSAVE_FORMAT *StateSaveArea;
    struct _KSCHEDULING_GROUP *SchedulingGroup;
    union _KWAIT_STATUS_REGISTER WaitRegister;
    UCHAR Running;
    UCHAR Alerted[2];
    ULONG KernelStackResident : 1;
    ULONG ReadyTransition : 1;
    ULONG ProcessReadyQueue : 1;
    ULONG WaitNext : 1;
    ULONG SystemAffinityActive : 1;
    ULONG Alertable : 1;
    ULONG UserStackWalkActive : 1;
    ULONG ApcInterruptRequest : 1;
    ULONG QuantumEndMigrate : 1;
    ULONG UmsDirectedSwitchEnable : 1;
    ULONG TimerActive : 1;
    ULONG SystemThread : 1;
    ULONG ProcessDetachActive : 1;
    ULONG CalloutActive : 1;
    ULONG ScbReadyQueue : 1;
    ULONG ApcQueueable : 1;
    ULONG ReservedStackInUse : 1;
    ULONG UmsPerformingSyscall : 1;
    ULONG ApcPendingReload : 1;
    ULONG Reserved : 13;
    LONG MiscFlags;
    ULONG AutoAlignment : 1;
    ULONG DisableBoost : 1;
    ULONG UserAffinitySet : 1;
    ULONG AlertedByThreadId : 1;
    ULONG QuantumDonation : 1;
    ULONG EnableStackSwap : 1;
    ULONG GuiThread : 1;
    ULONG DisableQuantum : 1;
    ULONG ChargeOnlySchedulingGroup : 1;
    ULONG DeferPreemption : 1;
    ULONG QueueDeferPreemption : 1;
    ULONG ForceDeferSchedule : 1;
    ULONG SharedReadyQueueAffinity : 1;
    ULONG FreezeCount : 1;
    ULONG TerminationApcRequest : 1;
    ULONG AutoBoostEntriesExhausted : 1;
    ULONG EtwStackTraceApcInserted : 8;
    ULONG ReservedFlags : 8;
    LONG ThreadFlags;
    ULONG Spare0;
    ULONG SystemCallNumber;
    PVOID FirstArgument;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KAPC_STATE ApcState;
    UCHAR ApcStateFill[23];
    CHAR Priority;
    ULONG UserIdealProcessor;
    ULONG ContextSwitches;
    UCHAR State;
    CHAR NpxState;
    UCHAR WaitIrql;
    CHAR WaitMode;
    LONG WaitStatus;
    struct _KWAIT_BLOCK *WaitBlockList;
    struct _LIST_ENTRY WaitListEntry;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
    struct _DISPATCHER_HEADER *Queue;
    PVOID Teb;
    ULONG64 RelativeTimerBias;
    struct _KTIMER Timer;
    struct _KWAIT_BLOCK WaitBlock[4];
    UCHAR WaitBlockFill8[20];
    struct _KTHREAD_COUNTERS *ThreadCounters;
    UCHAR WaitBlockFill9[44];
    struct _XSTATE_SAVE *XStateSave;
    UCHAR WaitBlockFill10[68];
    PVOID Win32Thread;
    UCHAR WaitBlockFill11[88];
    ULONG WaitTime;
    SHORT KernelApcDisable;
    SHORT SpecialApcDisable;
    ULONG CombinedApcDisable;
    struct _LIST_ENTRY QueueListEntry;
    ULONG NextProcessor;
    ULONG NextProcessorNumber : 31;
    ULONG SharedReadyQueue : 1;
    LONG QueuePriority;
    struct _KPROCESS *Process;
    struct _GROUP_AFFINITY UserAffinity;
    UCHAR UserAffinityFill[6];
    CHAR PreviousMode;
    CHAR BasePriority;
    CHAR PriorityDecrement;
    UCHAR ForegroundBoost : 4;
    UCHAR UnusualBoost : 4;
    UCHAR Preempted;
    UCHAR AdjustReason;
    CHAR AdjustIncrement;
    struct _GROUP_AFFINITY Affinity;
    UCHAR AffinityFill[6];
    UCHAR ApcStateIndex;
    UCHAR WaitBlockCount;
    ULONG IdealProcessor;
    struct _KAPC_STATE *ApcStatePointer[2];
    struct _KAPC_STATE SavedApcState;
    UCHAR SavedApcStateFill[23];
    UCHAR WaitReason;
    CHAR SuspendCount;
    CHAR Saturation;
    USHORT SListFaultCount;
    struct _KAPC SchedulerApc;
    UCHAR SchedulerApcFill0[1];
    UCHAR ResourceIndex;
    UCHAR SchedulerApcFill1[3];
    UCHAR QuantumReset;
    UCHAR SchedulerApcFill2[4];
    ULONG KernelTime;
    UCHAR SchedulerApcFill3[36];
    struct _KPRCB *WaitPrcb;
    UCHAR SchedulerApcFill4[40];
    PVOID LegoData;
    UCHAR SchedulerApcFill5[47];
    UCHAR CallbackNestingLevel;
    ULONG UserTime;
    struct _KEVENT SuspendEvent;
    struct _LIST_ENTRY ThreadListEntry;
    struct _LIST_ENTRY MutantListHead;
    struct _SINGLE_LIST_ENTRY LockEntriesFreeList;
    struct _KLOCK_ENTRY LockEntries[6];
    struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
    struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
    UCHAR PriorityFloorCounts[16];
    ULONG PriorityFloorSummary;
    LONG AbCompletedIoBoostCount;
    SHORT AbReferenceCount;
    UCHAR AbFreeEntryCount;
    UCHAR AbWaitEntryCount;
    ULONG ForegroundLossTime;
    struct _LIST_ENTRY GlobalForegroundListEntry;
    struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
    ULONG InGlobalForegroundList;
};

typedef struct _KTHREAD_COUNTERS {
    ULONG64 WaitReasonBitMap;
    struct _THREAD_PERFORMANCE_DATA *UserData;
    ULONG Flags;
    ULONG ContextSwitches;
    ULONG64 CycleTimeBias;
    ULONG64 HardwareCounters;
    struct _COUNTER_READING HwCounter[16];
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    ULONG Period;
};

typedef struct _KTIMER_TABLE {
    struct _KTIMER *TimerExpiry[16];
    struct _KTIMER_TABLE_ENTRY TimerEntries[256];
};

typedef struct _KTIMER_TABLE_ENTRY {
    ULONG Lock;
    struct _LIST_ENTRY Entry;
    union _ULARGE_INTEGER Time;
};

typedef struct _KTM {
    ULONG cookie;
    struct _KMUTANT Mutex;
    enum KTM_STATE State;
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
    struct _GUID TmIdentity;
    ULONG Flags;
    ULONG VolatileFlags;
    struct _UNICODE_STRING LogFileName;
    struct _FILE_OBJECT *LogFileObject;
    PVOID MarshallingContext;
    PVOID LogManagementContext;
    struct _KTMOBJECT_NAMESPACE Transactions;
    struct _KTMOBJECT_NAMESPACE ResourceManagers;
    struct _KMUTANT LsnOrderedMutex;
    struct _LIST_ENTRY LsnOrderedList;
    union _LARGE_INTEGER CommitVirtualClock;
    struct _FAST_MUTEX CommitVirtualClockMutex;
    union _CLS_LSN BaseLsn;
    union _CLS_LSN CurrentReadLsn;
    union _CLS_LSN LastRecoveredLsn;
    PVOID TmRmHandle;
    struct _KRESOURCEMANAGER *TmRm;
    struct _KEVENT LogFullNotifyEvent;
    struct _WORK_QUEUE_ITEM CheckpointWorkItem;
    union _CLS_LSN CheckpointTargetLsn;
    struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
    struct _ERESOURCE LogWriteResource;
    ULONG LogFlags;
    LONG LogFullStatus;
    LONG RecoveryStatus;
    union _CLS_LSN LastCheckBaseLsn;
    struct _LIST_ENTRY RestartOrderedList;
    struct _WORK_QUEUE_ITEM OfflineWorkItem;
};

typedef struct _KTMNOTIFICATION_PACKET {
};

typedef struct _KTMOBJECT_NAMESPACE {
    struct _RTL_AVL_TABLE Table;
    struct _KMUTANT Mutex;
    USHORT LinksOffset;
    USHORT GuidOffset;
    UCHAR Expired;
};

typedef struct _KTMOBJECT_NAMESPACE_LINK {
    struct _RTL_BALANCED_LINKS Links;
    UCHAR Expired;
};

typedef struct _KTRANSACTION {
    struct _KEVENT OutcomeEvent;
    ULONG cookie;
    struct _KMUTANT Mutex;
    struct _KTRANSACTION *TreeTx;
    struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
    struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
    struct _GUID UOW;
    enum _KTRANSACTION_STATE State;
    ULONG Flags;
    struct _LIST_ENTRY EnlistmentHead;
    ULONG EnlistmentCount;
    ULONG RecoverableEnlistmentCount;
    ULONG PrePrepareRequiredEnlistmentCount;
    ULONG PrepareRequiredEnlistmentCount;
    ULONG OutcomeRequiredEnlistmentCount;
    ULONG PendingResponses;
    struct _KENLISTMENT *SuperiorEnlistment;
    union _CLS_LSN LastLsn;
    struct _LIST_ENTRY PromotedEntry;
    struct _KTRANSACTION *PromoterTransaction;
    PVOID PromotePropagation;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    union _LARGE_INTEGER Timeout;
    struct _UNICODE_STRING Description;
    struct _KTHREAD *RollbackThread;
    struct _WORK_QUEUE_ITEM RollbackWorkItem;
    struct _KDPC RollbackDpc;
    struct _KTIMER RollbackTimer;
    struct _LIST_ENTRY LsnOrderedEntry;
    enum _KTRANSACTION_OUTCOME Outcome;
    struct _KTM *Tm;
    LONG64 CommitReservation;
    struct _KTRANSACTION_HISTORY TransactionHistory[10];
    ULONG TransactionHistoryCount;
    PVOID DTCPrivateInformation;
    ULONG DTCPrivateInformationLength;
    struct _KMUTANT DTCPrivateInformationMutex;
    PVOID PromotedTxSelfHandle;
    ULONG PendingPromotionCount;
    struct _KEVENT PromotionCompletedEvent;
};

typedef struct _KTRANSACTION_HISTORY {
    enum {
        KTMOH_CommitTransaction_Result = 1,
        KTMOH_RollbackTransaction_Result = 2
    } RecordType;
    ULONG Payload;
};

typedef struct _KTRAP_FRAME {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    USHORT TempSegCs;
    UCHAR Logging;
    UCHAR FrameType;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    UCHAR PreviousPreviousMode;
    UCHAR EntropyQueueDpc;
    UCHAR Reserved[2];
    ULONG MxCsr;
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _KTSS {
    USHORT Backlink;
    USHORT Reserved0;
    ULONG Esp0;
    USHORT Ss0;
    USHORT Reserved1;
    ULONG NotUsed1[4];
    ULONG CR3;
    ULONG Eip;
    ULONG EFlags;
    ULONG Eax;
    ULONG Ecx;
    ULONG Edx;
    ULONG Ebx;
    ULONG Esp;
    ULONG Ebp;
    ULONG Esi;
    ULONG Edi;
    USHORT Es;
    USHORT Reserved2;
    USHORT Cs;
    USHORT Reserved3;
    USHORT Ss;
    USHORT Reserved4;
    USHORT Ds;
    USHORT Reserved5;
    USHORT Fs;
    USHORT Reserved6;
    USHORT Gs;
    USHORT Reserved7;
    USHORT LDT;
    USHORT Reserved8;
    USHORT Flags;
    USHORT IoMapBase;
    struct _KiIoAccessMap IoMaps[1];
    UCHAR IntDirectionMap[32];
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONG64 RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    LONG TimeZoneBiasStamp;
    ULONG Reserved2;
    enum _NT_PRODUCT_TYPE NtProductType;
    UCHAR ProductTypeIsValid;
    UCHAR Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG AltArchitecturePad[1];
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
    UCHAR MitigationPolicies;
    UCHAR NXSupportPolicy : 2;
    UCHAR SEHValidationPolicy : 2;
    UCHAR CurDirDevicesSkippedForDlls : 2;
    UCHAR Reserved : 2;
    UCHAR Reserved6[2];
    ULONG ActiveConsoleId;
    ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    UCHAR SafeBootMode;
    UCHAR Reserved12[3];
    ULONG SharedDataFlags;
    ULONG DbgErrorPortPresent : 1;
    ULONG DbgElevationEnabled : 1;
    ULONG DbgVirtEnabled : 1;
    ULONG DbgInstallerDetectEnabled : 1;
    ULONG DbgLkgEnabled : 1;
    ULONG DbgDynProcessorEnabled : 1;
    ULONG DbgConsoleBrokerEnabled : 1;
    ULONG DbgSecureBootEnabled : 1;
    ULONG SpareBits : 24;
    ULONG DataFlagsPad[1];
    ULONG64 TestRetInstruction;
    LONG64 QpcFrequency;
    ULONG64 SystemCallPad[3];
    struct _KSYSTEM_TIME TickCount;
    ULONG64 TickCountQuad;
    ULONG ReservedTickCountOverlay[3];
    ULONG TickCountPad[1];
    ULONG Cookie;
    ULONG CookiePad[1];
    LONG64 ConsoleSessionForegroundProcessId;
    ULONG64 TimeUpdateLock;
    ULONG64 BaselineSystemTimeQpc;
    ULONG64 BaselineInterruptTimeQpc;
    ULONG64 QpcSystemTimeIncrement;
    ULONG64 QpcInterruptTimeIncrement;
    ULONG QpcSystemTimeIncrement32;
    ULONG QpcInterruptTimeIncrement32;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    UCHAR Reserved8[14];
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONG64 Reserved4;
    ULONG64 InterruptTimeBias;
    ULONG64 QpcBias;
    ULONG ActiveProcessorCount;
    UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    USHORT QpcData;
    UCHAR QpcBypassEnabled;
    UCHAR QpcShift;
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    struct _XSTATE_CONFIGURATION XState;
};

typedef struct _KWAIT_BLOCK {
    struct _LIST_ENTRY WaitListEntry;
    UCHAR WaitType;
    UCHAR BlockState;
    USHORT WaitKey;
    struct _KTHREAD *Thread;
    struct _KQUEUE *NotificationQueue;
    PVOID Object;
    PVOID SparePtr;
};

typedef struct _KiIoAccessMap {
    UCHAR DirectionMap[32];
    UCHAR IoMap[8196];
};

typedef struct _LAZY_WRITER {
    struct _KDPC ScanDpc;
    struct _KTIMER ScanTimer;
    UCHAR ScanActive;
    UCHAR OtherWork;
    UCHAR PendingTeardownScan;
    UCHAR PendingPeriodicScan;
    UCHAR PendingLowMemoryScan;
    UCHAR PendingPowerScan;
    UCHAR PendingCoalescingFlushScan;
};

typedef struct _LDRP_CSLIST {
    struct _SINGLE_LIST_ENTRY *Tail;
};

typedef struct _LDRP_DLL_SNAP_CONTEXT {
};

typedef struct _LDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    struct _LIST_ENTRY InMemoryOrderLinks;
    struct _LIST_ENTRY InInitializationOrderLinks;
    struct _LIST_ENTRY InProgressLinks;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    UCHAR FlagGroup[4];
    ULONG Flags;
    ULONG PackagedBinary : 1;
    ULONG MarkedForRemoval : 1;
    ULONG ImageDll : 1;
    ULONG LoadNotificationsSent : 1;
    ULONG TelemetryEntryProcessed : 1;
    ULONG ProcessStaticImport : 1;
    ULONG InLegacyLists : 1;
    ULONG InIndexes : 1;
    ULONG ShimDll : 1;
    ULONG InExceptionTable : 1;
    ULONG ReservedFlags1 : 2;
    ULONG LoadInProgress : 1;
    ULONG ReservedFlags2 : 1;
    ULONG EntryProcessed : 1;
    ULONG ReservedFlags3 : 3;
    ULONG DontCallForThreads : 1;
    ULONG ProcessAttachCalled : 1;
    ULONG ProcessAttachFailed : 1;
    ULONG CorDeferredValidate : 1;
    ULONG CorImage : 1;
    ULONG DontRelocate : 1;
    ULONG CorILOnly : 1;
    ULONG ReservedFlags5 : 3;
    ULONG Redirected : 1;
    ULONG ReservedFlags6 : 2;
    ULONG CompatDatabaseProcessed : 1;
    USHORT ObsoleteLoadCount;
    USHORT TlsIndex;
    struct _LIST_ENTRY HashLinks;
    ULONG TimeDateStamp;
    struct _ACTIVATION_CONTEXT *EntryPointActivationContext;
    PVOID Spare;
    struct _LDR_DDAG_NODE *DdagNode;
    struct _LIST_ENTRY NodeModuleLink;
    struct _LDRP_DLL_SNAP_CONTEXT *SnapContext;
    PVOID ParentDllBase;
    PVOID SwitchBackContext;
    struct _RTL_BALANCED_NODE BaseAddressIndexNode;
    struct _RTL_BALANCED_NODE MappingInfoIndexNode;
    ULONG OriginalBase;
    union _LARGE_INTEGER LoadTime;
    ULONG BaseNameHashValue;
    enum _LDR_DLL_LOAD_REASON LoadReason;
    ULONG ImplicitPathOptions;
};

typedef struct _LDR_DDAG_NODE {
    struct _LIST_ENTRY Modules;
    struct _LDR_SERVICE_TAG_RECORD *ServiceTagList;
    ULONG LoadCount;
    ULONG ReferenceCount;
    ULONG DependencyCount;
    struct _LDRP_CSLIST Dependencies;
    struct _SINGLE_LIST_ENTRY RemovalLink;
    struct _LDRP_CSLIST IncomingDependencies;
    enum _LDR_DDAG_STATE State;
    struct _SINGLE_LIST_ENTRY CondenseLink;
    ULONG PreorderNumber;
    ULONG LowestLink;
};

typedef struct _LDR_SERVICE_TAG_RECORD {
    struct _LDR_SERVICE_TAG_RECORD *Next;
    ULONG ServiceTag;
};

typedef struct _LEARNING_MODE_DATA {
    ULONG Settings;
    UCHAR Enabled;
    UCHAR PermissiveModeEnabled;
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOCK_HEADER {
    struct _RTL_AVL_TREE LockTree;
    ULONG Count;
    ULONG Lock;
    ULONG Valid;
};

typedef struct _LOCK_TRACKER {
    struct _RTL_BALANCED_NODE LockTrackerNode;
    struct _MDL *Mdl;
    PVOID StartVa;
    ULONG Count;
    ULONG Offset;
    ULONG Length;
    ULONG Page;
    PVOID StackTrace[8];
    ULONG Who;
    struct _EPROCESS *Process;
};

typedef struct _LOGGED_STREAM_CALLBACK_V1 {
    PVOID LogHandle;
    PVOID FlushToLsnRoutine;
};

typedef struct _LOGGED_STREAM_CALLBACK_V2 {
    struct _LOG_HANDLE_CONTEXT *LogHandleContext;
};

typedef struct _LOG_HANDLE_CONTEXT {
    PVOID LogHandle;
    PVOID FlushToLsnRoutine;
    PVOID QueryLogHandleInfoRoutine;
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
    struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
    ULONG AdditionalPagesToWrite;
    ULONG CcLWScanDPThreshold;
    union _LARGE_INTEGER LargestLsnForCurrentLWScan;
    struct _FILE_OBJECT *RelatedFileObject;
    ULONG LargestLsnFileObjectKey;
    union _LARGE_INTEGER LastLWTimeStamp;
    ULONG Flags;
};

typedef struct _LOOKASIDE_LIST_EX {
    struct _GENERAL_LOOKASIDE_POOL L;
};

typedef struct _LPCP_MESSAGE {
    struct _LIST_ENTRY Entry;
    struct _SINGLE_LIST_ENTRY FreeEntry;
    ULONG Reserved0;
    PVOID SenderPort;
    struct _ETHREAD *RepliedToThread;
    PVOID PortContext;
    struct _PORT_MESSAGE Request;
};

typedef struct _LPCP_NONPAGED_PORT_QUEUE {
    struct _KSEMAPHORE Semaphore;
    struct _LPCP_PORT_OBJECT *BackPointer;
};

typedef struct _LPCP_PORT_OBJECT {
    struct _LPCP_PORT_OBJECT *ConnectionPort;
    struct _LPCP_PORT_OBJECT *ConnectedPort;
    struct _LPCP_PORT_QUEUE MsgQueue;
    struct _CLIENT_ID Creator;
    PVOID ClientSectionBase;
    PVOID ServerSectionBase;
    PVOID PortContext;
    struct _ETHREAD *ClientThread;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
    struct _LIST_ENTRY LpcReplyChainHead;
    struct _LIST_ENTRY LpcDataInfoChainHead;
    struct _EPROCESS *ServerProcess;
    struct _EPROCESS *MappingProcess;
    USHORT MaxMessageLength;
    USHORT MaxConnectionInfoLength;
    ULONG Flags;
    struct _KEVENT WaitEvent;
};

typedef struct _LPCP_PORT_QUEUE {
    struct _LPCP_NONPAGED_PORT_QUEUE *NonPagedPortQueue;
    struct _KSEMAPHORE *Semaphore;
    struct _LIST_ENTRY ReceiveHead;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _M128A {
    ULONG64 Low;
    LONG64 High;
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MAPPED_FILE_SEGMENT {
    struct _CONTROL_AREA *ControlArea;
    ULONG TotalNumberOfPtes;
    struct _SEGMENT_FLAGS SegmentFlags;
    ULONG NumberOfCommittedPages;
    ULONG64 SizeOfSegment;
    struct _MMEXTEND_INFO *ExtendInfo;
    PVOID BasedAddress;
    struct _EX_PUSH_LOCK SegmentLock;
};

typedef struct _MBCB {
    SHORT NodeTypeCode;
    SHORT NodeIsInZone;
    ULONG PagesToWrite;
    ULONG DirtyPages;
    ULONG Reserved;
    struct _LIST_ENTRY BitmapRanges;
    LONG64 ResumeWritePage;
    LONG64 MostRecentlyDirtiedPage;
    struct _BITMAP_RANGE BitmapRange1;
    struct _BITMAP_RANGE BitmapRange2;
    struct _BITMAP_RANGE BitmapRange3;
};

typedef struct _MCGEN_TRACE_CONTEXT {
    ULONG64 RegistrationHandle;
    ULONG64 Logger;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
    ULONG Flags;
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserve;
    USHORT EnableBitsCount;
    PULONG EnableBitMask;
    PULONG64 EnableKeyWords;
    PUCHAR EnableLevel;
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR {
    struct _LIST_ENTRY ListEntry;
    enum _TYPE_OF_MEMORY MemoryType;
    ULONG BasePage;
    ULONG PageCount;
};

typedef struct _MI_ACTIVE_WSLE_LISTHEAD {
    ULONG Flink;
    ULONG Blink;
};

typedef struct _MI_CACHED_PTE {
    ULONG GlobalTimeStamp;
    ULONG PteIndex;
    LONG64 Long;
};

typedef struct _MI_CFG_BITMAP_INFO {
    PVOID BaseAddress;
    ULONG RegionSize;
    PVOID VadBaseAddress;
    struct _MMVAD *BitmapVad;
};

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK {
    struct _MI_CONTROL_AREA_WAIT_BLOCK *Next;
    ULONG WaitReason;
    ULONG WaitResponse;
    struct _KGATE Gate;
};

typedef struct _MI_EXTRA_IMAGE_INFORMATION {
    ULONG SizeOfHeaders;
    ULONG SizeOfImage;
};

typedef struct _MI_IMAGE_SECURITY_REFERENCE {
    struct _IMAGE_SECURITY_CONTEXT SecurityContext;
    PVOID DynamicRelocations;
};

typedef struct _MI_LARGEPAGE_MEMORY_INFO {
    struct _LIST_ENTRY ListHead;
    struct _COLORED_PAGE_INFO *ColoredPageInfoBase;
    ULONG PagesNeedZeroing;
};

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS {
    ULONG RefCount;
    struct _MI_PAGING_FILE_SPACE_BITMAPS *Anchor;
    struct _RTL_BITMAP AllocationBitmap;
    struct _RTL_BITMAP ReservationBitmap;
    struct _RTL_BITMAP *EvictStoreBitmap;
};

typedef struct _MI_PHYSMEM_BLOCK {
    struct _MMIO_TRACKER *IoTracker;
};

typedef struct _MI_PTE_CHAIN_HEAD {
    struct _MMPTE Flink;
    struct _MMPTE Blink;
    struct _MMPTE *PteBase;
};

typedef struct _MI_REVERSE_VIEW_MAP {
    struct _LIST_ENTRY ViewLinks;
    PVOID SystemCacheVa;
    PVOID SessionViewVa;
    struct _EPROCESS *VadsProcess;
    ULONG Type : 2;
    struct _SUBSECTION *Subsection;
    ULONG SubsectionType : 1;
    ULONG64 SectionOffset;
};

typedef struct _MI_SECTION_IMAGE_INFORMATION {
    struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
    struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
};

typedef struct _MI_SESSION_DRIVER_UNLOAD {
    PVOID Function;
    ULONG FunctionValue;
};

typedef struct _MI_SPECIAL_POOL {
    ULONG Lock;
    struct _MI_PTE_CHAIN_HEAD Paged;
    struct _MI_PTE_CHAIN_HEAD NonPaged;
    ULONG PagesInUse;
    struct _RTL_BITMAP SpecialPoolPdes;
};

typedef struct _MI_SYSTEM_PTE_TYPE {
    struct _RTL_BITMAP Bitmap;
    struct _MMPTE *BasePte;
    ULONG Flags;
    enum _MI_SYSTEM_VA_TYPE VaType;
    PULONG FailureCount;
    ULONG PteFailures;
    ULONG SpinLock;
    struct _FAST_MUTEX *GlobalMutex;
    struct _MMSUPPORT *Vm;
    ULONG TotalSystemPtes;
    ULONG Hint;
    struct _MI_CACHED_PTE *CachedPtes;
    ULONG TotalFreeSystemPtes;
    LONG CachedPteCount;
};

typedef struct _MI_TRIAGE_DUMP_DATA {
    ULONG BadPageCount;
    LONG BadPagesDetected;
    LONG ZeroedPageSingleBitErrorsDetected;
    LONG ScrubPasses;
    LONG ScrubBadPagesFound;
    ULONG64 FeatureBits;
    ULONG TimeZoneId;
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionChainTerminator;
    struct _EXCEPTION_REGISTRATION_RECORD ExceptionChainTerminatorRecord;
};

typedef struct _MI_USER_VA_INFO {
    ULONG NumberOfCommittedPageTables;
    ULONG PhysicalMappingCount;
    ULONG VadBitMapHint;
    ULONG LastAllocationSizeHint;
    ULONG LastAllocationSize;
    ULONG LowestBottomUpVadBit;
    ULONG VadBitMapSize;
    ULONG VadBitMapCommitment;
    ULONG MaximumLastVadBit;
    LONG VadsBeingDeleted;
    struct _KEVENT *LastVadDeletionEvent;
    PULONG VadBitBuffer;
    PVOID LowestBottomUpAllocationAddress;
    PVOID HighestTopDownAllocationAddress;
    PVOID FreeTebHint;
    UCHAR NumaAware;
    ULONG PrivateFixupVadCount;
    struct _MI_CFG_BITMAP_INFO CfgBitMap[1];
    ULONG CommittedPageTableBufferForTopLevel[48];
    struct _RTL_BITMAP CommittedPageTableBitmaps[1];
    USHORT UsedPageTableEntries[1536];
};

typedef struct _MI_VAD_EVENT_BLOCK {
    struct _MI_VAD_EVENT_BLOCK *Next;
    ULONG WaitReason;
    struct _KGATE Gate;
    struct _MMADDRESS_LIST SecureInfo;
    struct _RTL_BITMAP BitMap;
    struct _MMINPAGE_SUPPORT *InPageSupport;
    struct _MI_PHYSMEM_BLOCK PhysicalMemory;
    struct _MI_LARGEPAGE_MEMORY_INFO *LargePage;
};

typedef struct _MI_VAD_SEQUENTIAL_INFO {
    ULONG Length : 11;
    ULONG Vpn : 21;
};

typedef struct _MI_VERIFIER_POOL_HEADER {
    struct _VI_POOL_ENTRY *VerifierPoolEntry;
};

typedef struct _MMADDRESS_LIST {
    union {
        struct _MMSECURE_FLAGS Flags;
        ULONG FlagsLong;
        PVOID StartVa;
    } u1;
    PVOID EndVa;
};

typedef struct _MMEXTEND_INFO {
    ULONG64 CommittedSize;
    ULONG ReferenceCount;
};

typedef struct _MMINPAGE_FLAGS {
    UCHAR InjectRetry : 1;
    UCHAR CrossThreadPadding : 7;
    UCHAR PrefetchSystemVmType : 2;
    UCHAR VaPrefetchReadBlock : 1;
    UCHAR CollidedFlowThrough : 1;
    UCHAR ForceCollisions : 1;
    UCHAR InPageExpanded : 1;
    UCHAR IssuedAtLowPriority : 1;
    UCHAR FaultFromStore : 1;
    UCHAR PagePriority : 3;
    UCHAR PerformRelocations : 1;
    UCHAR ClusteredPagePriority : 3;
    UCHAR MakeClusterValid : 1;
    UCHAR ZeroLastPage : 1;
    UCHAR UserFault : 1;
    UCHAR BoostedPriority : 1;
    UCHAR StandbyProtectionNeeded : 1;
    UCHAR PteChanged : 1;
    UCHAR PageFileFault : 1;
    UCHAR PageFilePageHashActive : 1;
    UCHAR Spare1 : 1;
};

typedef struct _MMINPAGE_SUPPORT {
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY ListHead;
    struct _KEVENT Event;
    struct _KEVENT CollidedEvent;
    struct _IO_STATUS_BLOCK IoStatus;
    union _LARGE_INTEGER ReadOffset;
    struct _MMPTE PteContents;
    struct _ETHREAD *Thread;
    struct _MMPFN *LockedProtoPfn;
    LONG WaitCount;
    ULONG ByteCount;
    union {
        ULONG ImagePteOffset;
        ULONG TossPage;
    } u3;
    union {
        struct _MMINPAGE_FLAGS e1;
        ULONG LongFlags;
    } u1;
    struct _FILE_OBJECT *FilePointer;
    struct _CONTROL_AREA *ControlArea;
    PVOID Autoboost;
    PVOID FaultingAddress;
    struct _MMPTE *PointerPte;
    struct _MMPTE *BasePte;
    struct _MMPFN *Pfn;
    struct _MDL *PrefetchMdl;
    struct _MDL Mdl;
    ULONG Page[16];
};

typedef struct _MMIO_TRACKER {
    struct _LIST_ENTRY ListEntry;
    ULONG PageFrameIndex;
    ULONG NumberOfPages;
    PVOID BaseVa;
    ULONG CacheFlushTimeStamp;
    struct _MDL *Mdl;
    ULONG MdlPages;
    PVOID StackTrace[6];
    struct _IO_CACHE_INFO CacheInfo[1];
};

typedef struct _MMMOD_WRITER_MDL_ENTRY {
    struct _LIST_ENTRY Links;
    union {
        struct _IO_STATUS_BLOCK IoStatus;
    } u;
    struct _IRP *Irp;
    struct _MODWRITER_FLAGS u1;
    ULONG ByteCount;
    struct _MMPAGING_FILE *PagingFile;
    struct _FILE_OBJECT *File;
    struct _CONTROL_AREA *ControlArea;
    struct _ERESOURCE *FileResource;
    union _LARGE_INTEGER WriteOffset;
    union _LARGE_INTEGER IssueTime;
    struct _MDL *PointerMdl;
    struct _MDL Mdl;
    ULONG Page[1];
};

typedef struct _MMPAGING_FILE {
    ULONG Size;
    ULONG MaximumSize;
    ULONG MinimumSize;
    ULONG FreeSpace;
    ULONG PeakUsage;
    ULONG HighestPage;
    ULONG FreeReservationSpace;
    ULONG LargestReserveCluster;
    struct _FILE_OBJECT *File;
    struct _MMMOD_WRITER_MDL_ENTRY *Entry[2];
    union _SLIST_HEADER PfnsToFree;
    struct _UNICODE_STRING PageFileName;
    struct _MI_PAGING_FILE_SPACE_BITMAPS *Bitmaps;
    ULONG AllocationBitmapHint;
    ULONG ReservationBitmapHint;
    ULONG LargestNonReservedClusterSize;
    ULONG RefreshClusterSize;
    ULONG LastRefreshClusterSize;
    ULONG ReservedClusterSizeAggregate;
    ULONG ToBeEvictedCount;
    ULONG HybridPriority;
    USHORT PageFileNumber : 4;
    USHORT BootPartition : 1;
    USHORT WsSwapPagefile : 1;
    USHORT NoReservations : 1;
    USHORT Spare0 : 9;
    UCHAR AdriftMdls : 1;
    UCHAR Spare1 : 7;
    UCHAR Spare2 : 8;
    ULONG PageHashPages;
    ULONG PageHashPagesPeak;
    PULONG PageHash;
    PVOID FileHandle;
    ULONG Lock;
    struct _ETHREAD *LockOwner;
};

typedef struct _MMPFN {
    union {
        ULONG Flink;
        ULONG WsIndex;
        struct _KEVENT *Event;
        PVOID Next;
        PVOID VolatileNext;
        struct _KTHREAD *KernelStackOwner;
        struct _SINGLE_LIST_ENTRY NextStackPfn;
    } u1;
    union {
        ULONG Blink : 24;
        ULONG TbFlushStamp : 4;
        ULONG SpareBlink : 3;
        struct _MMPTE *ImageProtoPte;
        ULONG ShareCount;
    } u2;
    struct _MMPTE *PteAddress;
    PVOID VolatilePteAddress;
    LONG Lock;
    ULONG PteLong;
    union {
        USHORT ReferenceCount;
        struct _MMPFNENTRY e1;
        struct {
            USHORT ReferenceCount;
            SHORT VolatileReferenceCount;
            USHORT ShortFlags;
            USHORT VolatileShortFlags;
        } e2;
    } u3;
    struct _MMPTE OriginalPte;
    union {
        ULONG PteFrame : 24;
        ULONG PageIdentity : 3;
        ULONG PrototypePte : 1;
        ULONG PageColor : 4;
        ULONG EntireField;
    } u4;
};

typedef struct _MMPFNENTRY {
    UCHAR PageLocation : 3;
    UCHAR WriteInProgress : 1;
    UCHAR Modified : 1;
    UCHAR ReadInProgress : 1;
    UCHAR CacheAttribute : 2;
    UCHAR Priority : 3;
    UCHAR OnProtectedStandby : 1;
    UCHAR InPageError : 1;
    UCHAR Spare : 1;
    UCHAR RemovalRequested : 1;
    UCHAR ParityError : 1;
};

typedef struct _MMPFNLIST {
    ULONG Total;
    enum _MMLISTS ListName;
    ULONG Flink;
    ULONG Blink;
    ULONG Lock;
};

typedef struct _MMPTE {
    union {
        ULONG64 Long;
        ULONG64 VolatileLong;
        struct _MMPTE_HIGHLOW HighLow;
        struct _HARDWARE_PTE Flush;
        struct _MMPTE_HARDWARE Hard;
        struct _MMPTE_PROTOTYPE Proto;
        struct _MMPTE_SOFTWARE Soft;
        struct _MMPTE_TIMESTAMP TimeStamp;
        struct _MMPTE_TRANSITION Trans;
        struct _MMPTE_SUBSECTION Subsect;
        struct _MMPTE_LIST List;
    } u;
};

typedef struct _MMPTE_HARDWARE {
    ULONG64 Valid : 1;
    ULONG64 Dirty1 : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;
    ULONG64 Unused : 1;
    ULONG64 Write : 1;
    ULONG64 PageFrameNumber : 26;
    ULONG64 reserved1 : 26;
};

typedef struct _MMPTE_HIGHLOW {
    ULONG LowPart;
    ULONG HighPart;
};

typedef struct _MMPTE_LIST {
    ULONG64 Valid : 1;
    ULONG64 OneEntry : 1;
    ULONG64 filler0 : 8;
    ULONG64 Prototype : 1;
    ULONG64 filler1 : 21;
    ULONG64 NextEntry : 32;
};

typedef struct _MMPTE_PROTOTYPE {
    ULONG64 Valid : 1;
    ULONG64 DemandFillProto : 1;
    ULONG64 HiberVerifyConverted : 1;
    ULONG64 Unused1 : 5;
    ULONG64 ReadOnly : 1;
    ULONG64 Combined : 1;
    ULONG64 Prototype : 1;
    ULONG64 Protection : 5;
    ULONG64 Unused : 16;
    ULONG64 ProtoAddress : 32;
};

typedef struct _MMPTE_SOFTWARE {
    ULONG64 Valid : 1;
    ULONG64 PageFileLow : 4;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 InStore : 1;
    ULONG64 PageFileReserved : 1;
    ULONG64 PageFileAllocated : 1;
    ULONG64 Unused : 17;
    ULONG64 PageFileHigh : 32;
};

typedef struct _MMPTE_SUBSECTION {
    ULONG64 Valid : 1;
    ULONG64 Unused0 : 4;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Unused1 : 21;
    ULONG64 SubsectionAddress : 32;
};

typedef struct _MMPTE_TIMESTAMP {
    ULONG64 MustBeZero : 1;
    ULONG64 PageFileLow : 4;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 Unused : 20;
    ULONG64 GlobalTimeStamp : 32;
};

typedef struct _MMPTE_TRANSITION {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Spare : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Protection : 5;
    ULONG64 Prototype : 1;
    ULONG64 Transition : 1;
    ULONG64 PageFrameNumber : 26;
    ULONG64 Unused : 26;
};

typedef struct _MMSECTION_FLAGS {
    ULONG BeingDeleted : 1;
    ULONG BeingCreated : 1;
    ULONG BeingPurged : 1;
    ULONG NoModifiedWriting : 1;
    ULONG FailAllIo : 1;
    ULONG Image : 1;
    ULONG Based : 1;
    ULONG File : 1;
    ULONG AttemptingDelete : 1;
    ULONG PrefetchCreated : 1;
    ULONG PhysicalMemory : 1;
    ULONG CopyOnWrite : 1;
    ULONG Reserve : 1;
    ULONG Commit : 1;
    ULONG NoChange : 1;
    ULONG WasPurged : 1;
    ULONG UserReference : 1;
    ULONG GlobalMemory : 1;
    ULONG DeleteOnClose : 1;
    ULONG FilePointerNull : 1;
    ULONG PreferredNode : 6;
    ULONG GlobalOnlyPerSession : 1;
    ULONG UserWritable : 1;
    ULONG Spare : 4;
};

typedef struct _MMSECURE_FLAGS {
    ULONG ReadOnly : 1;
    ULONG ReadWrite : 1;
    ULONG SecNoChange : 1;
    ULONG NoDelete : 1;
    ULONG RequiresPteReversal : 1;
    ULONG ExclusiveSecure : 1;
    ULONG Spare : 6;
};

typedef struct _MMSESSION {
    struct _FAST_MUTEX SystemSpaceViewLock;
    struct _FAST_MUTEX *SystemSpaceViewLockPointer;
    struct _MMVIEW *SystemSpaceViewTable;
    ULONG SystemSpaceHashSize;
    ULONG SystemSpaceHashEntries;
    ULONG SystemSpaceHashKey;
    ULONG BitmapFailures;
};

typedef struct _MMSUBSECTION_FLAGS {
    USHORT SubsectionAccessed : 1;
    USHORT Protection : 5;
    USHORT StartingSector4132 : 10;
    USHORT SubsectionStatic : 1;
    USHORT GlobalMemory : 1;
    USHORT DirtyPages : 1;
    USHORT OnDereferenceList : 1;
    USHORT SectorEndOffset : 12;
};

typedef struct _MMSUPPORT {
    struct _EX_PUSH_LOCK WorkingSetMutex;
    struct _KGATE *ExitGate;
    PVOID AccessLog;
    struct _LIST_ENTRY WorkingSetExpansionLinks;
    ULONG AgeDistribution[7];
    ULONG MinimumWorkingSetSize;
    ULONG WorkingSetSize;
    ULONG WorkingSetPrivateSize;
    ULONG MaximumWorkingSetSize;
    ULONG ChargedWslePages;
    ULONG ActualWslePages;
    ULONG WorkingSetSizeOverhead;
    ULONG PeakWorkingSetSize;
    ULONG HardFaultCount;
    struct _MMWSL *VmWorkingSetList;
    USHORT NextPageColor;
    USHORT LastTrimStamp;
    ULONG PageFaultCount;
    ULONG TrimmedPageCount;
    ULONG ForceTrimPages;
    struct _MMSUPPORT_FLAGS Flags;
    PVOID WsSwapSupport;
};

typedef struct _MMSUPPORT_FLAGS {
    UCHAR WorkingSetType : 3;
    UCHAR ForceCredits : 3;
    UCHAR MaximumWorkingSetHard : 1;
    UCHAR MinimumWorkingSetHard : 1;
    UCHAR SessionMaster : 1;
    UCHAR TrimmerState : 2;
    UCHAR Reserved : 1;
    UCHAR PageStealers : 4;
    UCHAR MemoryPriority;
    UCHAR WsleDeleted : 1;
    UCHAR VmExiting : 1;
    UCHAR ExpansionFailed : 1;
    UCHAR SvmEnabled : 1;
    UCHAR Available : 4;
};

typedef struct _MMVAD {
    struct _MMVAD_SHORT Core;
    union {
        ULONG LongFlags2;
        struct _MMVAD_FLAGS2 VadFlags2;
    } u2;
    struct _SUBSECTION *Subsection;
    struct _MMPTE *FirstPrototypePte;
    struct _MMPTE *LastContiguousPte;
    struct _LIST_ENTRY ViewLinks;
    struct _EPROCESS *VadsProcess;
    union {
        struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
        struct _MMEXTEND_INFO *ExtendedInfo;
    } u4;
};

typedef struct _MMVAD_FLAGS {
    ULONG VadType : 3;
    ULONG Protection : 5;
    ULONG PreferredNode : 6;
    ULONG NoChange : 1;
    ULONG PrivateMemory : 1;
    ULONG Teb : 1;
    ULONG PrivateFixup : 1;
    ULONG Spare : 13;
    ULONG DeleteInProgress : 1;
};

typedef struct _MMVAD_FLAGS1 {
    ULONG CommitCharge : 31;
    ULONG MemCommit : 1;
};

typedef struct _MMVAD_FLAGS2 {
    ULONG FileOffset : 24;
    ULONG Large : 1;
    ULONG TrimBehind : 1;
    ULONG Inherit : 1;
    ULONG CopyOnWrite : 1;
    ULONG NoValidationNeeded : 1;
    ULONG Spare : 3;
};

typedef struct _MMVAD_SHORT {
    struct _RTL_BALANCED_NODE VadNode;
    struct _MMVAD_SHORT *NextVad;
    ULONG StartingVpn;
    ULONG EndingVpn;
    LONG ReferenceCount;
    struct _EX_PUSH_LOCK PushLock;
    union {
        ULONG LongFlags;
        struct _MMVAD_FLAGS VadFlags;
    } u;
    union {
        ULONG LongFlags1;
        struct _MMVAD_FLAGS1 VadFlags1;
    } u1;
    struct _MI_VAD_EVENT_BLOCK *EventList;
};

typedef struct _MMVIEW {
    ULONG64 PteOffset;
    ULONG Entry;
    union _MMVIEW_CONTROL_AREA u1;
    struct _LIST_ENTRY ViewLinks;
    PVOID SessionViewVa;
    ULONG SessionId;
    ULONG SessionIdForGlobalSubsections;
};

typedef struct _MMWSL {
    ULONG FirstFree;
    ULONG FirstDynamic;
    ULONG LastEntry;
    ULONG NextSlot;
    ULONG LastInitializedWsle;
    ULONG NextAgingSlot;
    ULONG NextAccessClearingSlot;
    ULONG LastAccessClearingRemainder;
    ULONG LastAgingRemainder;
    ULONG WsleSize;
    ULONG NonDirectCount;
    PVOID LowestPagableAddress;
    struct _MMWSLE_NONDIRECT_HASH *NonDirectHash;
    struct _MMWSLE_HASH *HashTableStart;
    struct _MMWSLE_HASH *HighestPermittedHashAddress;
    ULONG ActiveWsleCounts[8];
    struct _MI_ACTIVE_WSLE_LISTHEAD ActiveWsles[8];
    struct _MMWSLE *Wsle;
    struct _MI_USER_VA_INFO UserVaInfo;
};

typedef struct _MMWSLE {
    union {
        PVOID VirtualAddress;
        ULONG Long;
        struct _MMWSLENTRY e1;
        struct _MMWSLE_FREE_ENTRY e2;
    } u1;
};

typedef struct _MMWSLENTRY {
    ULONG Valid : 1;
    ULONG Spare : 1;
    ULONG Hashed : 1;
    ULONG Direct : 1;
    ULONG Protection : 5;
    ULONG Age : 3;
    ULONG VirtualPageNumber : 20;
};

typedef struct _MMWSLE_FREE_ENTRY {
    ULONG MustBeZero : 1;
    ULONG PreviousFree : 11;
    ULONG NextFree : 20;
};

typedef struct _MMWSLE_HASH {
    ULONG Index;
};

typedef struct _MMWSLE_NONDIRECT_HASH {
    PVOID Key;
    ULONG Index;
};

typedef struct _MM_DRIVER_VERIFIER_DATA {
    ULONG Level;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsAttempted;
    ULONG AllocationsSucceeded;
    ULONG AllocationsSucceededSpecialPool;
    ULONG AllocationsWithNoTag;
    ULONG TrimRequests;
    ULONG Trims;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG Loads;
    ULONG Unloads;
    ULONG UnTrackedPool;
    ULONG UserTrims;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG PagedBytes;
    ULONG NonPagedBytes;
    ULONG PeakPagedBytes;
    ULONG PeakNonPagedBytes;
    ULONG BurstAllocationsFailedDeliberately;
    ULONG SessionTrims;
    ULONG OptionChanges;
    ULONG VerifyMode;
    struct _UNICODE_STRING PreviousBucketName;
    ULONG ActivityCounter;
    ULONG PreviousActivityCounter;
    ULONG WorkerTrimRequests;
};

typedef struct _MM_PAGED_POOL_INFO {
    struct _FAST_MUTEX Mutex;
    struct _RTL_BITMAP PagedPoolAllocationMap;
    struct _MMPTE *FirstPteForPagedPool;
    ULONG MaximumSize;
    ULONG PagedPoolHint;
    ULONG AllocatedPagedPool;
};

typedef struct _MM_PAGE_ACCESS_INFO {
    union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    ULONG64 FileOffset;
    PVOID VirtualAddress;
    ULONG DontUse0 : 3;
    ULONG Spare0 : 29;
    PVOID PointerProtoPte;
};

typedef struct _MM_PAGE_ACCESS_INFO_HEADER {
    struct _SINGLE_LIST_ENTRY Link;
    enum _MM_PAGE_ACCESS_TYPE Type;
    ULONG EmptySequenceNumber;
    ULONG CurrentFileIndex;
    ULONG64 CreateTime;
    ULONG64 EmptyTime;
    struct _MM_PAGE_ACCESS_INFO *TempEntry;
    struct _MM_PAGE_ACCESS_INFO *PageEntry;
    PULONG FileEntry;
    PULONG FirstFileEntry;
    struct _EPROCESS *Process;
    ULONG SessionId;
    PULONG PageFrameEntry;
    PULONG LastPageFrameEntry;
};

typedef struct _MM_SESSION_SPACE {
    LONG ReferenceCount;
    union {
        ULONG LongFlags;
        struct _MM_SESSION_SPACE_FLAGS Flags;
    } u;
    ULONG SessionId;
    LONG ProcessReferenceToSession;
    struct _LIST_ENTRY ProcessList;
    ULONG SessionPageDirectoryIndex;
    ULONG NonPagablePages;
    ULONG CommittedPages;
    PVOID PagedPoolStart;
    PVOID PagedPoolEnd;
    PVOID SessionObject;
    PVOID SessionObjectHandle;
    ULONG SessionPoolAllocationFailures[4];
    struct _LIST_ENTRY ImageList;
    ULONG LocaleId;
    ULONG AttachCount;
    struct _KGATE AttachGate;
    struct _LIST_ENTRY WsListEntry;
    struct _GENERAL_LOOKASIDE Lookaside[24];
    struct _MMSESSION Session;
    struct _MM_PAGED_POOL_INFO PagedPoolInfo;
    struct _MMSUPPORT Vm;
    struct _MMWSLE *Wsle;
    struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;
    struct _POOL_DESCRIPTOR PagedPool;
    struct _MMPTE *PageTables;
    struct _MI_SPECIAL_POOL SpecialPool;
    struct _FAST_MUTEX SessionPteLock;
    LONG PoolBigEntriesInUse;
    ULONG PagedPoolPdeCount;
    ULONG SpecialPoolPdeCount;
    ULONG DynamicSessionPdeCount;
    struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
    PVOID PoolTrackTableExpansion;
    ULONG PoolTrackTableExpansionSize;
    PVOID PoolTrackBigPages;
    ULONG PoolTrackBigPagesSize;
    enum _IO_SESSION_STATE IoState;
    ULONG IoStateSequence;
    struct _KEVENT IoNotificationEvent;
};

typedef struct _MM_SESSION_SPACE_FLAGS {
    ULONG Initialized : 1;
    ULONG DeletePending : 1;
    ULONG PoolInitialized : 1;
    ULONG DynamicVaInitialized : 1;
    ULONG WsInitialized : 1;
    ULONG PoolDestroyed : 1;
    ULONG ObjectInitialized : 1;
    ULONG Filler : 25;
};

typedef struct _MODWRITER_FLAGS {
    ULONG KeepForever : 1;
    ULONG Networked : 1;
    ULONG IoPriority : 3;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NB10 {
    ULONG Signature;
    ULONG Offset;
    ULONG TimeStamp;
    ULONG Age;
    CHAR PdbName[1];
};

typedef struct _NONOPAQUE_OPLOCK {
    struct _IRP *IrpExclusiveOplock;
    struct _FILE_OBJECT *FileObject;
    struct _EPROCESS *ExclusiveOplockOwner;
    struct _ETHREAD *ExclusiveOplockOwnerThread;
    UCHAR WaiterPriority;
    struct _LIST_ENTRY IrpOplocksR;
    struct _LIST_ENTRY IrpOplocksRH;
    struct _LIST_ENTRY RHBreakQueue;
    struct _LIST_ENTRY WaitingIrps;
    struct _LIST_ENTRY DelayAckFileObjectQueue;
    struct _LIST_ENTRY AtomicQueue;
    struct _GUID *DeleterParentKey;
    ULONG OplockState;
    struct _FAST_MUTEX *FastMutex;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
    ULONG Lock__ObsoleteButDoNotDelete;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _NT_TIB32 {
    ULONG ExceptionList;
    ULONG StackBase;
    ULONG StackLimit;
    ULONG SubSystemTib;
    ULONG FiberData;
    ULONG Version;
    ULONG ArbitraryUserPointer;
    ULONG Self;
};

typedef struct _NT_TIB64 {
    ULONG64 ExceptionList;
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 SubSystemTib;
    ULONG64 FiberData;
    ULONG Version;
    ULONG64 ArbitraryUserPointer;
    ULONG64 Self;
};

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    PVOID RootDirectory;
    struct _UNICODE_STRING *ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};

typedef struct _OBJECT_CREATE_INFORMATION {
    ULONG Attributes;
    PVOID RootDirectory;
    CHAR ProbeMode;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PVOID SecurityDescriptor;
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
};

typedef struct _OBJECT_DIRECTORY {
    struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[37];
    struct _EX_PUSH_LOCK Lock;
    struct _DEVICE_MAP *DeviceMap;
    struct _OBJECT_DIRECTORY *ShadowDirectory;
    ULONG SessionId;
    PVOID NamespaceEntry;
    ULONG Flags;
};

typedef struct _OBJECT_DIRECTORY_ENTRY {
    struct _OBJECT_DIRECTORY_ENTRY *ChainLink;
    PVOID Object;
    ULONG HashValue;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HANDLE_COUNT_DATABASE {
    ULONG CountEntries;
    struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
};

typedef struct _OBJECT_HANDLE_COUNT_ENTRY {
    struct _EPROCESS *Process;
    ULONG HandleCount : 24;
    ULONG LockCount : 8;
};

typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ULONG GrantedAccess;
};

typedef struct _OBJECT_HEADER {
    LONG PointerCount;
    LONG HandleCount;
    PVOID NextToFree;
    struct _EX_PUSH_LOCK Lock;
    UCHAR TypeIndex;
    UCHAR TraceFlags;
    UCHAR DbgRefTrace : 1;
    UCHAR DbgTracePermanent : 1;
    UCHAR InfoMask;
    UCHAR Flags;
    UCHAR NewObject : 1;
    UCHAR KernelObject : 1;
    UCHAR KernelOnlyAccess : 1;
    UCHAR ExclusiveObject : 1;
    UCHAR PermanentObject : 1;
    UCHAR DefaultSecurityQuota : 1;
    UCHAR SingleHandleEntry : 1;
    UCHAR DeletedInline : 1;
    struct _OBJECT_CREATE_INFORMATION *ObjectCreateInfo;
    PVOID QuotaBlockCharged;
    PVOID SecurityDescriptor;
    struct _QUAD Body;
};

typedef struct _OBJECT_HEADER_AUDIT_INFO {
    PVOID SecurityDescriptor;
    ULONG Reserved;
};

typedef struct _OBJECT_HEADER_CREATOR_INFO {
    struct _LIST_ENTRY TypeList;
    PVOID CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Reserved;
};

typedef struct _OBJECT_HEADER_HANDLE_INFO {
    struct _OBJECT_HANDLE_COUNT_DATABASE *HandleCountDataBase;
    struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
};

typedef struct _OBJECT_HEADER_NAME_INFO {
    struct _OBJECT_DIRECTORY *Directory;
    struct _UNICODE_STRING Name;
    LONG ReferenceCount;
};

typedef struct _OBJECT_HEADER_PADDING_INFO {
    ULONG PaddingAmount;
};

typedef struct _OBJECT_HEADER_PROCESS_INFO {
    struct _EPROCESS *ExclusiveProcess;
    ULONG Reserved;
};

typedef struct _OBJECT_HEADER_QUOTA_INFO {
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PVOID SecurityDescriptorQuotaBlock;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_REF_INFO {
    struct _OBJECT_HEADER *ObjectHeader;
    PVOID NextRef;
    UCHAR ImageFileName[16];
    USHORT NextPos;
    USHORT MaxStacks;
    struct _OBJECT_REF_STACK_INFO StackInfo[0];
};

typedef struct _OBJECT_REF_STACK_INFO {
    ULONG Sequence;
    USHORT Index;
    USHORT NumTraces;
    ULONG Tag;
};

typedef struct _OBJECT_REF_TRACE {
    PVOID StackTrace[16];
};

typedef struct _OBJECT_SYMBOLIC_LINK {
    union _LARGE_INTEGER CreationTime;
    struct _UNICODE_STRING LinkTarget;
    ULONG DosDeviceDriveIndex;
};

typedef struct _OBJECT_TYPE {
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    UCHAR Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    struct _EX_PUSH_LOCK TypeLock;
    ULONG Key;
    struct _LIST_ENTRY CallbackList;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    UCHAR ObjectTypeFlags;
    UCHAR CaseInsensitive : 1;
    UCHAR UnnamedObjectsOnly : 1;
    UCHAR UseDefaultObject : 1;
    UCHAR SecurityRequired : 1;
    UCHAR MaintainHandleCount : 1;
    UCHAR MaintainTypeList : 1;
    UCHAR SupportsObjectCallbacks : 1;
    UCHAR CacheAligned : 1;
    ULONG ObjectTypeCode;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    ULONG RetainAccess;
    enum _POOL_TYPE PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PLONG OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
    ULONG WaitObjectFlagMask;
    USHORT WaitObjectFlagOffset;
    USHORT WaitObjectPointerOffset;
};

typedef struct _OBP_LOOKUP_CONTEXT {
    struct _OBJECT_DIRECTORY *Directory;
    PVOID Object;
    struct _OBJECT_DIRECTORY_ENTRY **EntryLink;
    ULONG HashValue;
    USHORT HashIndex;
    UCHAR DirectoryLocked;
    UCHAR LockedExclusive;
    ULONG LockStateSignature;
};

typedef struct _OB_DUPLICATE_OBJECT_STATE {
    struct _EPROCESS *SourceProcess;
    PVOID SourceHandle;
    PVOID Object;
    ULONG TargetAccess;
    struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
    ULONG HandleAttributes;
};

typedef struct _OPEN_PACKET {
    SHORT Type;
    SHORT Size;
    struct _FILE_OBJECT *FileObject;
    LONG FinalStatus;
    ULONG Information;
    ULONG ParseCheck;
    struct _FILE_OBJECT *RelatedFileObject;
    struct _DEVICE_OBJECT *ReferencedDeviceObject;
    struct _OBJECT_ATTRIBUTES *OriginalAttributes;
    union _LARGE_INTEGER AllocationSize;
    ULONG CreateOptions;
    USHORT FileAttributes;
    USHORT ShareAccess;
    PVOID EaBuffer;
    ULONG EaLength;
    ULONG Options;
    ULONG Disposition;
    struct _FILE_BASIC_INFORMATION *BasicInformation;
    struct _FILE_NETWORK_OPEN_INFORMATION *NetworkInformation;
    enum _CREATE_FILE_TYPE CreateFileType;
    PVOID MailslotOrPipeParameters;
    UCHAR Override;
    UCHAR QueryOnly;
    UCHAR DeleteOnly;
    UCHAR FullAttributes;
    struct _DUMMY_FILE_OBJECT *LocalFileObject;
    ULONG InternalFlags;
    CHAR AccessMode;
    struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
};

typedef struct _OWNER_ENTRY {
    ULONG OwnerThread;
    ULONG IoPriorityBoosted : 1;
    ULONG OwnerReferenced : 1;
    ULONG OwnerCount : 30;
    ULONG TableSize;
};

typedef struct _PAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
    struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete;
};

typedef struct _PAGEFAULT_HISTORY {
};

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK {
    struct _KEVENT DesiredReferenceNoEvent;
    LONG DesiredReferenceNo;
};

typedef struct _PCW_BUFFER {
};

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
};

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
};

typedef struct _PCW_DATA {
    PVOID Data;
    ULONG Size;
};

typedef struct _PCW_INSTANCE {
};

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    struct _UNICODE_STRING *InstanceMask;
    ULONG InstanceId;
    UCHAR CollectMultiple;
    struct _PCW_BUFFER *Buffer;
    struct _KEVENT *CancelEvent;
};

typedef struct _PCW_PROCESSOR_INFO {
    ULONG64 IdleTime;
    ULONG64 AvailableTime;
    ULONG64 UserTime;
    ULONG64 KernelTime;
    ULONG Interrupts;
    ULONG64 DpcTime;
    ULONG64 InterruptTime;
    ULONG ClockInterrupts;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG64 C1Time;
    ULONG64 C2Time;
    ULONG64 C3Time;
    ULONG64 C1Transitions;
    ULONG64 C2Transitions;
    ULONG64 C3Transitions;
    ULONG ParkingStatus;
    ULONG CurrentFrequency;
    ULONG PercentMaxFrequency;
    ULONG StateFlags;
    ULONG NominalThroughput;
    ULONG ActiveThroughput;
    ULONG64 ScaledThroughput;
    ULONG64 ScaledKernelThroughput;
    ULONG64 AverageIdleTime;
    ULONG64 IdleBreakEvents;
    ULONG PerformanceLimit;
    ULONG PerformanceLimitFlags;
};

typedef struct _PCW_REGISTRATION {
};

typedef struct _PCW_REGISTRATION_INFORMATION {
    ULONG Version;
    struct _UNICODE_STRING *Name;
    ULONG CounterCount;
    struct _PCW_COUNTER_DESCRIPTOR *Counters;
    PLONG Callback;
    PVOID CallbackContext;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UCHAR ImageUsesLargePages : 1;
    UCHAR IsProtectedProcess : 1;
    UCHAR IsImageDynamicallyRelocated : 1;
    UCHAR SkipPatchingUser32Forwarders : 1;
    UCHAR IsPackagedProcess : 1;
    UCHAR IsAppContainer : 1;
    UCHAR IsProtectedProcessLight : 1;
    UCHAR SpareBits : 1;
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    struct _RTL_CRITICAL_SECTION *FastPebLock;
    PVOID AtlThunkSListPtr;
    PVOID IFEOKey;
    ULONG CrossProcessFlags;
    ULONG ProcessInJob : 1;
    ULONG ProcessInitializing : 1;
    ULONG ProcessUsingVEH : 1;
    ULONG ProcessUsingVCH : 1;
    ULONG ProcessUsingFTH : 1;
    ULONG ReservedBits0 : 27;
    PVOID KernelCallbackTable;
    PVOID UserSharedInfoPtr;
    ULONG SystemReserved[1];
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
    ULONG TlsExpansionCounter;
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID SparePvoid0;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG HeapSegmentReserve;
    ULONG HeapSegmentCommit;
    ULONG HeapDeCommitTotalFreeThreshold;
    ULONG HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    struct _RTL_CRITICAL_SECTION *LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    ULONG ActiveProcessAffinityMask;
    ULONG GdiHandleBuffer[34];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    union _ULARGE_INTEGER AppCompatFlags;
    union _ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
    struct _ACTIVATION_CONTEXT_DATA *ActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
    struct _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
    struct _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
    ULONG MinimumStackCommit;
    struct _FLS_CALLBACK_INFO *FlsCallback;
    struct _LIST_ENTRY FlsListHead;
    PVOID FlsBitmap;
    ULONG FlsBitmapBits[4];
    ULONG FlsHighIndex;
    PVOID WerRegistrationData;
    PVOID WerShipAssertPtr;
    PVOID pUnused;
    PVOID pImageHeaderHash;
    ULONG TracingFlags;
    ULONG HeapTracingEnabled : 1;
    ULONG CritSecTracingEnabled : 1;
    ULONG LibLoaderTracingEnabled : 1;
    ULONG SpareTracingBits : 29;
    ULONG64 CsrServerReadOnlySharedMemoryBase;
};

typedef struct _PEBS_DS_SAVE_AREA {
    ULONG64 BtsBufferBase;
    ULONG64 BtsIndex;
    ULONG64 BtsAbsoluteMaximum;
    ULONG64 BtsInterruptThreshold;
    ULONG64 PebsBufferBase;
    ULONG64 PebsIndex;
    ULONG64 PebsAbsoluteMaximum;
    ULONG64 PebsInterruptThreshold;
    ULONG64 PebsCounterReset0;
    ULONG64 PebsCounterReset1;
    ULONG64 PebsCounterReset2;
    ULONG64 PebsCounterReset3;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    UCHAR ShutdownInProgress;
    PVOID ShutdownThreadId;
};

typedef struct _PENDING_RELATIONS_LIST_ENTRY {
    struct _LIST_ENTRY Link;
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _PNP_DEVICE_EVENT_ENTRY *DeviceEvent;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _RELATION_LIST *RelationsList;
    struct _IRP *EjectIrp;
    enum IRPLOCK Lock;
    ULONG Problem;
    UCHAR ProfileChangingEject;
    UCHAR DisplaySafeRemovalDialog;
    enum _SYSTEM_POWER_STATE LightestSleepState;
    struct DOCK_INTERFACE *DockInterface;
    UCHAR DequeuePending;
    enum _PNP_DEVICE_DELETE_TYPE DeleteType;
};

typedef struct _PEP_CRASHDUMP_INFORMATION {
    struct PEPHANDLE__ *DeviceHandle;
    PVOID DeviceContext;
};

typedef struct _PERFINFO_GROUPMASK {
    ULONG Masks[8];
};

typedef struct _PERFINFO_PPM_STATE_SELECTION {
    ULONG SelectedState;
    ULONG VetoedStates;
    ULONG VetoReason[1];
};

typedef struct _PF_KERNEL_GLOBALS {
    ULONG64 AccessBufferAgeThreshold;
    struct _EX_RUNDOWN_REF AccessBufferRef;
    struct _KEVENT AccessBufferExistsEvent;
    ULONG AccessBufferMax;
    union _SLIST_HEADER AccessBufferList;
    LONG StreamSequenceNumber;
    ULONG Flags;
    LONG ScenarioPrefetchCount;
};

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR {
    ULONG NumberOfRuns;
    ULONG NumberOfPages;
    struct _PHYSICAL_MEMORY_RUN Run[1];
};

typedef struct _PHYSICAL_MEMORY_RUN {
    ULONG BasePage;
    ULONG PageCount;
};

typedef struct _PI_BUS_EXTENSION {
    ULONG Flags;
    UCHAR NumberCSNs;
    PUCHAR ReadDataPort;
    UCHAR DataPortMapped;
    PUCHAR AddressPort;
    UCHAR AddrPortMapped;
    PUCHAR CommandPort;
    UCHAR CmdPortMapped;
    ULONG NextSlotNumber;
    struct _SINGLE_LIST_ENTRY DeviceList;
    struct _SINGLE_LIST_ENTRY CardList;
    struct _DEVICE_OBJECT *PhysicalBusDevice;
    struct _DEVICE_OBJECT *FunctionalBusDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    ULONG BusNumber;
    enum _SYSTEM_POWER_STATE SystemPowerState;
    enum _DEVICE_POWER_STATE DevicePowerState;
};

typedef struct _PI_RESOURCE_ARBITER_ENTRY {
    struct _LIST_ENTRY DeviceArbiterList;
    UCHAR ResourceType;
    struct _ARBITER_INTERFACE *ArbiterInterface;
    struct _DEVICE_NODE *DeviceNode;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY BestResourceList;
    struct _LIST_ENTRY BestConfig;
    struct _LIST_ENTRY ActiveArbiterList;
    UCHAR State;
    UCHAR ResourcesChanged;
};

typedef struct _PLUGPLAY_EVENT_BLOCK {
    struct _GUID EventGuid;
    enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;
    union {
        struct {
            struct _GUID ClassGuid;
            WCHAR SymbolicLinkName[1];
        } DeviceClass;
        struct {
            WCHAR DeviceId[1];
        } TargetDevice;
        struct {
            WCHAR DeviceId[1];
        } InstallDevice;
        struct {
            PVOID NotificationStructure;
            WCHAR DeviceId[1];
        } CustomNotification;
        struct {
            PVOID Notification;
        } ProfileNotification;
        struct {
            ULONG NotificationCode;
            ULONG NotificationData;
        } PowerNotification;
        struct {
            enum _PNP_VETO_TYPE VetoType;
            WCHAR DeviceIdVetoNameBuffer[1];
        } VetoNotification;
        struct {
            struct _GUID BlockedDriverGuid;
        } BlockedDriverNotification;
        struct {
            WCHAR ParentId[1];
        } InvalidIDNotification;
        struct {
            struct _GUID PowerSettingGuid;
            ULONG Flags;
            ULONG SessionId;
            ULONG DataLength;
            UCHAR Data[1];
        } PowerSettingNotification;
        struct {
            WCHAR DeviceId[1];
        } PropertyChangeNotification;
        struct {
            WCHAR DeviceId[1];
        } DeviceInstanceNotification;
    } u;
};

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT {
    ULONG IncludeFailedDevices;
    ULONG DeviceCount;
    struct _DEVICE_OBJECT *DeviceList[1];
};

typedef struct _PNP_DEVICE_ACTION_ENTRY {
    struct _LIST_ENTRY ListEntry;
    struct _DEVICE_OBJECT *DeviceObject;
    enum _PNP_DEVICE_ACTION_REQUEST RequestType;
    UCHAR ReorderingBarrier;
    ULONG RequestArgument;
    struct _KEVENT *CompletionEvent;
    PLONG CompletionStatus;
};

typedef struct _PNP_DEVICE_COMPLETION_QUEUE {
    struct _LIST_ENTRY DispatchedList;
    ULONG DispatchedCount;
    struct _LIST_ENTRY CompletedList;
    struct _KSEMAPHORE CompletedSemaphore;
    ULONG SpinLock;
};

typedef struct _PNP_DEVICE_COMPLETION_REQUEST {
    struct _LIST_ENTRY ListEntry;
    struct _DEVICE_NODE *DeviceNode;
    PVOID Context;
    enum _PNP_DEVNODE_STATE CompletionState;
    ULONG IrpPended;
    LONG Status;
    PVOID Information;
    LONG ReferenceCount;
};

typedef struct _PNP_DEVICE_EVENT_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG Argument;
    struct _KEVENT *CallerEvent;
    PVOID Callback;
    PVOID Context;
    enum _PNP_VETO_TYPE *VetoType;
    struct _UNICODE_STRING *VetoName;
    ULONG RefCount;
    ULONG Lock;
    UCHAR Cancel;
    struct _PNP_DEVICE_EVENT_ENTRY *Parent;
    struct _PLUGPLAY_EVENT_BLOCK Data;
};

typedef struct _PNP_DEVICE_EVENT_LIST {
    LONG Status;
    struct _KMUTANT EventQueueMutex;
    struct _FAST_MUTEX Lock;
    struct _LIST_ENTRY List;
};

typedef struct _PNP_RESOURCE_REQUEST {
    struct _DEVICE_OBJECT *PhysicalDevice;
    ULONG Flags;
    enum _ARBITER_REQUEST_SOURCE AllocationType;
    ULONG Priority;
    ULONG Position;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *ResourceRequirements;
    PVOID ReqList;
    struct _CM_RESOURCE_LIST *ResourceAssignment;
    struct _CM_RESOURCE_LIST *TranslatedResourceAssignment;
    LONG Status;
};

typedef struct _POOL_BLOCK_HEAD {
    struct _POOL_HEADER Header;
    struct _LIST_ENTRY List;
};

typedef struct _POOL_DESCRIPTOR {
    enum _POOL_TYPE PoolType;
    struct _FAST_MUTEX PagedLock;
    ULONG NonPagedLock;
    LONG RunningAllocs;
    LONG RunningDeAllocs;
    LONG TotalBigPages;
    LONG ThreadsProcessingDeferrals;
    ULONG TotalBytes;
    ULONG PoolIndex;
    LONG TotalPages;
    struct _SINGLE_LIST_ENTRY PendingFrees;
    LONG PendingFreeDepth;
    struct _LIST_ENTRY ListHeads[512];
};

typedef struct _POOL_HACKER {
    struct _POOL_HEADER Header;
    ULONG Contents[8];
};

typedef struct _POOL_HEADER {
    USHORT PreviousSize : 9;
    USHORT PoolIndex : 7;
    USHORT BlockSize : 9;
    USHORT PoolType : 7;
    ULONG Ulong1;
    ULONG PoolTag;
    USHORT AllocatorBackTraceIndex;
    USHORT PoolTagHash;
};

typedef struct _POOL_TRACKER_BIG_PAGES {
    ULONG Va;
    ULONG Key;
    ULONG PoolType;
    ULONG NumberOfBytes;
};

typedef struct _POOL_TRACKER_TABLE {
    LONG Key;
    ULONG NonPagedAllocs;
    ULONG NonPagedFrees;
    ULONG NonPagedBytes;
    ULONG PagedAllocs;
    ULONG PagedFrees;
    ULONG PagedBytes;
};

typedef struct _POP_ACTION_TRIGGER {
    enum POWER_POLICY_DEVICE_TYPE Type;
    ULONG Flags;
    struct _POP_TRIGGER_WAIT *Wait;
    struct {
        ULONG Level;
    } Battery;
    struct {
        ULONG Type;
    } Button;
};

typedef struct _POP_CPU_INFO {
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
};

typedef struct _POP_CURRENT_BROADCAST {
    UCHAR InProgress;
    struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
    enum POWER_ACTION PowerAction;
    struct _POP_DEVICE_SYS_STATE *DeviceState;
};

typedef struct _POP_DEVICE_SYS_STATE {
    UCHAR IrpMinor;
    enum _SYSTEM_POWER_STATE SystemState;
    ULONG SpinLock;
    struct _KTHREAD *Thread;
    struct _KEVENT *AbortEvent;
    struct _KSEMAPHORE *ReadySemaphore;
    struct _KSEMAPHORE *FinishedSemaphore;
    struct _PO_DEVICE_NOTIFY_ORDER Order;
    struct _LIST_ENTRY Pending;
    LONG Status;
    struct _DEVICE_OBJECT *FailedDevice;
    UCHAR Waking;
    UCHAR Cancelled;
    UCHAR IgnoreErrors;
    UCHAR IgnoreNotImplemented;
    UCHAR TimeRefreshLockAcquired;
};

typedef struct _POP_FX_ACCOUNTING {
    ULONG Lock;
    UCHAR Active;
    ULONG DripsRequiredState;
    LONG Level;
    LONG64 ActiveStamp;
    ULONG64 CsActiveTime;
    LONG64 CriticalActiveTime;
};

typedef struct _POP_FX_COMPONENT {
    struct _GUID Id;
    ULONG Index;
    struct _POP_FX_WORK_ORDER WorkOrder;
    struct _POP_FX_DEVICE *Device;
    union _POP_FX_COMPONENT_FLAGS Flags;
    LONG Resident;
    struct _KEVENT ActiveEvent;
    ULONG IdleLock;
    LONG IdleConditionComplete;
    LONG IdleStateComplete;
    ULONG64 IdleStamp;
    ULONG CurrentIdleState;
    ULONG IdleStateCount;
    struct _POP_FX_IDLE_STATE *IdleStates;
    ULONG DeepestWakeableIdleState;
    ULONG ProviderCount;
    struct _POP_FX_PROVIDER *Providers;
    ULONG IdleProviderCount;
    ULONG DependentCount;
    struct _POP_FX_DEPENDENT *Dependents;
    struct _POP_FX_ACCOUNTING Accounting;
};

typedef struct _POP_FX_DEPENDENT {
    ULONG Index;
    ULONG ProviderIndex;
};

typedef struct _POP_FX_DEVICE {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _POP_IRP_DATA *IrpData;
    union _POP_FX_DEVICE_STATUS Status;
    LONG PowerReqCall;
    LONG PowerNotReqCall;
    struct _POP_FX_PLUGIN *Plugin;
    struct PEPHANDLE__ *PluginHandle;
    struct _POP_FX_PLUGIN *MiniPlugin;
    struct PEPHANDLE__ *MiniPluginHandle;
    struct _DEVICE_NODE *DevNode;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *TargetDevice;
    struct _POP_FX_DRIVER_CALLBACKS Callbacks;
    PVOID DriverContext;
    struct _IO_REMOVE_LOCK RemoveLock;
    struct _POP_FX_WORK_ORDER WorkOrder;
    ULONG IdleLock;
    struct _KTIMER IdleTimer;
    struct _KDPC IdleDpc;
    ULONG64 IdleTimeout;
    ULONG64 IdleStamp;
    struct _DEVICE_OBJECT *NextIrpDeviceObject;
    union _POWER_STATE NextIrpPowerState;
    PVOID NextIrpCallerCompletion;
    PVOID NextIrpCallerContext;
    struct _KEVENT IrpCompleteEvent;
    PUCHAR PowerOnDumpDeviceCallback;
    struct _POP_FX_ACCOUNTING Accounting;
    ULONG ComponentCount;
    struct _POP_FX_COMPONENT *Components[1];
};

typedef struct _POP_FX_DRIVER_CALLBACKS {
    PVOID ComponentActive;
    PVOID ComponentIdle;
    PVOID ComponentIdleState;
    PVOID DevicePowerRequired;
    PVOID DevicePowerNotRequired;
    PLONG PowerControl;
    PVOID ComponentCriticalTransition;
};

typedef struct _POP_FX_IDLE_STATE {
    ULONG64 TransitionLatency;
    ULONG64 ResidencyRequirement;
    ULONG NominalPower;
};

typedef struct _POP_FX_PLUGIN {
    struct _LIST_ENTRY Link;
    ULONG Version;
    ULONG64 Flags;
    struct _KQUEUE WorkQueue;
    PUCHAR AcceptDeviceNotification;
    PUCHAR AcceptProcessorNotification;
    ULONG WorkOrderCount;
    struct _POP_FX_WORK_ORDER WorkOrders[1];
};

typedef struct _POP_FX_PROVIDER {
    ULONG Index;
    UCHAR Activating;
};

typedef struct _POP_FX_WORK_ORDER {
    struct _WORK_QUEUE_ITEM WorkItem;
    LONG WorkCount;
    PVOID Context;
    struct _POP_FX_WORK_ORDER_WATCHDOG_INFO *WatchdogTimerInfo;
};

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO {
    struct _KTIMER Timer;
    struct _KDPC Dpc;
    struct _POP_FX_WORK_ORDER *WorkOrder;
};

typedef struct _POP_HIBER_CONTEXT {
    UCHAR Reset;
    UCHAR HiberFlags;
    UCHAR WroteHiberFile;
    UCHAR VerifyKernelPhaseOnResume;
    UCHAR KernelPhaseVerificationActive;
    UCHAR InitializationFinished;
    LONG NextTableLockHeld;
    LONG BootPhaseFinishedBarrier;
    LONG KernelResumeFinishedBarrier;
    UCHAR MapFrozen;
    struct _RTL_BITMAP DiscardMap;
    struct _RTL_BITMAP KernelPhaseMap;
    struct _RTL_BITMAP BootPhaseMap;
    struct _LIST_ENTRY ClonedRanges;
    ULONG ClonedRangeCount;
    ULONG64 ClonedPageCount;
    struct _RTL_BITMAP *CurrentMap;
    struct _LIST_ENTRY *NextCloneRange;
    ULONG NextPreserve;
    struct _MDL *LoaderMdl;
    struct _MDL *AllocatedMdl;
    ULONG64 PagesOut;
    PVOID IoPages;
    ULONG IoPagesCount;
    PVOID CurrentMcb;
    struct _DUMP_STACK_CONTEXT *DumpStack;
    struct _KPROCESSOR_STATE *WakeState;
    ULONG IoProgress;
    LONG Status;
    ULONG GraphicsProc;
    struct PO_MEMORY_IMAGE *MemoryImage;
    PULONG PerformanceStats;
    struct _MDL *BootLoaderLogMdl;
    ULONG SiLogOffset;
    struct _MDL *FirmwareRuntimeInformationMdl;
    PVOID FirmwareRuntimeInformationVa;
    PVOID ResumeContext;
    ULONG ResumeContextPages;
    ULONG ProcessorCount;
    struct _POP_PER_PROCESSOR_CONTEXT *ProcessorContext;
    PCHAR ProdConsBuffer;
    ULONG ProdConsSize;
    ULONG MaxDataPages;
    PVOID ExtraBuffer;
    ULONG ExtraBufferSize;
    PVOID ExtraMapVa;
    ULONG BitlockerKeyPFN;
    struct _POP_IO_INFO IoInfo;
    ULONG HardwareConfigurationSignature;
};

typedef struct _POP_IO_INFO {
    struct _MDL *DumpMdl;
    enum _POP_IO_STATUS IoStatus;
    ULONG64 IoStartCount;
    ULONG64 IoBytesCompleted;
    ULONG64 IoBytesInProgress;
    ULONG64 RequestSize;
    union _LARGE_INTEGER IoLocation;
    ULONG64 FileOffset;
    PVOID Buffer;
    UCHAR AsyncCapable;
    ULONG64 BytesToRead;
    ULONG Pages;
};

typedef struct _POP_IRP_DATA {
    struct _LIST_ENTRY Link;
    struct _IRP *Irp;
    struct _DEVICE_OBJECT *Pdo;
    struct _DEVICE_OBJECT *TargetDevice;
    struct _DEVICE_OBJECT *CurrentDevice;
    ULONG64 WatchdogStart;
    struct _KTIMER WatchdogTimer;
    struct _KDPC WatchdogDpc;
    UCHAR MinorFunction;
    enum _POWER_STATE_TYPE PowerStateType;
    union _POWER_STATE PowerState;
    UCHAR WatchdogEnabled;
    struct _POP_FX_DEVICE *FxDevice;
    UCHAR SystemTransition;
    UCHAR NotifyPEP;
    struct {
        PVOID CallerCompletion;
        PVOID CallerContext;
        struct _DEVICE_OBJECT *CallerDevice;
        UCHAR SystemWake;
    } Device;
    struct {
        struct _PO_DEVICE_NOTIFY *NotifyDevice;
        UCHAR FxDeviceActivated;
    } System;
};

typedef struct _POP_IRP_WORKER_ENTRY {
    struct _LIST_ENTRY Link;
    struct _ETHREAD *Thread;
    struct _IRP *Irp;
    struct _DEVICE_OBJECT *Device;
    UCHAR Static;
};

typedef struct _POP_PER_PROCESSOR_CONTEXT {
    PUCHAR UncompressedData;
    PVOID MappingVa;
    PVOID XpressEncodeWorkspace;
    PUCHAR CompressedDataBuffer;
    ULONG64 CopyTicks;
    ULONG64 CompressTicks;
    ULONG64 BytesCopied;
    ULONG64 PagesProcessed;
    ULONG64 DecompressTicks;
    ULONG64 ResumeCopyTicks;
    ULONG64 SharedBufferTicks;
    ULONG64 DecompressTicksByMethod[2];
    ULONG64 DecompressSizeByMethod[2];
    ULONG CompressCount;
    ULONG HuffCompressCount;
};

typedef struct _POP_POLICY_DEVICE {
    struct _LIST_ENTRY Link;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    PVOID Notification;
    struct _UNICODE_STRING Name;
    struct _DEVICE_OBJECT *Device;
    struct _IRP *Irp;
};

typedef struct _POP_POWER_ACTION {
    UCHAR Updates;
    UCHAR State;
    UCHAR Shutdown;
    enum POWER_ACTION Action;
    enum _SYSTEM_POWER_STATE LightestState;
    ULONG Flags;
    LONG Status;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    ULONG DeviceTypeFlags;
    UCHAR IrpMinor;
    UCHAR Waking;
    enum _SYSTEM_POWER_STATE SystemState;
    enum _SYSTEM_POWER_STATE NextSystemState;
    enum _SYSTEM_POWER_STATE EffectiveSystemState;
    enum _SYSTEM_POWER_STATE CurrentSystemState;
    struct _POP_SHUTDOWN_BUG_CHECK *ShutdownBugCode;
    struct _POP_DEVICE_SYS_STATE *DevState;
    struct _POP_HIBER_CONTEXT *HiberContext;
    ULONG64 WakeTime;
    ULONG64 SleepTime;
    enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
    struct {
        ULONG64 ProgrammedTime;
        struct _DIAGNOSTIC_BUFFER *TimerInfo;
    } WakeAlarm[3];
    struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
};

typedef struct _POP_RW_LOCK {
    struct _EX_PUSH_LOCK Lock;
    struct _KTHREAD *Thread;
};

typedef struct _POP_SHUTDOWN_BUG_CHECK {
    struct _ETHREAD *InitiatingThread;
    struct _EPROCESS *InitiatingProcess;
    PVOID ThreadId;
    PVOID ProcessId;
    ULONG Code;
    ULONG Parameter1;
    ULONG Parameter2;
    ULONG Parameter3;
    ULONG Parameter4;
};

typedef struct _POP_SYSTEM_IDLE {
    LONG AverageIdleness;
    LONG LowestIdleness;
    ULONG Time;
    ULONG Timeout;
    ULONG LastUserInput;
    struct POWER_ACTION_POLICY Action;
    enum _SYSTEM_POWER_STATE MinState;
    ULONG SystemRequired;
    UCHAR IdleWorker;
    UCHAR Sampling;
    ULONG64 LastTick;
    ULONG LastSystemRequiredTime;
};

typedef struct _POP_THERMAL_ZONE {
    struct _POP_POLICY_DEVICE PolicyDevice;
    struct _LIST_ENTRY Link;
    enum POWER_POLICY_DEVICE_TYPE DeviceType;
    PVOID Notification;
    struct _UNICODE_STRING Name;
    struct _DEVICE_OBJECT *Device;
    struct _IRP *Irp;
    UCHAR State;
    UCHAR Flags;
    UCHAR Removing;
    UCHAR Mode;
    UCHAR PendingMode;
    UCHAR ActivePoint;
    UCHAR PendingActivePoint;
    UCHAR Critical;
    LONG HighPrecisionThrottle;
    LONG Throttle;
    LONG PendingThrottle;
    ULONG ThrottleReasons;
    ULONG64 LastTime;
    ULONG SampleRate;
    ULONG LastTemp;
    struct _KTIMER PassiveTimer;
    struct _KDPC PassiveDpc;
    struct _THERMAL_INFORMATION_EX Info;
    union _LARGE_INTEGER InfoLastUpdateTime;
    struct _THERMAL_POLICY Policy;
    UCHAR PolicyDriver;
    struct _POP_THERMAL_ZONE_METRICS Metrics;
    struct _WORK_QUEUE_ITEM WorkItem;
    struct _POP_RW_LOCK Lock;
    struct _KEVENT ZoneStopped;
    struct _KEVENT TemperatureUpdated;
    ULONG InstanceId;
};

typedef struct _POP_THERMAL_ZONE_METRICS {
    ULONG ActiveCount;
    ULONG PassiveCount;
    ULONG64 LastActiveStartTime;
    ULONG64 AverageActiveTime;
    ULONG64 LastPassiveStartTime;
    ULONG64 AveragePassiveTime;
    union _LARGE_INTEGER StartTickSinceLastReset;
};

typedef struct _POP_TRIGGER_WAIT {
    struct _KEVENT Event;
    LONG Status;
    struct _LIST_ENTRY Link;
    struct _POP_ACTION_TRIGGER *Trigger;
};

typedef struct _PORT_MESSAGE {
    union {
        struct {
            SHORT DataLength;
            SHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union {
        struct {
            SHORT Type;
            SHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    struct _CLIENT_ID ClientId;
    DOUBLE DoNotUseThisField;
    ULONG MessageId;
    ULONG ClientViewSize;
    ULONG CallbackId;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _PO_DEVICE_NOTIFY {
    struct _LIST_ENTRY Link;
    struct _LIST_ENTRY PowerChildren;
    struct _LIST_ENTRY PowerParents;
    struct _DEVICE_OBJECT *TargetDevice;
    UCHAR OrderLevel;
    struct _DEVICE_OBJECT *DeviceObject;
    PUSHORT DeviceName;
    PUSHORT DriverName;
    ULONG ChildCount;
    ULONG ActiveChild;
    ULONG ParentCount;
    ULONG ActiveParent;
};

typedef struct _PO_DEVICE_NOTIFY_ORDER {
    UCHAR Locked;
    struct _DEVICE_OBJECT **WarmEjectPdoPointer;
    struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
};

typedef struct _PO_DIAG_STACK_RECORD {
    ULONG StackDepth;
    PVOID Stack[1];
};

typedef struct _PO_HIBER_PERF {
    ULONG64 HiberIoTicks;
    ULONG64 HiberIoCpuTicks;
    ULONG64 HiberInitTicks;
    ULONG64 HiberHiberFileTicks;
    ULONG64 HiberCompressTicks;
    ULONG64 HiberSharedBufferTicks;
    union _LARGE_INTEGER TotalHibernateTime;
    ULONG POSTTime;
    ULONG ResumeBootMgrTime;
    ULONG BootmgrUserInputTime;
    ULONG64 ResumeAppTicks;
    ULONG64 ResumeAppStartTimestamp;
    ULONG64 ResumeLibraryInitTicks;
    ULONG64 ResumeInitTicks;
    ULONG64 ResumeRestoreImageStartTimestamp;
    ULONG64 ResumeHiberFileTicks;
    ULONG64 ResumeIoTicks;
    ULONG64 ResumeDecompressTicks;
    ULONG64 ResumeAllocateTicks;
    ULONG64 ResumeUserInOutTicks;
    ULONG64 ResumeMapTicks;
    ULONG64 ResumeUnmapTicks;
    ULONG64 ResumeKernelSwitchTimestamp;
    ULONG64 WriteLogDataTimestamp;
    ULONG64 KernelReturnFromHandler;
    ULONG64 TimeStampCounterAtSwitchTime;
    ULONG64 HalTscOffset;
    ULONG64 HvlTscOffset;
    ULONG64 SleeperThreadEnd;
    ULONG64 KernelReturnSystemPowerStateTimestamp;
    ULONG64 IoBoundedness;
    ULONG64 KernelDecompressTicks;
    ULONG64 KernelIoTicks;
    ULONG64 KernelCopyTicks;
    ULONG64 ReadCheckCount;
    ULONG64 KernelInitTicks;
    ULONG64 KernelResumeHiberFileTicks;
    ULONG64 KernelIoCpuTicks;
    ULONG64 KernelSharedBufferTicks;
    ULONG64 KernelAnimationTicks;
    union _LARGE_INTEGER AnimationStart;
    union _LARGE_INTEGER AnimationStop;
    ULONG DeviceResumeTime;
    ULONG64 BootPagesProcessed;
    ULONG64 KernelPagesProcessed;
    ULONG64 BootBytesWritten;
    ULONG64 KernelBytesWritten;
    ULONG64 BootPagesWritten;
    ULONG64 KernelPagesWritten;
    ULONG64 BytesWritten;
    ULONG PagesWritten;
    ULONG FileRuns;
    ULONG NoMultiStageResumeReason;
    ULONG MaxHuffRatio;
    ULONG64 AdjustedTotalResumeTime;
    ULONG64 ResumeCompleteTimestamp;
};

typedef struct _PO_IRP_MANAGER {
    struct _PO_IRP_QUEUE DeviceIrpQueue;
    struct _PO_IRP_QUEUE SystemIrpQueue;
};

typedef struct _PO_IRP_QUEUE {
    struct _IRP *CurrentIrp;
    struct _IRP *PendingIrpList;
};

typedef struct _PO_NOTIFY_ORDER_LEVEL {
    ULONG DeviceCount;
    ULONG ActiveCount;
    struct _LIST_ENTRY WaitSleep;
    struct _LIST_ENTRY ReadySleep;
    struct _LIST_ENTRY ReadyS0;
    struct _LIST_ENTRY WaitS0;
};

typedef struct _PPC_DBGKD_CONTROL_SET {
    ULONG Continue;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _PPM_CONCURRENCY_ACCOUNTING {
    ULONG Lock;
    ULONG Processors;
    ULONG ActiveProcessors;
    ULONG64 LastUpdateTime;
    ULONG64 TotalTime;
    ULONG64 AccumulatedTime[1];
};

typedef struct _PPM_FFH_THROTTLE_STATE_INFO {
    UCHAR EnableLogging;
    ULONG MismatchCount;
    UCHAR Initialized;
    ULONG64 LastValue;
    union _LARGE_INTEGER LastLogTickCount;
};

typedef struct _PPM_IDLE_STATE {
    struct _KAFFINITY_EX DomainMembers;
    ULONG Latency;
    ULONG BreakEvenDuration;
    ULONG Power;
    ULONG StateFlags;
    struct _PPM_VETO_ACCOUNTING VetoAccounting;
    UCHAR StateType;
    UCHAR InterruptsEnabled;
    UCHAR Interruptible;
    UCHAR ContextRetained;
    UCHAR CacheCoherent;
    UCHAR WakesSpuriously;
    UCHAR PlatformOnly;
    UCHAR NoCState;
};

typedef struct _PPM_IDLE_STATES {
    UCHAR InterfaceVersion;
    UCHAR ForceIdle;
    UCHAR EstimateIdleDuration;
    UCHAR ExitLatencyTraceEnabled;
    UCHAR NonInterruptibleTransition;
    ULONG ExitLatencyCountdown;
    ULONG TargetState;
    ULONG ActualState;
    ULONG OldState;
    ULONG OverrideIndex;
    ULONG ProcessorIdleCount;
    ULONG Type;
    USHORT ReasonFlags;
    ULONG64 InitiateWakeStamp;
    LONG PreviousStatus;
    ULONG PreviousCancelReason;
    struct _KAFFINITY_EX PrimaryProcessorMask;
    struct _KAFFINITY_EX SecondaryProcessorMask;
    PVOID IdlePrepare;
    PLONG IdleExecute;
    PULONG IdlePreselect;
    PULONG IdleTest;
    PVOID IdleComplete;
    PVOID IdleCancel;
    PUCHAR IdleIsHalted;
    PUCHAR IdleInitiateWake;
    PLONG QueryPlatformStateResidency;
    struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
    struct _PERFINFO_PPM_STATE_SELECTION *Tracing;
    struct _PPM_IDLE_STATE State[1];
};

typedef struct _PPM_SELECTION_STATISTICS {
    ULONG64 PlatformOnlyCount;
    ULONG64 PreVetoCount;
    ULONG64 VetoCount;
    ULONG64 IdleDurationCount;
    ULONG64 LatencyCount;
    ULONG64 InterruptibleCount;
    ULONG64 DeviceDependencyCount;
    ULONG64 ProcessorDependencyCount;
    ULONG64 WrongProcessorCount;
    ULONG64 LegacyOverrideCount;
    ULONG64 CstateCheckCount;
    ULONG64 NoCStateCount;
    ULONG64 SelectedCount;
};

typedef struct _PPM_VETO_ACCOUNTING {
    LONG VetoPresent;
    struct _LIST_ENTRY VetoListHead;
};

typedef struct _PP_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE *P;
    struct _GENERAL_LOOKASIDE *L;
};

typedef struct _PRIVATE_CACHE_MAP {
    SHORT NodeTypeCode;
    struct _PRIVATE_CACHE_MAP_FLAGS Flags;
    ULONG ReadAheadMask;
    struct _FILE_OBJECT *FileObject;
    union _LARGE_INTEGER FileOffset1;
    union _LARGE_INTEGER BeyondLastByte1;
    union _LARGE_INTEGER FileOffset2;
    union _LARGE_INTEGER BeyondLastByte2;
    ULONG SequentialReadCount;
    ULONG ReadAheadLength;
    union _LARGE_INTEGER ReadAheadOffset;
    union _LARGE_INTEGER ReadAheadBeyondLastByte;
    ULONG64 PrevReadAheadBeyondLastByte;
    ULONG ReadAheadSpinLock;
    ULONG PipelinedReadAheadRequestSize;
    ULONG ReadAheadGrowth;
    struct _LIST_ENTRY PrivateLinks;
    PVOID ReadAheadWorkItem;
};

typedef struct _PRIVATE_CACHE_MAP_FLAGS {
    ULONG DontUse : 16;
    ULONG ReadAheadActive : 1;
    ULONG ReadAheadEnabled : 1;
    ULONG PagePriority : 3;
    ULONG PipelineReadAheads : 1;
    ULONG Available : 10;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_IDLE_CONSTRAINTS {
    ULONG64 TotalTime;
    ULONG64 IdleTime;
    ULONG64 ExpectedIdleDuration;
    ULONG64 MaxIdleDuration;
    ULONG OverrideState;
    ULONG TimeCheck;
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR Parked;
    UCHAR Interruptible;
    UCHAR PlatformIdle;
    ULONG IRHints;
    ULONG IRTruncatedHints;
    UCHAR ExpectedWakeReason;
};

typedef struct _PROCESSOR_IDLE_DEPENDENCY {
    ULONG ProcessorIndex;
    UCHAR ExpectedState;
    UCHAR AllowDeeperStates;
    UCHAR LooseDependency;
};

typedef struct _PROCESSOR_IDLE_PREPARE_INFO {
    PVOID Context;
    struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
    ULONG DependencyCount;
    ULONG DependencyUsed;
    struct _PROCESSOR_IDLE_DEPENDENCY *DependencyArray;
    ULONG PlatformIdleStateIndex;
    ULONG ProcessorIdleStateIndex;
    ULONG IdleSelectFailureMask;
};

typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES {
    ULONG Count;
    struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
};

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY {
    ULONG64 Residency;
    ULONG64 TransitionCount;
};

typedef struct _PROCESSOR_POWER_STATE {
    struct _PPM_IDLE_STATES *IdleStates;
    struct _PROC_IDLE_ACCOUNTING *IdleAccounting;
    ULONG64 IdleTimeLast;
    ULONG64 IdleTimeTotal;
    ULONG64 IdleTimeEntry;
    ULONG64 Reserved;
    struct _PROC_IDLE_POLICY IdlePolicy;
    union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
    struct _PROC_FEEDBACK PerfFeedback;
    enum _PROC_HYPERVISOR_STATE Hypervisor;
    ULONG LastSysTime;
    ULONG WmiDispatchPtr;
    LONG WmiInterfaceEnabled;
    struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
    struct _KDPC PerfActionDpc;
    LONG PerfActionMask;
    struct _PROC_IDLE_SNAP HvIdleCheck;
    struct _PROC_PERF_SNAP PerfCheck;
    struct _PROC_PERF_DOMAIN *Domain;
    struct _PROC_PERF_CONSTRAINT *PerfConstraint;
    struct _PPM_CONCURRENCY_ACCOUNTING *Concurrency;
    struct _PROC_PERF_LOAD *Load;
    struct _PROC_PERF_HISTORY *PerfHistory;
    UCHAR GuaranteedPerformancePercent;
    UCHAR HvTargetState;
    UCHAR Parked;
    UCHAR OverUtilized;
    ULONG LatestPerformancePercent;
    ULONG LatestAffinitizedPercent;
    ULONG ExpectedUtility;
    struct _PROC_PERF_UTILITY Utility[3];
};

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA {
    struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
};

typedef struct _PROCESS_DISK_COUNTERS {
    ULONG64 BytesRead;
    ULONG64 BytesWritten;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 FlushOperationCount;
};

typedef struct _PROC_FEEDBACK {
    ULONG Lock;
    ULONG64 CyclesLast;
    ULONG64 CyclesActive;
    struct _PROC_FEEDBACK_COUNTER *Counters[2];
    ULONG64 LastUpdateTime;
    ULONG64 UnscaledTime;
    LONG64 UnaccountedTime;
    ULONG64 ScaledTime[2];
    ULONG64 UnaccountedKernelTime;
    ULONG64 PerformanceScaledKernelTime;
    ULONG UserTimeLast;
    ULONG KernelTimeLast;
    UCHAR KernelTimesIndex;
};

typedef struct _PROC_FEEDBACK_COUNTER {
    PVOID InstantaneousRead;
    PVOID DifferentialRead;
    ULONG64 LastActualCount;
    ULONG64 LastReferenceCount;
    ULONG CachedValue;
    UCHAR Affinitized;
    UCHAR Differential;
    UCHAR DisableInterrupts;
    ULONG Context;
};

typedef struct _PROC_IDLE_ACCOUNTING {
    ULONG StateCount;
    ULONG TotalTransitions;
    ULONG ResetCount;
    ULONG AbortCount;
    ULONG64 StartTime;
    ULONG64 PriorIdleTime;
    enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
    struct _PROC_IDLE_STATE_ACCOUNTING State[1];
};

typedef struct _PROC_IDLE_POLICY {
    UCHAR PromotePercent;
    UCHAR DemotePercent;
    UCHAR PromotePercentBase;
    UCHAR DemotePercentBase;
    UCHAR AllowScaling;
};

typedef struct _PROC_IDLE_SNAP {
    ULONG64 Time;
    ULONG64 Idle;
};

typedef struct _PROC_IDLE_STATE_ACCOUNTING {
    ULONG64 TotalTime;
    ULONG CancelCount;
    ULONG FailureCount;
    ULONG SuccessCount;
    ULONG InvalidBucketIndex;
    ULONG64 MinTime;
    ULONG64 MaxTime;
    struct _PPM_SELECTION_STATISTICS SelectionStatistics;
    struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
};

typedef struct _PROC_IDLE_STATE_BUCKET {
    ULONG64 TotalTime;
    ULONG64 MinTime;
    ULONG64 MaxTime;
    ULONG Count;
};

typedef struct _PROC_PERF_CONSTRAINT {
    struct _KPRCB *Prcb;
    ULONG PerfContext;
    ULONG PlatformCap;
    ULONG ThermalCap;
    ULONG LimitReasons;
    ULONG64 PlatformCapStartTime;
    ULONG TargetPercent;
    ULONG DesiredPercent;
    ULONG SelectedPercent;
    ULONG SelectedFrequency;
    ULONG PreviousFrequency;
    ULONG PreviousPercent;
    ULONG LatestFrequencyPercent;
    ULONG64 SelectedState;
    UCHAR Force;
};

typedef struct _PROC_PERF_DOMAIN {
    struct _LIST_ENTRY Link;
    struct _KPRCB *Master;
    struct _KAFFINITY_EX Members;
    ULONG ProcessorCount;
    struct _PROC_PERF_CONSTRAINT *Processors;
    PVOID GetFFHThrottleState;
    PVOID BoostPolicyHandler;
    PVOID BoostModeHandler;
    PULONG PerfSelectionHandler;
    PVOID PerfControlHandler;
    ULONG MaxFrequency;
    ULONG NominalFrequency;
    ULONG MaxPercent;
    ULONG MinPerfPercent;
    ULONG MinThrottlePercent;
    UCHAR Coordination;
    UCHAR HardPlatformCap;
    UCHAR AffinitizeControl;
    ULONG SelectedPercent;
    ULONG SelectedFrequency;
    ULONG DesiredPercent;
    ULONG MaxPolicyPercent;
    ULONG MinPolicyPercent;
    ULONG ConstrainedMaxPercent;
    ULONG ConstrainedMinPercent;
    ULONG GuaranteedPercent;
    ULONG TolerancePercent;
    ULONG64 SelectedState;
    UCHAR Force;
    ULONG64 PerfChangeTime;
    ULONG PerfChangeIntervalCount;
};

typedef struct _PROC_PERF_HISTORY {
    ULONG Count;
    ULONG Slot;
    struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
};

typedef struct _PROC_PERF_HISTORY_ENTRY {
    USHORT Utility;
    USHORT AffinitizedUtility;
    UCHAR Frequency;
    UCHAR Reserved;
};

typedef struct _PROC_PERF_LOAD {
    UCHAR BusyPercentage;
    UCHAR FrequencyPercentage;
};

typedef struct _PROC_PERF_SNAP {
    ULONG64 Time;
    ULONG64 LastTime;
    ULONG64 Active;
    ULONG64 LastActive;
    ULONG64 FrequencyScaledActive;
    ULONG64 PerformanceScaledActive;
    ULONG64 CyclesActive;
    ULONG64 CyclesAffinitized;
};

typedef struct _PROC_PERF_UTILITY {
    ULONG Affinitized;
    ULONG Performance;
    ULONG Total;
};

typedef struct _PROVIDER_BINARY_ENTRY {
    struct _LIST_ENTRY ListEntry;
    UCHAR ConsumersNotified;
    UCHAR Spare[3];
    ULONG DebugIdSize;
    union _CVDD DebugId;
};

typedef struct _PS_PROTECTION {
    UCHAR Level;
    UCHAR Type : 3;
    UCHAR Audit : 1;
    UCHAR Signer : 4;
};

typedef struct _PS_WAKE_INFORMATION {
    ULONG64 NotificationChannel;
    ULONG64 WakeCounters[5];
    ULONG64 NoWakeCounter;
};

typedef struct _PTE_TRACKER {
    struct _LIST_ENTRY ListEntry;
    struct _MDL *Mdl;
    ULONG Count;
    PVOID SystemVa;
    PVOID StartVa;
    ULONG Offset;
    ULONG Length;
    ULONG Page;
    ULONG IoMapping : 1;
    ULONG Matched : 1;
    ULONG CacheAttribute : 2;
    ULONG Spare : 28;
    PVOID StackTrace[7];
};

typedef struct _QUAD {
    LONG64 UseThisFieldToCopy;
    DOUBLE DoNotUseThisField;
};

typedef struct _RELATION_LIST {
    ULONG Count;
    ULONG TagCount;
    ULONG FirstLevel;
    ULONG MaxLevel;
    struct _RELATION_LIST_ENTRY *Entries[1];
};

typedef struct _RELATION_LIST_ENTRY {
    ULONG Count;
    ULONG MaxCount;
    struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];
};

typedef struct _RELATIVE_SYMLINK_INFO {
    USHORT ExposedNamespaceLength;
    USHORT Flags;
    USHORT DeviceNameLength;
    USHORT Reserved;
    struct _RELATIVE_SYMLINK_INFO *InteriorMountPoint;
    struct _UNICODE_STRING OpenedName;
};

typedef struct _REMOTE_PORT_VIEW {
    ULONG Length;
    ULONG ViewSize;
    PVOID ViewBase;
};

typedef struct _RH_OP_CONTEXT {
    struct _LIST_ENTRY Links;
    struct _IRP *OplockRequestIrp;
    struct _FILE_OBJECT *OplockRequestFileObject;
    struct _EPROCESS *OplockRequestProcess;
    struct _ETHREAD *OplockOwnerThread;
    ULONG Flags;
    struct _LIST_ENTRY AtomicLinks;
};

typedef struct _RSDS {
    ULONG Signature;
    struct _GUID Guid;
    ULONG Age;
    CHAR PdbName[1];
};

typedef struct _RTLP_RANGE_LIST_ENTRY {
    ULONG64 Start;
    ULONG64 End;
    struct {
        PVOID UserData;
        PVOID Owner;
    } Allocated;
    struct {
        struct _LIST_ENTRY ListHead;
    } Merged;
    UCHAR Attributes;
    UCHAR PublicFlags;
    USHORT PrivateFlags;
    struct _LIST_ENTRY ListEntry;
};

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *Previous;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    ULONG Flags;
};

typedef struct _RTL_ATOM_TABLE {
    ULONG Signature;
    LONG ReferenceCount;
    struct _EX_PUSH_LOCK PushLock;
    struct _HANDLE_TABLE *ExHandleTable;
    ULONG Flags;
    ULONG NumberOfBuckets;
    struct _RTL_ATOM_TABLE_ENTRY *Buckets[1];
};

typedef struct _RTL_ATOM_TABLE_ENTRY {
    struct _RTL_ATOM_TABLE_ENTRY *HashLink;
    USHORT HandleIndex;
    USHORT Atom;
    struct _RTL_ATOM_TABLE_REFERENCE Reference;
    UCHAR NameLength;
    WCHAR Name[1];
};

typedef struct _RTL_ATOM_TABLE_REFERENCE {
    struct _LIST_ENTRY LowBoxList;
    ULONG LowBoxID;
    USHORT ReferenceCount;
    USHORT Flags;
};

typedef struct _RTL_AVL_TABLE {
    struct _RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    struct _RTL_BALANCED_LINKS *RestartKey;
    ULONG DeleteCount;
    enum _RTL_GENERIC_COMPARE_RESULTS *CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_AVL_TREE {
    struct _RTL_BALANCED_NODE *Root;
};

typedef struct _RTL_BALANCED_LINKS {
    struct _RTL_BALANCED_LINKS *Parent;
    struct _RTL_BALANCED_LINKS *LeftChild;
    struct _RTL_BALANCED_LINKS *RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
};

typedef struct _RTL_BALANCED_NODE {
    struct _RTL_BALANCED_NODE *Children[2];
    struct _RTL_BALANCED_NODE *Left;
    struct _RTL_BALANCED_NODE *Right;
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG ParentValue;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_CRITICAL_SECTION {
    struct _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    PVOID OwningThread;
    PVOID LockSemaphore;
    ULONG SpinCount;
};

typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    struct _LIST_ENTRY ProcessLocksList;
    ULONG EntryCount;
    ULONG ContentionCount;
    ULONG Flags;
    USHORT CreatorBackTraceIndexHigh;
    USHORT SpareUSHORT;
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE {
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    struct _LIST_ENTRY *ChainHead;
    struct _LIST_ENTRY *PrevLinkage;
    ULONG Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    struct _LIST_ENTRY Linkage;
    ULONG Signature;
};

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    struct _LIST_ENTRY *ChainHead;
    ULONG BucketIndex;
};

typedef struct _RTL_RANGE {
    ULONG64 Start;
    ULONG64 End;
    PVOID UserData;
    PVOID Owner;
    UCHAR Attributes;
    UCHAR Flags;
};

typedef struct _RTL_RANGE_LIST {
    struct _LIST_ENTRY ListHead;
    ULONG Flags;
    ULONG Count;
    ULONG Stamp;
};

typedef struct _RTL_RB_TREE {
    struct _RTL_BALANCED_NODE *Root;
    struct _RTL_BALANCED_NODE *Min;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_SRWLOCK {
    ULONG Locked : 1;
    ULONG Waiting : 1;
    ULONG Waking : 1;
    ULONG MultipleShared : 1;
    ULONG Shared : 28;
    ULONG Value;
    PVOID Ptr;
};

typedef struct _RTL_TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    struct _TIME_FIELDS StandardStart;
    LONG StandardBias;
    WCHAR DaylightName[32];
    struct _TIME_FIELDS DaylightStart;
    LONG DaylightBias;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
    ULONG EnvironmentSize;
    ULONG EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SECTION_IMAGE_INFORMATION {
    PVOID TransferAddress;
    ULONG ZeroBits;
    ULONG MaximumStackSize;
    ULONG CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    ULONG GpValue;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR ImageFlags;
    UCHAR ComPlusNativeReady : 1;
    UCHAR ComPlusILOnly : 1;
    UCHAR ImageDynamicallyRelocated : 1;
    UCHAR ImageMappedFlat : 1;
    UCHAR BaseBelow4gb : 1;
    UCHAR Reserved : 3;
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};

typedef struct _SECTION_OBJECT {
    PVOID StartingVa;
    PVOID EndingVa;
    PVOID Parent;
    PVOID LeftChild;
    PVOID RightChild;
    struct _SEGMENT_OBJECT *Segment;
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURITY_CLIENT_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PVOID ClientToken;
    UCHAR DirectlyAccessClientToken;
    UCHAR DirectAccessEffectiveOnly;
    UCHAR ServerIsRemote;
    struct _TOKEN_CONTROL ClientTokenControl;
};

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PVOID Owner;
    PVOID Group;
    struct _ACL *Sacl;
    struct _ACL *Dacl;
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SEGMENT {
    struct _CONTROL_AREA *ControlArea;
    ULONG TotalNumberOfPtes;
    struct _SEGMENT_FLAGS SegmentFlags;
    ULONG NumberOfCommittedPages;
    ULONG64 SizeOfSegment;
    struct _MMEXTEND_INFO *ExtendInfo;
    PVOID BasedAddress;
    struct _EX_PUSH_LOCK SegmentLock;
    union {
        ULONG ImageCommitment;
        struct _EPROCESS *CreatingProcess;
    } u1;
    union {
        struct _MI_SECTION_IMAGE_INFORMATION *ImageInformation;
        PVOID FirstMappedVa;
    } u2;
    struct _MMPTE *PrototypePte;
};

typedef struct _SEGMENT_FLAGS {
    USHORT TotalNumberOfPtes4132 : 10;
    USHORT Spare0 : 1;
    USHORT LargePages : 1;
    USHORT LockedPages : 1;
    USHORT DebugSymbolsLoaded : 1;
    USHORT WriteCombined : 1;
    USHORT NoCache : 1;
    USHORT Short0;
    UCHAR FloppyMedia : 1;
    UCHAR DefaultProtectionMask : 5;
    UCHAR Binary32 : 1;
    UCHAR ContainsDebug : 1;
    UCHAR UChar1;
    UCHAR ILOnly : 1;
    UCHAR ImageSigningType : 3;
    UCHAR ImageSigningLevel : 4;
    UCHAR UChar2;
};

typedef struct _SEGMENT_OBJECT {
    PVOID BaseAddress;
    ULONG TotalNumberOfPtes;
    union _LARGE_INTEGER SizeOfSegment;
    ULONG NonExtendedPtes;
    ULONG ImageCommitment;
    struct _CONTROL_AREA *ControlArea;
    struct _SUBSECTION *Subsection;
    struct _MMSECTION_FLAGS *MmSectionFlags;
    struct _MMSUBSECTION_FLAGS *MmSubSectionFlags;
};

typedef struct _SEP_AUDIT_POLICY {
    struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
    UCHAR PolicySetStatus;
};

typedef struct _SEP_LOGON_SESSION_REFERENCES {
    struct _SEP_LOGON_SESSION_REFERENCES *Next;
    struct _LUID LogonId;
    struct _LUID BuddyLogonId;
    LONG ReferenceCount;
    ULONG Flags;
    struct _DEVICE_MAP *pDeviceMap;
    PVOID Token;
    struct _UNICODE_STRING AccountName;
    struct _UNICODE_STRING AuthorityName;
    struct _SEP_LOWBOX_HANDLES_TABLE LowBoxHandlesTable;
};

typedef struct _SEP_LOWBOX_HANDLES_ENTRY {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    LONG ReferenceCount;
    PVOID PackageSid;
    ULONG HandleCount;
    PVOID *Handles;
};

typedef struct _SEP_LOWBOX_HANDLES_TABLE {
    struct _EX_PUSH_LOCK Lock;
    struct _RTL_DYNAMIC_HASH_TABLE *HashTable;
};

typedef struct _SEP_LOWBOX_NUMBER_ENTRY {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    LONG ReferenceCount;
    PVOID PackageSid;
    ULONG LowboxNumber;
    PVOID AtomTable;
};

typedef struct _SEP_LOWBOX_NUMBER_MAPPING {
    struct _EX_PUSH_LOCK Lock;
    struct _RTL_BITMAP Bitmap;
    struct _RTL_DYNAMIC_HASH_TABLE *HashTable;
    UCHAR Active;
};

typedef struct _SEP_TOKEN_PRIVILEGES {
    ULONG64 Present;
    ULONG64 Enabled;
    ULONG64 EnabledByDefault;
};

typedef struct _SESSION_LOWBOX_MAP {
    struct _LIST_ENTRY ListEntry;
    ULONG SessionId;
    struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
};

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO {
    struct _OBJECT_NAME_INFORMATION *ImageFileName;
};

typedef struct _SHARED_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    ULONG OpenCount;
    union _LARGE_INTEGER FileSize;
    struct _LIST_ENTRY BcbList;
    union _LARGE_INTEGER SectionSize;
    union _LARGE_INTEGER ValidDataLength;
    union _LARGE_INTEGER ValidDataGoal;
    struct _VACB *InitialVacbs[4];
    struct _VACB **Vacbs;
    struct _EX_FAST_REF FileObjectFastRef;
    struct _EX_PUSH_LOCK VacbLock;
    ULONG DirtyPages;
    struct _LIST_ENTRY LoggedStreamLinks;
    struct _LIST_ENTRY SharedCacheMapLinks;
    ULONG Flags;
    LONG Status;
    struct _MBCB *Mbcb;
    PVOID Section;
    struct _KEVENT *CreateEvent;
    struct _KEVENT *WaitOnActiveCount;
    ULONG PagesToWrite;
    LONG64 BeyondLastFlush;
    struct _CACHE_MANAGER_CALLBACKS *Callbacks;
    PVOID LazyWriteContext;
    struct _LIST_ENTRY PrivateList;
    struct _LOGGED_STREAM_CALLBACK_V1 V1;
    struct _LOGGED_STREAM_CALLBACK_V2 V2;
    union _LARGE_INTEGER LargestLSN;
    ULONG DirtyPageThreshold;
    ULONG LazyWritePassCount;
    struct _CACHE_UNINITIALIZE_EVENT *UninitializeEvent;
    struct _FAST_MUTEX BcbLock;
    union _LARGE_INTEGER LastUnmapBehindOffset;
    struct _KEVENT Event;
    union _LARGE_INTEGER HighWaterMappingOffset;
    struct _PRIVATE_CACHE_MAP PrivateCacheMap;
    PVOID WriteBehindWorkQueueEntry;
    struct _VOLUME_CACHE_MAP *VolumeCacheMap;
    ULONG ProcImagePathHash;
    ULONG WritesInProgress;
};

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR {
    struct _LIST_ENTRY SharedCacheMapLinks;
    ULONG Flags;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_AND_ATTRIBUTES {
    PVOID Sid;
    ULONG Attributes;
};

typedef struct _SID_AND_ATTRIBUTES_HASH {
    ULONG SidCount;
    struct _SID_AND_ATTRIBUTES *SidAttr;
    ULONG Hash[32];
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _STACK_TABLE {
    USHORT NumStackTraces;
    USHORT TraceCapacity;
    struct _OBJECT_REF_TRACE *StackTrace[16];
    USHORT StackTableHash[16381];
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _STRING32 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG Buffer;
};

typedef struct _STRING64 {
    USHORT Length;
    USHORT MaximumLength;
    ULONG64 Buffer;
};

typedef struct _SUBSECTION {
    struct _CONTROL_AREA *ControlArea;
    struct _MMPTE *SubsectionBase;
    struct _SUBSECTION *NextSubsection;
    ULONG PtesInSubsection;
    ULONG UnusedPtes;
    struct _RTL_AVL_TREE GlobalPerSessionHead;
    union {
        ULONG LongFlags;
        struct _MMSUBSECTION_FLAGS SubsectionFlags;
    } u;
    ULONG StartingSector;
    ULONG NumberOfFullSectors;
};

typedef struct _SYNCH_COUNTERS {
    ULONG SpinLockAcquireCount;
    ULONG SpinLockContentionCount;
    ULONG SpinLockSpinCount;
    ULONG IpiSendRequestBroadcastCount;
    ULONG IpiSendRequestRoutineCount;
    ULONG IpiSendSoftwareInterruptCount;
    ULONG ExInitializeResourceCount;
    ULONG ExReInitializeResourceCount;
    ULONG ExDeleteResourceCount;
    ULONG ExecutiveResourceAcquiresCount;
    ULONG ExecutiveResourceContentionsCount;
    ULONG ExecutiveResourceReleaseExclusiveCount;
    ULONG ExecutiveResourceReleaseSharedCount;
    ULONG ExecutiveResourceConvertsCount;
    ULONG ExAcqResExclusiveAttempts;
    ULONG ExAcqResExclusiveAcquiresExclusive;
    ULONG ExAcqResExclusiveAcquiresExclusiveRecursive;
    ULONG ExAcqResExclusiveWaits;
    ULONG ExAcqResExclusiveNotAcquires;
    ULONG ExAcqResSharedAttempts;
    ULONG ExAcqResSharedAcquiresExclusive;
    ULONG ExAcqResSharedAcquiresShared;
    ULONG ExAcqResSharedAcquiresSharedRecursive;
    ULONG ExAcqResSharedWaits;
    ULONG ExAcqResSharedNotAcquires;
    ULONG ExAcqResSharedStarveExclusiveAttempts;
    ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive;
    ULONG ExAcqResSharedStarveExclusiveAcquiresShared;
    ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
    ULONG ExAcqResSharedStarveExclusiveWaits;
    ULONG ExAcqResSharedStarveExclusiveNotAcquires;
    ULONG ExAcqResSharedWaitForExclusiveAttempts;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresShared;
    ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
    ULONG ExAcqResSharedWaitForExclusiveWaits;
    ULONG ExAcqResSharedWaitForExclusiveNotAcquires;
    ULONG ExSetResOwnerPointerExclusive;
    ULONG ExSetResOwnerPointerSharedNew;
    ULONG ExSetResOwnerPointerSharedOld;
    ULONG ExTryToAcqExclusiveAttempts;
    ULONG ExTryToAcqExclusiveAcquires;
    ULONG ExBoostExclusiveOwner;
    ULONG ExBoostSharedOwners;
    ULONG ExEtwSynchTrackingNotificationsCount;
    ULONG ExEtwSynchTrackingNotificationsAccountedCount;
};

typedef struct _SYSPTES_HEADER {
    struct _LIST_ENTRY ListHead;
    ULONG Count;
    ULONG NumberOfEntries;
    ULONG NumberOfEntriesPeak;
};

typedef struct _SYSTEM_POWER_POLICY {
    ULONG Revision;
    struct POWER_ACTION_POLICY PowerButton;
    struct POWER_ACTION_POLICY SleepButton;
    struct POWER_ACTION_POLICY LidClose;
    enum _SYSTEM_POWER_STATE LidOpenWake;
    ULONG Reserved;
    struct POWER_ACTION_POLICY Idle;
    ULONG IdleTimeout;
    UCHAR IdleSensitivity;
    UCHAR DynamicThrottle;
    UCHAR Spare2[2];
    enum _SYSTEM_POWER_STATE MinSleep;
    enum _SYSTEM_POWER_STATE MaxSleep;
    enum _SYSTEM_POWER_STATE ReducedLatencySleep;
    ULONG WinLogonFlags;
    ULONG Spare3;
    ULONG DozeS4Timeout;
    ULONG BroadcastCapacityResolution;
    struct SYSTEM_POWER_LEVEL DischargePolicy[4];
    ULONG VideoTimeout;
    UCHAR VideoDimDisplay;
    ULONG VideoReserved[3];
    ULONG SpindownTimeout;
    UCHAR OptimizeForPower;
    UCHAR FanThrottleTolerance;
    UCHAR ForcedThrottle;
    UCHAR MinThrottle;
    struct POWER_ACTION_POLICY OverThrottled;
};

typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    ULONG Reserved1 : 8;
    ULONG TargetSystemState : 4;
    ULONG EffectiveSystemState : 4;
    ULONG CurrentSystemState : 4;
    ULONG IgnoreHibernationPath : 1;
    ULONG PseudoTransition : 1;
    ULONG Reserved2 : 10;
    ULONG ContextAsUlong;
};

typedef struct _TEB {
    struct _NT_TIB NtTib;
    PVOID EnvironmentPointer;
    struct _CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    struct _PEB *ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID SystemReserved1[54];
    LONG ExceptionCode;
    struct _ACTIVATION_CONTEXT_STACK *ActivationContextStackPointer;
    UCHAR SpareBytes[36];
    ULONG TxFsContext;
    struct _GDI_TEB_BATCH GdiTebBatch;
    struct _CLIENT_ID RealClientId;
    PVOID GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    ULONG LastStatusValue;
    struct _UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    struct _LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    PVOID Instrumentation[9];
    struct _GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    PVOID WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    PVOID SavedPriorityState;
    ULONG ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID *TlsExpansionSlots;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    USHORT HeapVirtualAffinity;
    USHORT LowFragHeapDataSlot;
    PVOID CurrentTransactionHandle;
    struct _TEB_ACTIVE_FRAME *ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT SpareSameTebBits : 4;
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    ULONG SpareUlong0;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
};

typedef struct _TEB32 {
    struct _NT_TIB32 NtTib;
    ULONG EnvironmentPointer;
    struct _CLIENT_ID32 ClientId;
    ULONG ActiveRpcHandle;
    ULONG ThreadLocalStoragePointer;
    ULONG ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    ULONG CsrClientThread;
    ULONG Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    ULONG WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    ULONG SystemReserved1[54];
    LONG ExceptionCode;
    ULONG ActivationContextStackPointer;
    UCHAR SpareBytes[36];
    ULONG TxFsContext;
    struct _GDI_TEB_BATCH32 GdiTebBatch;
    struct _CLIENT_ID32 RealClientId;
    ULONG GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    ULONG GdiThreadLocalInfo;
    ULONG Win32ClientInfo[62];
    ULONG glDispatchTable[233];
    ULONG glReserved1[29];
    ULONG glReserved2;
    ULONG glSectionInfo;
    ULONG glSection;
    ULONG glTable;
    ULONG glCurrentRC;
    ULONG glContext;
    ULONG LastStatusValue;
    struct _STRING32 StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    ULONG DeallocationStack;
    ULONG TlsSlots[64];
    struct LIST_ENTRY32 TlsLinks;
    ULONG Vdm;
    ULONG ReservedForNtRpc;
    ULONG DbgSsReserved[2];
    ULONG HardErrorMode;
    ULONG Instrumentation[9];
    struct _GUID ActivityId;
    ULONG SubProcessTag;
    ULONG PerflibData;
    ULONG EtwTraceData;
    ULONG WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    ULONG ReservedForPerf;
    ULONG ReservedForOle;
    ULONG WaitingOnLoaderLock;
    ULONG SavedPriorityState;
    ULONG ReservedForCodeCoverage;
    ULONG ThreadPoolData;
    ULONG TlsExpansionSlots;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    ULONG NlsCache;
    ULONG pShimData;
    USHORT HeapVirtualAffinity;
    USHORT LowFragHeapDataSlot;
    ULONG CurrentTransactionHandle;
    ULONG ActiveFrame;
    ULONG FlsData;
    ULONG PreferredLanguages;
    ULONG UserPrefLanguages;
    ULONG MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT SpareSameTebBits : 4;
    ULONG TxnScopeEnterCallback;
    ULONG TxnScopeExitCallback;
    ULONG TxnScopeContext;
    ULONG LockCount;
    ULONG SpareUlong0;
    ULONG ResourceRetValue;
    ULONG ReservedForWdf;
};

typedef struct _TEB64 {
    struct _NT_TIB64 NtTib;
    ULONG64 EnvironmentPointer;
    struct _CLIENT_ID64 ClientId;
    ULONG64 ActiveRpcHandle;
    ULONG64 ThreadLocalStoragePointer;
    ULONG64 ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    ULONG64 CsrClientThread;
    ULONG64 Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    ULONG64 WOW32Reserved;
    ULONG CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    ULONG64 SystemReserved1[54];
    LONG ExceptionCode;
    UCHAR Padding0[4];
    ULONG64 ActivationContextStackPointer;
    UCHAR SpareBytes[24];
    ULONG TxFsContext;
    UCHAR Padding1[4];
    struct _GDI_TEB_BATCH64 GdiTebBatch;
    struct _CLIENT_ID64 RealClientId;
    ULONG64 GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    ULONG64 GdiThreadLocalInfo;
    ULONG64 Win32ClientInfo[62];
    ULONG64 glDispatchTable[233];
    ULONG64 glReserved1[29];
    ULONG64 glReserved2;
    ULONG64 glSectionInfo;
    ULONG64 glSection;
    ULONG64 glTable;
    ULONG64 glCurrentRC;
    ULONG64 glContext;
    ULONG LastStatusValue;
    UCHAR Padding2[4];
    struct _STRING64 StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    UCHAR Padding3[6];
    ULONG64 DeallocationStack;
    ULONG64 TlsSlots[64];
    struct LIST_ENTRY64 TlsLinks;
    ULONG64 Vdm;
    ULONG64 ReservedForNtRpc;
    ULONG64 DbgSsReserved[2];
    ULONG HardErrorMode;
    UCHAR Padding4[4];
    ULONG64 Instrumentation[11];
    struct _GUID ActivityId;
    ULONG64 SubProcessTag;
    ULONG64 PerflibData;
    ULONG64 EtwTraceData;
    ULONG64 WinSockData;
    ULONG GdiBatchCount;
    struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    ULONG IdealProcessorValue;
    UCHAR ReservedPad0;
    UCHAR ReservedPad1;
    UCHAR ReservedPad2;
    UCHAR IdealProcessor;
    ULONG GuaranteedStackBytes;
    UCHAR Padding5[4];
    ULONG64 ReservedForPerf;
    ULONG64 ReservedForOle;
    ULONG WaitingOnLoaderLock;
    UCHAR Padding6[4];
    ULONG64 SavedPriorityState;
    ULONG64 ReservedForCodeCoverage;
    ULONG64 ThreadPoolData;
    ULONG64 TlsExpansionSlots;
    ULONG64 DeallocationBStore;
    ULONG64 BStoreLimit;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    ULONG64 NlsCache;
    ULONG64 pShimData;
    USHORT HeapVirtualAffinity;
    USHORT LowFragHeapDataSlot;
    UCHAR Padding7[4];
    ULONG64 CurrentTransactionHandle;
    ULONG64 ActiveFrame;
    ULONG64 FlsData;
    ULONG64 PreferredLanguages;
    ULONG64 UserPrefLanguages;
    ULONG64 MergedPrefLanguages;
    ULONG MuiImpersonation;
    USHORT CrossTebFlags;
    USHORT SpareCrossTebBits : 16;
    USHORT SameTebFlags;
    USHORT SafeThunkCall : 1;
    USHORT InDebugPrint : 1;
    USHORT HasFiberData : 1;
    USHORT SkipThreadAttach : 1;
    USHORT WerInShipAssertCode : 1;
    USHORT RanProcessInit : 1;
    USHORT ClonedThread : 1;
    USHORT SuppressDebugMsg : 1;
    USHORT DisableUserStackWalk : 1;
    USHORT RtlExceptionAttached : 1;
    USHORT InitialThread : 1;
    USHORT SessionAware : 1;
    USHORT SpareSameTebBits : 4;
    ULONG64 TxnScopeEnterCallback;
    ULONG64 TxnScopeExitCallback;
    ULONG64 TxnScopeContext;
    ULONG LockCount;
    ULONG SpareUlong0;
    ULONG64 ResourceRetValue;
    ULONG64 ReservedForWdf;
};

typedef struct _TEB_ACTIVE_FRAME {
    ULONG Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    struct _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
    ULONG Flags;
    PCHAR FrameName;
};

typedef struct _TERMINATION_PORT {
    struct _TERMINATION_PORT *Next;
    PVOID Port;
};

typedef struct _THERMAL_INFORMATION {
    ULONG ThermalStamp;
    ULONG ThermalConstant1;
    ULONG ThermalConstant2;
    ULONG Processors;
    ULONG SamplingPeriod;
    ULONG CurrentTemperature;
    ULONG PassiveTripPoint;
    ULONG CriticalTripPoint;
    UCHAR ActiveTripPointCount;
    ULONG ActiveTripPoint[10];
};

typedef struct _THERMAL_INFORMATION_EX {
    ULONG ThermalStamp;
    ULONG ThermalConstant1;
    ULONG ThermalConstant2;
    ULONG SamplingPeriod;
    ULONG CurrentTemperature;
    ULONG PassiveTripPoint;
    ULONG CriticalTripPoint;
    UCHAR ActiveTripPointCount;
    ULONG ActiveTripPoint[10];
    ULONG S4TransitionTripPoint;
    ULONG MinimumThrottle;
};

typedef struct _THERMAL_POLICY {
    ULONG Version;
    UCHAR WaitForUpdate;
    UCHAR Hibernate;
    UCHAR Critical;
    ULONG ActivationReasons;
    ULONG PassiveLimit;
    ULONG ActiveLevel;
};

typedef struct _THERMAL_ZONE_COUNTERS {
    ULONG Temperature;
    ULONG ThrottleLimit;
    ULONG ThrottleReasons;
};

typedef struct _THREAD_PERFORMANCE_DATA {
    USHORT Size;
    USHORT Version;
    struct _PROCESSOR_NUMBER ProcessorNumber;
    ULONG ContextSwitches;
    ULONG HwCountersCount;
    ULONG64 UpdateCount;
    ULONG64 WaitReasonBitMap;
    ULONG64 HardwareCounters;
    struct _COUNTER_READING CycleTime;
    struct _COUNTER_READING HwCounters[16];
};

typedef struct _TIME_FIELDS {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Minute;
    SHORT Second;
    SHORT Milliseconds;
    SHORT Weekday;
};

typedef struct _TOKEN {
    struct _TOKEN_SOURCE TokenSource;
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ParentTokenId;
    union _LARGE_INTEGER ExpirationTime;
    struct _ERESOURCE *TokenLock;
    struct _LUID ModifiedId;
    struct _SEP_TOKEN_PRIVILEGES Privileges;
    struct _SEP_AUDIT_POLICY AuditPolicy;
    ULONG SessionId;
    ULONG UserAndGroupCount;
    ULONG RestrictedSidCount;
    ULONG VariableLength;
    ULONG DynamicCharged;
    ULONG DynamicAvailable;
    ULONG DefaultOwnerIndex;
    struct _SID_AND_ATTRIBUTES *UserAndGroups;
    struct _SID_AND_ATTRIBUTES *RestrictedSids;
    PVOID PrimaryGroup;
    PULONG DynamicPart;
    struct _ACL *DefaultDacl;
    enum _TOKEN_TYPE TokenType;
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    ULONG TokenFlags;
    UCHAR TokenInUse;
    ULONG IntegrityLevelIndex;
    ULONG MandatoryPolicy;
    struct _SEP_LOGON_SESSION_REFERENCES *LogonSession;
    struct _LUID OriginatingLogonSession;
    struct _SID_AND_ATTRIBUTES_HASH SidHash;
    struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION *pSecurityAttributes;
    PVOID Package;
    struct _SID_AND_ATTRIBUTES *Capabilities;
    ULONG CapabilityCount;
    struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    struct _SEP_LOWBOX_NUMBER_ENTRY *LowboxNumberEntry;
    struct _SEP_LOWBOX_HANDLES_ENTRY *LowboxHandlesEntry;
    struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION *pClaimAttributes;
    PVOID TrustLevelSid;
    struct _TOKEN *TrustLinkedToken;
    ULONG VariablePart;
};

typedef struct _TOKEN_AUDIT_POLICY {
    UCHAR PerUserPolicy[29];
};

typedef struct _TOKEN_CONTROL {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ModifiedId;
    struct _TOKEN_SOURCE TokenSource;
};

typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    struct _LUID SourceIdentifier;
};

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    ULONG Version;
    struct _TP_POOL *Pool;
    struct _TP_CLEANUP_GROUP *CleanupGroup;
    PVOID CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PVOID FinalizationCallback;
    union {
        ULONG Flags;
        struct {
            ULONG LongFunction : 1;
            ULONG Persistent : 1;
            ULONG Private : 30;
        } s;
    } u;
    enum _TP_CALLBACK_PRIORITY CallbackPriority;
    ULONG Size;
};

typedef struct _TP_CALLBACK_INSTANCE {
};

typedef struct _TP_CLEANUP_GROUP {
};

typedef struct _TP_POOL {
};

typedef struct _TRACE_ENABLE_INFO {
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserved1;
    USHORT LoggerId;
    ULONG EnableProperty;
    ULONG Reserved2;
    ULONG64 MatchAnyKeyword;
    ULONG64 MatchAllKeyword;
};

typedef struct _TRACE_LOGFILE_HEADER {
    ULONG BufferSize;
    ULONG Version;
    struct {
        UCHAR MajorVersion;
        UCHAR MinorVersion;
        UCHAR SubVersion;
        UCHAR SubMinorVersion;
    } VersionDetail;
    ULONG ProviderVersion;
    ULONG NumberOfProcessors;
    union _LARGE_INTEGER EndTime;
    ULONG TimerResolution;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG BuffersWritten;
    struct _GUID LogInstanceGuid;
    ULONG StartBuffers;
    ULONG PointerSize;
    ULONG EventsLost;
    ULONG CpuSpeedInMHz;
    PUSHORT LoggerName;
    PUSHORT LogFileName;
    struct _RTL_TIME_ZONE_INFORMATION TimeZone;
    union _LARGE_INTEGER BootTime;
    union _LARGE_INTEGER PerfFreq;
    union _LARGE_INTEGER StartTime;
    ULONG ReservedFlags;
    ULONG BuffersLost;
};

typedef struct _TXN_PARAMETER_BLOCK {
    USHORT Length;
    USHORT TxFsContext;
    PVOID TransactionObject;
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PUSHORT Buffer;
};

typedef struct _VACB {
    PVOID BaseAddress;
    struct _SHARED_CACHE_MAP *SharedCacheMap;
    union {
        union _LARGE_INTEGER FileOffset;
        USHORT ActiveCount;
        struct _LIST_ENTRY Links;
    } Overlay;
    struct _VACB_ARRAY_HEADER *ArrayHead;
};

typedef struct _VACB_ARRAY_HEADER {
    ULONG VacbArrayIndex;
    ULONG MappingCount;
    ULONG HighestMappedIndex;
    ULONG Reserved;
};

typedef struct _VACB_LEVEL_REFERENCE {
    LONG Reference;
    LONG SpecialReference;
};

typedef struct _VERIFIER_SHARED_EXPORT_THUNK {
};

typedef struct _VF_ADDRESS_RANGE {
    PUCHAR Start;
    PUCHAR End;
};

typedef struct _VF_AVL_TABLE {
    struct _RTL_AVL_TABLE RtlTable;
    struct _VF_AVL_TREE_NODE *ReservedNode;
    PVOID NodeToFree;
    LONG Lock;
};

typedef struct _VF_AVL_TREE {
    ULONG NodeRangeSize;
    ULONG NodeCount;
    struct _VF_AVL_TABLE *Tables;
    ULONG TablesNo;
    union {
        ULONG NodeSize;
        ULONG UseLookaside;
    } u1;
};

typedef struct _VF_AVL_TREE_NODE {
    PVOID p;
    ULONG RangeSize;
};

typedef struct _VF_BTS_DATA_MANAGEMENT_AREA {
    PVOID BTSBufferBase;
    PVOID BTSIndex;
    PVOID BTSMax;
    PVOID BTSInterruptThreshold;
    PVOID PEBSBufferBase;
    PVOID PEBSIndex;
    PVOID PEBSMax;
    PVOID PEBSInterruptThreshold;
    PVOID PEBSCounterReset[2];
    CHAR Reserved[12];
};

typedef struct _VF_BTS_RECORD {
    PVOID JumpedFrom;
    PVOID JumpedTo;
    ULONG Unused1 : 3;
    ULONG Predicted : 4;
    ULONG Unused2 : 25;
};

typedef struct _VF_KE_CRITICAL_REGION_TRACE {
    struct _ETHREAD *Thread;
    PVOID StackTrace[7];
};

typedef struct _VF_POOL_TRACE {
    PVOID Address;
    ULONG Size;
    struct _ETHREAD *Thread;
    PVOID StackTrace[13];
};

typedef struct _VF_SUSPECT_DRIVER_ENTRY {
    struct _LIST_ENTRY Links;
    ULONG Loads;
    ULONG Unloads;
    struct _UNICODE_STRING BaseName;
};

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS {
    struct _VERIFIER_SHARED_EXPORT_THUNK *SharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *PoolSharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *OrderDependentSharedExportThunks;
    struct _VERIFIER_SHARED_EXPORT_THUNK *XdvSharedExportThunks;
};

typedef struct _VF_TARGET_DRIVER {
    struct _VF_AVL_TREE_NODE TreeNode;
    union {
        struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
        struct {
            ULONG SnapSharedExportsFailed : 1;
            ULONG Spare : 31;
        } Flags;
    } u1;
    struct _VF_TARGET_VERIFIED_DRIVER_DATA *VerifiedData;
};

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA {
    struct _VF_SUSPECT_DRIVER_ENTRY *SuspectDriverEntry;
    PVOID WMICallback;
    struct _LIST_ENTRY EtwHandlesListHead;
    union {
        struct {
            ULONG MissedEtwRegistration : 1;
            ULONG Spare : 31;
        } Flags;
        ULONG Whole;
    } u1;
    ULONG Signature;
    union _SLIST_HEADER PoolPageHeaders;
    union _SLIST_HEADER PoolTrackers;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG PagedBytes;
    ULONG NonPagedBytes;
    ULONG PeakPagedBytes;
    ULONG PeakNonPagedBytes;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsWithNoTag;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG LockedBytes;
    ULONG PeakLockedBytes;
    ULONG MappedLockedBytes;
    ULONG PeakMappedLockedBytes;
    ULONG MappedIoSpaceBytes;
    ULONG PeakMappedIoSpaceBytes;
    ULONG PagesForMdlBytes;
    ULONG PeakPagesForMdlBytes;
    ULONG ContiguousMemoryBytes;
    ULONG PeakContiguousMemoryBytes;
    struct _LIST_ENTRY ContiguousMemoryListHead;
};

typedef struct _VF_TRACKER {
    ULONG TrackerFlags;
    ULONG TrackerSize;
    ULONG TrackerIndex;
    ULONG TraceDepth;
};

typedef struct _VF_TRACKER_STAMP {
    PVOID Thread;
    UCHAR Flags : 8;
    UCHAR OldIrql : 8;
    UCHAR NewIrql : 8;
    UCHAR Processor : 8;
};

typedef struct _VF_WATCHDOG_IRP {
    struct _LIST_ENTRY ListEntry;
    struct _IRP *Irp;
    ULONG DueTickCount;
    UCHAR Inserted;
    CHAR TrackedStackLocation;
    USHORT CancelTimeoutTicks;
};

typedef struct _VI_DEADLOCK_GLOBALS {
    LONG64 TimeAcquire;
    LONG64 TimeRelease;
    struct _LIST_ENTRY *ResourceDatabase;
    ULONG ResourceDatabaseCount;
    struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
    struct _LIST_ENTRY *ThreadDatabase;
    ULONG ThreadDatabaseCount;
    struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
    ULONG AllocationFailures;
    ULONG NodesTrimmedBasedOnAge;
    ULONG NodesTrimmedBasedOnCount;
    ULONG NodesSearched;
    ULONG MaxNodesSearched;
    ULONG SequenceNumber;
    ULONG RecursionDepthLimit;
    ULONG SearchedNodesLimit;
    ULONG DepthLimitHits;
    ULONG SearchLimitHits;
    ULONG StackLimitHits;
    ULONG ABC_ACB_Skipped;
    ULONG OutOfOrderReleases;
    ULONG NodesReleasedOutOfOrder;
    ULONG TotalReleases;
    ULONG RootNodesDeleted;
    ULONG ForgetHistoryCounter;
    PVOID Instigator;
    ULONG NumberOfParticipants;
    struct _VI_DEADLOCK_NODE *Participant[32];
    LONG ChildrenCountWatermark;
    enum _KERNEL_STACK_LIMITS StackType;
    ULONG StackLowLimit;
    ULONG StackHighLimit;
};

typedef struct _VI_DEADLOCK_NODE {
    struct _VI_DEADLOCK_NODE *Parent;
    struct _LIST_ENTRY ChildrenList;
    struct _LIST_ENTRY SiblingsList;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY FreeListEntry;
    struct _VI_DEADLOCK_RESOURCE *Root;
    struct _VI_DEADLOCK_THREAD *ThreadEntry;
    union {
        ULONG Active : 1;
        ULONG OnlyTryAcquireUsed : 1;
        ULONG ReleasedOutOfOrder : 1;
        ULONG SequenceNumber : 29;
        ULONG Whole;
    } u1;
    LONG ChildrenCount;
    PVOID StackTrace[8];
    PVOID ParentStackTrace[8];
};

typedef struct _VI_DEADLOCK_RESOURCE {
    enum _VI_DEADLOCK_RESOURCE_TYPE Type;
    ULONG NodeCount : 16;
    ULONG RecursionCount : 16;
    PVOID ResourceAddress;
    struct _VI_DEADLOCK_THREAD *ThreadOwner;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY HashChainList;
    struct _LIST_ENTRY FreeListEntry;
    PVOID StackTrace[8];
    PVOID LastAcquireTrace[8];
    PVOID LastReleaseTrace[8];
};

typedef struct _VI_DEADLOCK_THREAD {
    struct _KTHREAD *Thread;
    struct _VI_DEADLOCK_NODE *CurrentSpinNode;
    struct _VI_DEADLOCK_NODE *CurrentOtherNode;
    struct _LIST_ENTRY ListEntry;
    struct _LIST_ENTRY FreeListEntry;
    ULONG NodeCount;
    ULONG PagingCount;
    UCHAR ThreadUsesEresources;
};

typedef struct _VI_FAULT_TRACE {
    struct _ETHREAD *Thread;
    PVOID StackTrace[8];
};

typedef struct _VI_POOL_ENTRY {
    struct _VI_POOL_PAGE_HEADER PageHeader;
    struct _VI_POOL_ENTRY_INUSE InUse;
    struct _SINGLE_LIST_ENTRY *NextFree;
};

typedef struct _VI_POOL_ENTRY_INUSE {
    PVOID VirtualAddress;
    PVOID CallingAddress;
    ULONG NumberOfBytes;
    ULONG Tag;
};

typedef struct _VI_POOL_PAGE_HEADER {
    struct _SINGLE_LIST_ENTRY *NextPage;
    PVOID VerifierEntry;
    ULONG Signature;
};

typedef struct _VI_TRACK_IRQL {
    PVOID Thread;
    UCHAR OldIrql;
    UCHAR NewIrql;
    USHORT Processor;
    ULONG TickCount;
    PVOID StackTrace[5];
};

typedef struct _VI_VERIFIER_ISSUE {
    ULONG IssueType;
    PVOID Address;
    ULONG Parameters[2];
};

typedef struct _VOLUME_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteCode;
    ULONG UseCount;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _LIST_ENTRY VolumeCacheMapLinks;
    ULONG DirtyPages;
    struct _LOG_HANDLE_CONTEXT LogHandleContext;
    ULONG Flags;
    ULONG PagesQueuedToDisk;
    ULONG LoggedPagesQueuedToDisk;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[32];
};

typedef struct _WAITING_IRP {
    struct _LIST_ENTRY Links;
    struct _IRP *Irp;
    PVOID CompletionRoutine;
    PVOID Context;
    struct _KEVENT *Event;
    ULONG Information;
    UCHAR BreakAllRH;
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct _LIST_ENTRY DmaWaitEntry;
    ULONG NumberOfChannels;
    ULONG SyncCallback : 1;
    ULONG DmaContext : 1;
    ULONG Reserved : 30;
    enum _IO_ALLOCATION_ACTION *DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WHEAP_ERROR_RECORD_WRAPPER {
    struct _LIST_ENTRY WorkEntry;
    ULONG Length;
    ULONG ProcessorNumber;
    union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
    LONG InUse;
    struct _WHEAP_ERROR_SOURCE *ErrorSource;
    struct _WHEA_ERROR_RECORD ErrorRecord;
};

typedef struct _WHEAP_ERROR_SOURCE {
    struct _LIST_ENTRY ListEntry;
    ULONG FailedAllocations;
    ULONG PlatformErrorSourceId;
    LONG ErrorCount;
    ULONG RecordCount;
    ULONG RecordLength;
    ULONG PoolTag;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    struct _WHEAP_ERROR_RECORD_WRAPPER *Records;
    PVOID Context;
    ULONG SectionCount;
    ULONG SectionLength;
    union _LARGE_INTEGER TickCountAtLastError;
    ULONG AccumulatedErrors;
    ULONG TotalErrors;
    UCHAR Deferred;
    struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
};

typedef struct _WHEAP_ERROR_SOURCE_TABLE {
    ULONG Signature;
    LONG Count;
    struct _LIST_ENTRY Items;
    struct _KEVENT InsertLock;
};

typedef struct _WHEAP_INFO_BLOCK {
    ULONG ErrorSourceCount;
    struct _WHEAP_ERROR_SOURCE_TABLE *ErrorSourceTable;
    struct _WHEAP_WORK_QUEUE *WorkQueue;
};

typedef struct _WHEAP_WORK_QUEUE {
    struct _LIST_ENTRY ListHead;
    ULONG ListLock;
    LONG ItemCount;
    struct _KDPC Dpc;
    struct _WORK_QUEUE_ITEM WorkItem;
    PVOID WorkRoutine;
};

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG SecondaryUncorrectableErrorMask;
    ULONG SecondaryUncorrectableErrorSev;
    ULONG SecondaryCapsAndControl;
};

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
};

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    struct _WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG RootErrorCommand;
};

typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    union _WHEA_ERROR_PACKET_FLAGS Flags;
    enum _WHEA_ERROR_TYPE ErrorType;
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    struct _GUID NotifyType;
    ULONG64 Context;
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
};

typedef struct _WHEA_ERROR_RECORD {
    struct _WHEA_ERROR_RECORD_HEADER Header;
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    union _WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    enum _WHEA_ERROR_SEVERITY Severity;
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
    ULONG Length;
    union _WHEA_TIMESTAMP Timestamp;
    struct _GUID PlatformId;
    struct _GUID PartitionId;
    struct _GUID CreatorId;
    struct _GUID NotifyType;
    ULONG64 RecordId;
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
};

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    union _WHEA_REVISION Revision;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    struct _GUID SectionType;
    struct _GUID FRUId;
    enum _WHEA_ERROR_SEVERITY SectionSeverity;
    CHAR FRUText[20];
};

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
    ULONG Length;
    ULONG Version;
    enum _WHEA_ERROR_SOURCE_TYPE Type;
    enum _WHEA_ERROR_SOURCE_STATE State;
    ULONG MaxRawDataLength;
    ULONG NumRecordsToPreallocate;
    ULONG MaxSectionsPerRecord;
    ULONG ErrorSourceId;
    ULONG PlatformErrorSourceId;
    ULONG Flags;
    union {
        struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
        struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
        struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
        struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
        struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
        struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
        struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
        struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
        struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
    } Info;
};

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {
    USHORT Type;
    UCHAR Reserved;
    UCHAR Enabled;
    ULONG ErrStatusBlockLength;
    ULONG RelatedErrorSourceId;
    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    union _LARGE_INTEGER ErrStatusAddress;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
};

typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
};

typedef struct _WHEA_MEMORY_ERROR_SECTION {
    union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
    union _WHEA_ERROR_STATUS ErrorStatus;
    ULONG64 PhysicalAddress;
    ULONG64 PhysicalAddressMask;
    USHORT Node;
    USHORT Card;
    USHORT Module;
    USHORT Bank;
    USHORT Device;
    USHORT Row;
    USHORT Column;
    USHORT BitPosition;
    ULONG64 RequesterId;
    ULONG64 ResponderId;
    ULONG64 TargetId;
    UCHAR ErrorType;
};

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
    UCHAR Type;
    UCHAR Length;
    union _WHEA_NOTIFICATION_FLAGS Flags;
    union {
        struct {
            ULONG PollInterval;
        } Polled;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Interrupt;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } LocalInterrupt;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sci;
        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Nmi;
    } u;
};

typedef struct _WHEA_PCI_SLOT_NUMBER {
    union {
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    ULONG Reserved;
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    union _XPF_MCE_FLAGS Flags;
    ULONG64 MCG_Capability;
    ULONG64 MCG_GlobalControl;
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
};

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
    UCHAR BankNumber;
    UCHAR ClearOnInitialization;
    UCHAR StatusDataFormat;
    union _XPF_MC_BANK_FLAGS Flags;
    ULONG ControlMsr;
    ULONG StatusMsr;
    ULONG AddressMsr;
    ULONG MiscMsr;
    ULONG64 ControlData;
};

typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
};

typedef struct _WMI_BUFFER_HEADER {
    ULONG BufferSize;
    ULONG SavedOffset;
    ULONG CurrentOffset;
    LONG ReferenceCount;
    union _LARGE_INTEGER TimeStamp;
    LONG64 SequenceNumber;
    ULONG64 ClockType : 3;
    ULONG64 Frequency : 61;
    struct _SINGLE_LIST_ENTRY SlistEntry;
    struct _WMI_BUFFER_HEADER *NextBuffer;
    struct _ETW_BUFFER_CONTEXT ClientContext;
    enum _ETW_BUFFER_STATE State;
    ULONG Offset;
    USHORT BufferFlag;
    USHORT BufferType;
    ULONG Padding1[4];
    struct _ETW_REF_CLOCK ReferenceTime;
    struct _LIST_ENTRY GlobalEntry;
    PVOID Pointer0;
    PVOID Pointer1;
};

typedef struct _WMI_LOGGER_CONTEXT {
    ULONG LoggerId;
    ULONG BufferSize;
    ULONG MaximumEventSize;
    ULONG LoggerMode;
    LONG AcceptNewEvents;
    ULONG EventMarker[1];
    ULONG ErrorMarker;
    ULONG SizeMask;
    PLONG64 GetCpuClock;
    struct _ETHREAD *LoggerThread;
    LONG LoggerStatus;
    ULONG FailureReason;
    struct _ETW_BUFFER_QUEUE BufferQueue;
    struct _ETW_BUFFER_QUEUE OverflowQueue;
    struct _LIST_ENTRY GlobalList;
    struct _LIST_ENTRY ProviderBinaryList;
    struct _WMI_BUFFER_HEADER *BatchedBufferList;
    struct _EX_FAST_REF CurrentBuffer;
    struct _UNICODE_STRING LoggerName;
    struct _UNICODE_STRING LogFileName;
    struct _UNICODE_STRING LogFilePattern;
    struct _UNICODE_STRING NewLogFileName;
    ULONG ClockType;
    ULONG LastFlushedBuffer;
    ULONG FlushTimer;
    ULONG FlushThreshold;
    union _LARGE_INTEGER ByteOffset;
    ULONG MinimumBuffers;
    LONG BuffersAvailable;
    LONG NumberOfBuffers;
    ULONG MaximumBuffers;
    ULONG EventsLost;
    LONG PeakBuffersCount;
    ULONG BuffersWritten;
    ULONG LogBuffersLost;
    ULONG RealTimeBuffersDelivered;
    ULONG RealTimeBuffersLost;
    PLONG SequencePtr;
    ULONG LocalSequence;
    struct _GUID InstanceGuid;
    ULONG MaximumFileSize;
    LONG FileCounter;
    enum _POOL_TYPE PoolType;
    struct _ETW_REF_CLOCK ReferenceTime;
    LONG CollectionOn;
    ULONG ProviderInfoSize;
    struct _LIST_ENTRY Consumers;
    ULONG NumConsumers;
    struct _ETW_REALTIME_CONSUMER *TransitionConsumer;
    PVOID RealtimeLogfileHandle;
    struct _UNICODE_STRING RealtimeLogfileName;
    union _LARGE_INTEGER RealtimeWriteOffset;
    union _LARGE_INTEGER RealtimeReadOffset;
    union _LARGE_INTEGER RealtimeLogfileSize;
    ULONG64 RealtimeLogfileUsage;
    ULONG64 RealtimeMaximumFileSize;
    ULONG RealtimeBuffersSaved;
    struct _ETW_REF_CLOCK RealtimeReferenceTime;
    enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
    struct _KEVENT LoggerEvent;
    struct _KEVENT FlushEvent;
    struct _KTIMER FlushTimeOutTimer;
    struct _KDPC LoggerDpc;
    struct _KMUTANT LoggerMutex;
    struct _EX_PUSH_LOCK LoggerLock;
    ULONG BufferListSpinLock;
    struct _EX_PUSH_LOCK BufferListPushLock;
    struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
    struct _EX_FAST_REF SecurityDescriptor;
    union _LARGE_INTEGER StartTime;
    PVOID LogFileHandle;
    LONG64 BufferSequenceNumber;
    ULONG Flags;
    ULONG Persistent : 1;
    ULONG AutoLogger : 1;
    ULONG FsReady : 1;
    ULONG RealTime : 1;
    ULONG Wow : 1;
    ULONG KernelTrace : 1;
    ULONG NoMoreEnable : 1;
    ULONG StackTracing : 1;
    ULONG ErrorLogged : 1;
    ULONG RealtimeLoggerContextFreed : 1;
    ULONG PebsTracing : 1;
    ULONG PmcCounters : 1;
    ULONG PageAlignBuffers : 1;
    ULONG SpareFlags1 : 3;
    ULONG SystemLoggerIndex : 8;
    ULONG StackCaching : 1;
    ULONG SpareFlags2 : 7;
    ULONG RequestFlag;
    ULONG DbgRequestNewFie : 1;
    ULONG DbgRequestUpdateFile : 1;
    ULONG DbgRequestFlush : 1;
    ULONG DbgRequestDisableRealtime : 1;
    ULONG DbgRequestDisconnectConsumer : 1;
    ULONG DbgRequestConnectConsumer : 1;
    ULONG DbgRequestNotifyConsumer : 1;
    ULONG DbgRequestUpdateHeader : 1;
    ULONG DbgRequestDefferdFlush : 1;
    ULONG DbgRequestDefferdFlushTimer : 1;
    ULONG DbgRequestFlushTimer : 1;
    ULONG DbgRequestUpdateDebugger : 1;
    ULONG DbgSpareRequestFlags : 20;
    struct _RTL_BITMAP HookIdMap;
    struct _ETW_STACK_CACHE *StackCache;
    struct _ETW_PMC_SUPPORT *PmcData;
    struct _LIST_ENTRY WinRtProviderBinaryList;
    struct _WMI_BUFFER_HEADER **ScratchArray;
};

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
};

typedef struct _WORK_QUEUE_ENTRY {
    struct _LIST_ENTRY WorkQueueLinks;
    union {
        struct {
            struct _FILE_OBJECT *FileObject;
        } Read;
        struct {
            struct _SHARED_CACHE_MAP *SharedCacheMap;
        } Write;
        struct {
            struct _KEVENT *Event;
        } Event;
        struct {
            ULONG Reason;
        } Notification;
        struct {
            struct _SHARED_CACHE_MAP *SharedCacheMap;
            struct _IO_STATUS_BLOCK *IoStatus;
            struct _KEVENT CallerWaitEvent;
            UCHAR IsLowPriWriteBehind;
        } LowPriWrite;
    } Parameters;
    UCHAR Function;
};

typedef struct _WORK_QUEUE_ITEM {
    struct _LIST_ENTRY List;
    PVOID WorkerRoutine;
    PVOID Parameter;
};

typedef struct _X86_DBGKD_CONTROL_SET {
    ULONG TraceFlag;
    ULONG Dr7;
    ULONG CurrentSymbolStart;
    ULONG CurrentSymbolEnd;
};

typedef struct _X86_KTRAP_FRAME {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    ULONG DbgArgPointer;
    ULONG TempSegCs;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    UCHAR PreviousPreviousMode;
    UCHAR EntropyQueueDpc;
    UCHAR Reserved[2];
    ULONG ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _X86_KTRAP_FRAME_BLUE {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    USHORT TempSegCs;
    UCHAR Logging;
    UCHAR FrameType;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    UCHAR PreviousPreviousMode;
    UCHAR EntropyQueueDpc;
    UCHAR Reserved[2];
    ULONG MxCsr;
    ULONG ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _XSAVE_AREA {
    struct _XSAVE_FORMAT LegacyState;
    struct _XSAVE_AREA_HEADER Header;
};

typedef struct _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 Reserved[7];
};

typedef struct _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    struct _M128A FloatRegisters[8];
    struct _M128A XmmRegisters[8];
    UCHAR Reserved4[224];
};

typedef struct _XSTATE_CONFIGURATION {
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG OptimizedSave : 1;
    struct _XSTATE_FEATURE Features[64];
};

typedef struct _XSTATE_CONTEXT {
    ULONG64 Mask;
    ULONG Length;
    ULONG Reserved1;
    struct _XSAVE_AREA *Area;
    ULONG Reserved2;
    PVOID Buffer;
    ULONG Reserved3;
};

typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
};

typedef struct _XSTATE_SAVE {
    LONG64 Reserved1;
    ULONG Reserved2;
    struct _XSTATE_SAVE *Prev;
    struct _XSAVE_AREA *Reserved3;
    struct _KTHREAD *Thread;
    PVOID Reserved4;
    UCHAR Level;
    struct _XSTATE_CONTEXT XStateContext;
};

typedef struct _flags {
    UCHAR Removable : 1;
    UCHAR GroupAssigned : 1;
    UCHAR GroupCommitted : 1;
    UCHAR GroupAssignmentFixed : 1;
    UCHAR Fill : 4;
};

typedef struct _iobuf {
    PCHAR _ptr;
    LONG _cnt;
    PCHAR _base;
    LONG _flag;
    LONG _file;
    LONG _charbuf;
    LONG _bufsiz;
    PCHAR _tmpfname;
};

typedef struct tagSWITCH_CONTEXT {
    struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
    struct tagSWITCH_CONTEXT_DATA Data;
};

typedef struct tagSWITCH_CONTEXT_ATTRIBUTE {
    ULONG64 ulContextUpdateCounter;
    LONG fAllowContextUpdate;
    LONG fEnableTrace;
    ULONG64 EtwHandle;
};

typedef struct tagSWITCH_CONTEXT_DATA {
    ULONG64 ullOsMaxVersionTested;
    ULONG64 ullContextMinimum;
    struct _GUID guPlatform;
    struct _GUID guMinPlatform;
    ULONG ulContextSource;
    ULONG ulElementCount;
    struct _GUID guElements[1];
};

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT SecondaryUncorrectableErrorMaskRW : 1;
    USHORT SecondaryUncorrectableErrorSevRW : 1;
    USHORT SecondaryCapsAndControlRW : 1;
    USHORT Reserved : 9;
    USHORT AsUSHORT;
};

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT Reserved : 12;
    USHORT AsUSHORT;
};

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
    USHORT UncorrectableErrorMaskRW : 1;
    USHORT UncorrectableErrorSeverityRW : 1;
    USHORT CorrectableErrorMaskRW : 1;
    USHORT AdvancedCapsAndControlRW : 1;
    USHORT RootErrorCommandRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _CLS_LSN {
    struct {
        ULONG idxRecord;
        ULONG cidContainer;
    } offset;
    ULONG64 ullOffset;
};

typedef union _CPU_INFO {
    ULONG AsUINT32[4];
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
};

typedef union _CVDD {
    ULONG Signature;
    struct _NB10 NB10;
    struct _RSDS RsDs;
};

typedef union _FILE_SEGMENT_ELEMENT {
    PVOID Buffer;
    ULONG64 Alignment;
};

typedef union _FS_FILTER_PARAMETERS {
    struct {
        union _LARGE_INTEGER *EndingOffset;
        struct _ERESOURCE **ResourceToRelease;
    } AcquireForModifiedPageWriter;
    struct {
        struct _ERESOURCE *ResourceToRelease;
    } ReleaseForModifiedPageWriter;
    struct {
        enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
        ULONG PageProtection;
    } AcquireForSectionSynchronization;
    struct {
        enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;
        UCHAR SafeToRecurse;
    } NotifyStreamFileObject;
    struct {
        PVOID Argument1;
        PVOID Argument2;
        PVOID Argument3;
        PVOID Argument4;
        PVOID Argument5;
    } Others;
};

typedef union _HV_CPUID_RESULT {
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
    ULONG AsUINT32[4];
    struct {
        ULONG ReservedEax;
        ULONG ReservedEbx : 24;
        ULONG InitialApicId : 8;
        ULONG ReservedEcx : 31;
        ULONG HypervisorPresent : 1;
        ULONG ReservedEdx;
    } VersionAndFeatures;
    struct _HV_VENDOR_AND_MAX_FUNCTION HvVendorAndMaxFunction;
    struct _HV_HYPERVISOR_INTERFACE_INFO HvInterface;
    struct _HV_HYPERVISOR_VERSION_INFO MsHvVersion;
    struct _HV_HYPERVISOR_FEATURES MsHvFeatures;
    struct _HV_ENLIGHTENMENT_INFORMATION MsHvEnlightenmentInformation;
    struct _HV_IMPLEMENTATION_LIMITS MsHvImplementationLimits;
    struct _HV_HYPERVISOR_HARDWARE_FEATURES MsHvHardwareFeatures;
};

typedef union _HV_PARTITION_PRIVILEGE_MASK {
    ULONG64 AsUINT64;
    ULONG64 AccessVpRunTimeMsr : 1;
    ULONG64 AccessPartitionReferenceCounter : 1;
    ULONG64 AccessSynicMsrs : 1;
    ULONG64 AccessSyntheticTimerMsrs : 1;
    ULONG64 AccessApicMsrs : 1;
    ULONG64 AccessHypercallMsrs : 1;
    ULONG64 AccessVpIndex : 1;
    ULONG64 AccessResetMsr : 1;
    ULONG64 AccessStatsMsr : 1;
    ULONG64 AccessPartitionReferenceTsc : 1;
    ULONG64 AccessGuestIdleMsr : 1;
    ULONG64 AccessFrequencyMsrs : 1;
    ULONG64 AccessDebugMsrs : 1;
    ULONG64 Reserved1 : 19;
    ULONG64 CreatePartitions : 1;
    ULONG64 AccessPartitionId : 1;
    ULONG64 AccessMemoryPool : 1;
    ULONG64 AdjustMessageBuffers : 1;
    ULONG64 PostMessages : 1;
    ULONG64 SignalEvents : 1;
    ULONG64 CreatePort : 1;
    ULONG64 ConnectPort : 1;
    ULONG64 AccessStats : 1;
    ULONG64 Reserved2 : 2;
    ULONG64 Debugging : 1;
    ULONG64 CpuManagement : 1;
    ULONG64 ConfigureProfiler : 1;
    ULONG64 EnableExpandedStackwalking : 1;
    ULONG64 Reserved3 : 17;
};

typedef union _KEXECUTE_OPTIONS {
    UCHAR ExecuteDisable : 1;
    UCHAR ExecuteEnable : 1;
    UCHAR DisableThunkEmulation : 1;
    UCHAR Permanent : 1;
    UCHAR ExecuteDispatchEnable : 1;
    UCHAR ImageDispatchEnable : 1;
    UCHAR DisableExceptionChainValidation : 1;
    UCHAR Spare : 1;
    UCHAR ExecuteOptions;
    UCHAR ExecuteOptionsNV;
};

typedef union _KSTACK_COUNT {
    LONG Value;
    ULONG State : 3;
    ULONG StackCount : 29;
};

typedef union _KWAIT_STATUS_REGISTER {
    UCHAR Flags;
    UCHAR State : 2;
    UCHAR Affinity : 1;
    UCHAR Priority : 1;
    UCHAR Apc : 1;
    UCHAR UserApc : 1;
    UCHAR Alert : 1;
    UCHAR Unused : 1;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _MMVIEW_CONTROL_AREA {
    struct _CONTROL_AREA *ControlArea;
    ULONG Writable : 1;
    ULONG ExceptionForInPageErrors : 1;
    ULONG Unused : 1;
    ULONG UsedForControlArea : 29;
};

typedef union _MM_PAGE_ACCESS_INFO_FLAGS {
    struct {
        ULONG FilePointerIndex : 9;
        ULONG HardFault : 1;
        ULONG Image : 1;
        ULONG Spare0 : 1;
    } File;
    struct {
        ULONG FilePointerIndex : 9;
        ULONG HardFault : 1;
        ULONG Spare1 : 2;
    } Private;
};

typedef union _MM_STORE_KEY {
    ULONG KeyLow : 28;
    ULONG KeyHigh : 4;
    ULONG EntireKey;
};

typedef union _PCW_CALLBACK_INFORMATION {
    struct _PCW_COUNTER_INFORMATION AddCounter;
    struct _PCW_COUNTER_INFORMATION RemoveCounter;
    struct _PCW_MASK_INFORMATION EnumerateInstances;
    struct _PCW_MASK_INFORMATION CollectData;
};

typedef union _POP_FX_COMPONENT_FLAGS {
    LONG Value;
    LONG Value2;
    ULONG RefCount : 30;
    ULONG Idling : 1;
    ULONG Active : 1;
    ULONG CriticalIdleOverride : 1;
    ULONG ResidentOverride : 1;
    ULONG CompleteIdleStatePending : 1;
    ULONG Reserved : 29;
};

typedef union _POP_FX_DEVICE_STATUS {
    LONG Value;
    ULONG SystemTransition : 1;
    ULONG PepD0Notify : 1;
    ULONG IdleTimerOn : 1;
    ULONG IgnoreIdleTimeout : 1;
    ULONG IrpInUse : 1;
    ULONG IrpPending : 1;
    ULONG DPNRDeviceNotified : 1;
    ULONG DPNRReceivedFromPep : 1;
    ULONG Reserved : 24;
};

typedef union _POWER_STATE {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
};

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE {
    LONG AsLong;
    LONG RefCount : 24;
    ULONG State : 8;
};

typedef union _PS_CLIENT_SECURITY_CONTEXT {
    ULONG ImpersonationData;
    PVOID ImpersonationToken;
    ULONG ImpersonationLevel : 2;
    ULONG EffectiveOnly : 1;
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    struct _SINGLE_LIST_ENTRY Next;
    USHORT Depth;
    USHORT CpuId;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS {
    ULONG Preallocated : 1;
    ULONG FromPersistentStore : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved : 28;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_PACKET_FLAGS {
    ULONG PreviousError : 1;
    ULONG Reserved1 : 1;
    ULONG HypervisorError : 1;
    ULONG Simulated : 1;
    ULONG PlatformPfaControl : 1;
    ULONG PlatformDirectedOffline : 1;
    ULONG Reserved2 : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    ULONG Recovered : 1;
    ULONG PreviousError : 1;
    ULONG Simulated : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    ULONG PlatformId : 1;
    ULONG Timestamp : 1;
    ULONG PartitionId : 1;
    ULONG Reserved : 29;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    ULONG Primary : 1;
    ULONG ContainmentWarning : 1;
    ULONG Reset : 1;
    ULONG ThresholdExceeded : 1;
    ULONG ResourceNotAvailable : 1;
    ULONG LatentError : 1;
    ULONG Reserved : 26;
    ULONG AsULONG;
};

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    UCHAR FRUId : 1;
    UCHAR FRUText : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _WHEA_ERROR_STATUS {
    ULONG64 ErrorStatus;
    ULONG64 Reserved1 : 8;
    ULONG64 ErrorType : 8;
    ULONG64 Address : 1;
    ULONG64 Control : 1;
    ULONG64 Data : 1;
    ULONG64 Responder : 1;
    ULONG64 Requester : 1;
    ULONG64 FirstError : 1;
    ULONG64 Overflow : 1;
    ULONG64 Reserved2 : 41;
};

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
    ULONG64 ErrorStatus : 1;
    ULONG64 PhysicalAddress : 1;
    ULONG64 PhysicalAddressMask : 1;
    ULONG64 Node : 1;
    ULONG64 Card : 1;
    ULONG64 Module : 1;
    ULONG64 Bank : 1;
    ULONG64 Device : 1;
    ULONG64 Row : 1;
    ULONG64 Column : 1;
    ULONG64 BitPosition : 1;
    ULONG64 RequesterId : 1;
    ULONG64 ResponderId : 1;
    ULONG64 TargetId : 1;
    ULONG64 ErrorType : 1;
    ULONG64 Reserved : 49;
    ULONG64 ValidBits;
};

typedef union _WHEA_NOTIFICATION_FLAGS {
    USHORT PollIntervalRW : 1;
    USHORT SwitchToPollingThresholdRW : 1;
    USHORT SwitchToPollingWindowRW : 1;
    USHORT ErrorThresholdRW : 1;
    USHORT ErrorThresholdWindowRW : 1;
    USHORT Reserved : 11;
    USHORT AsUSHORT;
};

typedef union _WHEA_PERSISTENCE_INFO {
    ULONG64 Signature : 16;
    ULONG64 Length : 24;
    ULONG64 Identifier : 16;
    ULONG64 Attributes : 2;
    ULONG64 DoNotLog : 1;
    ULONG64 Reserved : 5;
    ULONG64 AsULONGLONG;
};

typedef union _WHEA_REVISION {
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    USHORT AsUSHORT;
};

typedef union _WHEA_TIMESTAMP {
    ULONG64 Seconds : 8;
    ULONG64 Minutes : 8;
    ULONG64 Hours : 8;
    ULONG64 Precise : 1;
    ULONG64 Reserved : 7;
    ULONG64 Day : 8;
    ULONG64 Month : 8;
    ULONG64 Year : 8;
    ULONG64 Century : 8;
    union _LARGE_INTEGER AsLARGE_INTEGER;
};

typedef union _XPF_MCE_FLAGS {
    ULONG MCG_CapabilityRW : 1;
    ULONG MCG_GlobalControlRW : 1;
    ULONG Reserved : 30;
    ULONG AsULONG;
};

typedef union _XPF_MC_BANK_FLAGS {
    UCHAR ClearOnInitializationRW : 1;
    UCHAR ControlDataRW : 1;
    UCHAR Reserved : 6;
    UCHAR AsUCHAR;
};

typedef union _u {
    struct _CM_KEY_NODE KeyNode;
    struct _CM_KEY_VALUE KeyValue;
    struct _CM_KEY_SECURITY KeySecurity;
    struct _CM_KEY_INDEX KeyIndex;
    struct _CM_BIG_DATA ValueData;
    ULONG KeyList[1];
    WCHAR KeyString[1];
};

typedef enum BUS_QUERY_ID_TYPE {
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
};

typedef enum CPU_VENDORS {
    CPU_NONE = 0,
    CPU_INTEL = 1,
    CPU_AMD = 2,
    CPU_CYRIX = 3,
    CPU_TRANSMETA = 4,
    CPU_VIA = 5,
    CPU_CENTAUR = 5,
    CPU_RISE = 6,
    CPU_UNKNOWN = 7
};

typedef enum DEVICE_TEXT_TYPE {
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
};

typedef enum HAL_APIC_DESTINATION_MODE {
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat = 2,
    ApicDestinationModeLogicalClustered = 3,
    ApicDestinationModeUnknown = 4
};

typedef enum HSTORAGE_TYPE {
    Stable = 0,
    Volatile = 1,
    InvalidStorage = 2
};

typedef enum INTERRUPT_CONNECTION_TYPE {
    InterruptTypeControllerInput = 0,
    InterruptTypeXapicMessage = 1,
    InterruptTypeHypertransport = 2,
    InterruptTypeMessageRequest = 3
};

typedef enum IRPLOCK {
    IRPLOCK_CANCELABLE = 0,
    IRPLOCK_CANCEL_STARTED = 1,
    IRPLOCK_CANCEL_COMPLETE = 2,
    IRPLOCK_COMPLETED = 3
};

typedef enum KTM_STATE {
    KKtmUninitialized = 0,
    KKtmInitialized = 1,
    KKtmRecovering = 2,
    KKtmOnline = 3,
    KKtmRecoveryFailed = 4,
    KKtmOffline = 5
};

typedef enum LSA_FOREST_TRUST_RECORD_TYPE {
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2,
    ForestTrustRecordTypeLast = 2
};

typedef enum POWER_ACTION {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7
};

typedef enum POWER_POLICY_DEVICE_TYPE {
    PolicyDeviceSystemButton = 0,
    PolicyDeviceThermalZone = 1,
    PolicyDeviceBattery = 2,
    PolicyDeviceMemory = 3,
    PolicyInitiatePowerActionAPI = 4,
    PolicySetPowerStateAPI = 5,
    PolicyImmediateDozeS4 = 6,
    PolicySystemIdle = 7,
    PolicyDeviceWakeAlarm = 8,
    PolicyDeviceFan = 9,
    PolicyDeviceMax = 10
};

typedef enum PPM_IDLE_BUCKET_TIME_TYPE {
    PpmIdleBucketTimeInQpc = 0,
    PpmIdleBucketTimeIn100ns = 1,
    PpmIdleBucketTimeMaximum = 2
};

typedef enum PROFILE_DEPARTURE_STYLE {
    PDS_UPDATE_DEFAULT = 1,
    PDS_UPDATE_ON_REMOVE = 2,
    PDS_UPDATE_ON_INTERFACE = 3,
    PDS_UPDATE_ON_EJECT = 4
};

typedef enum PROFILE_STATUS {
    DOCK_NOTDOCKDEVICE = 0,
    DOCK_QUIESCENT = 1,
    DOCK_ARRIVING = 2,
    DOCK_DEPARTING = 3,
    DOCK_EJECTIRP_COMPLETED = 4
};

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
};

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3
};

typedef enum SYSTEM_POWER_CONDITION {
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
};

typedef enum UoWActionType {
    UoWAddThisKey = 0,
    UoWAddChildKey = 1,
    UoWDeleteThisKey = 2,
    UoWDeleteChildKey = 3,
    UoWSetValueNew = 4,
    UoWSetValueExisting = 5,
    UoWDeleteValue = 6,
    UoWSetKeyUserFlags = 7,
    UoWSetLastWriteTime = 8,
    UoWSetSecurityDescriptor = 9,
    UoWRenameSubKey = 10,
    UoWRenameOldSubKey = 11,
    UoWRenameNewSubKey = 12,
    UoWIsolation = 13,
    UoWInvalid = 14
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
};

typedef enum _ARBITER_ACTION {
    ArbiterActionTestAllocation = 0,
    ArbiterActionRetestAllocation = 1,
    ArbiterActionCommitAllocation = 2,
    ArbiterActionRollbackAllocation = 3,
    ArbiterActionQueryAllocatedResources = 4,
    ArbiterActionWriteReservedResources = 5,
    ArbiterActionQueryConflict = 6,
    ArbiterActionQueryArbitrate = 7,
    ArbiterActionAddReserved = 8,
    ArbiterActionBootAllocation = 9
};

typedef enum _ARBITER_REQUEST_SOURCE {
    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported = 0,
    ArbiterRequestHalReported = 1,
    ArbiterRequestLegacyAssigned = 2,
    ArbiterRequestPnpDetected = 3,
    ArbiterRequestPnpEnumerated = 4
};

typedef enum _ARBITER_RESULT {
    ArbiterResultUndefined = -1,
    ArbiterResultSuccess = 0,
    ArbiterResultExternalConflict = 1,
    ArbiterResultNullRequest = 2
};

typedef enum _BLOB_ID {
    BLOB_TYPE_UNKNOWN = 0,
    BLOB_TYPE_CONNECTION_INFO = 1,
    BLOB_TYPE_MESSAGE = 2,
    BLOB_TYPE_SECURITY_CONTEXT = 3,
    BLOB_TYPE_SECTION = 4,
    BLOB_TYPE_REGION = 5,
    BLOB_TYPE_VIEW = 6,
    BLOB_TYPE_RESERVE = 7,
    BLOB_TYPE_DIRECT_TRANSFER = 8,
    BLOB_TYPE_HANDLE_DATA = 9,
    BLOB_TYPE_MAX_ID = 10
};

typedef enum _CM_DIRTY_VECTOR_OPERATION {
    DirtyVectorModified = 0,
    DirtyDataCaptureStart = 1,
    DirtyDataCaptureEnd = 2
};

typedef enum _CM_LOAD_FAILURE_TYPE {
    _None = 0,
    _CmInitializeHive = 1,
    _HvInitializeHive = 2,
    _HvpBuildMap = 3,
    _HvpBuildMapForLoaderHive = 4,
    _HvpInitMap = 5,
    _HvLoadHive = 6,
    _HvpMapHiveImage = 7,
    _HvpRecoverData = 8,
    _CmpValidateHiveSecurityDescriptors = 9,
    _HvpEnlistBinInMap = 10,
    _CmCheckRegistry = 11,
    _CmRegistryIO = 12,
    _CmCheckRegistry2 = 13,
    _CmpCheckKey = 14,
    _CmpCheckValueList = 15,
    _HvCheckHive = 16,
    _HvCheckBin = 17,
    _HvpGetLogEntryDirtyVector = 18,
    _HvpReadLogEntryHeader = 19,
    _HvpReadLogEntry = 20
};

typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,
    CmResourceShareDeviceExclusive = 1,
    CmResourceShareDriverExclusive = 2,
    CmResourceShareShared = 3
};

typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2
};

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
};

typedef enum _DEVICE_RELATION_LEVEL {
    DeviceRelation = 0,
    Dependent = 1,
    DirectDescendant = 2
};

typedef enum _DEVICE_RELATION_TYPE {
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5
};

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
};

typedef enum _DEVPROP_OPERATOR {
    DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
    DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
    DEVPROP_OPERATOR_NONE = 0,
    DEVPROP_OPERATOR_EXISTS = 1,
    DEVPROP_OPERATOR_EQUALS = 2,
    DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
    DEVPROP_OPERATOR_GREATER_THAN = 3,
    DEVPROP_OPERATOR_LESS_THAN = 4,
    DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
    DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
    DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
    DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
    DEVPROP_OPERATOR_BITWISE_AND = 7,
    DEVPROP_OPERATOR_BITWISE_OR = 8,
    DEVPROP_OPERATOR_BEGINS_WITH = 9,
    DEVPROP_OPERATOR_ENDS_WITH = 10,
    DEVPROP_OPERATOR_CONTAINS = 11,
    DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
    DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
    DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
    DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
    DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
    DEVPROP_OPERATOR_AND_OPEN = 0x100000,
    DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
    DEVPROP_OPERATOR_OR_OPEN = 0x300000,
    DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
    DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
    DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
    DEVPROP_OPERATOR_MASK_EVAL = 4095,
    DEVPROP_OPERATOR_MASK_LIST = 0xf000,
    DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
    DEVPROP_OPERATOR_MASK_NOT_LOGICAL = 0xfffff,
    DEVPROP_OPERATOR_MASK_LOGICAL = -1048576
};

typedef enum _DMA_SPEED {
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
};

typedef enum _DMA_WIDTH {
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
};

typedef enum _DUMP_EVENTS {
    DUMP_EVENT_NONE = 0,
    DUMP_EVENT_HIBER_RESUME = 1,
    DUMP_EVENT_HIBER_RESUME_END = 2
};

typedef enum _ETW_BUFFER_STATE {
    EtwBufferStateFree = 0,
    EtwBufferStateGeneralLogging = 1,
    EtwBufferStateCSwitch = 2,
    EtwBufferStateFlush = 3,
    EtwBufferStateMaximum = 4
};

typedef enum _ETW_HEADER_TYPE {
    EtwHeaderTypeNative = 0,
    EtwHeaderTypeMax = 1
};

typedef enum _ETW_NOTIFICATION_TYPE {
    EtwNotificationTypeNoReply = 1,
    EtwNotificationTypeLegacyEnable = 2,
    EtwNotificationTypeEnable = 3,
    EtwNotificationTypePrivateLogger = 4,
    EtwNotificationTypePerflib = 5,
    EtwNotificationTypeAudio = 6,
    EtwNotificationTypeSession = 7,
    EtwNotificationTypeReserved = 8,
    EtwNotificationTypeCredentialUI = 9,
    EtwNotificationTypeInProcSession = 10,
    EtwNotificationTypeMax = 11
};

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE {
    ETW_PHF_EVENT_ID = 0,
    ETW_PHF_STACK_WALK = 1,
    ETW_PHF_MAX_COUNT = 2
};

typedef enum _ETW_RT_EVENT_LOSS {
    EtwRtEventNoLoss = 0,
    EtwRtEventLost = 1,
    EtwRtBufferLost = 2,
    EtwRtBackupLost = 3,
    EtwRtEventLossMax = 4
};

typedef enum _ETW_STRING_TOKEN_TYPE {
    ETW_STRING_TOKEN_EXE = 0,
    ETW_STRING_TOKEN_PACKAGE_ID = 1,
    ETW_STRING_TOKEN_PKG_APP_ID = 2,
    ETW_STRING_TOKEN_MAX_COUNT = 3
};

typedef enum _EVENT_TYPE {
    NotificationEvent = 0,
    SynchronizationEvent = 1
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
};

typedef enum _EXQUEUEINDEX {
    ExPoolUntrusted = 0,
    ExPoolTrusted = 1,
    ExPoolMax = 2
};

typedef enum _EX_BALANCE_OBJECT {
    ExTimerExpiration = 0,
    ExThreadSetManagerEvent = 1,
    ExThreadReaperEvent = 2,
    ExBalancerExitEvent = 3,
    ExMaximumBalanceObject = 4
};

typedef enum _EX_GEN_RANDOM_DOMAIN {
    ExGenRandomDomainKernel = 0,
    ExGenRandomDomainFirst = 0,
    ExGenRandomDomainUserVisible = 1,
    ExGenRandomDomainMax = 2
};

typedef enum _EX_POOL_PRIORITY {
    LowPoolPriority = 0,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
};

typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileMaximumInformation = 63
};

typedef enum _FILE_OBJECT_EXTENSION_TYPE {
    FoExtTypeTransactionParams = 0,
    FoExtTypeInternal = 1,
    FoExtTypeIosbRange = 2,
    FoExtTypeGeneric = 3,
    FoExtTypeSfio = 4,
    FoExtTypeSymlink = 5,
    FoExtTypeOplockKey = 6,
    MaxFoExtTypes = 7
};

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMaximumInformation = 13
};

typedef enum _FS_FILTER_SECTION_SYNC_TYPE {
    SyncTypeOther = 0,
    SyncTypeCreateSection = 1
};

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE {
    NotifyTypeCreate = 0,
    NotifyTypeRetired = 1
};

typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter = 0,
    MaxHardwareCounterType = 1
};

typedef enum _HEAP_FAILURE_TYPE {
    heap_failure_internal = 0,
    heap_failure_unknown = 1,
    heap_failure_generic = 2,
    heap_failure_entry_corruption = 3,
    heap_failure_multiple_entries_corruption = 4,
    heap_failure_virtual_block_corruption = 5,
    heap_failure_buffer_overrun = 6,
    heap_failure_buffer_underrun = 7,
    heap_failure_block_not_busy = 8,
    heap_failure_invalid_argument = 9,
    heap_failure_usage_after_free = 10,
    heap_failure_cross_heap_operation = 11,
    heap_failure_freelists_corruption = 12,
    heap_failure_listentry_corruption = 13,
    heap_failure_lfh_bitmap_mismatch = 14,
    heap_failure_segment_lfh_bitmap_corruption = 15,
    heap_failure_segment_lfh_double_free = 16
};

typedef enum _HV_CPUID_FUNCTION {
    HvCpuIdFunctionVersionAndFeatures = 1,
    HvCpuIdFunctionHvVendorAndMaxFunction = 0x40000000,
    HvCpuIdFunctionHvInterface = 0x40000001,
    HvCpuIdFunctionMsHvVersion = 0x40000002,
    HvCpuIdFunctionMsHvFeatures = 0x40000003,
    HvCpuIdFunctionMsHvEnlightenmentInformation = 0x40000004,
    HvCpuIdFunctionMsHvImplementationLimits = 0x40000005,
    HvCpuIdFunctionMsHvHardwareFeatures = 0x40000006,
    HvCpuIdFunctionMaxReserved = 0x40000006
};

typedef enum _HV_HYPERVISOR_INTERFACE {
    HvMicrosoftHypervisorInterface = 0x31237648
};

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
};

typedef enum _IOP_PRIORITY_HINT {
    IopIoPriorityNotSet = 0,
    IopIoPriorityVeryLow = 1,
    IopIoPriorityLow = 2,
    IopIoPriorityNormal = 3,
    IopIoPriorityHigh = 4,
    IopIoPriorityCritical = 5,
    MaxIopIoPriorityTypes = 6
};

typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
};

typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
};

typedef enum _IO_SESSION_STATE {
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9
};

typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
};

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    MaxJobObjectInfoClass = 27
};

typedef enum _KENLISTMENT_STATE {
    KEnlistmentUninitialized = 0,
    KEnlistmentActive = 256,
    KEnlistmentPreparing = 257,
    KEnlistmentPrepared = 258,
    KEnlistmentInDoubt = 259,
    KEnlistmentCommitted = 260,
    KEnlistmentCommittedNotify = 261,
    KEnlistmentCommitRequested = 262,
    KEnlistmentAborted = 263,
    KEnlistmentDelegated = 264,
    KEnlistmentDelegatedDisconnected = 265,
    KEnlistmentPrePreparing = 266,
    KEnlistmentForgotten = 267,
    KEnlistmentRecovering = 268,
    KEnlistmentAborting = 269,
    KEnlistmentReadOnly = 270,
    KEnlistmentOutcomeUnavailable = 271,
    KEnlistmentOffline = 272,
    KEnlistmentPrePrepared = 273,
    KEnlistmentInitialized = 274
};

typedef enum _KERNEL_STACK_LIMITS {
    BugcheckStackLimits = 0,
    DPCStackLimits = 1,
    ExpandedStackLimits = 2,
    NormalStackLimits = 3,
    Win32kStackLimits = 4,
    SwapBusyStackLimits = 5,
    IsrStackLimits = 6,
    MaximumStackLimits = 7
};

typedef enum _KINTERRUPT_MODE {
    LevelSensitive = 0,
    Latched = 1
};

typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
};

typedef enum _KOBJECTS {
    EventNotificationObject = 0,
    EventSynchronizationObject = 1,
    MutantObject = 2,
    ProcessObject = 3,
    QueueObject = 4,
    SemaphoreObject = 5,
    ThreadObject = 6,
    GateObject = 7,
    TimerNotificationObject = 8,
    TimerSynchronizationObject = 9,
    Spare2Object = 10,
    Spare3Object = 11,
    Spare4Object = 12,
    Spare5Object = 13,
    Spare6Object = 14,
    Spare7Object = 15,
    Spare8Object = 16,
    ProfileCallbackObject = 17,
    ApcObject = 18,
    DpcObject = 19,
    DeviceQueueObject = 20,
    PriQueueObject = 21,
    InterruptObject = 22,
    ProfileObject = 23,
    Timer2NotificationObject = 24,
    Timer2SynchronizationObject = 25,
    ThreadedDpcObject = 26,
    MaximumKernelObject = 27
};

typedef enum _KPROCESS_STATE {
    ProcessInMemory = 0,
    ProcessOutOfMemory = 1,
    ProcessInTransition = 2,
    ProcessOutTransition = 3,
    ProcessInSwap = 4,
    ProcessOutSwap = 5,
    ProcessAllSwapStates = 6
};

typedef enum _KPROFILE_SOURCE {
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24
};

typedef enum _KRESOURCEMANAGER_STATE {
    KResourceManagerUninitialized = 0,
    KResourceManagerOffline = 1,
    KResourceManagerOnline = 2
};

typedef enum _KSPIN_LOCK_QUEUE_NUMBER {
    LockQueueUnusedSpare0 = 0,
    LockQueueExpansionLock = 1,
    LockQueueUnusedSpare2 = 2,
    LockQueueSystemSpaceLock = 3,
    LockQueueVacbLock = 4,
    LockQueueMasterLock = 5,
    LockQueueNonPagedPoolLock = 6,
    LockQueueIoCancelLock = 7,
    LockQueueWorkQueueLock = 8,
    LockQueueIoVpbLock = 9,
    LockQueueIoDatabaseLock = 10,
    LockQueueIoCompletionLock = 11,
    LockQueueNtfsStructLock = 12,
    LockQueueAfdWorkQueueLock = 13,
    LockQueueBcbLock = 14,
    LockQueueMmNonPagedPoolLock = 15,
    LockQueueUnusedSpare16 = 16,
    LockQueueMaximumLock = 17
};

typedef enum _KTHREAD_STATE {
    Initialized = 0,
    Ready = 1,
    Running = 2,
    Standby = 3,
    Terminated = 4,
    Waiting = 5,
    Transition = 6,
    DeferredReady = 7,
    GateWaitObsolete = 8
};

typedef enum _KTIMER2_TYPE {
    KTimer2TypeMin = 0,
    KTimer2Plain = 0,
    KTimer2IdleResilient = 1,
    KTimer2HighResolution = 2,
    KTimer2NoWake = 3,
    KTimer2NoWakeFinite = 4,
    KTimer2TypeMax = 5
};

typedef enum _KTRANSACTION_OUTCOME {
    KTxOutcomeUninitialized = 0,
    KTxOutcomeUndetermined = 1,
    KTxOutcomeCommitted = 2,
    KTxOutcomeAborted = 3,
    KTxOutcomeUnavailable = 4
};

typedef enum _KTRANSACTION_STATE {
    KTransactionUninitialized = 0,
    KTransactionActive = 1,
    KTransactionPreparing = 2,
    KTransactionPrepared = 3,
    KTransactionInDoubt = 4,
    KTransactionCommitted = 5,
    KTransactionAborted = 6,
    KTransactionDelegated = 7,
    KTransactionPrePreparing = 8,
    KTransactionForgotten = 9,
    KTransactionRecovering = 10,
    KTransactionPrePrepared = 11
};

typedef enum _KWAIT_BLOCK_STATE {
    WaitBlockBypassStart = 0,
    WaitBlockBypassComplete = 1,
    WaitBlockActive = 2,
    WaitBlockInactive = 3,
    WaitBlockAllStates = 4
};

typedef enum _KWAIT_REASON {
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    MaximumWaitReason = 39
};

typedef enum _KWAIT_STATE {
    WaitInProgress = 0,
    WaitCommitted = 1,
    WaitAborted = 2,
    MaximumWaitState = 3
};

typedef enum _LDR_DDAG_STATE {
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9
};

typedef enum _LDR_DLL_LOAD_REASON {
    LoadReasonStaticDependency = 0,
    LoadReasonStaticForwarderDependency = 1,
    LoadReasonDynamicForwarderDependency = 2,
    LoadReasonDelayloadDependency = 3,
    LoadReasonDynamicLoad = 4,
    LoadReasonAsImageLoad = 5,
    LoadReasonAsDataLoad = 6,
    LoadReasonUnknown = -1
};

typedef enum _LOCK_OPERATION {
    IoReadAccess = 0,
    IoWriteAccess = 1,
    IoModifyAccess = 2
};

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6
};

typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
};

typedef enum _MI_CFG_BITMAP_TYPE {
    CfgBitMapNative = 0,
    CfgBitMapMax = 1
};

typedef enum _MI_DYNAMICBASE_BITMAP {
    DynamicBaseBitMap32 = 0,
    LastDynamicBaseBitMap = 1
};

typedef enum _MI_MEMORY_HIGHLOW {
    MiMemoryHigh = 0,
    MiMemoryLow = 1,
    MiMemoryHighLow = 2
};

typedef enum _MI_PFN_CACHE_ATTRIBUTE {
    MiNonCached = 0,
    MiCached = 1,
    MiWriteCombined = 2,
    MiNotMapped = 3
};

typedef enum _MI_STORE_BIT_TYPE {
    MiStoreBitTypeInStore = 0,
    MiStoreBitTypeEvicted = 1,
    MiStoreBitTypeMax = 2
};

typedef enum _MI_SYSTEM_VA_TYPE {
    MiVaUnused = 0,
    MiVaSessionSpace = 1,
    MiVaProcessSpace = 2,
    MiVaBootLoaded = 3,
    MiVaPfnDatabase = 4,
    MiVaNonPagedPool = 5,
    MiVaPagedPool = 6,
    MiVaSpecialPoolPaged = 7,
    MiVaSystemCache = 8,
    MiVaSystemPtes = 9,
    MiVaHal = 10,
    MiVaSessionGlobalSpace = 11,
    MiVaDriverImages = 12,
    MiVaSpecialPoolNonPaged = 13,
    MiVaPagedProtoPool = 14,
    MiVaMaximumType = 15,
    MiVaSystemPtesLarge = 16
};

typedef enum _MMLISTS {
    ZeroedPageList = 0,
    FreePageList = 1,
    StandbyPageList = 2,
    ModifiedPageList = 3,
    ModifiedNoWritePageList = 4,
    BadPageList = 5,
    ActiveAndValid = 6,
    TransitionPage = 7
};

typedef enum _MM_PAGE_ACCESS_TYPE {
    MmPteAccessType = 0,
    MmCcReadAheadType = 1,
    MmPfnRepurposeType = 2,
    MmMaximumPageAccessType = 3
};

typedef enum _MM_POOL_FAILURE_REASONS {
    MmNonPagedNoPtes = 0,
    MmPriorityTooLow = 1,
    MmNonPagedNoPagesAvailable = 2,
    MmPagedNoPtes = 3,
    MmSessionPagedNoPtes = 4,
    MmPagedNoPagesAvailable = 5,
    MmSessionPagedNoPagesAvailable = 6,
    MmPagedNoCommit = 7,
    MmSessionPagedNoCommit = 8,
    MmNonPagedNoResidentAvailable = 9,
    MmNonPagedNoCommit = 10,
    MmMaximumFailureReason = 11
};

typedef enum _MM_POOL_PRIORITIES {
    MmHighPriority = 0,
    MmNormalPriority = 1,
    MmLowPriority = 2,
    MmMaximumPoolPriority = 3
};

typedef enum _MM_POOL_TYPES {
    MmNonPagedPool = 0,
    MmPagedPool = 1,
    MmSessionPagedPool = 2,
    MmMaximumPoolType = 3
};

typedef enum _MM_PREEMPTIVE_TRIMS {
    MmPreemptForNonPaged = 0,
    MmPreemptForPaged = 1,
    MmPreemptForNonPagedPriority = 2,
    MmPreemptForPagedPriority = 3,
    MmMaximumPreempt = 4
};

typedef enum _MODE {
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
};

typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
};

typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation = 0,
    ObjectNameInformation = 1,
    ObjectTypeInformation = 2,
    ObjectTypesInformation = 3,
    ObjectHandleFlagInformation = 4,
    ObjectSessionInformation = 5,
    MaxObjectInfoClass = 6
};

typedef enum _OB_OPEN_REASON {
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
};

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
};

typedef enum _PERFINFO_MM_STAT {
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
};

typedef enum _PF_FILE_ACCESS_TYPE {
    PfFileAccessTypeRead = 0,
    PfFileAccessTypeWrite = 1,
    PfFileAccessTypeMax = 2
};

typedef enum _PLUGPLAY_EVENT_CATEGORY {
    HardwareProfileChangeEvent = 0,
    TargetDeviceChangeEvent = 1,
    DeviceClassChangeEvent = 2,
    CustomDeviceEvent = 3,
    DeviceInstallEvent = 4,
    DeviceArrivalEvent = 5,
    VetoEvent = 6,
    BlockedDriverEvent = 7,
    InvalidIDEvent = 8,
    DevicePropertyChangeEvent = 9,
    DeviceInstanceRemovalEvent = 10,
    DeviceInstanceStartedEvent = 11,
    MaxPlugEventCategory = 12
};

typedef enum _PNP_DEVICE_ACTION_REQUEST {
    AssignResources = 0,
    ClearDeviceProblem = 1,
    ClearProblem = 2,
    ClearEjectProblem = 3,
    HaltDevice = 4,
    QueryPowerRelations = 5,
    Rebalance = 6,
    ReenumerateBootDevices = 7,
    ReenumerateDeviceOnly = 8,
    ReenumerateDeviceTree = 9,
    ReenumerateRootDevices = 10,
    RequeryDeviceState = 11,
    ResetDevice = 12,
    ResourceRequirementsChanged = 13,
    RestartEnumeration = 14,
    SetDeviceProblem = 15,
    StartDevice = 16,
    StartSystemDevicesPass0 = 17,
    StartSystemDevicesPass1 = 18,
    NotifyTransportRelationsChange = 19,
    NotifyEjectionRelationsChange = 20,
    ConfigureDevice = 21,
    ConfigureDeviceClass = 22,
    ConfigureDeviceExtensions = 23
};

typedef enum _PNP_DEVICE_DELETE_TYPE {
    QueryRemoveDevice = 0,
    CancelRemoveDevice = 1,
    RemoveDevice = 2,
    SurpriseRemoveDevice = 3,
    EjectDevice = 4,
    RemoveFailedDevice = 5,
    RemoveUnstartedFailedDevice = 6,
    MaxDeviceDeleteType = 7
};

typedef enum _PNP_DEVNODE_STATE {
    DeviceNodeUnspecified = 768,
    DeviceNodeUninitialized = 769,
    DeviceNodeInitialized = 770,
    DeviceNodeDriversAdded = 771,
    DeviceNodeResourcesAssigned = 772,
    DeviceNodeStartPending = 773,
    DeviceNodeStartCompletion = 774,
    DeviceNodeStartPostWork = 775,
    DeviceNodeStarted = 776,
    DeviceNodeQueryStopped = 777,
    DeviceNodeStopped = 778,
    DeviceNodeRestartCompletion = 779,
    DeviceNodeEnumeratePending = 780,
    DeviceNodeEnumerateCompletion = 781,
    DeviceNodeAwaitingQueuedDeletion = 782,
    DeviceNodeAwaitingQueuedRemoval = 783,
    DeviceNodeQueryRemoved = 784,
    DeviceNodeRemovePendingCloses = 785,
    DeviceNodeRemoved = 786,
    DeviceNodeDeletePendingCloses = 787,
    DeviceNodeDeleted = 788,
    MaxDeviceNodeState = 789
};

typedef enum _PNP_VETO_TYPE {
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12
};

typedef enum _POLICY_AUDIT_EVENT_TYPE {
    AuditCategorySystem = 0,
    AuditCategoryLogon = 1,
    AuditCategoryObjectAccess = 2,
    AuditCategoryPrivilegeUse = 3,
    AuditCategoryDetailedTracking = 4,
    AuditCategoryPolicyChange = 5,
    AuditCategoryAccountManagement = 6,
    AuditCategoryDirectoryServiceAccess = 7,
    AuditCategoryAccountLogon = 8
};

typedef enum _POOL_TYPE {
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
};

typedef enum _POP_DEVICE_IDLE_TYPE {
    DeviceIdleNormal = 0,
    DeviceIdleDisk = 1
};

typedef enum _POP_IO_STATUS {
    IoReady = 0,
    IoPending = 1,
    IoDone = 2
};

typedef enum _POP_SPM_STATUS {
    PopSpmStatusUninitialized = 0,
    PopSpmStatusFailedNoMemory = 1,
    PopSpmStatusFailedNoPoliciesFound = 2,
    PopSpmStatusFailedToOpenExtHandle = 3,
    PopSpmStatusFailedToOpenIntHandle = 4,
    PopSpmStatusWaitingForRegistration = 5,
    PopSpmStatusInitialized = 6,
    PopSpmStatusInvalid = 7
};

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
};

typedef enum _POWER_REQUEST_TYPE_INTERNAL {
    PowerRequestDisplayRequiredInternal = 0,
    PowerRequestSystemRequiredInternal = 1,
    PowerRequestAwayModeRequiredInternal = 2,
    PowerRequestExecutionRequiredInternal = 3,
    PowerRequestPerfBoostRequiredInternal = 4,
    PowerRequestInternalInvalid = 5
};

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState = 1
};

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER {
    LookasideSmallIrpList = 0,
    LookasideMediumIrpList = 1,
    LookasideLargeIrpList = 2,
    LookasideMdlList = 3,
    LookasideCreateInfoList = 4,
    LookasideNameBufferList = 5,
    LookasideTwilightList = 6,
    LookasideCompletionList = 7,
    LookasideScratchBufferList = 8,
    LookasideMaximumList = 9
};

typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
};

typedef enum _PROCESS_SECTION_TYPE {
    ProcessSectionData = 0,
    ProcessSectionImage = 1,
    ProcessSectionImageNx = 2,
    ProcessSectionPagefileBacked = 3,
    ProcessSectionMax = 4
};

typedef enum _PROCESS_VA_TYPE {
    ProcessVAImage = 0,
    ProcessVASection = 1,
    ProcessVAPrivate = 2,
    ProcessVAMax = 3
};

typedef enum _PROC_HYPERVISOR_STATE {
    ProcHypervisorNone = 0,
    ProcHypervisorPresent = 1,
    ProcHypervisorPower = 2
};

typedef enum _PROC_PERF_UTILITY_TYPE {
    ProcPerfUtilityTypeIncrease = 0,
    ProcPerfUtilityTypeDecrease = 1,
    ProcPerfUtilityTypeCoreParking = 2,
    ProcPerfUtilityTypeMax = 3
};

typedef enum _PS_PROTECTED_SIGNER {
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerMax = 7
};

typedef enum _PS_RESOURCE_TYPE {
    PsResourceNonPagedPool = 0,
    PsResourcePagedPool = 1,
    PsResourcePageFile = 2,
    PsResourceWorkingSet = 3,
    PsResourceMax = 4
};

typedef enum _PS_WAKE_REASON {
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsMaxWakeReasons = 5
};

typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    MaxRegNtNotifyClass = 47
};

typedef enum _REQUESTER_TYPE {
    KernelRequester = 0,
    UserProcessRequester = 1,
    UserSharedServiceRequester = 2
};

typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2
};

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
};

typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
};

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
};

typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    TokenProcessTrustLevel = 41,
    MaxTokenInfoClass = 42
};

typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation = 2
};

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
};

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
};

typedef enum _TRANSFER_TYPE {
    ReadTransfer = 0,
    WriteTransfer = 1,
    OtherTransfer = 2
};

typedef enum _TYPE_OF_MEMORY {
    LoaderExceptionBlock = 0,
    LoaderSystemBlock = 1,
    LoaderFree = 2,
    LoaderBad = 3,
    LoaderLoadedProgram = 4,
    LoaderFirmwareTemporary = 5,
    LoaderFirmwarePermanent = 6,
    LoaderOsloaderHeap = 7,
    LoaderOsloaderStack = 8,
    LoaderSystemCode = 9,
    LoaderHalCode = 10,
    LoaderBootDriver = 11,
    LoaderConsoleInDriver = 12,
    LoaderConsoleOutDriver = 13,
    LoaderStartupDpcStack = 14,
    LoaderStartupKernelStack = 15,
    LoaderStartupPanicStack = 16,
    LoaderStartupPcrPage = 17,
    LoaderStartupPdrPage = 18,
    LoaderRegistryData = 19,
    LoaderMemoryData = 20,
    LoaderNlsData = 21,
    LoaderSpecialMemory = 22,
    LoaderBBTMemory = 23,
    LoaderReserve = 24,
    LoaderXIPRom = 25,
    LoaderHALCachedMemory = 26,
    LoaderLargePageFiller = 27,
    LoaderErrorLogMemory = 28,
    LoaderMaximum = 29
};

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
};

typedef enum _VI_DEADLOCK_RESOURCE_TYPE {
    VfDeadlockUnknown = 0,
    VfDeadlockMutex = 1,
    VfDeadlockMutexAbandoned = 2,
    VfDeadlockFastMutex = 3,
    VfDeadlockFastMutexUnsafe = 4,
    VfDeadlockSpinLock = 5,
    VfDeadlockInStackQueuedSpinLock = 6,
    VfDeadlockUnusedSpinLock = 7,
    VfDeadlockEresource = 8,
    VfDeadlockTypeMaximum = 9
};

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
};

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
};

typedef enum _WHEA_ERROR_SOURCE_STATE {
    WheaErrSrcStateStopped = 1,
    WheaErrSrcStateStarted = 2
};

typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeMax = 12
};

typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6
};

typedef enum _WORKING_SET_TYPE {
    WorkingSetTypeUser = 0,
    WorkingSetTypeSession = 1,
    WorkingSetTypeSystemTypes = 2,
    WorkingSetTypeSystemCache = 2,
    WorkingSetTypePagedPool = 3,
    WorkingSetTypeSystemPtes = 4,
    WorkingSetTypeMaximum = 5
};

typedef enum _WOW64_SHARED_INFORMATION {
    SharedNtdll32LdrInitializeThunk = 0,
    SharedNtdll32KiUserExceptionDispatcher = 1,
    SharedNtdll32KiUserApcDispatcher = 2,
    SharedNtdll32KiUserCallbackDispatcher = 3,
    SharedNtdll32ExpInterlockedPopEntrySListFault = 4,
    SharedNtdll32ExpInterlockedPopEntrySListResume = 5,
    SharedNtdll32ExpInterlockedPopEntrySListEnd = 6,
    SharedNtdll32RtlUserThreadStart = 7,
    SharedNtdll32pQueryProcessDebugInformationRemote = 8,
    SharedNtdll32BaseAddress = 9,
    SharedNtdll32LdrSystemDllInitBlock = 10,
    Wow64SharedPageEntriesCount = 11
};

 ?? ::EKOMKFNL::`string';
 ?? ::GHGBBCHJ::`string';
 ?? ::LBKOJDO::`string';
AECACHE_DEBUG_MESSAGE;
APPCOMPAT_REG_WRP_ACCESS_DENIED;
AccessCheckLog;
AcquireOpsEvent;
AcquireOpsReservePool;
ActionNames;
ActiveConnectList;
ActiveConnectListLock;
ActivityAttributes;
AdtpAccessIdsStringBuffer;
AdtpEventIdStringSpecific;
AdtpEventIdStringStandard;
AdtpNullGuid;
AdtpNullLuid;
AdtpNullSid;
AdtpPerCategoryCount;
AdtpRegisteredWithEtw;
AdtpSourceModuleLock;
AdtpSourceModules;
AdtpStandardAccessTypes;
AfdWorkQueueSpinLock;
AhCacheInfoMessage;
AhCacheOperationalMessage;
AhcDebugEventHandle;
AhcSystemEventHandle;
AhcTraceOutputEnabled;
AhcacheErrorMessage;
AlpcConnectionType;
AlpcConnectionTypeCounters;
AlpcHandleDataType;
AlpcHandleDataTypeCounters;
AlpcMessageTable;
AlpcMessageType;
AlpcMessageTypeCounters;
AlpcPortObjectType;
AlpcRegionType;
AlpcRegionTypeCounters;
AlpcReserveType;
AlpcReserveTypeCounters;
AlpcSectionType;
AlpcSectionTypeCounters;
AlpcSecurityType;
AlpcSecurityTypeCounters;
AlpcViewType;
AlpcViewTypeCounters;
AlpcpCompletionListDatabase;
AlpcpDummyEvent;
AlpcpFreeMessageLogListHead;
AlpcpFreeMessageSnapshotListHead;
AlpcpLogCallbackListHead;
AlpcpLogEnabled;
AlpcpLogLock;
AlpcpLookasides;
AlpcpMessageLogEnabled;
AlpcpMessageLogListHead;
AlpcpMessageLogLock;
AlpcpMessageLogLookupTable;
AlpcpNPLookasides;
AlpcpNextCallbackId;
AlpcpPortList;
AlpcpPortListLock;
AlpcpPortMapping;
AlpcpRegionGranularity;
AlpcpRegisteredTypes;
AlpcpSecondaryMessageTables;
AlpcpViewGranularity;
AlpcpWakePolicyDefault;
AltResMemBlockCount;
AlternateResourceModuleCount;
AlternateResourceModules;
AnimBarPos;
ArbMmConfigRange;
AuditLoggerGuid;
BATTERY_ETW_PROVIDER;
BATTERY_EVT_BATTERY_PERCENT_REMAINING;
BATTERY_EVT_SYSTEM_BATTERY_STATUS_CHANGE;
BATTERY_EVT_SYSTEM_BATTERY_STATUS_RUNDOWN;
BBTBuffer;
BOOTENV_ETW_PROVIDER;
BOOT_FW_BOOT_PERF_DATA;
BcdMutantHandle;
BcdSyncMutantName;
BcpCursor;
BcpDisplayParameters;
BcpLastProgressDisplayed;
BcpLastProgressUpdateTicks;
BcpStartTicks;
BcpStringsAndSizes;
BcpWorkspace;
BgInternal;
BgpConsoleInterface;
BiBcdMutantDescriptor;
BiosBegin;
BootDriverLock;
BootEnvSqm_Add_StreamRow;
BreakPointTimerStarted;
BreakpointsSuspended;
BuiltinCallbackReg;
BurnMemoryDescriptor;
BvgaBootDriverFullyInitialized;
BvgaBootDriverInstalled;
BvgaDisplayState;
BvgaOldIrql;
BvgaProgressIndicator;
BvgaProgressState;
BvgaResetDisplayParameters;
BvgaTerminalBkgdColor;
BvgaTerminalTextColor;
CCSwapNumLoggersPerClockType;
CKCLGuid;
CLFS_LSN_INVALID_EXT;
CLFS_LSN_NULL_EXT;
CMFCacheIndex;
CMFDirectorySectionPointer;
CMFFirstAccess;
CMFFlagsCache;
CMFHitsLastFlushTime;
CMFHitsSectionPointer;
CMFLock;
CMFSecurityDescriptor;
CMFSegmentSectionPointer;
CallLevelChange;
CallbackListDeleteEvent;
CallbackListHead;
CapSid;
CapeFlags;
CapeName;
CapePredicate;
CapeSD;
CapeStagedSD;
CcActiveExtraWriteBehindThreads;
CcAddExtraWriteBehindThreads;
CcAggressiveZeroCount;
CcAggressiveZeroThreshold;
CcAverageAvailablePages;
CcAverageDirtyPages;
CcBcbSpinLock;
CcBcbTrimNotificationList;
CcBcbTrimNotificationListLock;
CcBitmapLookasideList;
CcCapturedSystemSize;
CcChangeSharedCacheMapFileLock;
CcCleanSharedCacheMapList;
CcCleanSharedCacheMapWithLogHandleList;
CcCoalescingFlushEvent;
CcCoalescingRegistration;
CcCoalescingState;
CcCollisionDelay;
CcConsecutiveWorklessLazyScanCount;
CcDbgAdditionalPagesQueuedCount;
CcDbgCoalescingCmdFlushReceived;
CcDbgCoalescingCmdOffReceived;
CcDbgCoalescingCmdOnReceived;
CcDbgCoalescingFlushDueToMPW;
CcDbgForcedLogPercentFull;
CcDbgLsnLargerThanHint;
CcDbgNumberOfAbortedTeardowns;
CcDbgNumberOfCcUnmapInactiveViews;
CcDbgNumberOfFailedBitmapAllocations;
CcDbgNumberOfFailedHighPriorityMappings;
CcDbgNumberOfFailedHighPriorityMappingsDueToCcResources;
CcDbgNumberOfFailedHighPriorityMappingsDueToMmResources;
CcDbgNumberOfFailedMappingsDueToVacbSpace;
CcDbgNumberOfFailedWorkQueueEntryAllocations;
CcDbgNumberOfNoopedReadAheads;
CcDbgRandomFailed;
CcDbgSkippedReductions;
CcDeferredWriteSpinLock;
CcDeferredWrites;
CcDirtySharedCacheMapList;
CcDirtySharedCacheMapWithLogHandleList;
CcExecutingHighPriorityWorkItem;
CcExecutingWriteBehindWorkItems;
CcExpressWorkQueue;
CcExternalCacheList;
CcExternalCacheListLock;
CcExtraWBThreadDelay;
CcExtraWBThreadsActiveBeforeThrottle;
CcFastMdlReadWait;
CcFastTeardownWorkQueue;
CcFirstDelay;
CcForcedDisableLazywriteScan;
CcGlobalDirtyPageStatistics;
CcGlobalDirtyPageThresholds;
CcIdleDelay;
CcIdleDelayTick;
CcIdleExtraWriteBehindThreadList;
CcIdleWorkerThreadList;
CcInitializationComplete;
CcLazyWriterCursor;
CcLowMemoryEvent;
CcLowPriOldCpuPriority;
CcLowPriOldIoPriority;
CcLowPriSharedCacheMap;
CcLowPriWorkerThread;
CcLowPriorityWorkerThreadLock;
CcMasterSpinLock;
CcMaxExtraWriteBehindThreads;
CcMaxLazyWritePages;
CcMaxNumberOfWriteBehindThreads;
CcMaxVacbLevelsSeen;
CcMaxWorklessLazywriteScans;
CcMinimumFreeHighPriorityVacbs;
CcNoDelay;
CcNumberActiveWorkerThreads;
CcNumberOfExternalCaches;
CcNumberOfFreeHighPriorityVacbs;
CcNumberOfFreeVacbs;
CcNumberOfMappedVacbs;
CcNumberWorkerThreads;
CcPagesSkippedDueToHotSpot;
CcPagesYetToWrite;
CcPeriodicEvent;
CcPostTickWorkItemCount;
CcPostTickWorkQueue;
CcPowerEvent;
CcPrevExtraWBThreadCheckTime;
CcPrevRegularQueueItemRunTime;
CcQueueThrottle;
CcRandomSeed;
CcRegularWorkQueue;
CcRemoveExtraThreadPending;
CcTestControlData;
CcThreadsActiveBeforeThrottle;
CcThroughputStats;
CcThroughputTrend;
CcTwilightLookasideList;
CcVacbArrays;
CcVacbArraysAllocated;
CcVacbArraysHighestUsedIndex;
CcVacbFreeHighPriorityList;
CcVacbFreeList;
CcVacbLevelLookasideList;
CcVacbLevelWithBcbListHeadsLookasideList;
CcVacbSpinLock;
CcVolumeCacheMapList;
CcWaitingForTeardownEvent;
CcWorkQueueSpinLock;
CheckHeapFillPattern;
CmBootAcceptFirstTime;
CmCSDVersionString;
CmControlHive;
CmControlVector;
CmDefaultLanguageId;
CmDefaultLanguageIdLength;
CmDefaultLanguageIdType;
CmFastBoot;
CmFileNameExtensions;
CmFirstTime;
CmFreezeThawTimeoutInSeconds;
CmGlobalValidationRunlevel;
CmHiveIdentity;
CmInstallUILanguageFallbackToOOBm;
CmInstallUILanguageId;
CmInstallUILanguageIdLength;
CmInstallUILanguageIdType;
CmIoFileObjectType;
CmKeyObjectType;
CmLegacyAltitude;
CmNtCSDReleaseType;
CmNtCSDVersion;
CmNtGlobalFlag;
CmNtSpBuildNumber;
CmPerfCounters;
CmPhysicalAddressExtension;
CmProcessorMismatch;
CmProtectedStorage;
CmRegistryAppName;
CmRegistryIODebug;
CmRegistryLockTableLength;
CmRegistryLockTablePages;
CmRegistryLockTableType;
CmRegistryMachineHardwareDescriptionName;
CmRegistryMachineHardwareDescriptionSystemName;
CmRegistryMachineHardwareDeviceMapName;
CmRegistryMachineHardwareName;
CmRegistryMachineHardwareOwnerMapName;
CmRegistryMachineHardwareResourceMapName;
CmRegistryMachineName;
CmRegistryMachineSystemCurrentControlSet;
CmRegistryMachineSystemCurrentControlSetControlBootLog;
CmRegistryMachineSystemCurrentControlSetControlClass;
CmRegistryMachineSystemCurrentControlSetControlSafeBoot;
CmRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagement;
CmRegistryMachineSystemCurrentControlSetEnumName;
CmRegistryMachineSystemCurrentControlSetEnumRootName;
CmRegistryMachineSystemCurrentControlSetHardwareProfilesCurrent;
CmRegistryMachineSystemCurrentControlSetServices;
CmRegistryMachineSystemCurrentControlSetServicesEventLog;
CmRegistryMachineSystemName;
CmRegistryRootName;
CmRegistrySizeLimit;
CmRegistrySizeLimitLength;
CmRegistrySizeLimitType;
CmRegistrySystemCloneName;
CmRegistryUserName;
CmRmSystem;
CmSIDMappingCacheHit;
CmSelfHeal;
CmSuiteBuffer;
CmSuiteBufferLength;
CmSuiteBufferType;
CmSymbolicLinkValueName;
CmSystemHiveLimitSize;
CmTypeName;
CmTypeString;
CmVEEnabled;
CmVersionString;
CmpAccessBitForPhase;
CmpAcpString;
CmpActiveAppHiveUnloadCount;
CmpActiveAppHiveUnloadEvent;
CmpActiveHiveRundownCount;
CmpActiveHiveRundownEvent;
CmpAdminSystemFileSecurityDescriptor;
CmpAllocBucketLock;
CmpAllocInited;
CmpAmdID;
CmpApiSetSchemaExtensionsString;
CmpAppHiveLoadList;
CmpAppHiveLoadListLock;
CmpAsyncKernelPostList;
CmpBackupCount;
CmpBackupCountValueName;
CmpBootDriverFlagsString;
CmpBootFlagsString;
CmpBootLoadControl;
CmpBootServerReplyString;
CmpBootType;
CmpBuildGuidString;
CmpBuildLabExString;
CmpBuildLabString;
CmpCacheOnFlag;
CmpCallBackCount;
CmpCallbackContextSList;
CmpCallbackCookie;
CmpCallbackListLock;
CmpCannotWriteConfiguration;
CmpCentaurID;
CmpCheckHiveIndex;
CmpClfsLogPrefix;
CmpCoalescingCallbackActive;
CmpCoalescingRegistration;
CmpCodePageString;
CmpConfigurationAreaSize;
CmpConfigurationData;
CmpConfigurationManagerKeyName;
CmpConfigurationManagerKeyObject;
CmpConfigurationManagerString;
CmpContainerSuffix;
CmpContextListLock;
CmpControlIdConfigDbString;
CmpControlPathString;
CmpControlSessionManagerPathString;
CmpControlString;
CmpCrashControlString;
CmpCsdBuildNumberString;
CmpCsdVersionString;
CmpCurrentBuildNumberString;
CmpCurrentConfigString;
CmpCurrentControlSetControlNlsLanguagePathString;
CmpCurrentControlSetControlPxePathString;
CmpCurrentControlSetPathString;
CmpCurrentString;
CmpCurrentTypeString;
CmpCurrentVersionString;
CmpCyrixID;
CmpDefaultString;
CmpDelayCloseWorkItem;
CmpDelayCloseWorkItemActive;
CmpDelayDerefKCBListHead;
CmpDelayDerefKCBLock;
CmpDelayDerefKCBTimer;
CmpDelayDerefKCBWorkItem;
CmpDelayDerefKCBWorkItemActive;
CmpDelayFreeRMDpc;
CmpDelayFreeRMListHead;
CmpDelayFreeRMLock;
CmpDelayFreeRMTimer;
CmpDelayFreeRMWorkItem;
CmpDelayFreeRMWorkItemActive;
CmpDelayedCloseElements;
CmpDelayedCloseSize;
CmpDelayedCloseTableLock;
CmpDelayedLRUListHead;
CmpDependOnFirmwareString;
CmpDeviceIndexTable;
CmpDhcpServerAckString;
CmpDirtySectorCount;
CmpDirtyShutdownCountString;
CmpDisableEmoticonString;
CmpDiskFullWorkerPopupDisplayed;
CmpDisplayDisabledString;
CmpDoIdleProcessing;
CmpDontGrowLogFile;
CmpDriverDependencyString;
CmpDriverLoadPolicyString;
CmpDsaDatabaseFileString;
CmpEarlyLaunchString;
CmpEnableLazyFlushDpc;
CmpEnableLazyFlushTimer;
CmpEnableLazyFlushTimerInitialized;
CmpEnabledString;
CmpErrataString;
CmpErrorControlString;
CmpFailPrimarySave;
CmpFeatureBits;
CmpFileNameString;
CmpFirmwareBootDeviceString;
CmpFirmwareResourcesString;
CmpFirstReorganize;
CmpForceFlushPending;
CmpForceFlushWorkItem;
CmpFreeKCBListHead;
CmpFreezeListLock;
CmpFreezeThawDpc;
CmpFreezeThawPending;
CmpFreezeThawState;
CmpFreezeThawTimer;
CmpFreezeThawWaitListHead;
CmpFreezeThawWorkItem;
CmpGlobalFlushControlFlags;
CmpGlobalQuota;
CmpGlobalQuotaAllowed;
CmpGlobalQuotaUsed;
CmpGlobalQuotaWarning;
CmpGroupAssignmentString;
CmpGroupOrderListString;
CmpGroupString;
CmpHardwareConfigString;
CmpHardwareProfilesCurrentPathString;
CmpHardwareProfilesPathString;
CmpHiveFileListHandle;
CmpHiveListHead;
CmpHiveListHeadLock;
CmpHoldLazyFlush;
CmpIdString;
CmpImagePathString;
CmpInfNameString;
CmpInitRmLogOnLoad;
CmpInstallLanguageString;
CmpIntelID;
CmpKeyTypeNameString;
CmpLKGEnabled;
CmpLanguageString;
CmpLastAttemptStatusString;
CmpLastBootShutdownString;
CmpLastBootSucceededString;
CmpLastKnownGoodString;
CmpLazyCommitDpc;
CmpLazyCommitListHead;
CmpLazyCommitTimer;
CmpLazyCommitWorkItem;
CmpLazyCommitWorkItemActive;
CmpLazyFlushIntervalInSeconds;
CmpLazyReconcileIntervalInSeconds;
CmpLazyWriterData;
CmpListString;
CmpLoadHiveLock;
CmpLoadHiveLockOwner;
CmpLoadOptions;
CmpLoadWorkerDebugEvent;
CmpLoadWorkerEvent;
CmpLoadWorkerIncrement;
CmpLoadingSystemHivesActive;
CmpLockTable;
CmpLockTablePresent;
CmpLogExt;
CmpLogPath;
CmpLogPrefix;
CmpMHz;
CmpMachineHiveList;
CmpMasterHive;
CmpMemoryManagementString;
CmpMiniNTBoot;
CmpMountThread;
CmpNameCacheTable;
CmpNameString;
CmpNlsString;
CmpNoMasterCreates;
CmpNoMoreTx;
CmpNoWrite;
CmpNodeDistanceString;
CmpNtdsString;
CmpNumaString;
CmpOemCpString;
CmpOpenSubKeys;
CmpParametersString;
CmpParseCacheLock;
CmpParseCacheTable;
CmpPendingDriverOperationsString;
CmpPerflibPathString;
CmpPeriodicBackupFlushHiveCount;
CmpPhaseString;
CmpPlatformSpecificField1;
CmpPlatformSpecificField2;
CmpPoliciesString;
CmpPostLock;
CmpPreloadedHivesCount;
CmpPreloadedHivesList;
CmpPrevIdleProcessingState;
CmpPreviousUpdateRevision;
CmpProcessorControl;
CmpProcessorNameString;
CmpProcessorString1;
CmpProcessorString2;
CmpProductOptionsString;
CmpProductTypeString;
CmpProfileLoaded;
CmpPuntBoot;
CmpQuotaExplicitlySet;
CmpQuotaWarningPopupDisplayed;
CmpRegistryAppString;
CmpRegistryLock;
CmpRegistryMachineHardwareDescriptionString;
CmpRegistryMachineHardwareDescriptionSystemString;
CmpRegistryMachineHardwareDeviceMapString;
CmpRegistryMachineHardwareOwnerMapString;
CmpRegistryMachineHardwareResourceMapString;
CmpRegistryMachineHardwareString;
CmpRegistryMachineString;
CmpRegistryMachineSystemCurrentControlSetControlBootLogString;
CmpRegistryMachineSystemCurrentControlSetControlClassString;
CmpRegistryMachineSystemCurrentControlSetControlSafeBootString;
CmpRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagementString;
CmpRegistryMachineSystemCurrentControlSetEnumRootString;
CmpRegistryMachineSystemCurrentControlSetEnumString;
CmpRegistryMachineSystemCurrentControlSetHardwareProfilesCurrentString;
CmpRegistryMachineSystemCurrentControlSetServicesEventLogString;
CmpRegistryMachineSystemCurrentControlSetServicesString;
CmpRegistryMachineSystemCurrentControlSetString;
CmpRegistryMachineSystemString;
CmpRegistryRootObject;
CmpRegistryRootString;
CmpRegistrySystemCloneString;
CmpRegistrySystemFileNameString;
CmpRegistryUserString;
CmpReorganizeDelayDays;
CmpReorganizeLastRun;
CmpReorganizeLimit;
CmpReorganizeTotalBytesSaved;
CmpResetString;
CmpRiseID;
CmpRmListHead;
CmpRmListLock;
CmpSIDMappingLock;
CmpSIDToHiveMapping;
CmpSIDToHiveMappingCount;
CmpSIDToHiveMappingSize;
CmpSelectString;
CmpSelfHeal;
CmpServiceGroupOrderString;
CmpServicesKeyName;
CmpServicesString;
CmpSessionManagerString;
CmpShareSystemHives;
CmpShutdownLock;
CmpShutdownRundown;
CmpSizeOfPagedPoolInBytes;
CmpSpecialBootCondition;
CmpStartOverrideString;
CmpStartString;
CmpStrAliasString;
CmpStrCapabilitiesString;
CmpStrCurrentDockInfoString;
CmpStrDatabaseString;
CmpStrDockIdString;
CmpStrDockingStateString;
CmpStrProfileNumberString;
CmpStrSerialNumberString;
CmpSymbolicLinkValueName;
CmpSystemBiosVersionString;
CmpSystemBootDeviceString;
CmpSystemFileName;
CmpSystemHiveHysteresisCallback;
CmpSystemHiveHysteresisContext;
CmpSystemHiveHysteresisHigh;
CmpSystemHiveHysteresisHighSeen;
CmpSystemHiveHysteresisHitRatio;
CmpSystemHiveHysteresisLow;
CmpSystemHiveHysteresisLowSeen;
CmpSystemProcess;
CmpSystemQuotaWarningPopupDisplayed;
CmpSystemRootString;
CmpSystemSelectPathString;
CmpSystemStartOptionsString;
CmpTagString;
CmpTraceRoutine;
CmpTraceTxrRoutine;
CmpTrackHiveClose;
CmpTransactionInitializingCount;
CmpTransactionInitializingEvent;
CmpTransactionListLock;
CmpTransmetaID;
CmpTrustedInstallerSid;
CmpUpdateRevision;
CmpUpdateStatus;
CmpUserPresent;
CmpVEEnabled;
CmpVendorID;
CmpVerifierOptions;
CmpVerifyDriverLevelString;
CmpVolatileBoot;
CmpWasSetupBoot;
CmpWildcardString;
CmpWindowsNtString;
CmpWorkerDataInitialized;
CmpWorkerEngineFinishedEvent;
CmpWorkerEngineListHead;
CmpWorkerEngineLock;
CmpWorkerEngineWorkItem;
CmpWorkerEngineWorkItemActive;
ContainedCapes;
CrashdmpCallTable;
CrashdmpDumpBlock;
CrashdmpGuid;
CrashdmpImageBase;
CrashdmpImageEntry;
CrashdmpInitialized;
Crc32Ctrl;
Crc64Ctrl;
CritSecGuid;
DEVPKEY_DeviceClass_Characteristics;
DEVPKEY_DeviceClass_ClassCoInstallers;
DEVPKEY_DeviceClass_ClassInstaller;
DEVPKEY_DeviceClass_ClassName;
DEVPKEY_DeviceClass_Configurable;
DEVPKEY_DeviceClass_ConfigurableOverride;
DEVPKEY_DeviceClass_DHPRebalanceOptOut;
DEVPKEY_DeviceClass_DefaultService;
DEVPKEY_DeviceClass_DevType;
DEVPKEY_DeviceClass_Exclusive;
DEVPKEY_DeviceClass_Icon;
DEVPKEY_DeviceClass_IconPath;
DEVPKEY_DeviceClass_LastDeleteDate;
DEVPKEY_DeviceClass_LowerFilters;
DEVPKEY_DeviceClass_LowerLogoVersion;
DEVPKEY_DeviceClass_Name;
DEVPKEY_DeviceClass_NoDisplayClass;
DEVPKEY_DeviceClass_NoInstallClass;
DEVPKEY_DeviceClass_NoUseClass;
DEVPKEY_DeviceClass_PolicyExempt;
DEVPKEY_DeviceClass_PropPageProvider;
DEVPKEY_DeviceClass_Security;
DEVPKEY_DeviceClass_SecuritySDS;
DEVPKEY_DeviceClass_SilentInstall;
DEVPKEY_DeviceClass_UpperFilters;
DEVPKEY_DeviceContainer_ConfigFlags;
DEVPKEY_DeviceContainer_HasProblem;
DEVPKEY_DeviceContainer_IsConnected;
DEVPKEY_DeviceContainer_IsLocalMachine;
DEVPKEY_DeviceContainer_IsRebootRequired;
DEVPKEY_DeviceId_DriverInfMatches;
DEVPKEY_DeviceId_DriverInfNames;
DEVPKEY_DeviceInterfaceClass_DefaultInterface;
DEVPKEY_DeviceInterfaceClass_Name;
DEVPKEY_DeviceInterface_ClassGuid;
DEVPKEY_DeviceInterface_Enabled;
DEVPKEY_DeviceInterface_FriendlyName;
DEVPKEY_DeviceInterface_ReferenceString;
DEVPKEY_Device_AdditionalSoftwareRequested;
DEVPKEY_Device_Address;
DEVPKEY_Device_BaseContainerId;
DEVPKEY_Device_BiosDeviceName;
DEVPKEY_Device_BusNumber;
DEVPKEY_Device_BusRelations;
DEVPKEY_Device_BusReportedDeviceDesc;
DEVPKEY_Device_BusTypeGuid;
DEVPKEY_Device_Capabilities;
DEVPKEY_Device_Characteristics;
DEVPKEY_Device_Children;
DEVPKEY_Device_Class;
DEVPKEY_Device_ClassGuid;
DEVPKEY_Device_CompatibleIds;
DEVPKEY_Device_ConfigFlags;
DEVPKEY_Device_ConfigurationId;
DEVPKEY_Device_ContainerId;
DEVPKEY_Device_DHP_Rebalance_Policy;
DEVPKEY_Device_DebuggerSafe;
DEVPKEY_Device_DependencyBootSession;
DEVPKEY_Device_DevNodeStatus;
DEVPKEY_Device_DevType;
DEVPKEY_Device_DeviceDesc;
DEVPKEY_Device_Driver;
DEVPKEY_Device_DriverCoInstallers;
DEVPKEY_Device_DriverDate;
DEVPKEY_Device_DriverDesc;
DEVPKEY_Device_DriverExtendedInfs;
DEVPKEY_Device_DriverIncludedInfs;
DEVPKEY_Device_DriverInfPath;
DEVPKEY_Device_DriverInfSection;
DEVPKEY_Device_DriverInfSectionExt;
DEVPKEY_Device_DriverLogoLevel;
DEVPKEY_Device_DriverNodeStrongName;
DEVPKEY_Device_DriverProblemDesc;
DEVPKEY_Device_DriverPropPageProvider;
DEVPKEY_Device_DriverProvider;
DEVPKEY_Device_DriverRank;
DEVPKEY_Device_DriverVersion;
DEVPKEY_Device_EjectionRelations;
DEVPKEY_Device_EnumeratorName;
DEVPKEY_Device_Exclusive;
DEVPKEY_Device_ExtendedConfigurationIds;
DEVPKEY_Device_FirmwareDependencies;
DEVPKEY_Device_FirstInstallDate;
DEVPKEY_Device_FriendlyName;
DEVPKEY_Device_FriendlyNameAttributes;
DEVPKEY_Device_GenericDriverInstalled;
DEVPKEY_Device_HardwareConfigurationIndex;
DEVPKEY_Device_HardwareIds;
DEVPKEY_Device_HasProblem;
DEVPKEY_Device_InLocalMachineContainer;
DEVPKEY_Device_InstallDate;
DEVPKEY_Device_InstallError;
DEVPKEY_Device_InstallFlags;
DEVPKEY_Device_InstallState;
DEVPKEY_Device_InstanceId;
DEVPKEY_Device_IsConnected;
DEVPKEY_Device_IsPresent;
DEVPKEY_Device_IsRebootRequired;
DEVPKEY_Device_LastArrivalDate;
DEVPKEY_Device_LastKnownParent;
DEVPKEY_Device_LastRemovalDate;
DEVPKEY_Device_LegacyBusType;
DEVPKEY_Device_LocationInfo;
DEVPKEY_Device_LocationPaths;
DEVPKEY_Device_LowerFilters;
DEVPKEY_Device_Manufacturer;
DEVPKEY_Device_MatchingDeviceId;
DEVPKEY_Device_Numa_Node;
DEVPKEY_Device_Numa_Proximity_Domain;
DEVPKEY_Device_PDOName;
DEVPKEY_Device_Parent;
DEVPKEY_Device_PendingConfigurationIds;
DEVPKEY_Device_PowerData;
DEVPKEY_Device_PowerRelations;
DEVPKEY_Device_PresenceNotForDevice;
DEVPKEY_Device_ProblemCode;
DEVPKEY_Device_ProblemStatus;
DEVPKEY_Device_ProblemStatusOverride;
DEVPKEY_Device_RemovalPolicy;
DEVPKEY_Device_RemovalPolicyDefault;
DEVPKEY_Device_RemovalPolicyOverride;
DEVPKEY_Device_RemovalRelations;
DEVPKEY_Device_Reported;
DEVPKEY_Device_ReportedDeviceIdsHash;
DEVPKEY_Device_RequestConfigurationIds;
DEVPKEY_Device_ResourcePickerExceptions;
DEVPKEY_Device_ResourcePickerTags;
DEVPKEY_Device_RestrictedSD;
DEVPKEY_Device_RollbackDriverNode;
DEVPKEY_Device_SafeRemovalRequired;
DEVPKEY_Device_SafeRemovalRequiredOverride;
DEVPKEY_Device_Security;
DEVPKEY_Device_SecuritySDS;
DEVPKEY_Device_Service;
DEVPKEY_Device_SessionId;
DEVPKEY_Device_Siblings;
DEVPKEY_Device_Stack;
DEVPKEY_Device_TransportRelations;
DEVPKEY_Device_UINumber;
DEVPKEY_Device_UINumberDescFormat;
DEVPKEY_Device_UpperFilters;
DEVPKEY_DriverDatabase_AccessMask;
DEVPKEY_DriverDatabase_ConfigMode;
DEVPKEY_DriverDatabase_Disabled;
DEVPKEY_DriverDatabase_Loaded;
DEVPKEY_DriverDatabase_OemDriverInfFileMap;
DEVPKEY_DriverDatabase_ProcessorArchitecture;
DEVPKEY_DriverDatabase_Selected;
DEVPKEY_DriverDatabase_UnloadTimeout;
DEVPKEY_DriverDatabase_Updated;
DEVPKEY_DriverDatabase_Version;
DEVPKEY_DriverFile_DriverInfName;
DEVPKEY_DriverFile_SubDirectory;
DEVPKEY_DriverInfFile_ActiveConfigurations;
DEVPKEY_DriverInfFile_ActiveDriverPackage;
DEVPKEY_DriverInfFile_DriverPackages;
DEVPKEY_DriverInfFile_Locked;
DEVPKEY_DriverPackage_BootCritical;
DEVPKEY_DriverPackage_ClassGuid;
DEVPKEY_DriverPackage_Configurable;
DEVPKEY_DriverPackage_ConfigurableFlags;
DEVPKEY_DriverPackage_ConfigurableOverride;
DEVPKEY_DriverPackage_DriverDate;
DEVPKEY_DriverPackage_DriverInfName;
DEVPKEY_DriverPackage_DriverVersion;
DEVPKEY_DriverPackage_ExtensionId;
DEVPKEY_DriverPackage_F6;
DEVPKEY_DriverPackage_FirmwareDependencies;
DEVPKEY_DriverPackage_FirmwareDependencyBootSession;
DEVPKEY_DriverPackage_Inbox;
DEVPKEY_DriverPackage_Locale;
DEVPKEY_DriverPackage_LockLevel;
DEVPKEY_DriverPackage_OriginalInfName;
DEVPKEY_DriverPackage_ProcessorArchitecture;
DEVPKEY_DriverPackage_ProductName;
DEVPKEY_DriverPackage_ProviderName;
DEVPKEY_DriverPackage_Published;
DEVPKEY_DriverPackage_SignerName;
DEVPKEY_DriverPackage_SignerScore;
DEVPKEY_DriverPackage_SourceMediaPath;
DEVPKEY_DriverPackage_StatusFlags;
DEVPKEY_DriverPackage_TargetComputerIds;
DEVPKEY_NAME;
DEVPKEY_Spare_Memory;
DEVPKEY_Spare_Processor_Apic_Id;
DEVPKEY_WIA_DeviceType;
DbgkDebugObjectType;
DbgkErrorPortCommTimeout;
DbgkErrorPortRegisteredEvent;
DbgkErrorPortStartTimeout;
DbgkpBusy;
DbgkpErrorPort;
DbgkpErrorPortLock;
DbgkpErrorProcess;
DbgkpLkmdLiveDumpDiagnosticInformation;
DbgkpMaxModuleMsgs;
DbgkpProcessDebugPortMutex;
DbgkpWerDefaultPolicy;
DbgkpWerDeferredWriteTimeoutSeconds;
DbgkpWerInitialized;
DefaultCapName;
DefaultCapeName;
DefaultKey;
DesiredAccessForFunction;
DeviceStateNames;
DiskProvGuid;
DosDevicesNameString;
DriveMappingArray;
DumpPolicyAttemptOffline;
EM_RULE_DISABLE_FASTS4_GUID;
EM_RULE_DISABLE_MULTI_PHASE_RESUME;
ETW_EVENT_BACKING_FILE_FULL;
ETW_EVENT_CHANGE_SESSION_SD;
ETW_EVENT_FLUSH_TRACE;
ETW_EVENT_LOST_EVENT;
ETW_EVENT_MAX_FILE_SIZE_REACHED;
ETW_EVENT_PROVIDER_DISABLED;
ETW_EVENT_PROVIDER_ENABLED;
ETW_EVENT_PROVIDER_REGISTER;
ETW_EVENT_PROVIDER_UNREGISTERS;
ETW_EVENT_SESSION_END_FAILED;
ETW_EVENT_SESSION_INFO;
ETW_EVENT_SESSION_START_FAILED;
ETW_EVENT_START_TRACE;
ETW_EVENT_STOP_TRACE;
ETW_EVENT_SWITCH_TO_NEW_FILE_FAILED;
ETW_EVENT_UPDATE_TRACE;
ETW_EVENT_USER_STACK_TRACE;
ETW_EVENT_WRITE_FAILED;
ETW_REGISTRY_EVENT_CLOSE_KEY;
ETW_REGISTRY_EVENT_CREATE_KEY;
ETW_REGISTRY_EVENT_DELETE_KEY;
ETW_REGISTRY_EVENT_DELETE_VALUE_KEY;
ETW_REGISTRY_EVENT_ENUMERATE_KEY;
ETW_REGISTRY_EVENT_ENUMERATE_VALUE_KEY;
ETW_REGISTRY_EVENT_FLUSH_KEY;
ETW_REGISTRY_EVENT_OPEN_KEY;
ETW_REGISTRY_EVENT_QUERY_KEY;
ETW_REGISTRY_EVENT_QUERY_MULTIPLE_VALUE_KEY;
ETW_REGISTRY_EVENT_QUERY_SECURITY_KEY;
ETW_REGISTRY_EVENT_QUERY_VALUE_KEY;
ETW_REGISTRY_EVENT_SET_INFORMATION_KEY;
ETW_REGISTRY_EVENT_SET_SECURITY_KEY;
ETW_REGISTRY_EVENT_SET_VALUE_KEY;
EVENT_WHEA_ERROR;
EVENT_WHEA_INIT_OP;
EVENT_WHEA_MEMORY_OFFLINE;
EfiBootVariablesGuid;
EfiDriverVariablesGuid;
EmBuiltinProviderHandle;
EmpCachedBiosDate;
EmpCallbackListHead;
EmpDatabaseLock;
EmpEntryListHead;
EmpEvaluationQueueLock;
EmpNumberOfCallbacks;
EmpNumberOfEntryTypes;
EmpNumberOfRules;
EmpNumberOfStrings;
EmpNumberOfTargetRules;
EmpPagingLock;
EmpPagingStatus;
EmpParseLock;
EmpRuleListHead;
EmpRuleUpdateQueue;
EmpRuleUpdateWorker;
EmpStringTable;
EmpTargetRuleListHead;
EmpWorkerBusy;
EmptyValue;
End;
EnlightenedSwapContext_NpxLoad;
EnlightenedSwapContext_NpxSave;
ErrorLogSessionOpened;
ErrorMessageOffset;
EtwAppCompatProvRegHandle;
EtwCPUSpeedInMHz;
EtwKernelProvRegHandle;
EtwPerfFreq;
EtwSecondaryDumpDataGuid;
EtwWmitraceWork;
EtwpActiveSystemLoggers;
EtwpAdjustBuffersWorkItem;
EtwpAllNotifyRoutines;
EtwpBootTime;
EtwpBufferAdjustmentActive;
EtwpBufferAdjustmentCount;
EtwpBugCheckCallback;
EtwpComponentName;
EtwpCounters;
EtwpCrimsonMaskMutex;
EtwpDebuggerData;
EtwpDefaultTraceSecurityDescriptor;
EtwpDiskIoNotifyRoutines;
EtwpDiskProvRegHandle;
EtwpDumpCallbackContext;
EtwpEnableFlagMap;
EtwpEthreadSyncTrackingSequence;
EtwpEventTracingProvRegHandle;
EtwpExecutiveResourceContentionSampleRate;
EtwpExecutiveResourceReleaseSampleRate;
EtwpExecutiveResourceTimeout;
EtwpFileIoNotifyRoutines;
EtwpFileProvRegHandle;
EtwpFileSystemReady;
EtwpFltIoNotifyRoutines;
EtwpGenericMapping;
EtwpGlobalSequence;
EtwpGroupMaskMutex;
EtwpGroupMasks;
EtwpGuidHashTable;
EtwpInitialized;
EtwpLoggerRundown;
EtwpMemInfoDpc;
EtwpMemInfoInterval;
EtwpMemInfoTimer;
EtwpMemoryProvRegHandle;
EtwpNetProvRegHandle;
EtwpNotificationMutex;
EtwpNull;
EtwpObjectTypeFilter;
EtwpOneMs;
EtwpOneSecond;
EtwpPagingDisabled;
EtwpPmcProfile;
EtwpPoolTagFilter;
EtwpProfileInterval;
EtwpProfileObject;
EtwpPsProvRegHandle;
EtwpRealTimeConnectionObjectType;
EtwpRefTimeCycle;
EtwpRefTimePerfCounter;
EtwpRefTimeSystem;
EtwpRegTraceCookie;
EtwpRegTraceHandle;
EtwpRegTraceOptions;
EtwpRegTracingEnabled;
EtwpRegistrationObjectType;
EtwpReplyListHead;
EtwpSecurityKeyHandle;
EtwpSecurityLock;
EtwpSecurityProviderGuidEntry;
EtwpSecurityProviderPID;
EtwpShortTime;
EtwpShutdownInProgress;
EtwpSpinLockAcquireSampleRate;
EtwpSpinLockContentionSampleRate;
EtwpSpinLockCountersCount;
EtwpSpinLockHoldThreshold;
EtwpSpinLockSpinThreshold;
EtwpSplitIoNotifyRoutines;
EtwpStackCaptureTimeout;
EtwpStackMatchId;
EtwpStartTraceMutex;
EtwpStopTraceCount;
EtwpSystemLogger;
EtwpSystemTimeStamp;
EtwpTdiIoNotify;
EtwpTimeStampStatus;
EtwpUmglProviders;
EtwpWdfNotifyRoutines;
EtwpWmitraceParams;
EventTracingProvGuid;
ExBootAppFailureStatus;
ExBootDeviceList;
ExBootDeviceListSpinLock;
ExBootDeviceRemovalHandler;
ExBootDevicesRemovedEvent;
ExBootLoaderMetadata;
ExCallbackObjectType;
ExCbEnlightenmentState;
ExCbPhase1InitComplete;
ExCbPowerState;
ExCbProcessorAdd;
ExCbSeImageVerificationDriverInfo;
ExCbSetSystemState;
ExCbSetSystemTime;
ExCompositionObjectType;
ExCovMaxPagedPoolToUse;
ExCriticalWorkerThreads;
ExDelayedWorkerThreads;
ExDesktopObjectType;
ExEventObjectType;
ExExternalBootSupportInitializationEvent;
ExMinimumLookasideDepth;
ExMutantObjectType;
ExNPagedLookasideListHead;
ExNPagedLookasideLock;
ExNode0;
ExNumMissingBootDevices;
ExPageLockHandle;
ExPagedLookasideListHead;
ExPagedLookasideLock;
ExPoolCodeEnd;
ExPoolCodeStart;
ExPoolFailures;
ExPoolLookasideListHead;
ExPoolTagTables;
ExProfileObjectType;
ExReadyForErrors;
ExResourceCheckFlags;
ExResourceTimeoutCount;
ExSemaphoreObjectType;
ExShortTime;
ExSoftRebootFlags;
ExSystemLookasideListHead;
ExTbFlushActive;
ExTimerObjectType;
ExTraceAllTables;
ExVdmOpcodeDispatchCounts;
ExVdmSegmentNotPresent;
ExWindowStationObjectType;
ExWorkerQueue;
ExpAdditionalCriticalWorkerThreads;
ExpAdditionalDelayedWorkerThreads;
ExpAltTimeZoneBias;
ExpBigTableExpansionFailed;
ExpBootEntropyInit;
ExpBootEnvironmentInformation;
ExpBootFinishedTimer;
ExpBootFinishedTimerDpc;
ExpBuiltinPriorities;
ExpCacheLineSize;
ExpCacheProviderPolicyNamesCounterBase;
ExpCallBackFlush;
ExpCallbackEvent;
ExpCallbackListHead;
ExpCallbackListLock;
ExpCallbackMapping;
ExpCenturyDpc;
ExpCenturyTimer;
ExpCenturyWorkItem;
ExpClockIntervalRequest;
ExpCompositionMapping;
ExpConDrvLoadLock;
ExpControlKey;
ExpCovCurrentPagedPoolInUse;
ExpCovPushLock;
ExpCovUnloadedModuleList;
ExpCritSecOutOfMemoryEvent;
ExpCurrentProfileUsage;
ExpCurrentTimeZoneId;
ExpDebuggerDpc;
ExpDebuggerPageIn;
ExpDebuggerProcessAttach;
ExpDebuggerProcessKill;
ExpDebuggerWork;
ExpDebuggerWorkItem;
ExpDefaultErrorPort;
ExpDefaultErrorPortProcess;
ExpDesktopMapping;
ExpDpsServiceSid;
ExpEnvironmentLock;
ExpEventMapping;
ExpFastCacheFromRegistryPushed;
ExpFastCacheLock;
ExpFastCacheReArmed;
ExpFastCacheUpdateLock;
ExpFeatureLicensesTableMaximumSize;
ExpFirmwareTableProviderListHead;
ExpFirmwareTableResource;
ExpGenuinePolicyKDPThrottleOverride;
ExpHostList;
ExpHostListLock;
ExpIRTimerObjectType;
ExpIRTimerSecurityDescriptor;
ExpInitializeCallback;
ExpKernelRequestedTimerResolution;
ExpKernelResolutionCount;
ExpKeyManipLock;
ExpKeyedEventObjectType;
ExpLFGRngLock;
ExpLFGRngState;
ExpLargePoolTableLock;
ExpLastDynamicTimeZoneYear;
ExpLastRequestedTime;
ExpLastTimeZoneBias;
ExpLeftoverBootRngData;
ExpLicenseInfo;
ExpLicenseInfoCount;
ExpLuid;
ExpLuidIncrement;
ExpMaxTimeSeperationBeforeCorrect;
ExpMicrocodeImageHandle;
ExpMicrocodeUpdateLock;
ExpMultiUserTS;
ExpMutantMapping;
ExpNextCenturyTimeFieldsInLocalTime;
ExpNextCenturyTimeInUTC;
ExpNextExpirationIsFatal;
ExpNextSystemCutoverInUTC;
ExpNextYearDpc;
ExpNextYearTimeFieldsInLocalTime;
ExpNextYearTimeInUTC;
ExpNextYearTimer;
ExpNextYearWorkItem;
ExpNonPagedPoolDescriptor;
ExpNtExpirationDate;
ExpNumberOfNonPagedPools;
ExpNumberOfPagedPools;
ExpOkToTimeRefresh;
ExpOkToTimeZoneRefresh;
ExpPackagesTableMaximumSize;
ExpPagedPoolDescriptor;
ExpPcwExtensionHost;
ExpPcwNoInstance;
ExpPcwNoRegistration;
ExpPlatformBinaryLock;
ExpPlatformBinaryTableInformation;
ExpPoolBigEntriesInUse;
ExpPoolFlags;
ExpPoolIndex;
ExpPoolQuotaCookie;
ExpPoolScanCount;
ExpPreviousReevalTriggerTickCount;
ExpProductInfoMappedType;
ExpProductInfoSuiteTypeMap;
ExpProductLicensesTableMaximumSize;
ExpProductTypeChangeBuffer;
ExpProductTypeIoSb;
ExpProductTypeKey;
ExpProductTypeValueInfo;
ExpProfileMapping;
ExpProfileStateMutex;
ExpRNGAuxiliarySeed;
ExpRealTimeIsUniversal;
ExpRefreshFailures;
ExpRemainingLeftoverBootRngData;
ExpResourceIoBoosted;
ExpResourceIoBoostedShared;
ExpResourceSpinLock;
ExpScanCount;
ExpScratchBufferLookasideList;
ExpSecureBootVendorGuid;
ExpSecurityCookieRandomData;
ExpSemaphoreMapping;
ExpSessionPoolLookaside;
ExpSessionPoolSmallLists;
ExpSessionPoolTrackTable;
ExpSessionPoolTrackTableMask;
ExpSessionPoolTrackTableSize;
ExpSetupKey;
ExpSetupModeDetected;
ExpShuttingDown;
ExpSpecialAllocations;
ExpSpinCount;
ExpSvmAgents;
ExpSystemIsInCmosMode;
ExpSystemProcessName;
ExpSystemResourcesList;
ExpSystemSetupInProgress;
ExpTaggedPoolLock;
ExpThreadReaperTimer;
ExpTickCountMultiplier;
ExpTimeRefreshDpc;
ExpTimeRefreshInterval;
ExpTimeRefreshLock;
ExpTimeRefreshTimer;
ExpTimeRefreshWorkItem;
ExpTimeZoneBias;
ExpTimeZoneDpc;
ExpTimeZoneInformation;
ExpTimeZoneTimer;
ExpTimeZoneWorkItem;
ExpTimeout;
ExpTimerFreedCookie;
ExpTimerMapping;
ExpTimerResolutionCount;
ExpTimerResolutionListHead;
ExpTooLateForErrors;
ExpTotalTraceBuffers;
ExpUnknownDeviceGuid;
ExpUserModeCallerCount;
ExpUuidCacheValid;
ExpUuidCachedValues;
ExpUuidLastTimeAllocated;
ExpUuidLock;
ExpUuidSequenceNumber;
ExpUuidSequenceNumberNotSaved;
ExpUuidSequenceNumberValid;
ExpUuidTimeSequenceNumber;
ExpValidAttributes;
ExpWakeTimerList;
ExpWakeTimerLock;
ExpWatchProductTypeWorkItem;
ExpWindowStationMapping;
ExpWnfDispatcher;
ExpWnfNameStoreDescriptors;
ExpWnfNotificationMapping;
ExpWnfPermanentNameSequenceNumber;
ExpWnfPermanentNameSequenceNumberLock;
ExpWnfPermanentNameSequenceNumberPool;
ExpWnfPermanentNameSequenceNumberValueName;
ExpWnfPermanentNameSequenceNumberValueName_buffer;
ExpWnfPermanentNameStoreRootKey;
ExpWnfPersistentNameStoreRootKey;
ExpWnfProcessesListHead;
ExpWnfProcessesListLock;
ExpWnfRuntimeNameSequenceNumber;
ExpWnfScopeMap;
ExpWnfSubcriptionIdCounter;
ExpWnfWellKnownNameStoreRootKey;
ExpWorkerFactoryDeferredLongTimeout;
ExpWorkerFactoryDeferredMediumTimeout;
ExpWorkerFactoryDeferredShortTimeout;
ExpWorkerFactoryManagerQueue;
ExpWorkerFactoryMapping;
ExpWorkerFactoryObjectType;
ExpWorkerFactoryThreadCreationList;
ExpWorkerFactoryThreadCreationState;
ExpWorkerFactoryThreadCreationTimeoutInSeconds;
ExpWorkerFactoryThreadCreationTimer;
ExpWorkerFactoryThreadIdleTimeoutInSeconds;
ExpWorkerFactoryTimerPacket;
ExpWorkerSwapinMutex;
ExpWorkerSystemAffinityActiveMessage;
ExpWorkersCanSwap;
ExpWstrCallback;
FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;
FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
FadingIn;
FastIoDispatch;
FileProvGuid;
FltMgrCallbacks;
FontLibraryInitialized;
FopFontFileListHead;
FormatMaxDisplacement;
FormatMaxLength;
FourBitPalette;
FsRtlCreateLockInfo;
FsRtlEcpListLookaside;
FsRtlExclusiveLockLookasideList;
FsRtlFastMutexLookasideList;
FsRtlFileLockCancelCollideList;
FsRtlFileLockCancelCollideLock;
FsRtlFileLockLookasideList;
FsRtlFirstMappingLookasideList;
FsRtlHalfSecond;
FsRtlLegalAnsiCharacterArray;
FsRtlLockInfoLookasideList;
FsRtlLockTreeNodeLookasideList;
FsRtlPagingIoResourceSelector;
FsRtlPagingIoResources;
FsRtlSafeExtensions;
FsRtlSharedLockLookasideList;
FsRtlTieringHeatData;
FsRtlVirtualDiskMaxTreeDepth;
FsRtlWaitingLockLookasideList;
FsRtlWorkerQueues;
FsRtlpRedirs;
FsRtlpUncSemaphore;
FsRtlpVolumeStartupApplicationsComplete;
GENERIC_SECTION_GUID;
GUIDS_BATTERY_DISCHARGE_ACTION;
GUIDS_BATTERY_DISCHARGE_FLAGS;
GUIDS_BATTERY_DISCHARGE_LEVEL;
GUID_ACDC_POWER_SOURCE;
GUID_ALLOW_AWAYMODE;
GUID_ALLOW_RTC_WAKE;
GUID_ALLOW_STANDBY_STATES;
GUID_ARBITER_INTERFACE_STANDARD;
GUID_AUDIO_PLAYBACK;
GUID_BACKGROUND_TASK_NOTIFICATION;
GUID_BAD_MEMORY_GROUP;
GUID_BATTERY_DISCHARGE_ACTION_0;
GUID_BATTERY_DISCHARGE_ACTION_1;
GUID_BATTERY_DISCHARGE_ACTION_2;
GUID_BATTERY_DISCHARGE_ACTION_3;
GUID_BATTERY_DISCHARGE_FLAGS_0;
GUID_BATTERY_DISCHARGE_FLAGS_1;
GUID_BATTERY_DISCHARGE_FLAGS_2;
GUID_BATTERY_DISCHARGE_FLAGS_3;
GUID_BATTERY_DISCHARGE_LEVEL_0;
GUID_BATTERY_DISCHARGE_LEVEL_1;
GUID_BATTERY_DISCHARGE_LEVEL_2;
GUID_BATTERY_DISCHARGE_LEVEL_3;
GUID_BATTERY_PERCENTAGE_REMAINING;
GUID_BOGUS_INTERFACE;
GUID_BTHPORT_DEVICE_INTERFACE;
GUID_BUS_INTERFACE_STANDARD;
GUID_BUS_TYPE_PCI;
GUID_BUS_TYPE_SW_DEVICE;
GUID_CONSOLE_DISPLAY_STATE;
GUID_CONSOLE_INPUT_TIMEOUT;
GUID_CONSOLE_VIDEO_TIMEOUT;
GUID_CURRENT_BOOT_ENTRY;
GUID_DEFAULT_BOOT_ENTRY;
GUID_DEVCLASS_MEDIA;
GUID_DEVICE_ACPI_TIME;
GUID_DEVICE_ARRIVAL;
GUID_DEVICE_BATTERY;
GUID_DEVICE_EJECT;
GUID_DEVICE_ENUMERATED;
GUID_DEVICE_FAN;
GUID_DEVICE_HIBERNATE_VETOED;
GUID_DEVICE_IDLE_POLICY;
GUID_DEVICE_INTERFACE_ARRIVAL;
GUID_DEVICE_INTERFACE_REMOVAL;
GUID_DEVICE_INVALID_ID;
GUID_DEVICE_KERNEL_INITIATED_EJECT;
GUID_DEVICE_MEMORY;
GUID_DEVICE_NOOP;
GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
GUID_DEVICE_PROCESSOR;
GUID_DEVICE_PROPERTY_CHANGED;
GUID_DEVICE_QUERY_AND_REMOVE;
GUID_DEVICE_REMOVE_PENDING;
GUID_DEVICE_SAFE_REMOVAL;
GUID_DEVICE_STANDBY_VETOED;
GUID_DEVICE_SURPRISE_REMOVAL;
GUID_DEVICE_THERMAL_ZONE;
GUID_DEVICE_WARM_EJECT_VETOED;
GUID_DEVINST_REMOVE_COMPLETE;
GUID_DEVINTERFACE_CDROM;
GUID_DEVINTERFACE_COMPORT;
GUID_DEVINTERFACE_DISK;
GUID_DEVINTERFACE_PARALLEL;
GUID_DEVINTERFACE_SURFACE_VIRTUAL_DRIVE;
GUID_DEVINTERFACE_VOLUME;
GUID_DISK_BURST_IGNORE_THRESHOLD;
GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
GUID_DISK_IDLE_TIMEOUT;
GUID_DISK_POWERDOWN_TIMEOUT;
GUID_DOCK_INTERFACE;
GUID_DRIVER_BLOCKED;
GUID_ECP_DUAL_OPLOCK_KEY;
GUID_ECP_IO_DEVICE_HINT;
GUID_ECP_NETWORK_OPEN_CONTEXT;
GUID_ECP_OPLOCK_KEY;
GUID_EM_ALWAYS_FALSE_CALLBACK;
GUID_EM_ALWAYS_TRUE_CALLBACK;
GUID_EM_CALLBACK_BIOS_DATE;
GUID_EM_CALLBACK_REMOVE_BAD_S3_PAGES;
GUID_EM_CPU_MATCH_CALLBACK;
GUID_EM_CPU_TYPE_INTEL_DTT_DISABLE;
GUID_EM_REMOVE_BAD_S3_PAGE_RULE;
GUID_EM_SYSTEM_ARCHITECTURE_CALLBACK;
GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
GUID_FIRMWARE_BOOTMGR;
GUID_GLOBAL_USER_PRESENCE;
GUID_HIBERNATE_FASTS4_POLICY;
GUID_HIBERNATE_TIMEOUT;
GUID_HWPROFILE_CHANGE_CANCELLED;
GUID_HWPROFILE_CHANGE_COMPLETE;
GUID_HWPROFILE_QUERY_CHANGE;
GUID_IDLE_BACKGROUND_TASK;
GUID_IDLE_RESILIENCY_PERIOD;
GUID_IDLE_RESILIENCY_PLATFORM_STATE;
GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
GUID_INTSTEER_MODE;
GUID_INTSTEER_TIME_UNPARK_TRIGGER;
GUID_IO_VOLUME_BACKGROUND_FORMAT;
GUID_IO_VOLUME_CHANGE;
GUID_IO_VOLUME_CHANGE_SIZE;
GUID_IO_VOLUME_DISMOUNT;
GUID_IO_VOLUME_DISMOUNT_FAILED;
GUID_IO_VOLUME_FORCE_CLOSED;
GUID_IO_VOLUME_INFO_MAKE_COMPAT;
GUID_IO_VOLUME_LOCK;
GUID_IO_VOLUME_LOCK_FAILED;
GUID_IO_VOLUME_MOUNT;
GUID_IO_VOLUME_NAME_CHANGE;
GUID_IO_VOLUME_NEED_CHKDSK;
GUID_IO_VOLUME_PREPARING_EJECT;
GUID_IO_VOLUME_UNLOCK;
GUID_IO_VOLUME_WEARING_OUT;
GUID_IO_VOLUME_WORM_NEAR_FULL;
GUID_LEGACY_DEVICE_DETECTION_STANDARD;
GUID_LIDCLOSE_ACTION;
GUID_LIDOPEN_POWERSTATE;
GUID_LIDSWITCH_STATE_CHANGE;
GUID_LOCK_CONSOLE_ON_WAKE;
GUID_LOW_POWER_EPOCH;
GUID_MOF_RESOURCE_ADDED_NOTIFICATION;
GUID_MOF_RESOURCE_REMOVED_NOTIFICATION;
GUID_MONITOR_POWER_ON;
GUID_NDIS_LAN_CLASS;
GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
GUID_PARTITION_UNIT_INTERFACE_STANDARD;
GUID_PDC_IDLE_RESILIENCY_ENGAGED;
GUID_PLATFORM_IDLE_UPDATE;
GUID_PLATFORM_IDLE_VETO;
GUID_PNP_CUSTOM_NOTIFICATION;
GUID_PNP_LOCATION_INTERFACE;
GUID_POWERBUTTON_ACTION;
GUID_PROCESSOR_ALLOW_THROTTLING;
GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
GUID_PROCESSOR_DISTRIBUTE_UTILITY;
GUID_PROCESSOR_IDLE_ALLOW_SCALING;
GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
GUID_PROCESSOR_IDLE_DISABLE;
GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
GUID_PROCESSOR_IDLE_TIME_CHECK;
GUID_PROCESSOR_IDLE_UPDATE;
GUID_PROCESSOR_IDLE_VETO;
GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
GUID_PROCESSOR_PARKING_PERF_STATE;
GUID_PROCESSOR_PERF_BOOST_MODE;
GUID_PROCESSOR_PERF_BOOST_POLICY;
GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
GUID_PROCESSOR_PERF_DECREASE_HISTORY;
GUID_PROCESSOR_PERF_DECREASE_POLICY;
GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
GUID_PROCESSOR_PERF_DECREASE_TIME;
GUID_PROCESSOR_PERF_INCREASE_HISTORY;
GUID_PROCESSOR_PERF_INCREASE_POLICY;
GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
GUID_PROCESSOR_PERF_INCREASE_TIME;
GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
GUID_PROCESSOR_PERF_TIME_CHECK;
GUID_PROCESSOR_THROTTLE_MAXIMUM;
GUID_PROCESSOR_THROTTLE_MINIMUM;
GUID_RESUME_LOADER_SETTINGS_GROUP;
GUID_SESSION_DISPLAY_STATUS;
GUID_SESSION_USER_PRESENCE;
GUID_SLEEPBUTTON_ACTION;
GUID_SPM_DEFAULT;
GUID_SPM_LOW_POWER_CS;
GUID_SPM_SCENARIO_FSVP;
GUID_SPM_SCENARIO_VIDEO_BATCHING;
GUID_STANDBY_TIMEOUT;
GUID_SYSTEM_AWAYMODE;
GUID_SYSTEM_COOLING_POLICY;
GUID_TARGET_DEVICE_QUERY_REMOVE;
GUID_TARGET_DEVICE_REMOVE_CANCELLED;
GUID_TARGET_DEVICE_REMOVE_COMPLETE;
GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
GUID_TRANSLATOR_INTERFACE_STANDARD;
GUID_TS_INPUT_TIMEOUT;
GUID_UNATTEND_SLEEP_TIMEOUT;
GUID_VERIFIER_WMI_INTERFACE;
GUID_VIDEO_ALS_OFFSET;
GUID_VIDEO_BRIGHTNESS_CAPABLE;
GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
GUID_VIDEO_DIM_TIMEOUT;
GUID_VIDEO_POWERDOWN_TIMEOUT;
GUID_WINDOWS_BOOTMGR;
GenericMappingForMembershipCheck;
GlfsrXorLookup1;
GlfsrXorLookup2;
GlfsrXorLookup3;
GlfsrXorLookup4;
GlfsrXorLookup5;
GlfsrXorLookupTables;
GlobalLoggerGuid;
GlobalNameString;
GlobalRootNameString;
GlobalSaclKeyPrefix;
GuidFormat;
HV_EVENTLOG_BAL_HYPERVISOR_INIT_FAILED;
HV_EVENTLOG_IOMMU_FAILED_INVALID_IOAPIC;
HV_EVENTLOG_IOMMU_FAILED_NO_DMA_REMAPPING;
HV_EVENTLOG_IOMMU_FAILED_NO_RESOURCES;
HV_EVENTLOG_IOMMU_FAILED_RESERVED_DEVICE;
HV_EVENTLOG_IOMMU_FAILED_RID_CONFLICT;
HV_EVENTLOG_IOMMU_INIT_FAILED_BAD_ACPI_TABLE;
HV_EVENTLOG_IOMMU_INIT_FAILED_INTERNAL_ERROR;
HV_EVENTLOG_IOMMU_INIT_FAILED_IOAPIC_CONFLICT;
HV_EVENTLOG_IOMMU_INIT_FAILED_IOAPIC_MISSING;
HV_EVENTLOG_IOMMU_INIT_FAILED_NOT_RESPONDING;
HV_EVENTLOG_IOMMU_INIT_FAILED_NO_INTERRUPT_REMAPPING;
HV_EVENTLOG_IOMMU_INIT_FAILED_POLICY;
HV_EVENTLOG_IOMMU_INIT_SUCCEEDED;
HV_EVENTLOG_IOMMU_INIT_SUCCEEDED_NO_DMA_REMAPPING;
HV_EVENTLOG_IOMMU_INIT_SUCCEEDED_NO_SLAT;
HV_EVENTLOG_IOMMU_INIT_WARNING_BAD_ACPI_TABLE;
HV_EVENTLOG_IOMMU_INIT_WARNING_IOAPIC_CONFLICT;
HV_EVENTLOG_IOMMU_INIT_WARNING_IOAPIC_MISSING;
HV_EVENTLOG_IOMMU_INIT_WARNING_NO_DMA_REMAPPING;
HV_EVENTLOG_IOMMU_INIT_WARNING_SCOPE_CONFLICT;
HV_EVENTLOG_IOMMU_WARNING_SCOPE_CONFLICT;
HV_EVENTLOG_START_SUCCEEDED;
HalDispatchTable;
HalIommuDispatch;
HalIommuDispatchTable;
HalPrivateDispatchTable;
HandleTableListHead;
HandleTableListLock;
HardErrorState;
HdlpsPcAnsiToUnicode;
HeadlessGlobals;
HeapGuid;
HeapRangeGuid;
HeapSummaryGuid;
HvShutdownComplete;
HvSymcryptSeed;
HvlEnableIdleYield;
HvlEnlightenments;
HvlGlobalSystemEventsGuid;
HvlGlobalSystemEventsHandle;
HvlLongSpinCountMask;
HvlPartitionId;
HvlpComponentName;
HvlpCoreCount;
HvlpEnlightenments;
HvlpFlags;
HvlpHvIdentityInfoCallbackRecord;
HvlpHypercallCodeVa;
HvlpHypervisorStatsPage;
HvlpInterruptCallback;
HvlpLogicalProcessorCount;
HvlpLogicalProcessorRegions;
HvlpMaximumProcessors;
HvlpNodes;
HvlpPackageCount;
HvlpPowerSettingList;
HvlpReferenceTscPage;
HvlpSecondaryDumpDataGuid;
HvlpVirtualProcessorMaskMapping;
HvlpVirtualProcessorsIdentityMapped;
HvlpWheaErrorNotificationCallback;
IDTEnd;
INTERRUPT_CONNECTION_DATA_PKEY;
INTSTEER_ETW_PROVIDER;
ImageLoad;
ImageLoadGuid;
ImageUnload;
InitAnsiCodePageDataOffset;
InitForceInline;
InitIsWinPEMode;
InitNlsSectionPointer;
InitNlsTableBase;
InitNlsTableSize;
InitOemCodePageDataOffset;
InitSafeBootMode;
InitTableInfo;
InitTickRolloverDelay;
InitTickRolloverDelayLength;
InitTickRolloverDelayType;
InitUnicodeCaseTableDataOffset;
InitWinPEModeType;
InitialSP;
InitializationPhase;
InstrCountInternal;
InstructionsTraced;
IntBPsSkipping;
InternalBreakpointCheckDpc;
InternalBreakpointTimer;
IoAdapterObjectType;
IoArcBootDeviceName;
IoArcHalDeviceName;
IoArcTableListHead;
IoAsynchronousPageWriteIrpAllocationFailure;
IoAsynchronousPageWriteNonPagefileIrpAllocationFailure;
IoBlanketBoostCount;
IoBoostedPagingIrpCount;
IoBoostedThreadedIrpCount;
IoCompletionObjectType;
IoControllerObjectType;
IoCountOperations;
IoDeviceHandlerObjectSize;
IoDeviceHandlerObjectType;
IoDeviceObjectType;
IoDriverObjectType;
IoEtwHandle;
IoFileObjectType;
IoInitSystem_deviceNameBuffer;
IoInitSystem_valueBuffer;
IoKernelIssuedIoBoostedCount;
IoLoaderArcBootDeviceName;
IoLowPriorityReadOperationCount;
IoLowPriorityWriteOperationCount;
IoOtherOperationCount;
IoOtherTransferCount;
IoPageReadIrpAllocationFailure;
IoPageReadNonPagefileIrpAllocationFailure;
IoPagingReadLowPriorityBumpedCount;
IoPagingReadLowPriorityCount;
IoPagingWriteLowPriorityBumpedCount;
IoPagingWriteLowPriorityCount;
IoReadOperationCount;
IoReadTransferCount;
IoStatisticsLock;
IoStatusBlockRangeTable;
IoStatusBlockRangeTableLock;
IoSynchronousPageWriteIrpAllocationFailure;
IoSynchronousPageWriteNonPagefileIrpAllocationFailure;
IoTraceHandle;
IoTraceProvider;
IoTrace_ActivityIdTransfer;
IoTrace_KernelIo_AllocateIrp;
IoTrace_KernelIo_ReuseIrp;
IoTrace_UserInitiatedIo;
IoWriteOperationCount;
IoWriteTransferCount;
IopAllocateBootResourcesRoutine;
IopAllowLoadCrashDumpDriver;
IopAmbiguousSystemDisk;
IopAutoReboot;
IopBootConfigsReserved;
IopBootDriverReinitCompleted;
IopBootDriverReinitializeQueueHead;
IopCacheHitIncrement;
IopCancelSpinLock;
IopCaseInsensitive;
IopCdRomFileSystemQueueHead;
IopCompletionLock;
IopCompletionLookasideList;
IopCompletionMapping;
IopCrashDumpLock;
IopCurrentHardError;
IopDatabaseLock;
IopDatabaseResource;
IopDeadIrp;
IopDeadIrps;
IopDeviceTreeLock;
IopDiskFileSystemQueueHead;
IopDriverLoadResource;
IopDriverReinitializeQueueHead;
IopErrorLogAllocation;
IopErrorLogDisabledThisBoot;
IopErrorLogListHead;
IopErrorLogLock;
IopErrorLogObject;
IopErrorLogSession;
IopErrorLogSessionPending;
IopErrorLogWorkItem;
IopFailZeroAccessCreate;
IopFileMapping;
IopFsNotifyChangeQueueHead;
IopFsRegistrationInProgress;
IopFsRegistrationOps;
IopFunctionPointerLock;
IopFunctionPointerMask;
IopGroupIndex;
IopGroupListHead;
IopGroupTable;
IopHardError;
IopInitFailCode;
IopInitHalDeviceNode;
IopInitHalResources;
IopInitReservedResourceList;
IopInitSystemCompletedEnoughForReInitRoutines;
IopIrpCreditsEnabled;
IopIrpExtensionStatus;
IopIrpStackProfiler;
IopKeepAliveTracker;
IopLargeIrpLookasideList;
IopLargeIrpStackLocations;
IopLegacyBusInformationTable;
IopLegacyDeviceNode;
IopLinkTrackingPacket;
IopLinkTrackingPortObject;
IopLinkTrackingServiceEvent;
IopLinkTrackingServiceObject;
IopLiveDumpContext;
IopLiveDumpEtwEnabled;
IopLiveDumpEtwRegHandle;
IopLiveDumpLock;
IopMaxDeviceNodeLevel;
IopMdlLookasideList;
IopMediumIrpLookasideList;
IopMediumIrpStackLocations;
IopMountCompletionEvent;
IopMountCompletionWaiters;
IopMountsInProgress;
IopNetworkFileSystemQueueHead;
IopNotifyLastChanceShutdownQueueHead;
IopNotifyShutdownQueueHead;
IopNumTriageDumpDataBlocks;
IopNumberDeviceNodes;
IopOplockFoExtLookasideList;
IopPendingEjects;
IopPendingSurpriseRemovals;
IopPerfDriverUniqueMatchId;
IopPerfIoTrackingListHead;
IopPerfIoTrackingLock;
IopPerfStatus;
IopQueryFsOperationAccess;
IopQueryFsOperationLength;
IopQueryOperationAccess;
IopQueryOperationLength;
IopRegistryRegisteredCallbacks;
IopReserveIrps;
IopRevocationExtension;
IopRootBusNumberArbiter;
IopRootDeviceNode;
IopRootDmaArbiter;
IopRootIrqArbiter;
IopRootMemArbiter;
IopRootPortArbiter;
IopRunTimeContextOffsets;
IopSafeCompletionLookasideList;
IopSecurityResource;
IopSessionCallbackObject;
IopSessionEventType;
IopSessionNotificationLock;
IopSessionNotificationQueueHead;
IopSessionZeroAccessCheckEnabled;
IopSetFsOperationAccess;
IopSetFsOperationLength;
IopSetOperationAccess;
IopSetOperationLength;
IopShutdownFileSystems;
IopSmallIrpLookasideList;
IopStaticRevocationExtension;
IopSurpriseRemoveListLock;
IopSymlinkECPGuid;
IopSymlinkEnabledTypes;
IopSymlinkInfoLookasideList;
IopTapeFileSystemQueueHead;
IopTimer;
IopTimerCount;
IopTimerDpc;
IopTimerLock;
IopTimerQueueHead;
IopTriageDumpDataBlocks;
IopUniqueDeviceObjectNumber;
IopUpdatePriorityCallbackRoutine;
IopUpdatePriorityCallbackRoutineCount;
IopUseCompletionOptimization;
IopVpbSpinLock;
IopWaitCompletionMapping;
IopWaitCompletionPacketObjectType;
IopWarmEjectLock;
IopWarmEjectPdo;
IopWstrHal;
IopWstrLoaderReservedMemory;
IopWstrPhysicalMemory;
IopWstrSpecialMemory;
IopWstrSystem;
IovDriverListHead;
IovIrpTraces;
IovIrpTracesIndex;
IovIrpTracesLength;
IovMdlInvariant10Milliseconds;
IovUtilVerifierEnabled;
IovpDisabledWithoutReboot;
IovpEnabledInThePast;
IovpInitCalled;
IrpHandlingTable;
IrpMajorNames;
KDskEvt_Flush;
KDskEvt_Read;
KDskEvt_Write;
KERNEL_MEM_EVENT_ACG;
KERNEL_MEM_EVENT_MEMINFO;
KERNEL_MEM_EVENT_MEMINFO_SESSIONWS;
KERNEL_MEM_EVENT_MEMINFO_WS;
KERNEL_MEM_EVENT_WS_INSWAP_START;
KERNEL_MEM_EVENT_WS_INSWAP_STOP;
KERNEL_MEM_EVENT_WS_OUTSWAP_START;
KERNEL_MEM_EVENT_WS_OUTSWAP_STOP;
KFileEvt_Cleanup;
KFileEvt_Close;
KFileEvt_Create;
KFileEvt_CreateNewFile;
KFileEvt_Delete;
KFileEvt_DeletePath;
KFileEvt_DirEnum;
KFileEvt_DirNotify;
KFileEvt_FSCTL;
KFileEvt_Flush;
KFileEvt_NameCreate;
KFileEvt_NameDelete;
KFileEvt_OperationEnd;
KFileEvt_QueryInformation;
KFileEvt_Read;
KFileEvt_Rename;
KFileEvt_RenamePath;
KFileEvt_SetInformation;
KFileEvt_SetLink;
KFileEvt_SetLinkPath;
KFileEvt_Write;
KMBootEvt_SystemBoot_Start;
KMPnPConfigEvt_Container_ConfigReq;
KMPnPConfigEvt_Container_Property_Update;
KMPnPConfigEvt_DeviceInstallEvent;
KMPnPConfigEvt_NewDeviceInterface;
KMPnPEvt_BootDriverReinit_Start;
KMPnPEvt_BootDriverReinit_Stop;
KMPnPEvt_BootInit_Start;
KMPnPEvt_BootInit_Stop;
KMPnPEvt_BootStart_Start;
KMPnPEvt_BootStart_Stop;
KMPnPEvt_CfgMgr_DeviceInterfaceList_Start;
KMPnPEvt_CfgMgr_DeviceInterfaceList_Stop;
KMPnPEvt_CfgMgr_DeviceList_Start;
KMPnPEvt_CfgMgr_DeviceList_Stop;
KMPnPEvt_CfgMgr_QueryRemove_Start;
KMPnPEvt_CfgMgr_QueryRemove_Stop;
KMPnPEvt_DevQuery_ProcessingStart;
KMPnPEvt_DevQuery_ProcessingStop;
KMPnPEvt_DevQuery_QueryStart;
KMPnPEvt_DevQuery_QueryStop;
KMPnPEvt_DeviceConfig_Blocked;
KMPnPEvt_DeviceConfig_Failure;
KMPnPEvt_DeviceConfig_RebootRequired;
KMPnPEvt_DeviceConfig_Start;
KMPnPEvt_DeviceConfig_Stop;
KMPnPEvt_DeviceConfig_Success;
KMPnPEvt_DeviceDelete_Failure;
KMPnPEvt_DeviceDelete_Success;
KMPnPEvt_DeviceEject_Pend;
KMPnPEvt_DeviceEject_Start;
KMPnPEvt_DeviceEject_Stop;
KMPnPEvt_DeviceEnum_Pend;
KMPnPEvt_DeviceEnum_Start;
KMPnPEvt_DeviceEnum_Stop;
KMPnPEvt_DeviceStart_Failure;
KMPnPEvt_DeviceStart_Pend;
KMPnPEvt_DeviceStart_RebootRequired;
KMPnPEvt_DeviceStart_Start;
KMPnPEvt_DeviceStart_Stop;
KMPnPEvt_DeviceStart_Success;
KMPnPEvt_DriverDatabaseLoad_Start;
KMPnPEvt_DriverDatabaseLoad_Stop;
KMPnPEvt_DriverDatabaseLoaded_Start;
KMPnPEvt_DriverDatabaseLoaded_Stop;
KMPnPEvt_DriverDatabaseUnload_Pend;
KMPnPEvt_DriverDatabaseUnload_Start;
KMPnPEvt_DriverDatabaseUnload_Stop;
KMPnPEvt_DriverDatabase_Blocked;
KMPnPEvt_DriverInitPhase_Start;
KMPnPEvt_DriverInitPhase_Stop;
KMPnPEvt_DriverInit_Start;
KMPnPEvt_DriverInit_Stop;
KMPnPEvt_DriverLoad_Fail;
KMPnPEvt_DriverLoad_Start;
KMPnPEvt_DriverLoad_Stop;
KMPnPEvt_DriverOverride_SetOverride;
KMPnPEvt_DriverUnload_Start;
KMPnPEvt_DriverUnload_Stop;
KMPnPEvt_EarlyLaunch_LoadNotification_Start;
KMPnPEvt_EarlyLaunch_LoadNotification_Stop;
KMPnPEvt_EarlyLaunch_PolicyCheck;
KMPnPEvt_EarlyLaunch_StatusNotification_Start;
KMPnPEvt_EarlyLaunch_StatusNotification_Stop;
KMPnPEvt_OsLoader_Time;
KMPnPEvt_ProcessDeviceRestart_Start;
KMPnPEvt_ProcessDeviceRestart_Stop;
KMPnPEvt_ProcessDeviceStart_Start;
KMPnPEvt_ProcessDeviceStart_Stop;
KMPnPEvt_ProcessNewDevice_InstancePath;
KMPnPEvt_ProcessNewDevice_Start;
KMPnPEvt_ProcessNewDevice_Stop;
KMPnPEvt_SystemStartDriverReinit_Start;
KMPnPEvt_SystemStartDriverReinit_Stop;
KMPnPEvt_SystemStartLegacyEnum_Start;
KMPnPEvt_SystemStartLegacyEnum_Stop;
KMPnPEvt_SystemStartPnPEnum_Start;
KMPnPEvt_SystemStartPnPEnum_Stop;
KMPnPEvt_SystemStart_Start;
KMPnPEvt_SystemStart_Stop;
KMPnPSqm_End_Session;
KMPnPSqm_Start_Session;
KNetEvt_AcceptIPV4;
KNetEvt_AcceptIPV6;
KNetEvt_ConnectIPV4;
KNetEvt_ConnectIPV6;
KNetEvt_DisconnectIPV4;
KNetEvt_DisconnectIPV6;
KNetEvt_Fail;
KNetEvt_FailUdp;
KNetEvt_ReconnectIPV4;
KNetEvt_ReconnectIPV6;
KNetEvt_RecvIPV4;
KNetEvt_RecvIPV4Udp;
KNetEvt_RecvIPV6;
KNetEvt_RecvIPV6Udp;
KNetEvt_RetransmitIPV4;
KNetEvt_RetransmitIPV6;
KNetEvt_SendIPV4;
KNetEvt_SendIPV4Udp;
KNetEvt_SendIPV6;
KNetEvt_SendIPV6Udp;
KNetEvt_TcpCopyIPV4;
KNetEvt_TcpCopyIPV6;
KSCATEGORY_AUDIO;
KShimErrorMessage;
KShimInfoMessage;
KdAutoEnableOnEvent;
KdBlockEnable;
KdBreakAfterSymbolLoad;
KdComponentTable;
KdDebuggerDataBlock;
KdDebuggerEnabled;
KdDebuggerEnteredCount;
KdDebuggerEnteredWithoutLock;
KdDebuggerLock;
KdDebuggerLockMaxWaitTime;
KdDebuggerNotPresent;
KdDisableCount;
KdDumpEnableOffset;
KdEnteredDebugger;
KdHvComPortInUse;
KdIgnoreUmExceptions;
KdLocalDebugEnabled;
KdLogBuffer;
KdNumberOfSpecialCalls;
KdPerformanceCounterRate;
KdPitchDebugger;
KdPortLocked;
KdPreviouslyEnabled;
KdPrintBufferChanges;
KdPrintBufferSize;
KdPrintCircularBuffer;
KdPrintDefaultCircularBuffer;
KdPrintRolloverCount;
KdPrintWritePointer;
KdResetUmAttachPid;
KdResetUmBreakPid;
KdSpecialCalls;
KdTimerDifference;
KdTimerStart;
KdTimerStop;
KdTransportMaxPacketSize;
KdUmAttachPid;
KdUmBreakMarker;
KdUmBreakPid;
KdVersionBlock;
Kd_ACPI_Mask;
Kd_ALPC_Mask;
Kd_AMLI_Mask;
Kd_APPCOMPAT_Mask;
Kd_AUTOCHK_Mask;
Kd_BURNENG_Mask;
Kd_CACHEMGR_Mask;
Kd_CDAUDIO_Mask;
Kd_CDROM_Mask;
Kd_CFR_Mask;
Kd_CLASSPNP_Mask;
Kd_CNG_Mask;
Kd_CONFIG_Mask;
Kd_COVERAGE_Mask;
Kd_CRASHDUMPXHCI_Mask;
Kd_CRASHDUMP_Mask;
Kd_DCOMSS_Mask;
Kd_DEFAULT_Mask;
Kd_DFRGIFC_Mask;
Kd_DFSC_Mask;
Kd_DISK_Mask;
Kd_DMADMIN_Mask;
Kd_DMCONFIG_Mask;
Kd_DMIO_Mask;
Kd_DMSERVER_Mask;
Kd_DMSYNTH_Mask;
Kd_DRIVEEXTENDER_Mask;
Kd_EMS_Mask;
Kd_ENDOFTABLE_Mask;
Kd_ENVIRON_Mask;
Kd_EXFAT_Mask;
Kd_FASTFAT_Mask;
Kd_FCPORT_Mask;
Kd_FDC_Mask;
Kd_FILETRACE_Mask;
Kd_FLOPPY_Mask;
Kd_FLTMGR_Mask;
Kd_FLTREGRESS_Mask;
Kd_FSTUB_Mask;
Kd_FUSION_Mask;
Kd_FVEVOL_Mask;
Kd_GPIO_Mask;
Kd_HALIA64_Mask;
Kd_HEAP_Mask;
Kd_HPS_Mask;
Kd_I8042PRT_Mask;
Kd_IDEP_Mask;
Kd_IDLETASK_Mask;
Kd_IHVAUDIO_Mask;
Kd_IHVBUS_Mask;
Kd_IHVDRIVER_Mask;
Kd_IHVNETWORK_Mask;
Kd_IHVSTREAMING_Mask;
Kd_IHVVIDEO_Mask;
Kd_IMAPI_Mask;
Kd_INFINIBAND_Mask;
Kd_IOSTRESS_Mask;
Kd_ISAPNP_Mask;
Kd_KBDCLASS_Mask;
Kd_KBDHID_Mask;
Kd_KSECDD_Mask;
Kd_KTM_Mask;
Kd_LDR_Mask;
Kd_LSASS_Mask;
Kd_LSERMOUS_Mask;
Kd_LUAFV_Mask;
Kd_MCHGR_Mask;
Kd_MMCSS_Mask;
Kd_MM_Mask;
Kd_MOUCLASS_Mask;
Kd_MOUHID_Mask;
Kd_MOUNTMGR_Mask;
Kd_MPIO_Mask;
Kd_MSDSM_Mask;
Kd_NDIS_Mask;
Kd_NETAPI_Mask;
Kd_NTFS_Mask;
Kd_NTOSPNP_Mask;
Kd_NVCTRACE_Mask;
Kd_PCIIDE_Mask;
Kd_PCI_Mask;
Kd_PERFLIB_Mask;
Kd_PNPMEM_Mask;
Kd_PNPMGR_Mask;
Kd_POWER_Mask;
Kd_PREFETCHER_Mask;
Kd_PRINTSPOOLER_Mask;
Kd_PROCESSOR_Mask;
Kd_PSHED_Mask;
Kd_REDBOOK_Mask;
Kd_REFS_Mask;
Kd_RPCPROXY_Mask;
Kd_RSFILTER_Mask;
Kd_RTLTHREADPOOL_Mask;
Kd_SAMSS_Mask;
Kd_SBP2PORT_Mask;
Kd_SCCLIENT_Mask;
Kd_SCSERVER_Mask;
Kd_SCSIMINIPORT_Mask;
Kd_SCSIPORT_Mask;
Kd_SERENUM_Mask;
Kd_SERIAL_Mask;
Kd_SERMOUSE_Mask;
Kd_SETUP_Mask;
Kd_SE_Mask;
Kd_SHPC_Mask;
Kd_SIS_Mask;
Kd_SMSS_Mask;
Kd_SOFTPCI_Mask;
Kd_SR_Mask;
Kd_SSPICLI_Mask;
Kd_STORMINIPORT_Mask;
Kd_STORPORT_Mask;
Kd_STORPROP_Mask;
Kd_STORVSP_Mask;
Kd_SVCHOST_Mask;
Kd_SXS_Mask;
Kd_SYSTEM_Mask;
Kd_TAPE_Mask;
Kd_TCPIP6_Mask;
Kd_TCPIP_Mask;
Kd_TERMSRV_Mask;
Kd_THREADORDER_Mask;
Kd_TPM_Mask;
Kd_TWOTRACK_Mask;
Kd_TXF_Mask;
Kd_UDFS_Mask;
Kd_UHCD_Mask;
Kd_UNIMODEM_Mask;
Kd_USBSTOR_Mask;
Kd_USERGDI_Mask;
Kd_VDSBAS_Mask;
Kd_VDSDYNDR_Mask;
Kd_VDSDYN_Mask;
Kd_VDSLDR_Mask;
Kd_VDSUTIL_Mask;
Kd_VDS_Mask;
Kd_VERIFIER_Mask;
Kd_VIDEOPRT_Mask;
Kd_VIDEO_Mask;
Kd_VSSDYNDISK_Mask;
Kd_VSS_Mask;
Kd_W32TIME_Mask;
Kd_WDI_Mask;
Kd_WDT_Mask;
Kd_WER_Mask;
Kd_WHEA_Mask;
Kd_WIN2000_Mask;
Kd_WMICORE_Mask;
Kd_WMILIB_Mask;
Kd_WOW64_Mask;
Kd_WSOCKTRANSPORT_Mask;
Kd_XSAVE_Mask;
KdpBootedNodebug;
KdpBreakpointChangeCount;
KdpBreakpointInstruction;
KdpBreakpointTable;
KdpContext;
KdpContextSent;
KdpControlCPressed;
KdpCurrentSymbolEnd;
KdpCurrentSymbolStart;
KdpDataBlockEncoded;
KdpDataSpinLock;
KdpDebuggerDataListHead;
KdpDebuggerStructuresInitialized;
KdpInternalBPs;
KdpLoaderDebuggerBlock;
KdpMessageBuffer;
KdpNextCallLevelChange;
KdpNumInternalBreakpoints;
KdpOweBreakpoint;
KdpPathBuffer;
KdpPowerListHead;
KdpPowerSpinLock;
KdpPrintSpinLock;
KdpPrintSpinLockOwner;
KdpRemoteFiles;
KdpSearchAddressRangeEnd;
KdpSearchAddressRangeStart;
KdpSearchCheckPoint;
KdpSearchEndPageFrame;
KdpSearchInProgress;
KdpSearchPageHitIndex;
KdpSearchPageHitOffsets;
KdpSearchPageHits;
KdpSearchPfnValue;
KdpSearchStartPageFrame;
KdpTimeSlipDpc;
KdpTimeSlipEvent;
KdpTimeSlipEventLock;
KdpTimeSlipPending;
KdpTimeSlipTimer;
KdpTimeSlipWorkItem;
KeActiveProcessors;
KeBootTime;
KeBootTimeBias;
KeBootprocSpecified;
KeBugCheckAddPagesCallbackListHead;
KeBugCheckCallbackListHead;
KeBugCheckCallbackLock;
KeBugCheckReasonCallbackListHead;
KeConfigAllowedXStateFeatures;
KeConfigAllowedXStateFeaturesSize;
KeConfigThreadPersistentXStateFeatures;
KeConfigThreadPersistentXStateFeaturesSize;
KeDpcWatchdogPeriod;
KeDynamicPartitioningSupported;
KeEnableWatchdogTimeout;
KeFeatureBits;
KeForceGroupAwareness;
KeHypervisorNumprocSpecified;
KeI386CpuStep;
KeI386CpuType;
KeI386FastSystemCallReturn;
KeI386MachineType;
KeI386VirtualIntExtensions;
KeKernelStackSize;
KeLargestCacheLine;
KeLoaderBlock;
KeLoaderBlockExported;
KeMaximumIncrement;
KeMaximumProcessors;
KeMinimumIncrement;
KeMtrrComparisonFailed;
KeNodeBlock;
KeNodeDistance;
KeNumberNodes;
KeNumberProcessors;
KeNumberProcessorsGroup0;
KeNumprocSpecified;
KePrefetchNTAGranularity;
KeProcessorArchitecture;
KeProcessorLevel;
KeProcessorRevision;
KeRaiseUserExceptionDispatcher;
KeRegisteredProcessors;
KeRootProcPerNodeSpecified;
KeRootProcSpecified;
KeServiceDescriptorTable;
KeServiceDescriptorTableShadow;
KeTestAddedFeatureCount;
KeTestAddedFeatures;
KeTestAddedNonHwFeatureMask;
KeTestDisableXSave;
KeTestProcessorSpecificMask;
KeTestRemovedFeatureMask;
KeThreadDpcEnable;
KeThreadSwitchCounters;
KeTickCount;
KeTimeAdjustment;
KeTimeIncrement;
KeTimeSynchronization;
KeTimerCheckFlags;
KeUserApcDispatcher;
KeUserCallbackDispatcher;
KeUserExceptionDispatcher;
KeUserPopEntrySListEnd;
KeUserPopEntrySListFault;
KeUserPopEntrySListResume;
KeVerifierDpcScalingFactor;
KeXSavePolicyId;
KeXStateLength;
KeZeroPages;
KeZeroPagesFromIdleThread;
KernelLicensingCacheCorrupt;
KernelLicensingCacheCorruptionFixed;
KernelLicensingCacheExpired;
KernelProvGuid;
KernelRundownGuid;
KernelShimEngineProvider;
KernelSystemStart;
KernelSystemStop;
KernelSystemTimeChangeWithReason;
KernelVerifier;
KernelVerifierEnabled;
Ki386EnableCurrentLargePageEnd;
KiAbEnabled;
KiAbForceDisable;
KiAbTreeArray;
KiAbiosPresent;
KiAccessBitErrata;
KiActiveGroups;
KiActualNodeCost;
KiAdjustDpcThreshold;
KiBalanceSetManagerCount;
KiBalanceSetManagerPeriod;
KiBalanceSetManagerPeriodicDpc;
KiBalanceSetManagerPeriodicEvent;
KiBarrierWait;
KiBootFeatureBits;
KiBootProcessorIdt;
KiBootProcessorIdtSize;
KiBugCheckActive;
KiBugCheckData;
KiBugCheckDriver;
KiBugCheckUnexpectedInterrupts;
KiBugCodeMessages;
KiCacheErrataMonitor;
KiCacheFlushTimeStamp;
KiClockActive;
KiClockCheckPending;
KiClockCheckReady;
KiClockCheckSlot;
KiClockIntervalIsSetForHighResolutionTimers;
KiClockIntervalRequests;
KiClockKeepAliveCycle;
KiClockLatencyMaxDynamicTickDuration;
KiClockLatencyMeasurementEnabled;
KiClockPollCycle;
KiClockState;
KiClockStateUpdateTimeout;
KiClockStats;
KiClockTimerAlwaysOnPresent;
KiClockTimerHighLatency;
KiClockTimerNextTickTime;
KiClockTimerOneShotEndTime;
KiClockTimerOneShotStartTime;
KiClockTimerOwner;
KiClockTimerPerCpu;
KiCommonDataArea;
KiCurrentErrLogBufferBase;
KiCurrentErrLogBufferOffset;
KiCurrentEtwBufferBase;
KiCurrentEtwBufferOffset;
KiCycleDivisorLongTerm;
KiCycleDivisorShortTerm;
KiCyclesPerClockQuantum;
KiCyclesPerGeneration;
KiDPCTimeout;
KiDebugRegisterContextOffsets;
KiDebugRegisterTrapOffsets;
KiDebugRoutine;
KiDebugSwitchRoutine;
KiDebuggerIsStallOwner;
KiDebuggerOwner;
KiDefaultClockIntervalRequest;
KiDirectQuantumTarget;
KiDoubleFaultStack;
KiDoubleFaultTSS;
KiDynamicProcessorLock;
KiDynamicTickCancellations;
KiDynamicTickDisableReason;
KiEntropyTimingRoutine;
KiFastCallCopyDoneOnce;
KiFastSystemCallIsIA32;
KiForceSymbolReferencesTrigger;
KiForegroundState;
KiFreezeExecutionLock;
KiFreezeFlag;
KiFreezeLockBackup;
KiFreezeOwner;
KiFreezeStallOwner;
KiFreezeTimeout;
KiGenerationEndTick;
KiGenerationTicks;
KiGlobalSecondaryIDT;
KiGroupBlock;
KiGroupSchedulingEnabled;
KiGroupSchedulingMinimumRate;
KiGroupSchedulingMinimumWeight;
KiGroupSchedulingNumerator;
KiGroupSchedulingOverQuotaMask;
KiGroupSchedulingTotalWeight;
KiHardwareTrigger;
KiHighResolutionTimerClockIntervalRequest;
KiHwCounters;
KiHwCountersCount;
KiHwPolicyDriverImageBase;
KiHwPolicyDriverNotPresent;
KiI386ExceptionChainTerminator;
KiI386FinalExceptionRegistration;
KiI386PentiumLockErrataPresent;
KiI386SEHOPEnabled;
KiIa32MiscEnable;
KiIdealDpcRate;
KiInitialPCR;
KiInitialProcess;
KiInitialThread;
KiIntSteerEtwHandle;
KiIntSteerLoadPercent;
KiIntSteerMask;
KiIntSteerMaskCount;
KiIntTrackRootCount;
KiIntTrackRootList;
KiIntTrackSpinlock;
KiInterruptTimeErrorAccumulator;
KiLargestCacheSize;
KiLastForwardedHand;
KiLastProcessor;
KiLastRequestedTimeIncrement;
KiLastStallTick;
KiLockQuantumTarget;
KiMaxDynamicTickDuration;
KiMaximizeGroupsCreated;
KiMaximumDpcQueueDepth;
KiMaximumGroupSize;
KiMaximumGroups;
KiMaximumIncrementReciprocal;
KiMaximumIncrementShiftCount;
KiMaximumSharedReadyQueueSize;
KiMinDynamicTickDuration;
KiMinimumDpcRate;
KiMtrrInfo;
KiMtrrMaskBase;
KiMtrrMaskMask;
KiMtrrMaxRangeShift;
KiMxCsrMask;
KiNMITSS;
KiNextTimer2DueTime;
KiNmiCallbackListHead;
KiNmiCallbackListLock;
KiNmiInProgress;
KiNodeGraph;
KiNodeInit;
KiNonNumaDistance;
KiNumaQueryProcessorNode;
KiNxForceEnable;
KiObjectRundownLocks;
KiOldIrql;
KiPassiveWatchdogTimeout;
KiPendingTimerBitmaps;
KiPendingTimersMask0;
KiPeriodicCountThreshold;
KiPollSlot;
KiPollSlotNext;
KiPreBugcheckStackSaveArea;
KiProcessInSwapListHead;
KiProcessListHead;
KiProcessNodeSeed;
KiProcessOutSwapListHead;
KiProcessorBlock;
KiProcessorIndexToNumberMappingTable;
KiProcessorNumberToIndexMappingTable;
KiProcessorStartControl;
KiProcessorStartData;
KiProfileAlignmentFixup;
KiProfileAlignmentFixupInterval;
KiProfileIrql;
KiProfileListHead;
KiProfileSourceListHead;
KiQueryNodeCapacity;
KiQueryNodeDistance;
KiQueuedLockTableSize;
KiReverseStallIpiLock;
KiSMTProcessorsPresent;
KiSanitizedProfileInterval;
KiSchedulingGroupList;
KiSchedulingGroupLock;
KiSecondaryInterruptServicesEnabled;
KiSecondarySignalDpc;
KiSecondarySignalDpcRunning;
KiSecondarySignalList;
KiSecondarySignalListLock;
KiSerializeTimerExpiration;
KiShortExecutionCycles;
KiStackInSwapListHead;
KiStackOutSwapRequest;
KiStackProtectTime;
KiSwapEvent;
KiSynchPacket;
KiSystemCallExitAdjust;
KiSystemCallExitAdjusted;
KiSystemTimeErrorAccumulator;
KiTLBCOverride;
KiTargetPhase;
KiTbFlushTimeStamp;
KiTickOffset;
KiTimer2CollectionLock;
KiTimer2Collections;
KiTimerTableSize;
KiUnexpectedEntrySize;
KiXMMIZeroingEnable;
KitEtwHandle;
KitFeatureIdUsedEvent;
KmPnPSqm_Set_Dword;
KmPnpSqm_Add_StreamRow;
KmPnpSqm_Set_String;
KseDsEventAddDevice;
KseDsEventCreateDevice;
KseDsEventDataIrp;
KseDsEventDevicePowerCompleted;
KseDsEventDevicePowerIrp;
KseDsEventDriverLoad;
KseDsEventDriverUnload;
KseDsEventPnpIrp;
KseDsEventPoolAllocate;
KseDsEventPoolFree;
KseDsEventRequestPowerIrp;
KseDsEventStartDevice;
KseDsEventStartIo;
KseDsEventStopDevice;
KseDsEventSystemPowerIrp;
KseDsKernelHooks;
KseDsShim;
KseDsShimGuid;
KseDsShimHookCollections;
KseDsShimIrpHooks;
KseEngine;
KseEtwHandle;
KseFlagsApplied;
KseShimsApplied;
KsepCounters;
KsepDebugFlag;
KsepHistoryErrors;
KsepHistoryErrorsIndex;
KsepHistoryMessages;
KsepHistoryMessagesIndex;
KsepMatchMachineInfo;
KsepSdbFileTime;
KsepShimDbAddress;
KsepShimDbDuringBoot;
KsepShimDbFileHandle;
KsepShimDbHandle;
KsepShimDbLock;
KsepShimDbRefCount;
KsepShimDbSectionHandle;
KsepShimDbSectionPointer;
LICENSING_SQM_INCREMENT_DWORD;
LIVEDUMP_EVENT_CAPTURE_API_END;
LIVEDUMP_EVENT_CAPTURE_API_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_BUFFERING_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_BUFFERING_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_PHASE0_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_PHASE1_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_MIRRORING_START;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_SYSTEM_QUIESCE_END;
LIVEDUMP_EVENT_CAPTURE_PAGES_WORKFLOW_SYSTEM_QUIESCE_START;
LIVEDUMP_EVENT_DISCARD_DEFERRED_DATA_API_END;
LIVEDUMP_EVENT_DISCARD_DEFERRED_DATA_API_START;
LIVEDUMP_EVENT_SIZING_WORKFLOW_BUFFER_ALLOCATION;
LIVEDUMP_EVENT_SIZING_WORKFLOW_BUFFER_ESTIMATION;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_PHASE0_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_PHASE1_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_MIRRORING_START;
LIVEDUMP_EVENT_SIZING_WORKFLOW_SYSTEM_QUIESCE_END;
LIVEDUMP_EVENT_SIZING_WORKFLOW_SYSTEM_QUIESCE_START;
LIVEDUMP_EVENT_WRITE_DEFERRED_DATA_API_END;
LIVEDUMP_EVENT_WRITE_DEFERRED_DATA_API_START;
LIVEDUMP_EVENT_WRITE_DEFERRED_DUMPDATA_TO_FILE_END;
LIVEDUMP_EVENT_WRITE_DEFERRED_DUMPDATA_TO_FILE_START;
LIVEDUMP_EVENT_WRITE_DUMPDATA_TO_FILE_END;
LIVEDUMP_EVENT_WRITE_DUMPDATA_TO_FILE_START;
LazyWriter;
LdtMutex;
LeapYearDayToMonth;
LeapYearDaysPrecedingMonth;
LegacyEventLogGuid;
LicensingSqmProvider;
LicensingStartServiceTrigger;
LiveDumpProvGuid;
LoadMUIDllGuid;
LowboxSessionMapLock;
LpcLegacyMaxMessageLength;
LpcPortObjectType;
LpcWaitablePortObjectType;
MEMORY_ERROR_SECTION_GUID;
MS_KernelPnP_ConfigChange_Provider;
MS_KernelPnP_ConfigChange_Provider_Context;
MS_KernelPnP_Provider;
MS_KernelPnP_Provider_Context;
MS_Kernel_BootDiagnostics_Provider;
MS_Kernel_BootDiagnostics_SystemProxy_Provider;
MS_Kernel_BootDiagnostics_UserProxy_Provider;
MS_Kernel_Prefetch_Provider;
MS_Kernel_SecondaryLogonDiagnostics_Proxy_Provider;
MS_Kernel_ShutdownDiagnostics_Proxy_Provider;
MS_StorageTiering_Provider;
MS_StorageTiering_Provider_Context;
MS_Windows_AIT_Provider;
MS_Windows_Kernel_AppCompat_Provider;
MS_Windows_LicensingStartServiceTrigger_Provider;
MS_Windows_WSServiceStartServiceTrigger_Provider;
MUIRefreshCachedUILock;
MUIRegistryInfo;
MUIRegistryInfoSize;
MUIRegistryLock;
M_strAceEmailPrefix;
M_strAceIdnPrefix;
Magic10000;
Magic10000000;
Magic86400000;
MainPalette;
MemoryProvGuid;
Mi4dFiles;
Mi4dPages;
MiAccessLoggingLock;
MiActiveIoCounter;
MiAdjustCounter;
MiAllMainMemoryMustBeCached;
MiAllocatePfnRepurposeDpc;
MiApiSetSchema;
MiApiSetSection;
MiArbitraryCodeBlockCount;
MiAvailableEventsLock;
MiAvailablePagesEventHighSets;
MiAvailablePagesEventLowSets;
MiBadMemoryEvent;
MiBadMemoryEventEntry;
MiBadPoolHead;
MiBitmapGapFrames;
MiBoostModWriteIoPriorityEvent;
MiBootRegistryRuns;
MiCacheFlushPromoteThreshold;
MiCachedNonPagedListLock;
MiCachedPteHeads;
MiCcAccessLog;
MiCfgBitMapControlArea32;
MiCfgBitMapSection32;
MiCfgCompressionTableScales;
MiChannelMemoryRanges;
MiChannelShift;
MiChargeCommitmentFailures;
MiCheckZeroCount;
MiCloneDereferenceEvent;
MiCloneProtosSListHead;
MiClusterWritesDisabled;
MiCodePageEdited;
MiCombineFreeListLock;
MiCombinePageFreeList;
MiCombinePageListHeads;
MiCombinePagesLock;
MiCombiningActive;
MiCombiningActiveSpinLock;
MiCommitEventLock;
MiCommitPopups;
MiComparePfn;
MiComparePte;
MiCompareThread;
MiConnectedStandbyActive;
MiControlAreaDeleteEvent;
MiControlAreaDeleteList;
MiCookie;
MiDataSectionProtectionMask;
MiDeadPteTrackerSListHead;
MiDebuggerPfns;
MiDecayClusterTimerHeads;
MiDecayHand;
MiDelayMappedWrite;
MiDelayPageFaults;
MiDeleteKvaLock;
MiDeleteOnCloseCount;
MiDeleteOnCloseList;
MiDeleteOnCloseTimer;
MiDeleteOnCloseTimerActive;
MiDisableAccessLogging;
MiDriverPageCount;
MiDriverRanges;
MiDriverRangesPushLock;
MiDummyPage;
MiDummyPagePfn;
MiDynamicMemoryLock;
MiExpansionNonPagedPoolHighBit;
MiFaultWrite;
MiFirstDecayPage;
MiFirstDriverLoadEver;
MiFirstFreePae;
MiFirstLevelCacheSize;
MiFirstNonPagedLargePage;
MiFirstReservedZeroingPte;
MiFlags;
MiFlushCacheForAttributeChange;
MiFlushCacheForPageAttributeChange;
MiFlushTbForAttributeChange;
MiFreeCombinePoolItem;
MiFreeListDiscard;
MiFreePaeEntries;
MiFreePageSlist;
MiFreeSystemCache;
MiFreeSystemCacheVa;
MiFullyInitialized;
MiHalScratchPte;
MiHighCommitEvent;
MiHighCommitThreshold;
MiHighMemoryEvent;
MiHighNonPagedPoolEvent;
MiHighNonPagedPoolThreshold;
MiHighPagedPoolEvent;
MiHighPagedPoolThreshold;
MiHighestUserPde;
MiHighestUserPte;
MiImageBias;
MiImageBitMap;
MiImageBitmapBuffer;
MiImageCfgFailure;
MiImageFailure;
MiImageProtectionArray;
MiImageValidationFailed;
MiInDebugger;
MiInPageSinglePages;
MiInitFailure;
MiInitialNonPagedPoolBitMap;
MiInitialPoolFreed;
MiInitialPoolHighRegionBit;
MiInitializeSessionLock;
MiIoRetryMask;
MiKernelStackPages;
MiLargePageAllDrivers;
MiLargePageDriverList;
MiLargePfnBitMap;
MiLargeZero;
MiLastChanceLdwContext;
MiLastDriverPage;
MiLastMappedWriteError;
MiLastModifiedWriteError;
MiLastNonPagedRemoveNode;
MiLastTrimPagefileTime;
MiLeakedSessionTags;
MiLowCommitEvent;
MiLowCommitThreshold;
MiLowHalVa;
MiLowMemoryEvent;
MiLowNonPagedPoolEvent;
MiLowNonPagedPoolThreshold;
MiLowPagedPoolEvent;
MiLowPagedPoolThreshold;
MiLowPriorityModWritesOutstanding;
MiMapCacheFailures;
MiMappedFileWriteSucceeded;
MiMappedPageListHead;
MiMappedPageListHeadEvent;
MiMappedWriteBurstCount;
MiMaximumCommitEvent;
MiMaximumFlushCluster;
MiMaximumWorkingSet;
MiMdlTrackerLookaside;
MiMdlsAdjusted;
MiMirrorBitMap;
MiMirrorBitMapInterlocked;
MiMirrorHoldsPfn;
MiMirrorListLocks;
MiMirroringActive;
MiModWriteData;
MiModifiedPageListByReservation;
MiModifiedPageListNoReservation;
MiModifiedPageWriterThread;
MiModifiedPagesLowPriorityGoal;
MiModifiedWriterThreadPriority;
MiNeedMappedMdl;
MiNeedPageFileMdl;
MiNoRelocate;
MiNodeGraph;
MiNodeInformation;
MiNodeMask;
MiNodeShift;
MiNonPagedPoolBitMap;
MiNonPagedPoolBitMapNx;
MiNonPagedPoolHintNx;
MiNonPagedPoolSListMaximum;
MiNonPagedPoolStartAligned;
MiNumaLastRangeIndex;
MiNumaMemoryRanges;
MiPaeEntrySList;
MiPaeLock;
MiPageCombineStats;
MiPageFileContract;
MiPageFileSectionHead;
MiPageFileSectionListLock;
MiPageFileSectionListSpinLock;
MiPageFileTraceIndex;
MiPageFileTraces;
MiPageHashErrors;
MiPageOfOnes;
MiPageOfOnesPfn;
MiPageOfZeroes;
MiPageRuns;
MiPagedPoolSListMaximum;
MiPagedProtoPoolInfo;
MiPagefileReservationsEnabled;
MiPagefileScanCount;
MiPagefileScanWorkItem;
MiPendingBad;
MiPfnBitMap;
MiPfnDecayFreeSList;
MiPfnGapFrames;
MiPfnRepurposeLog;
MiPhysicalControlArea;
MiPhysicalMemoryEvent;
MiPhysicalSubsection;
MiPlatformCacheAttributes;
MiPossibleSystemWsles;
MiProbeRaises;
MiPteHeader;
MiPteTrackerLock;
MiPteTrackingBitmap;
MiQueuedStacks;
MiQueuedStacksWorkItem;
MiReadWrite;
MiRebuildLargePagesInitialized;
MiRebuildLargePagesItem;
MiReclaimNonPagedPoolEvent;
MiRelocationVaLock;
MiRescanPageFilesEvent;
MiResetStandbyRepurposedFromSystemProcess;
MiResumeItem;
MiRotatingUniprocessorNumber;
MiSafeBooted;
MiScrubBadPagesFound;
MiScrubPasses;
MiSecondLevelCacheSize;
MiSectionMapping;
MiSectionObjectPointersLock;
MiSegmentListLock;
MiSessionDetachTimeStamp;
MiSessionDynamicPtesBitBuffer;
MiSessionIdBitmap;
MiSessionIdMutex;
MiSessionImageActiveBitmapBuffer;
MiSessionImageBitmap;
MiSessionImageBitmapBuffer;
MiSessionImageHint;
MiSessionLeaderProcess;
MiSessionMapping;
MiSessionSpaceWs;
MiSessionSpecialPool;
MiSessionVaReferenceCount;
MiSessionWsHashEnd;
MiSessionWsHashStart;
MiSessionWsList;
MiShowBadMaps;
MiSpecialPagesInUsePeak;
MiSpecialPagesNonPaged;
MiSpecialPool;
MiSpecialPoolPdes;
MiSpecialPoolPdesMax;
MiStackGrowthFailures;
MiStandbyListDiscard;
MiStandbyRepurposedByPriority;
MiStoreEvictEvent;
MiStoreMinModWritePriority;
MiStoreRegistered;
MiStoreWriteSupportSListHead;
MiSubsectionDeletePtes;
MiSystemAvailableVa;
MiSystemAvailableVaLow;
MiSystemCachePdeCount;
MiSystemCacheReverseMaps;
MiSystemCacheViewLock;
MiSystemDllBase;
MiSystemDllViewSize;
MiSystemLoadLock;
MiSystemPteInfo;
MiSystemPteVaSpan;
MiSystemRangeStart;
MiSystemTablesLock;
MiSystemVaLock;
MiSystemVaType;
MiSystemVaTypeCount;
MiSystemVaTypeCountFailures;
MiSystemVaTypeCountLimit;
MiSystemVaTypeCountPeak;
MiSystemViewPteInfo;
MiSystemVmTypes;
MiTempEvent;
MiTotalPagesAllowed;
MiTotalUnloads;
MiTrackIoLock;
MiTrackPtesAborted;
MiTransitionInserted;
MiTriageDumpData;
MiTrimAllPageFaultCount;
MiTrimInProgressCount;
MiTrimPagefileWorkItem;
MiTrimPassToAge;
MiUnloadsSkipped;
MiUnusableSystemWsles;
MiUnusedSubsectionPagedPool;
MiUsingHalNumaTable;
MiWorkingSetListHashEnd;
MiWorkingSetListHashStart;
MiWorkingSetListIndirectHashStart;
MiWorkingSetSwapLock;
MiWriteCombiningPtes;
MiWsData;
MiWsLinear;
MiWsOverheadPages;
MiWsSwapPageFileContractionInProgress;
MiWsSwapPagefileContractWorkItem;
MiWsleFailures;
MiZeroCostCounts;
MiZeroFreePageSlistMinimum;
MiZeroFreePageSlistMinimumAtInit;
MiZeroPageSlist;
MiZeroingDisabled;
MiZeroingPageThreadActive;
Microsoft_Windows_Kernel_PnPConfigEnableBits;
Microsoft_Windows_Kernel_PnPConfigHandle;
Microsoft_Windows_Kernel_PnPConfigKeywords;
Microsoft_Windows_Kernel_PnPConfigLevels;
Microsoft_Windows_Kernel_PnPEnableBits;
Microsoft_Windows_Kernel_PnPHandle;
Microsoft_Windows_Kernel_PnPKeywords;
Microsoft_Windows_Kernel_PnPLevels;
Microsoft_Windows_PnPMgrTriggerProviderEnableBits;
Microsoft_Windows_PnPMgrTriggerProviderHandle;
Microsoft_Windows_PnPMgrTriggerProviderKeywords;
Microsoft_Windows_PnPMgrTriggerProviderLevels;
Microsoft_Windows_Storage_TieringEnableBits;
Microsoft_Windows_Storage_TieringHandle;
Microsoft_Windows_Storage_TieringKeywords;
Microsoft_Windows_Storage_TieringLevels;
Mm10Milliseconds;
Mm30Milliseconds;
Mm64BitPhysicalAddress;
MmAccessLogAllocationFailures;
MmAccessLogging;
MmAllocatedNonPagedPool;
MmAllocatedPaePages;
MmAllocationFragment;
MmAllocationPreference;
MmAttemptForCantExtend;
MmAvailablePages;
MmAvailablePagesEvent;
MmAvailablePagesEventHigh;
MmBadPageListHead;
MmBadPagesDetected;
MmBadPointer;
MmCollidedLock;
MmCompatibleProtectionMask;
MmConsumedPoolPercentage;
MmCrashDumpInitialized;
MmCrashDumpPte;
MmCriticalSectionTimeout;
MmCritsectTimeoutSeconds;
MmDebugPte;
MmDeleteSubsectionCleanup;
MmDeleteSubsectionList;
MmDereferenceSegmentHeader;
MmDisablePageCombining;
MmDisablePagingExecutive;
MmDriverCommit;
MmDynamicMemoryLock;
MmDynamicMemorySupported;
MmDynamicPfn;
MmEnableCfg;
MmEnableCooling;
MmExpansionLock;
MmForceValidateIo;
MmFreePageListHead;
MmFreePagesByColor;
MmHalfSecond;
MmHeapDeCommitFreeBlockThreshold;
MmHeapDeCommitTotalFreeThreshold;
MmHeapSegmentCommit;
MmHeapSegmentReserve;
MmHighMemoryThreshold;
MmHighSectionBase;
MmHighestPhysicalPage;
MmHighestPossiblePhysicalPage;
MmHighestUserAddress;
MmHyperSpaceEnd;
MmHyperSpaceEndPte;
MmInPageSupportSListHead;
MmInPageSupportSListMinimum;
MmIoHeader;
MmIoHeaderData;
MmIoTrackerLock;
MmLargePageDriverBuffer;
MmLargePageDriverBufferLength;
MmLargePageDriverBufferType;
MmLargePageMinimum;
MmLastUnloadedDriver;
MmLockedIoPagesHead;
MmLowMemoryThreshold;
MmLowestPhysicalPage;
MmMakeFileAccess;
MmMakeProtectNotWriteCopy;
MmMakeSectionAccess;
MmMappedFileHeader;
MmMappedPageWriterEvent;
MmMaximumNonPagedPoolInBytes;
MmMaximumNonPagedPoolInPages;
MmMdlPagesAllocated;
MmMinLoggingPriority;
MmMinimumStackCommitInBytes;
MmMirroring;
MmModifiedNoWritePageListHead;
MmModifiedPageListHead;
MmModifiedPageListHeadLocked;
MmModifiedPageWriterGate;
MmModifiedWriteMaximumPages;
MmMoveImages;
MmNonPagedPoolLimit;
MmNonPagedPoolLock;
MmNonPagedPoolStart;
MmNumberOfMappedMdls;
MmNumberOfMappedMdlsInUse;
MmNumberOfMappedMdlsInUsePeak;
MmNumberOfPagingFiles;
MmNumberOfPhysicalPages;
MmOneSecond;
MmPaeErrMask;
MmPaeMask;
MmPageFileCreationLock;
MmPageLocationList;
MmPageValidationAction;
MmPageValidationFrequency;
MmPagedPoolEnd;
MmPagedPoolInfo;
MmPagedPoolLimit;
MmPagedPoolWs;
MmPagingFile;
MmPagingFileHeader;
MmPeakCommitment;
MmPfnDatabase;
MmPhysicalAddressBits;
MmPhysicalMemoryBlock;
MmPoisonedTb;
MmPoolFailureReasons;
MmPoolFailures;
MmPreemptiveTrims;
MmProcessColorSeed;
MmProcessCommit;
MmProcessList;
MmProductType;
MmProtectFreedNonPagedPool;
MmProtectToPteMask;
MmProtectToValue;
MmResTrack;
MmResidentAvailablePages;
MmSecondaryColorMask;
MmSecondaryColors;
MmSectionBasedMutex;
MmSectionBasedRoot;
MmSectionExtendResource;
MmSectionExtendSetResource;
MmSectionObjectType;
MmSession;
MmSessionDataPages;
MmSessionObjectType;
MmSessionSpace;
MmSessionSpaceLimit;
MmSeventySeconds;
MmSharedCommit;
MmSharedUserDataPte;
MmShortTime;
MmShowMapOverlaps;
MmSizeOfNonPagedPoolInBytes;
MmSizeOfPagedPoolInBytes;
MmSizeOfPagedPoolInPages;
MmSpecialPagesInUse;
MmSpecialPoolCatchOverruns;
MmSpecialPoolRejected;
MmSpecialPoolTag;
MmStandbyPageListByPriority;
MmStandbyPageListHead;
MmStandbyPageListHeadLocked;
MmSubsectionBase;
MmSystemCacheLimit;
MmSystemCacheWs;
MmSystemCodePage;
MmSystemCommitReserve;
MmSystemDriverPage;
MmSystemPtesLimit;
MmSystemPtesWs;
MmSystemRangeStart;
MmSystemShutdown;
MmSystemSize;
MmSystemSpaceLock;
MmTotalCommitLimit;
MmTotalCommitLimitMaximum;
MmTotalCommittedPages;
MmTotalNonPagedPoolQuota;
MmTotalPagedPoolQuota;
MmTotalPagesForPagingFile;
MmTotalSystemCodePages;
MmTotalSystemDriverPages;
MmTrackLockedPages;
MmTrackPtes;
MmTransientWrite;
MmTransitionPrivatePages;
MmTransitionSharedPages;
MmTransitionSharedPagesPeak;
MmUnloadedDrivers;
MmUnusedIoHeader;
MmUnusedSegmentCleanup;
MmUnusedSegmentForceFree;
MmUnusedSegmentList;
MmUnusedSubsectionList;
MmUserProbeAddress;
MmUserProtectionToMask1;
MmUserProtectionToMask2;
MmVadPhysicalPages;
MmVerifierData;
MmVerifierTrimFrequency;
MmVerifyDriverBuffer;
MmVerifyDriverBufferLength;
MmVerifyDriverBufferType;
MmVerifyDriverLevel;
MmVirtualBias;
MmWorkingSetExpansionHead;
MmWriteAllMappedPages;
MmWriteAllPagefilePages;
MmZeroPageFile;
MmZeroedPageListHead;
MmZeroedPageSingleBitErrorsDetected;
MmZeroingPageEvent;
MuiLockInitCount;
MuiMutex;
MxBootPageCount;
MxFreeDescriptor;
MxHalDataTableEntry;
MxLastMemoryDescriptorChecked;
MxPfnAllocation;
MxTotalFreePages;
MxTotalPageCount;
MxUseLargePagesForKernelAndHal;
NetProvGuid;
NextTraceDataSym;
Nls844UnicodeLowercaseTable;
Nls844UnicodeUpcaseTable;
NlsAnsiCodePage;
NlsAnsiToUnicodeData;
NlsDefaultCasingTableSize;
NlsDirectoryAttributes;
NlsDirectoryName;
NlsLeadByteInfo;
NlsLeadByteInfoTable;
NlsLocaleFilePathName;
NlsLocaleSectionPointer;
NlsMbAnsiCodePageTables;
NlsMbCodePageTag;
NlsMbOemCodePageTables;
NlsMbOemCodePageTag;
NlsOemCodePage;
NlsOemLeadByteInfo;
NlsOemLeadByteInfoTable;
NlsOemToUnicodeData;
NlsRegKeyName;
NlsSectionLock;
NlsTableVersion;
NlsTableVersionKeyName;
NlsUnicodeToAnsiData;
NlsUnicodeToMbAnsiData;
NlsUnicodeToMbOemData;
NlsUnicodeToOemData;
NoCallerIdString;
NonPagedPoolDescriptor;
NonPagedPoolLock;
NormalYearDayToMonth;
NormalYearDaysPrecedingMonth;
NormalizationList;
NtBuildGUID;
NtBuildLab;
NtBuildLabEx;
NtBuildNumber;
NtGlobalFlag;
NtInitialUserProcessBuffer;
NtInitialUserProcessBufferLength;
NtInitialUserProcessBufferType;
NtSystemRoot;
NtVhdBootFile;
NtdllExportInformation;
NtdllExports;
NtfsStructLock;
NullGuid;
NumTraceDataSyms;
ObSystemDeviceMap;
ObTypeIndexTable;
ObpAuditBaseDirectories;
ObpAuditBaseObjects;
ObpCaseInsensitive;
ObpCreateInfoLookasideList;
ObpDefaultObject;
ObpDefaultSecurityDescriptorLength;
ObpDeviceMapLock;
ObpDirectoryMapping;
ObpDirectoryObjectType;
ObpDosDevicesShortName;
ObpDosDevicesShortNamePrefix;
ObpDosDevicesShortNameRoot;
ObpInfoMaskToOffset;
ObpInvalidOpenByPointer;
ObpKernelHandleTable;
ObpLUIDDeviceMapsEnabled;
ObpMaxStacks;
ObpNameBufferLookasideList;
ObpNumTracedObjects;
ObpObjectBuckets;
ObpObjectSecurityInheritance;
ObpObjectSecurityMode;
ObpObjectTable;
ObpObjectTypes;
ObpPrivateNamespaceLookupTable;
ObpProtectionMode;
ObpPushStackInfoList;
ObpPushStackInfoWorkItem;
ObpRegTraceFlags;
ObpRegTracePoolTags;
ObpRegTraceProcessName;
ObpRemoveObjectDpc;
ObpRemoveObjectList;
ObpRemoveObjectWait;
ObpRemoveObjectWorkItem;
ObpRootDirectoryObject;
ObpRuntimeTraceFlags;
ObpRuntimeTracePoolTags;
ObpRuntimeTraceProcessName;
ObpStackBuckets;
ObpStackSequence;
ObpStackTable;
ObpStackTraceLock;
ObpStacksPerBucket;
ObpSymbolicLinkMapping;
ObpSymbolicLinkObjectType;
ObpSystemDosDeviceState;
ObpTraceDepth;
ObpTraceFlags;
ObpTracePermanent;
ObpTracePoolTags;
ObpTracePoolTagsBuffer;
ObpTracePoolTagsLength;
ObpTraceProcessName;
ObpTraceProcessNameBuffer;
ObpTraceProcessNameLength;
ObpTypeDirectoryObject;
ObpTypeMapping;
ObpTypeObjectType;
ObpUnsecureGlobalNamesBuffer;
ObpUnsecureGlobalNamesLength;
ObpWaitBlockLookaside;
ObpWorkItemFreeList;
ObsSecurityDescriptorCache;
OemDefaultChar;
OemTransUniDefaultChar;
OpcodeDispatch;
OpcodeDispatchV86;
OpcodeIndex;
PARTITION_SYSTEM_GUID;
PNP_EVT_DP_REPLACE_FAILURE;
PNP_EVT_DP_REPLACE_START;
PNP_EVT_DP_REPLACE_SUCCESS;
POGOBuffer;
POP_ETW_ADPM_ACTIVE_INPUT;
POP_ETW_ADPM_DISPLAY_TIMEOUT;
POP_ETW_ADPM_GLOBAL_INPUT_STATE;
POP_ETW_ADPM_INPUT_TIMEOUT;
POP_ETW_ADPM_PASSIVE_INPUT;
POP_ETW_ADPM_POLICY_CHANGE;
POP_ETW_ADPM_SESSION_CLOSED;
POP_ETW_ADPM_SESSION_CONNECTED;
POP_ETW_ADPM_SESSION_CREATED;
POP_ETW_ADPM_SESSION_DISCONNECTED;
POP_ETW_ADPM_SESSION_DISPLAY_STATE;
POP_ETW_ADPM_SESSION_INPUT_STATE;
POP_ETW_ADPM_SESSION_LOCKED;
POP_ETW_ADPM_SESSION_UNLOCKED;
POP_ETW_EVENT_ABNORMAL_RESET;
POP_ETW_EVENT_ACDC_STATE_CHANGE;
POP_ETW_EVENT_ACDC_STATE_RUNDOWN;
POP_ETW_EVENT_ACTIVE_COOLING_DIAGNOSTIC;
POP_ETW_EVENT_ACTIVE_COOLING_OPERATIONAL;
POP_ETW_EVENT_AWAYMODE;
POP_ETW_EVENT_BUILDNOTIFYLIST;
POP_ETW_EVENT_BUILDNOTIFYLIST_END;
POP_ETW_EVENT_CHANGE_POWER_REQUEST;
POP_ETW_EVENT_CLOSE_POWER_REQUEST;
POP_ETW_EVENT_CMSHUTDOWNSYSTEM_START;
POP_ETW_EVENT_CMSHUTDOWNSYSTEM_STOP;
POP_ETW_EVENT_COMPONENT_ACCOUNTING;
POP_ETW_EVENT_COMPONENT_CONDITION;
POP_ETW_EVENT_COMPONENT_IDLE_CONSTRAINTS;
POP_ETW_EVENT_COMPONENT_IDLE_STATE;
POP_ETW_EVENT_COMPONENT_LATENCY;
POP_ETW_EVENT_COMPONENT_REGISTRATION;
POP_ETW_EVENT_COMPONENT_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_COMPONENT_RESIDENCY;
POP_ETW_EVENT_COMPONENT_WAKE;
POP_ETW_EVENT_CONSOLE_DISPLAY_STATE;
POP_ETW_EVENT_COOLING_MODE;
POP_ETW_EVENT_CREATE_POWER_REQUEST;
POP_ETW_EVENT_CRITICAL_TRIP_POINT_DIAGNOSTIC;
POP_ETW_EVENT_CRITICAL_TRIP_POINT_SYSTEM;
POP_ETW_EVENT_CS_CONSUMPTION_PERFTRACK;
POP_ETW_EVENT_CS_DRIPS_WATCHDOG_PERFTRACK;
POP_ETW_EVENT_CS_ENTER_REASON;
POP_ETW_EVENT_CS_EXIT_REASON;
POP_ETW_EVENT_CS_FAN_PERFTRACK;
POP_ETW_EVENT_DEVICESSUSPEND;
POP_ETW_EVENT_DEVICESSUSPENDLEVEL;
POP_ETW_EVENT_DEVICESSUSPENDLEVEL_END;
POP_ETW_EVENT_DEVICESSUSPEND_END;
POP_ETW_EVENT_DEVICESWAKE;
POP_ETW_EVENT_DEVICESWAKELEVEL;
POP_ETW_EVENT_DEVICESWAKELEVEL_END;
POP_ETW_EVENT_DEVICESWAKE_END;
POP_ETW_EVENT_DEVICE_ACCOUNTING;
POP_ETW_EVENT_DEVICE_IDLE_CHECK;
POP_ETW_EVENT_DEVICE_IDLE_CONSTRAINTS;
POP_ETW_EVENT_DEVICE_IDLE_END;
POP_ETW_EVENT_DEVICE_IDLE_START;
POP_ETW_EVENT_DEVICE_POWERED;
POP_ETW_EVENT_DEVICE_POWER_REQUIREMENT_FROM_PEP;
POP_ETW_EVENT_DEVICE_POWER_REQUIREMENT_TO_DEVICE;
POP_ETW_EVENT_DEVICE_POWER_STATE;
POP_ETW_EVENT_DEVICE_PREPARATION;
POP_ETW_EVENT_DEVICE_REGISTRATION;
POP_ETW_EVENT_DEVICE_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_DEVICE_RUNDOWN;
POP_ETW_EVENT_DEVICE_START_POWER_MANAGEMENT;
POP_ETW_EVENT_DEVICE_UNREGISTRATION;
POP_ETW_EVENT_DEVICE_VERBOSE_RUNDOWN;
POP_ETW_EVENT_DIRTY_TRANSITION;
POP_ETW_EVENT_DISK_IDLE_CHECK;
POP_ETW_EVENT_DRIVERVETO;
POP_ETW_EVENT_DYNAMIC_TICK_DISABLED;
POP_ETW_EVENT_DYNAMIC_TICK_STATUS_RUNDOWN;
POP_ETW_EVENT_FLUSHALLPAGES;
POP_ETW_EVENT_FLUSHALLPAGES_END;
POP_ETW_EVENT_FLUSHVOLUMES_START;
POP_ETW_EVENT_FLUSHVOLUMES_STOP;
POP_ETW_EVENT_GRACEFULSHUTDOWN_START;
POP_ETW_EVENT_GRACEFULSHUTDOWN_STOP;
POP_ETW_EVENT_HIBERNATE_STATUS;
POP_ETW_EVENT_HIBER_STATS;
POP_ETW_EVENT_IDLE_CHECK;
POP_ETW_EVENT_ILLEGAL_PROCESSOR_THROTTLE_DIAGNOSTIC;
POP_ETW_EVENT_ILLEGAL_PROCESSOR_THROTTLE_OPERATIONAL;
POP_ETW_EVENT_IOSHUTDOWNSYSTEM_START;
POP_ETW_EVENT_IOSHUTDOWNSYSTEM_STOP;
POP_ETW_EVENT_IRPFINISH;
POP_ETW_EVENT_IRPSTART;
POP_ETW_EVENT_IRP_DRIVERACQUIRE;
POP_ETW_EVENT_IRP_DRIVERRELEASE;
POP_ETW_EVENT_KERNEL_QUERY_ALLOWED;
POP_ETW_EVENT_KERNEL_STRS;
POP_ETW_EVENT_MTRR_CHANGED;
POP_ETW_EVENT_PASSIVE_COOLING_DIAGNOSTIC;
POP_ETW_EVENT_PASSIVE_COOLING_OPERATIONAL;
POP_ETW_EVENT_PERFTRACK_HIBERNATE;
POP_ETW_EVENT_PERFTRACK_HYBRID_RESUME;
POP_ETW_EVENT_PERFTRACK_HYBRID_SHUTDOWN;
POP_ETW_EVENT_PERFTRACK_RESUME_FROM_HIBERNATE;
POP_ETW_EVENT_PERFTRACK_STANDBY;
POP_ETW_EVENT_PLATFORMROLE_RUNDOWN;
POP_ETW_EVENT_PLUGIN_REGISTRATION;
POP_ETW_EVENT_PLUGIN_REGISTRATION_RUNDOWN;
POP_ETW_EVENT_POSTSLEEP_NOTIFICATION;
POP_ETW_EVENT_POWERTRANSITION_END;
POP_ETW_EVENT_POWERTRANSITION_START;
POP_ETW_EVENT_POWER_REQUEST_RUNDOWN;
POP_ETW_EVENT_POWER_SETTING_CHANGE;
POP_ETW_EVENT_POWER_SETTING_RUNDOWN;
POP_ETW_EVENT_PRESLEEP_CALLBACKS_START;
POP_ETW_EVENT_PRESLEEP_CALLBACKS_STOP;
POP_ETW_EVENT_PRESLEEP_NOTIFICATION2;
POP_ETW_EVENT_REGISTERSYSTEMSTATE;
POP_ETW_EVENT_RESUMEAPPS;
POP_ETW_EVENT_RESUMEAPPS_END;
POP_ETW_EVENT_RESUMESERVICES;
POP_ETW_EVENT_RESUMESERVICES_END;
POP_ETW_EVENT_S3FWSTATS_RESUME;
POP_ETW_EVENT_S3FWSTATS_SUSPEND;
POP_ETW_EVENT_S4_TRIP_POINT_DIAGNOSTIC;
POP_ETW_EVENT_S4_TRIP_POINT_SYSTEM;
POP_ETW_EVENT_SETSYSTEMSTATE;
POP_ETW_EVENT_SHUTDOWN_ACTION;
POP_ETW_EVENT_SKIP_TICK;
POP_ETW_EVENT_SLEEP_DISABLE_REASON_RUNDOWN;
POP_ETW_EVENT_SPM_POLICY_ALIAS_RUNDOWN;
POP_ETW_EVENT_SPM_POLICY_STATUS_RUNDOWN;
POP_ETW_EVENT_SPM_POLICY_STATUS_UPDATE;
POP_ETW_EVENT_SPM_SCENARIO_POLICY_RUNDOWN;
POP_ETW_EVENT_SPM_SCENARIO_START;
POP_ETW_EVENT_SPM_SCENARIO_STOP;
POP_ETW_EVENT_STES;
POP_ETW_EVENT_STRS;
POP_ETW_EVENT_SUPERFETCH_START;
POP_ETW_EVENT_SUPERFETCH_STOP;
POP_ETW_EVENT_SUSPENDAPP;
POP_ETW_EVENT_SUSPENDAPPS;
POP_ETW_EVENT_SUSPENDAPPS_END;
POP_ETW_EVENT_SUSPENDAPP_END;
POP_ETW_EVENT_SUSPENDSERVICE;
POP_ETW_EVENT_SUSPENDSERVICES;
POP_ETW_EVENT_SUSPENDSERVICES_END;
POP_ETW_EVENT_SUSPENDSERVICE_END;
POP_ETW_EVENT_SYSTEM_LATENCY_RUNDOWN;
POP_ETW_EVENT_SYSTEM_LATENCY_UPDATE;
POP_ETW_EVENT_THERMAL_DURATION_PERFTRACK;
POP_ETW_EVENT_THERMAL_EVENT;
POP_ETW_EVENT_THERMAL_PERFTRACK;
POP_ETW_EVENT_THERMAL_ZONE_ENUMERATED;
POP_ETW_EVENT_THERMAL_ZONE_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_REQUEST_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_STACK_RUNDOWN;
POP_ETW_EVENT_TIME_RESOLUTION_UPDATE;
POP_ETW_EVENT_TRANSITIONTIMES;
POP_ETW_EVENT_WAITFORPROCESSES_START;
POP_ETW_EVENT_WAITFORPROCESSES_STOP;
POP_ETW_EVENT_ZEROHIBERFILE_START;
POP_ETW_EVENT_ZEROHIBERFILE_STOP;
POP_ETW_EVENT_ZEROPAGEFILE_START;
POP_ETW_EVENT_ZEROPAGEFILE_STOP;
POP_ETW_IDLE_RESILIENCY_END;
POP_ETW_IDLE_RESILIENCY_START;
POP_ETW_IO_COALESCING_DSK_IDLE;
POP_ETW_IO_COALESCING_FLUSH;
POP_ETW_IO_COALESCING_OFF;
POP_ETW_IO_COALESCING_ON;
POP_ETW_PROVIDER;
POP_TRIGGER_ETW_AOAC_CAPABILITY;
POP_TRIGGER_ETW_PROVIDER;
PORTABLE_WORKSPACE_LAUNCHER_EFI_ENTRY_ID;
PPM_ETW_ACCOUNTING_BUCKET_INTERVALS_RUNDOWN;
PPM_ETW_BIOS_CAP_CHANGE;
PPM_ETW_CURRENT_IDLE_RUNDOWN;
PPM_ETW_CURRENT_PERF_RUNDOWN;
PPM_ETW_DOMAIN_PERF_STATE_CHANGE;
PPM_ETW_DRIPS_ACCOUNTING_SNAPSHOT;
PPM_ETW_EXPECTED_UTILITY;
PPM_ETW_IDLE_ACCOUNTING_RUNDOWN;
PPM_ETW_INTERRUPT_STEERING_MASK_RUNDOWN;
PPM_ETW_INTERRUPT_STEERING_PROC_RUNDOWN;
PPM_ETW_INTERRUPT_STEERING_STATE_CONNECT;
PPM_ETW_INTERRUPT_STEERING_STATE_DISCONNECT;
PPM_ETW_INTERRUPT_STEERING_STATE_RUNDOWN;
PPM_ETW_LATENCY_SENSITIVITY_HINT;
PPM_ETW_LPI_CORE_PARK;
PPM_ETW_LPI_RUNDOWN;
PPM_ETW_PARK_CORE;
PPM_ETW_PARK_NODE_CAP_CHANGE;
PPM_ETW_PARK_NODE_RUNDOWN;
PPM_ETW_PARK_NODE_STATS;
PPM_ETW_PERF_CHECK_FAILED_START;
PPM_ETW_PERF_CHECK_MAKEUP;
PPM_ETW_PERF_CHECK_START;
PPM_ETW_PERF_CHECK_STOP;
PPM_ETW_PLATFORM_IDLE_ACCOUNTING_RUNDOWN;
PPM_ETW_PLATFORM_IDLE_VETO_DECREMENT;
PPM_ETW_PLATFORM_IDLE_VETO_INCREMENT;
PPM_ETW_PLATFORM_IDLE_VETO_RUNDOWN;
PPM_ETW_PLATFORM_PARKING_PREFERENCE;
PPM_ETW_PROCESSOR_IDLE_VETO_DECREMENT;
PPM_ETW_PROCESSOR_IDLE_VETO_INCREMENT;
PPM_ETW_PROCESSOR_IDLE_VETO_RUNDOWN;
PPM_ETW_PROCESSOR_PERF_STATE_CHANGE;
PPM_ETW_PROCESSOR_PERF_STATE_CHANGE_INITIATED;
PPM_ETW_PROVIDER;
PPM_ETW_RECORDED_UTILITY;
PPM_ETW_THERMAL_CAP_CHANGE;
PPM_ETW_UNPARK_CORE;
PPM_IDLESTATES_DATA_GUID;
PPM_IDLESTATE_CHANGE_GUID;
PPM_IDLE_ACCOUNTING_EX_GUID;
PPM_PERFMON_PERFSTATE_GUID;
PPM_PERFSTATES_DATA_GUID;
PPM_PERFSTATE_CHANGE_GUID;
PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
PPM_THERMALCONSTRAINT_GUID;
PPM_THERMAL_POLICY_CHANGE_GUID;
PROCESSOR_NUMBER_PKEY;
Palette;
PaletteBmp;
PaletteNum;
PalettePtr;
PassiveInterruptForceCriticalWorker;
PassiveInterruptList;
PassiveInterruptListLock;
PassiveInterruptRealtimeWorkQueue;
PassiveInterruptRealtimeWorkerCount;
PassiveInterruptRealtimeWorkerPriority;
PathPrefixWin32;
PcwpEventTracingCounterSet;
PcwpEventTracingSessionCounterSet;
PcwpFileSystemDiskIOCounterSet;
PcwpProcessorCounterSet;
PcwpSynchCounterSet;
PcwpSynchNumaCounterSet;
PcwpThermalCounterSet;
PepDispatchTable;
PerfDiagGlobals;
PerfGlobalGroupMask;
PfGlobals;
PfKernelGlobals;
PfSnActivityScenarioTypePrefix;
PfSnAppLaunchScenarioTypePrefix;
PfSnEnablePrefetcher;
PfSnEvt_EndTrace_Info;
PfSnEvt_OpenVolumes_Start;
PfSnEvt_OpenVolumes_Stop;
PfSnEvt_PrefetchMetadata_Start;
PfSnEvt_PrefetchMetadata_Stop;
PfSnEvt_PrefetchSections_Start;
PfSnEvt_PrefetchSections_Stop;
PfSnEvt_ScenarioDecision_Info;
PfSnGlobals;
PfSnNumActiveTraces;
PfTGlobals;
PiAuLocalSystemSecurityMapping;
PiAuLocalSystemSecurityObject;
PiAuSecurityObject;
PiAuSecurityObjectMapping;
PiAuSwDeviceCreateSidSubAuthorities;
PiDDBCacheList;
PiDDBCacheTable;
PiDDBLock;
PiDDBPath;
PiDcUpdateProperties;
PiDependencyEdgeWriteLock;
PiDependencyNodeEmptyList;
PiDependencyNodeListHead;
PiDependencyRelationsLock;
PiDevCfgEmptyString;
PiDevCfgFlags;
PiDevCfgMode;
PiDevCfgNullDriver;
PiDevCfgNullSid;
PiDevCfgSystem32;
PiDevCfgSystemRoot;
PiDmAggregatedBooleanDefs;
PiDmCachedDeviceContainerKeys;
PiDmCachedDeviceInterfaceKeys;
PiDmCachedDeviceKeys;
PiDmDeviceContainerManager;
PiDmDeviceInstallerClassManager;
PiDmDeviceInterfaceClassManager;
PiDmDeviceInterfaceManager;
PiDmDeviceManager;
PiDmListDefs;
PiDqDeviceContainerManager;
PiDqDeviceInstallerClassManager;
PiDqDeviceInterfaceClassManager;
PiDqDeviceInterfaceManager;
PiDqDeviceManager;
PiDqQueryConstraintData;
PiDqSequenceNumber;
PiDrvDbCtx;
PiDrvDbNodeHiveNames;
PiDrvDbNodes;
PiEngineLock;
PiInitGroupOrderTable;
PiInitGroupOrderTableCount;
PiLoggedErrorEventsMask;
PiNormalDDBPath;
PiPnpRtlActiveOperations;
PiPnpRtlActiveOperationsLock;
PiPnpRtlCtx;
PiPnpRtlRemoveOperationDispatchLock;
PiProfileChangeCancelRequired;
PiProfileChangeSemaphore;
PiProfileDeviceCount;
PiProfileDeviceListHead;
PiProfileDeviceListLock;
PiProfileDevicesInTransition;
PiRebuildPowerRelationsQueue;
PiResourceListLock;
PiSwBusName;
PiSwBusRelationsTable;
PiSwDeviceDriverObject;
PiSwDeviceInstanceTable;
PiSwGenericCompatibleId;
PiSwGenericRawCompatibleId;
PiSwLockObj;
PiUEventBroadcastEventQueue;
PiUEventBroadcastEventQueueLock;
PiUEventBroadcastSubscriberPresent;
PiUEventClientRegistrationListLock;
PiUEventDevHandleClientList;
PiUEventDevInstanceClientList;
PiUEventDevInstancePropertyClientList;
PiUEventDevInterfaceClientList;
PiUEventMetaNotificationHandle;
PiUEventUsermodeEventQueue;
PiUEventUsermodeEventQueueLock;
PltRotBarStatus;
PlugPlayHandlerTable;
PnPBootDriversInitialized;
PnPBootDriversLoaded;
PnPInitialized;
PnPIrpNames;
PnpAsyncOptions;
PnpBootDriverCallbackObject;
PnpBootDriverCallbackRegistrationClosed;
PnpBootMode;
PnpBootOptions;
PnpBusTypeGuidArray;
PnpBusTypeGuidCount;
PnpBusTypeGuidCountMax;
PnpBusTypeGuidLock;
PnpClassificationRank;
PnpComputerIdNamespaceGuid;
PnpCurrentHardwareConfigurationGuidString;
PnpCurrentHardwareConfigurationIndex;
PnpDefaultInterfaceType;
PnpDeferredRegistrationList;
PnpDeferredRegistrationLock;
PnpDeviceActionThread;
PnpDeviceClassNotifyList;
PnpDeviceClassNotifyLock;
PnpDeviceCompletionQueue;
PnpDeviceEnumerationWorkItem;
PnpDeviceEventList;
PnpDeviceEventThread;
PnpDeviceOverrideHashList;
PnpDevicePropertyLock;
PnpDeviceReferenceTable;
PnpDeviceReferenceTableLock;
PnpDisableRebalance;
PnpDriverImageLoadPolicy;
PnpDriverInitPhaseActivityId;
PnpDriverObject;
PnpDumpVetoedHandles;
PnpEnumerationInProgress;
PnpEnumerationLock;
PnpEnumerationRequestList;
PnpEtwHandle;
PnpEventQueueEmpty;
PnpFindBestConfigurationTimeout;
PnpHwProfileNotifyLock;
PnpNotificationInProgress;
PnpNotificationInProgressLock;
PnpProfileNotifyList;
PnpQueryProximityId;
PnpQueryProximityNode;
PnpRegistryDeviceResource;
PnpReplaceEvent;
PnpSetupInProgress;
PnpShutdownEvent;
PnpSpinLock;
PnpSqmEnabled;
PnpSystemDeviceEnumerationComplete;
PnpSystemHiveLimits;
PnpSystemHiveTooLarge;
PnpTargetDeviceNotifyLock;
PnpTearDownPnpStacksOnShutdown;
PnpWstrRaw;
PnpWstrTranslated;
PnprContext;
PoAllProcIntrDisabled;
PoDebug;
PoDisableSkipTick;
PoHiberInProgress;
PoOffCrashConfigTable;
PoPdcCallbacks;
PoPowerDownActionInProgress;
PoPowerSequence;
PoResumeFromHibernate;
PoWakeState;
PoolBigPageTable;
PoolBigPageTableSize;
PoolHitTag;
PoolTrackTable;
PoolTrackTableExpansion;
PoolTrackTableExpansionSize;
PoolTrackTableMask;
PoolTrackTableSize;
PoolVector;
PopAction;
PopActionWaiters;
PopAdaptiveLockConsoleTimeout;
PopAdminPolicy;
PopAdpmLock;
PopAdpmLockThread;
PopAlpcClientPort;
PopAlpcMonitorClientPort;
PopAlpcMonitorServerPort;
PopAlpcServerPort;
PopApicMode;
PopAwayModePolicyRegName;
PopAwayModeUserPresenceDpcObject;
PopAwayModeUserPresenceTimer;
PopAwaymodeExitReason;
PopAwaymodeLock;
PopAwaymodeLockExclusiveThread;
PopBackgroundTaskAllowed;
PopBackgroundTaskIgnoreCount;
PopBatteryEtwHandle;
PopBatteryEtwRegistered;
PopBatteryWorkItem;
PopBatteryWorkRequests;
PopBgkResumePrepared;
PopBrightnessChangeWorkList;
PopBrightnessNotifyMutex;
PopBrightnessWorkItemQueued;
PopBsdPowerTransition;
PopCB;
PopCallbackWorkItem;
PopCallbackWorkItemScheduled;
PopCapabilities;
PopCheckExecutionRequiredWorker;
PopCoalescingCallbackRoutine;
PopCoalescingCallbackRoutineCount;
PopCoalescingDpc;
PopCoalescingEnforced;
PopCoalescingFlushInterval;
PopCoalescingLastFlushTime;
PopCoalescingRegistration;
PopCoalescingState;
PopCoalescingTimer;
PopCoalescingTimerInterval;
PopCompressMethodMap;
PopConnectionBitmap;
PopConnectionState;
PopConsoleContext;
PopConsoleDisplayState;
PopConsoleSession;
PopControlRegKey;
PopCoolingMode;
PopCreateIrpWorkerAllowed;
PopCriticalShutdownInProgress;
PopCsChecksDisabledLicenseString;
PopCsConsumption;
PopCsEnabledReg;
PopCurrentBroadcast;
PopCurrentCoalescingSpindownTimeout;
PopCurrentDiskIdleTimeout;
PopCurrentLevel;
PopCurrentWakeInfo;
PopDebugCount;
PopDebugFlags;
PopDevStateLockThread;
PopDeviceIdleSync;
PopDiagActivityId;
PopDiagDeviceRundownRequests;
PopDiagDeviceRundownWorkItem;
PopDiagHandle;
PopDiagHandleRegistered;
PopDisableSleepList;
PopDisableSleepMutex;
PopDiskCoalescingTimeout;
PopDiskIdleTimeout;
PopDispatchPolicyIrps;
PopDisplayTimeout;
PopDopeGlobalLock;
PopDppeCoalescingSpindownTimeout;
PopDripsWatchdog;
PopDripsWatchdogAction;
PopDripsWatchdogTimeout;
PopDynamicIrpWorkerLookaside;
PopEnforcedCoalescingSpindownTimeout;
PopExecutionRequiredTimeout;
PopExecutionRequiredTimeoutDpc;
PopExecutionRequiredTimer;
PopExecutionRequiredWorkRequested;
PopExecutionTimeoutProcessed;
PopFanTracking;
PopFans;
PopFirmwarePlatformRole;
PopFixedWakeSourceMask;
PopFlushPolicy;
PopFullWake;
PopFxActiveIdleLevel;
PopFxActiveIdleThreshold;
PopFxActiveIdleTimeout;
PopFxDefaultPlugin;
PopFxDeviceAccountingLevel;
PopFxDeviceAccountingPaused;
PopFxDeviceAccountingVetoMask;
PopFxDeviceList;
PopFxDeviceLock;
PopFxDeviceRegisterHead;
PopFxEnableShutdownActiveBias;
PopFxLowPowerEpoch;
PopFxPluginList;
PopFxPluginLock;
PopFxProcessorPlugin;
PopFxResidentComponentCount;
PopFxResidentDpc;
PopFxResidentTimer;
PopFxResidentTimerArmed;
PopFxResidentTimerLock;
PopFxResidentWorkItem;
PopFxSystemLatencyLimit;
PopFxSystemLatencyLock;
PopFxUseEmergencyWorkQueue;
PopFxVSyncEnabled;
PopFxWatchdogWorkOrderTimeout;
PopGlobalUserPresenceState;
PopHiberBootForceMonitorOff;
PopHiberEnabled;
PopHiberEnabledReg;
PopHiberEnabledRegName;
PopHiberFileSizePercentReg;
PopHiberFileSizePercentRegName;
PopHiberInfo;
PopHiberLoaderScratchPages;
PopHiberLogInfo;
PopHiberScratchPages;
PopHiberbootEnabledReg;
PopHiberbootEnabledRegName;
PopHiberbootGroupPolicyRegKey;
PopHibernatePowerStateHandlerType;
PopHibernateSystemContext;
PopHibernationErrorSubstitutionString;
PopIRCurrentResolution;
PopIRDppeResolution;
PopIREnforced;
PopIREnforcedResolution;
PopIdleBackgroundIgnoreCount;
PopIdleDetectList;
PopIdleScanDpc;
PopIdleScanInterval;
PopIdleScanTimer;
PopIdleTransitionTimeout;
PopInitialSettingCallbacks;
PopInputTimeout;
PopInrushIrp;
PopInrushIrpList;
PopInrushIrpPointer;
PopInrushIrpReferenceCount;
PopInrushPending;
PopIrpDataLookaside;
PopIrpList;
PopIrpLock;
PopIrpLockThread;
PopIrpSerialList;
PopIrpSerialListLength;
PopIrpSerialLock;
PopIrpThreadList;
PopIrpWorkerControlEvent;
PopIrpWorkerCount;
PopIrpWorkerInFlightCount;
PopIrpWorkerList;
PopIrpWorkerMutex;
PopIrpWorkerPendingCount;
PopIrpWorkerRequested;
PopIrpWorkerSemaphore;
PopLastCsEnterTime;
PopLazyContext;
PopMaximumConnectionSessions;
PopMonitorOffDueToSleep;
PopNoMoreInput;
PopNotifyBrightnessWorkItem;
PopNotifyEvents;
PopNotifyWork;
PopNumberOfPagesForHibernateProcess;
PopOsInitPhase;
PopPdcCsChecksDisabled;
PopPdcCsChecksTestingEnabled;
PopPdcDeviceList;
PopPdcDeviceListLock;
PopPdcDevicesCompliant;
PopPdcIdleResiliency;
PopPdcIoCoalescing;
PopPdcLastCsEnterReason;
PopPdcLastCsExitReason;
PopPdcTestingEnabled;
PopPendingSetPowerDeviceIrps;
PopPendingWakeInfo;
PopPepDeviceList;
PopPepDeviceListLock;
PopPepIdleDpc;
PopPepIdleStateTimeout;
PopPepIdleTimer;
PopPepIdleTimerArmed;
PopPepIdleTimerLock;
PopPepIdleWorkItem;
PopPepKernelRequestWorker;
PopPepLastCheckedDevice;
PopPepLowPowerEpoch;
PopPepPlatformState;
PopPepPluginHandle;
PopPepPoweredIdleComponentCount;
PopPepVetoMaskReadyEvent;
PopPlatformAoAc;
PopPlatformAoAcOverride;
PopPlatformRole;
PopPlatformRoleOverride;
PopPolicy;
PopPolicyDeviceParameters;
PopPolicyIrpQueue;
PopPolicyLock;
PopPolicyLockThread;
PopPolicyWorker;
PopPopPowerSettingSetChangeNotification;
PopPowerRequestAttributes;
PopPowerRequestCallbacks;
PopPowerRequestId;
PopPowerRequestLock;
PopPowerRequestMapping;
PopPowerRequestObjectCount;
PopPowerRequestObjectList;
PopPowerRequestObjectType;
PopPowerRequestSpinLock;
PopPowerRequestTable;
PopPowerSettingCallbackReturned;
PopPowerSettingChangeStamp;
PopPowerSettingValues;
PopPowerSettings;
PopPowerStateHandlerLookup;
PopPowerStateHandlers;
PopPowerStateNotifyHandler;
PopProcessorThrottleLogInterval;
PopProcessorThrottleLogIntervalRegKey;
PopQpcFrequency;
PopRegKey;
PopRegisteredPowerSettingCallbacks;
PopRequestedIrps;
PopSIdle;
PopSessionSpecificGuids;
PopSessionSpecificLists;
PopSettingLock;
PopShutdownButtonPressTime;
PopShutdownCleanly;
PopShutdownDiagnosticsScenarioGuid;
PopShutdownEvent;
PopShutdownEventCode;
PopShutdownListAvailable;
PopShutdownListMutex;
PopShutdownNotificationCallback;
PopShutdownPowerOffPolicy;
PopShutdownPowerOffPolicyRegKey;
PopShutdownPowerOffPolicyRegName;
PopShutdownQueue;
PopShutdownThreadList;
PopShutdownWorkItem;
PopSimulate;
PopSimulateHiberBugcheck;
PopSimulateHiberBugcheckRegName;
PopSimulateManual;
PopSimulateRegKey;
PopSimulateRegName;
PopSkipTickPolicy;
PopSleepStats;
PopSleepStudyDeviceAccountingLevel;
PopSleepStudyDisabled;
PopSleeperHandoff;
PopSpecialPowerRequestObjectCount;
PopSpecialPowerRequestObjectList;
PopSpmCommonAccounting;
PopSpmCommonAccountingValid;
PopSpmCurrentScenario;
PopSpmExternalDefaultSubKeyName;
PopSpmExternalSettingHandle;
PopSpmExternalVersionSubKeyName;
PopSpmInitCount;
PopSpmInternalSettingsSubKeyName;
PopSpmLock;
PopSpmPolicyAliasKeyName;
PopSpmPolicyCount;
PopSpmPolicyList;
PopSpmScenarioList;
PopSpmScenariosKeyName;
PopSpmStatus;
PopSqm_Add_StreamRow;
PopSqm_Increment_Dword;
PopSwitches;
PopSystemPowerPolicyRegName;
PopThermal;
PopThermalCriticalShutdownInitiated;
PopThermalMetricsSqmPeriod;
PopThermalZoneCount;
PopThermalZoneNextId;
PopTransitionLock;
PopTriggerDiagHandle;
PopTriggerDiagHandleRegistered;
PopUmpoAlpcClientConnected;
PopUmpoPushLock;
PopUndockPolicyRegName;
PopUnlockAfterSleepWorkItem;
PopUserPresentCompletedEvent;
PopUserPresentOverrideCount;
PopUserPresentSetStatus;
PopUserPresentWorkItem;
PopUserShutdownInProgress;
PopVolumeDevices;
PopVolumeLock;
PopWakeInfoCount;
PopWakeInfoList;
PopWakeSourceAvailable;
PopWakeSourceLock;
PopWakeSourceLockOwner;
PopWakeSourceWorkInProgress;
PopWakeSourceWorkItem;
PopWakeSourceWorkList;
PopWatchdogResumeTimeout;
PopWatchdogSleepTimeout;
PopWatchdogTimerCount;
PopWdiCurrentScenario;
PopWdiCurrentScenarioInstanceId;
PopWdiNewScenarioWaiting;
PopWdiScenarioStopEventData;
PopWdiTimer;
PopWdiTimerDpc;
PopWdiTimerMutex;
PopWdiTimerQueued;
PopWdiTimerTimeoutValue;
PopWdiTimerWorker;
PopWorkerLock;
PopWorkerPending;
PopWorkerSpinLock;
PopWorkerStatus;
PopWorkerTypes;
Port;
PowerIrpNames;
PowerStateDisableReasonListHead;
PpBootDDB;
PpDDBHandle;
PpRegistrySemaphore;
PpmCheckArmed;
PpmCheckCount;
PpmCheckDpc;
PpmCheckLastExecutionTime;
PpmCheckMakeupCount;
PpmCheckMinimumPeriod;
PpmCheckParkingEnabled;
PpmCheckPeriod;
PpmCheckPhase;
PpmCheckPollForFeedback;
PpmCheckRegistered;
PpmCheckStartDpc;
PpmCheckTime;
PpmDisableVsyncLatencyUpdate;
PpmDripsAccountingSnapshot;
PpmDripsStateIndex;
PpmEtwHandle;
PpmEtwRegistered;
PpmExitLatencyCheckEnabled;
PpmExitLatencySamplingPercentage;
PpmExitLatencySamplingPercentageSet;
PpmIdleIntervalLimits;
PpmIdlePolicyLock;
PpmIntSteerDisabled;
PpmIntSteerLoadMax;
PpmIntSteerMode;
PpmIntSteerTriggerMax;
PpmIpiLastClockOwnerDisable;
PpmLatencyToleranceLimit;
PpmLowLatencyPerformanceScalingFactor;
PpmNonInterruptibleCount;
PpmParkCoreMask;
PpmParkDistributionThreshold;
PpmParkGranularity;
PpmParkHistograms;
PpmParkLpiCap;
PpmParkLpiCapChanged;
PpmParkLpiEngaged;
PpmParkMultiparkGranularity;
PpmParkNodes;
PpmParkNumNodes;
PpmParkPreferenceHandler;
PpmParkThermalCap;
PpmParkUnparkCores;
PpmParkUseConcurrency;
PpmParkUseCoreGranularity;
PpmPerfArtificialDomain;
PpmPerfBoostAtGuaranteed;
PpmPerfCalculateActualUtilization;
PpmPerfControlAcquirePerformance;
PpmPerfControlCommitPerformance;
PpmPerfControlReadFeedback;
PpmPerfCoreParkingMask;
PpmPerfDomainCount;
PpmPerfDomainHead;
PpmPerfDomainsToUpdate;
PpmPerfIdealAggressiveIncreaseThreshold;
PpmPerfLatencyBoostExpiration;
PpmPerfMaximumOverride;
PpmPerfNewCoreParkingMask;
PpmPerfNewParkedCores;
PpmPerfNewUnparkedCores;
PpmPerfPolicyLock;
PpmPerfProcessorsToUpdate;
PpmPerfRespectDomainAboveNominal;
PpmPerfSingleStepSize;
PpmPerfStatesRegistered;
PpmPerfTimeWindow;
PpmPerformanceCounterShift;
PpmPerformanceDistributionShift;
PpmPlatformIdleHint;
PpmPlatformStates;
PpmWmiGuidList;
PpmWmiIdleAccountingDpc;
PpmWmiIdleAccountingTimer;
PpvUtilVerifierEnabled;
Printable;
PrintableChars;
PrivateLoggerSecurityGuid;
ProcessFreezeEvent;
ProcessStart;
ProcessStop;
ProcessThawEvent;
ProgressBarLeft;
ProgressBarTop;
ProgressEnd;
ProgressOffset;
PsActiveProcessHead;
PsContinueWaiting;
PsCpuFairShareEnabled;
PsDefaultSystemLocaleId;
PsDefaultThreadLocaleId;
PsDefaultUILanguageId;
PsDfssGenerationLengthMS;
PsDfssLongTermFraction1024;
PsDfssLongTermSharingMS;
PsDfssShortTermSharingMS;
PsDisableDiskCounters;
PsEmbeddedNTMask;
PsHalImageBase;
PsHalImageEnd;
PsIdleProcess;
PsInitialSystemProcess;
PsInstallUILanguageId;
PsJobType;
PsLoadedModuleList;
PsLoadedModuleResource;
PsLoadedModuleSpinLock;
PsMachineUILanguageId;
PsNtosImageBase;
PsNtosImageEnd;
PsPrioritySeparation;
PsProcessType;
PsProtectedCurrentDirectory;
PsProtectedEnvironment;
PsProvGuid;
PsRawPrioritySeparation;
PsReaperListHead;
PsReaperWorkItem;
PsThreadType;
PsUILanguageComitted;
PsWatchEnabled;
PsWin32CallBack;
PsWin32CalloutsEstablished;
PspActiveProcessLock;
PspAffinityUpdateLock;
PspBootAccessToken;
PspCidTable;
PspCreateProcessNotifyRoutine;
PspCreateProcessNotifyRoutineCount;
PspCreateProcessNotifyRoutineExCount;
PspCreateThreadNotifyRoutine;
PspCreateThreadNotifyRoutineCount;
PspCurDirDevicesSkippedForDlls;
PspDefaultQuotaBlock;
PspDefaultResourceLimits;
PspDefaultResourceNames;
PspDfssConfigValues;
PspDfssConfigurationKey;
PspDfssConfigurationNotify;
PspEnforcementSequenceNumber;
PspFixedQuantums;
PspForegroundQuantum;
PspFreezeTimeBiasAddress;
PspGlobalFlags;
PspInitialSystemProcessHandle;
PspJobAssignmentLock;
PspJobInfoAlign;
PspJobInfoLengths;
PspJobList;
PspJobListLock;
PspJobMapping;
PspJobNoWakeChargeLimit;
PspJobNotificationItem;
PspJobNotificationList;
PspJobSchedulingClasses;
PspJobTimeLimitsCount;
PspJobTimeLimitsRequest;
PspJobTimeLimitsWorkItem;
PspJobTimeLimitsWorkItemFlags;
PspLargePageDLLKeyName;
PspLastUpdateAffinityMask;
PspLegoNotifyRoutine;
PspLoadImageNotifyRoutine;
PspLoadImageNotifyRoutineCount;
PspLoaderInitRoutine;
PspMaximumWorkingSet;
PspMemReserveMapping;
PspMemoryReserveObjectNames;
PspMemoryReserveObjectSizes;
PspMemoryReserveObjectTypes;
PspMinimumWorkingSet;
PspNativeSystemDllData;
PspNoWakeChargeReferencedProcess;
PspNotifyEnableMask;
PspPackagedAppClaim;
PspPathVarString;
PspPerfOptionsKeyName;
PspPriorityClassRank;
PspPriorityTable;
PspProcessMapping;
PspProcessNodeAssignment;
PspProcessRundownCacheWorkItem;
PspProcessRundownWorkItem;
PspProtectedRuntimeData;
PspQuotaBlockTable;
PspQuotaDatabaseKey;
PspQuotaExpansionDescriptors;
PspQuotaKeyNames;
PspQuotaLimitOffsets;
PspResourceFlags;
PspRundownNeededCount;
PspRundownNeededCountCache;
PspRundownProcessCache;
PspSehValidationPolicy;
PspShortTime;
PspShutdownThread;
PspSysAppIdClaim;
PspSystem32String;
PspSystemDllInitBlock;
PspSystemDlls;
PspSystemDriveString;
PspSystemMitigationOptions;
PspSystemMitigationOptionsLength;
PspSystemNoWakeChargeLimit;
PspSystemQuotaBlock;
PspSystemRootString;
PspSystemThreadAssignment;
PspThreadMapping;
PspUseJobSchedulingClasses;
PspUserThreadStart;
PspVariableQuantums;
PspWorkingSetAdjustService;
PspWorkingSetChangeHead;
PspWorkingSetPrivileges;
QStringTerminators;
READ_UCHAR;
REGISTRY_PERF_EVENT_HIVE_FLUSH_BOOSTED_ACTIVE_FLUSHER;
REGISTRY_PERF_EVENT_HIVE_FLUSH_FINISH_WAIT_FOR_ACTIVE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_START;
REGISTRY_PERF_EVENT_HIVE_FLUSH_START_WAIT_FOR_ACTIVE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_STOP;
REGISTRY_PERF_EVENT_HIVE_FLUSH_WROTE_LOG_FILE;
REGISTRY_PERF_EVENT_HIVE_FLUSH_WROTE_PRIMARY_FILE;
REGISTRY_PERF_EVENT_HIVE_LOAD_START;
REGISTRY_PERF_EVENT_HIVE_LOAD_STOP;
REGISTRY_PERF_EVENT_HIVE_MOUNT_BASE_FILE_MOUNTED;
REGISTRY_PERF_EVENT_HIVE_MOUNT_LOG_ENTRY_APPLIED;
REGISTRY_PERF_EVENT_HIVE_MOUNT_START;
REGISTRY_PERF_EVENT_HIVE_MOUNT_STOP;
REGISTRY_PERF_EVENT_HIVE_RESTORE_START;
REGISTRY_PERF_EVENT_HIVE_RESTORE_STOP;
REGISTRY_PERF_EVENT_HIVE_SAVE_FILE_COPIED;
REGISTRY_PERF_EVENT_HIVE_SAVE_FILE_WRITTEN;
REGISTRY_PERF_EVENT_HIVE_SAVE_START;
REGISTRY_PERF_EVENT_HIVE_SAVE_STOP;
REGISTRY_PERF_EVENT_HIVE_SAVE_TREE_COPIED;
REGISTRY_PERF_EVENT_HIVE_UNLOAD_START;
REGISTRY_PERF_EVENT_HIVE_UNLOAD_STOP;
REGISTRY_PERF_EVENT_SHUTDOWN_FLUSH_START;
REGISTRY_PERF_EVENT_SHUTDOWN_FLUSH_STOP;
REGISTRY_PERF_EVENT_SHUTDOWN_RUNDOWN_COMPLETE;
REGISTRY_PERF_EVENT_SHUTDOWN_START;
REGISTRY_PERF_EVENT_SHUTDOWN_STOP;
REG_EVENT_CLEAR_ACCESS;
REG_EVENT_FLUSH_IO_FAIL;
REG_EVENT_REORGANIZE;
REG_EVENT_SELFHEAL;
REG_EVENT_TXR_INIT;
RamdiskBootDiskGuid;
RaspBitmapCache;
RasterizerInitialized;
RawDeviceCdRomObject;
RawDeviceDiskObject;
RawDeviceTapeObject;
RawDismountedQueue;
RawGlobalLock;
RawMountedQueue;
RefSetStartString;
RefSetStopString;
RegTab;
RegistryProvGuid;
ReleaseOpsEvent;
ReleaseOpsReservePool;
ResourceCount;
ResourceList;
ResourceSize;
RotBarSelection;
RtlAllocateStringRoutine;
RtlBaseAceType;
RtlCompressBufferProcs;
RtlCrc32Table;
RtlDecompressBufferProcs;
RtlDecompressFragmentProcs;
RtlDescribeChunkProcs;
RtlFatIllegalTable;
RtlFreeStringRoutine;
RtlIsSystemAceType;
RtlProtectedAccess;
RtlReserveChunkProcs;
RtlWorkSpaceProcs;
RtlpBitsClearAnywhere;
RtlpBitsClearHigh;
RtlpBitsClearLow;
RtlpBitsClearTotal;
RtlpDebugPrintCallbackList;
RtlpDebugPrintCallbackLock;
RtlpDebugPrintCallbacksActive;
RtlpExceptionLog;
RtlpExceptionLog2;
RtlpExceptionLogCount;
RtlpExceptionLogSize;
RtlpHeapErrorHandlerThreshold;
RtlpHeapFailureInfo;
RtlpHeapKey;
RtlpIntegerChars;
RtlpIntegerWChars;
RtlpInterceptorRoutines;
RtlpNormListInitGuardEnter;
RtlpNormListInitGuardLeave;
RtlpRangeListEntryLookasideList;
RtlpRegistryPaths;
RtlpRegistryQueryInitialBuffersize;
RtlpRunTable;
RtlpStackTraceDatabase;
RtlpStatusTable;
SL_HWID_IF_GUID_BIOS_RSMB;
SL_HWID_IF_GUID_SYSTEM_MEMORY;
SL_HWID_IF_GUID_SYSTEM_VOLUME;
SQM_ADD_LEGACYSTREAMROW;
SQM_INCREMENT_DWORD;
SbtRateKeyPath;
SbtSamplingRateValue;
SdbpCrc32Table;
SeAliasAccountOpsSid;
SeAliasAdminsSid;
SeAliasBackupOpsSid;
SeAliasGuestsSid;
SeAliasPowerUsersSid;
SeAliasPrintOpsSid;
SeAliasSystemOpsSid;
SeAliasUsersSid;
SeAllAppPackagesSid;
SeAnonymousAuthenticationId;
SeAnonymousLogonSid;
SeAnonymousLogonToken;
SeAnonymousLogonTokenNoEveryone;
SeAssignPrimaryTokenPrivilege;
SeAtomDacl;
SeAtomSd;
SeAuditPrivilege;
SeAuditingState;
SeAuditingStateByCategory;
SeAuthenticatedUsersSid;
SeBackupPrivilege;
SeBatchSid;
SeCapabilityPrefixSid;
SeChangeNotifyPrivilege;
SeCiCallbacks;
SeCiStateElementCount;
SeCiStateElements;
SeCreateGlobalPrivilege;
SeCreatePagefilePrivilege;
SeCreatePermanentPrivilege;
SeCreateSymbolicLinkPrivilege;
SeCreateTokenPrivilege;
SeCreatorGroupServerSid;
SeCreatorGroupSid;
SeCreatorOwnerServerSid;
SeCreatorOwnerSid;
SeDebugPrivilege;
SeDefaultCapeSd;
SeDefaultRecoveryCapeSd;
SeDialupSid;
SeEnableDelegationPrivilege;
SeExports;
SeFailIfExtensionNotSupported;
SeFileSystemNotifyRoutinesHead;
SeHighMandatorySid;
SeILSigningPolicy;
SeIUserSid;
SeImpersonatePrivilege;
SeIncreaseBasePriorityPrivilege;
SeIncreaseQuotaPrivilege;
SeIncreaseWorkingSetPrivilege;
SeInteractiveSid;
SeLoadDriverPrivilege;
SeLocalServicePublicDacl;
SeLocalServicePublicSd;
SeLocalServiceSid;
SeLocalSid;
SeLocalSystemSid;
SeLockMemoryPrivilege;
SeLowMandatorySid;
SeManageVolumePrivilege;
SeMediumMandatorySid;
SeMsMinTCBList;
SeMsMinTestTCBList;
SeNetworkServiceSid;
SeNetworkSid;
SeNtAuthoritySid;
SeNullDaclSd;
SeNullSid;
SeOwnerRightsSid;
SePackagePrefixSid;
SePrincipalSelfSid;
SeProcTrustLiteWinSid;
SeProcTrustLiteWinTcbSid;
SeProcTrustNoneSid;
SeProcTrustWinSid;
SeProcTrustWinTcbSid;
SeProfileSingleProcessPrivilege;
SeProtectedMapping;
SePublicDefaultDacl;
SePublicDefaultSd;
SePublicDefaultUnrestrictedDacl;
SePublicDefaultUnrestrictedSd;
SePublicOpenDacl;
SePublicOpenSd;
SePublicOpenUnrestrictedDacl;
SePublicOpenUnrestrictedSd;
SeQuerySigningPolicyExtAllowed;
SeQuerySigningPolicyInit;
SeRelabelPrivilege;
SeRemoteShutdownPrivilege;
SeRestorePrivilege;
SeRestrictedSid;
SeSecurityPrivilege;
SeServiceSid;
SeShutdownPrivilege;
SeSubsystemName;
SeSyncAgentPrivilege;
SeSystemAuthenticationId;
SeSystemDefaultDacl;
SeSystemDefaultSd;
SeSystemEnvironmentPrivilege;
SeSystemMandatorySid;
SeSystemProfilePrivilege;
SeSystemTokenSource;
SeSystemtimePrivilege;
SeTakeOwnershipPrivilege;
SeTcbPrivilege;
SeTimeZonePrivilege;
SeTokenObjectType;
SeTrustedCredManAccessPrivilege;
SeTrustedInstallerSid;
SeUndockPrivilege;
SeUnsolicitedInputPrivilege;
SeUntrustedMandatorySid;
SeUserModeDriversSid;
SeWorldSid;
SearchStrings;
SecondsToStartOf1970;
SecondsToStartOf1980;
SecurityProviderGuid;
SepAdtAuditFailureCount;
SepAdtAuditFailureEventLogged;
SepAdtCountEventsDiscarded;
SepAdtCrashOnAuditFailWorkItem;
SepAdtDiscardingAudits;
SepAdtIoStatusBlock;
SepAdtLastAuditFailStatus;
SepAdtLsaRegWatchWorkItem;
SepAdtMaxListLength;
SepAdtMinListLength;
SepAdtRegNotifyHandle;
SepAllowAllApplicationAceRemoval;
SepAtomSd;
SepAuthExtensionHost;
SepBCryptExtensionHost;
SepCrashOnAuditFail;
SepDefaultCapeDacl;
SepDefaultCapeSd;
SepDefaultMandatorySid;
SepDefaultRecoveryCapeDacl;
SepDefaultRecoveryCapeSd;
SepExports;
SepFileTypeName;
SepFilterPrivileges;
SepFilterPrivilegesLong;
SepFilterPrivilegesShort;
SepImportantProcessSd;
SepLUARids;
SepLearningModeSettings;
SepLocalServicePublicSd;
SepLogonSessions;
SepLsaAuditQueueInfo;
SepLsaDeletedLogonQueueInfo;
SepLsaHandle;
SepMandatoryObjectTypePolicy;
SepMandatoryObjectTypePolicyCount;
SepMandatoryObjectTypePolicyLock;
SepNullDaclSd;
SepProcessAccessesToAudit;
SepProcessAuditSd;
SepPublicDefaultSd;
SepPublicDefaultUnrestrictedSd;
SepPublicOpenSd;
SepPublicOpenUnrestrictedSd;
SepRegistryTypeName;
SepRmAuditProcessCommandLine;
SepRmAuditingEnabled;
SepRmCapTable;
SepRmCapTableLock;
SepRmCommandDispatch;
SepRmDbLock;
SepRmDefaultCap;
SepRmEnforceCap;
SepRmGlobalSaclHead;
SepRmGlobalSaclLock;
SepRmLsaCallProcess;
SepRmNotifyMutex;
SepRmState;
SepSamTypeNamePrefix;
SepSensitivePrivileges;
SepServicesFilterPrivileges;
SepSystemContextSecurityDescriptor;
SepSystemDefaultSd;
SepTokenMapping;
SepTokenPolicyCounter;
SepTokenPolicyCounterByCategory;
SessionNotificationGuid;
ShowProgressBar;
SidHashByteToIndexLookupTable;
SmEtwDescriptorPtrs;
SmEventCacheTermination;
SmEventGlobalStats;
SmEventProvider;
SmEventSQMStreamRow;
SmEventStoreCreate;
SmEventStoreDelete;
SmEventStoreIoStats;
SmEventStoreRundown;
SmGlobals;
SmInvalidPeristId;
SmKmGlobals;
SmStHelperTimeout;
SmStNormalPriority;
SmssEventWorkItem;
SpecialMemoryRanges;
Square1;
Square2;
Square3;
StEventRegionCompactEnd;
StEventRegionCompactStart;
StEventRegionEvict;
StEventRegionRelease;
StEventRegionRundown;
StEventRegionWrite;
StEventStoreAdd;
StEventStoreCorruption;
StEventStoreEmpty;
StEventStorePageRundown;
StEventStoreRemove;
StackOverflowFallback;
StackOverflowFallbackSerialEvent;
StandardBitMapping;
Start;
StringTerminators;
SwapContext_NpxLoad;
SwapContext_NpxSave;
SymCryptEnvironmentWindowsKernelMode;
SymbolRecorded;
Symbol_DeviceArrivalEvent;
Symbol_PnPMgrTriggerProvider;
Symbol_PnPMgrTriggerProvider_Context;
SystemContextGenericMapping;
SystemHiveFullPathBuffer;
SystemHiveFullPathName;
SystemStateNames;
SystemTraceControlGuid;
ThreadCpuBasePriorityChange;
ThreadCpuPriorityChange;
ThreadIoPriorityChange;
ThreadPagePriorityChange;
ThreadPoolGuid;
ThreadStart;
ThreadStop;
TieredStorage_HeatDelete;
TieredStorage_HeatRead;
TieredStorage_HeatWrite;
TieredStorage_NewVolume;
TieredStorage_TierMove;
TmContainerExt;
TmEnlistmentObjectType;
TmLogExt;
TmResourceManagerObjectType;
TmTransactionManagerObjectType;
TmTransactionObjectType;
TraceDataBuffer;
TraceDataBufferFilled;
TraceDataBufferPosition;
TraceDataSyms;
TriageImagePageSize;
TunnelLookasideList;
TunnelMaxAge;
TunnelMaxEntries;
TxtpTextCache;
UmsTraceGuid;
UnicodeDefaultChar;
VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN;
VdmBopCount;
VdmIoListCreationResource;
VdmStringIoBuffer;
VdmStringIoMutex;
VdmpMaxPMCliTime;
VerifierDdiDriverName;
VerifierFaultApplicationsBuffer;
VerifierFaultApplicationsBufferSize;
VerifierFaultApplicationsBufferType;
VerifierFaultTagsBuffer;
VerifierFaultTagsBufferSize;
VerifierFaultTagsBufferType;
VerifierFilterDriverName;
VerifierIsTrackingPool;
VerifierModifyableOptions;
VerifierTriageActionTaken;
VersionDataKeys;
VfBTSDataManagementArea;
VfBTSInitialized;
VfBTSProcessorFamily;
VfBTSStarted;
VfBTSSupported;
VfBugcheckTmpData;
VfBugcheckTmpDataLock;
VfErrorBugcheckData;
VfErrorBugcheckDataReady;
VfExcludedDriversList;
VfFaultInjectionBootMinutes;
VfFaultInjectionMaxProbability;
VfFaultInjectionProbability;
VfFilterCreated;
VfFilterDriverObject;
VfForcedPendingIrps;
VfForcedPendingLog;
VfForcedPendingLogLength;
VfHandleTracingEntries;
VfInitializedWithoutReboot;
VfIoDisabled;
VfIoSwitchedOffNoReboot;
VfIrpDatabaseInitialized;
VfKeCriticalRegionTraces;
VfKeCriticalRegionTracesIndex;
VfKeCriticalRegionTracesLength;
VfKernelImageName;
VfMandatoryThunks;
VfMrxsmbDllBase;
VfMrxsmbName;
VfMrxsmbSizeOfImage;
VfNdisDispatchTable;
VfNdisDispatchTableThunks;
VfOptionFlags;
VfOrderDependentThunks;
VfOrderDependentThunksBitMap;
VfOrderDependentThunksBitMapHeader;
VfPoolDelayFreeData;
VfPoolThunks;
VfPoolThunksBitMap;
VfPoolThunksBitMapHeader;
VfPoolTraces;
VfPoolTracesIndex;
VfPoolTracesLength;
VfRandomTargetsBitMap;
VfRandomTargetsBitMapHeader;
VfRandomVerifiedDrivers;
VfRealHalAllocateMapRegisters;
VfRegularThunks;
VfRegularThunksBitMap;
VfRegularThunksBitMapHeader;
VfSafeMode;
VfSettingsIrpDeferralTime;
VfSettingsIrplogCount;
VfShutdownThread;
VfSuspectDriversList;
VfTcpIpDllBase;
VfTcpIpName;
VfTcpIpSizeOfImage;
VfTdxDllBase;
VfTdxName;
VfTdxSizeOfImage;
VfThunksExtended;
VfTmDllBase;
VfTmName;
VfTmSizeOfImage;
VfVerifyMode;
VfVidName;
VfWdCancelTimeoutTicks;
VfWdIrpListHead;
VfWdIrpListLock;
VfWdIrpTimeoutMsec;
VfWdmDispatchTable;
VfWin32kDllBase;
VfWin32kName;
VfWin32kSizeOfImage;
VfXdvDispatchTable;
VfXdvExcludedDriversList;
VfXdvIoCallbackThunks;
VfXdvSuppressDriversBuffer;
VfXdvSuppressDriversBufferLength;
VfXdvSuppressDriversBufferType;
VfXdvThunks;
VfXdvThunksBitMap;
VfXdvThunksBitMapHeader;
VfZeroAllPagesRunning;
ViActiveVerifierThunks;
ViAdapterList;
ViAllocationsFailedDeliberately;
ViAvlInitialized;
ViAvlNodeLookaside;
ViBadDriver;
ViBssSectionHandle;
ViBugCheckInitialControl;
ViBugcheckLog;
ViBugcheckLogIndex;
ViBugcheckWorkaroundLog;
ViBugcheckWorkaroundLogIndex;
ViCodeSectionHandle;
ViConstSectionHandle;
ViCtxHintIndex;
ViCtxInitializedIsrStateBlocks;
ViCtxInterrupts;
ViCtxInterruptsChecked;
ViCtxIsrStateBlocks;
ViCtxXStateEnabledMask;
ViCtxXStateSize;
ViDMADisabledNoRebootNeeded;
ViDataSectionHandle;
ViDdiDeviceObjectArray;
ViDdiInitialized;
ViDdiWmiMofKey;
ViDdiWmiMofResourceName;
ViDeadlockAgeWindow;
ViDeadlockChildrenCountMaximum;
ViDeadlockDatabaseLock;
ViDeadlockDatabaseOwner;
ViDeadlockDefaultActions;
ViDeadlockDetectionEnabled;
ViDeadlockGlobals;
ViDeadlockIssue;
ViDeadlockNodeLookaside;
ViDeadlockReservedNodes;
ViDeadlockReservedResources;
ViDeadlockReservedThreads;
ViDeadlockResourceLookaside;
ViDeadlockResourceTypeInfo;
ViDeadlockResourceTypeSizeInfo;
ViDeadlockState;
ViDeadlockThreadLookaside;
ViDeadlockTrimThreshold;
ViDeadlockVerifyOnlySpinlocks;
ViDesktopTypeName;
ViDevObjAllocationFailures;
ViDevObjAvl;
ViDevObjInitialized;
ViDmaOperations;
ViDmaVerifierTag;
ViDoubleBufferDma;
ViDriverKernelBase;
ViDriverKernelEnd;
ViDriversLoadLock;
ViDriversLoadLockOwner;
ViEnableAfterHibernate;
ViErrorDescriptions;
ViEtwLastStopTraceCount;
ViFaultApplicationsList;
ViFaultInjectionLock;
ViFaultLockOwner;
ViFaultTagsList;
ViFaultTraces;
ViFaultTracesIndex;
ViFaultTracesLength;
ViFaultsDecisions;
ViFaultsDisabled;
ViFaultsForceAllAPIs;
ViFaultsInitialized;
ViFnExtensionHiberFunc;
ViFnXdvNotifyExtensions;
ViForceAllDriversSuspect;
ViFullyInitialized;
ViGenericMajorFunctionList;
ViHalDefaultActions;
ViHalEnabledInThePast;
ViHalWaitBlockLookaside;
ViHandleBreaksEnabled;
ViHaveFaultTags;
ViImageExecutionOptions;
ViInjectDmaFailures;
ViInjectInPagePathOnly;
ViInternalTriageRules;
ViIoCallbackStateLookaside;
ViIoCallbacksInitialized;
ViIrpCallDriverDataList;
ViIrpDatabase;
ViIrpDatabaseAddressRanges;
ViIrpDatabaseExclusiveLockOwner;
ViIrpDatabaseLock;
ViIrpLogDatabase;
ViIrpLogDatabaseLock;
ViIrpLogDdiLock;
ViKeTrackIrqlDisabled;
ViKeTrackIrqlSkipped;
ViKernelVerifierMap;
ViKernelVerifierOriginalCalls;
ViKernelVerifierThunks;
ViLegacyDmaOperations;
ViLoadedDriversCount;
ViLocalSystemDescriptor;
ViLookasideAllocationFailures;
ViLookasideAlreadyLoadedDrivers;
ViLookasideAvl;
ViLookasideInitialized;
ViMajorVerifierRoutines;
ViMaxCommonBuffersPerAdapter;
ViMaxMapRegistersPerAdapter;
ViMemoryFillSize;
ViNotifyEvent;
ViPacketLookaside;
ViPendingProbability;
ViPendingWorkerIndexHint;
ViPendingWorkers;
ViPendingWorkersBusyCount;
ViPendingWorkersCount;
ViProtectBuffers;
ViRandomExAuxVarY;
ViRandomExConstantVector;
ViRandomSeed;
ViRecursionDepthLimitFromRegistry;
ViRemLockAllocationFailures;
ViRemLockAvl;
ViRemLockInitialized;
ViRemLockReusedCount;
ViRequiredTimeSinceBoot;
ViRequiredTimeSinceBootInMsecs;
ViResourceAvl;
ViResourceInitialized;
ViResourceNotTracked;
ViResourceStaleNodes;
ViResourcesAlreadyLoadedDrivers;
ViSearchedNodesLimitFromRegistry;
ViSessionDataInitialized;
ViSessionDataLookaside;
ViShortTime;
ViShutdownTimeoutCount;
ViShutdownWatchdogDpc;
ViShutdownWatchdogTimer;
ViStackSwitchAlreadyReported;
ViSufficientlyBootedForDmaFailure;
ViSuperDebug;
ViSystemSufficientlyBooted;
ViTargetAllocationFailures;
ViTargetDriversAvl;
ViTargetInitialized;
ViTargetWMIRegistrationMismatches;
ViTrackIrqlIndex;
ViTrackIrqlQueue;
ViTrackIrqlQueueLength;
ViTriageCrashData;
ViTrimSpaces;
ViVerifierBugcheckAttributes;
ViVerifierDriverAddedThunkListHead;
ViVerifierEnabled;
ViVerifyAllDrivers;
ViVerifyBTSBufferSize;
ViVerifyDma;
ViVerifyFlags;
ViVerifyOnlySpinlocksFromRegistry;
ViVerifyTargets;
ViVerifyTriage;
ViVerifyTriageRules;
ViVerifyTriageRulesSize;
ViVerifyTriageRulesType;
ViWdBreaksEnabled;
ViWdCancelIrpCount;
ViWdCancelling;
ViWdInitialized;
ViWdIrpListLength;
ViWdIrpListLengthMaximum;
ViWdIrpLookasideList;
ViWdIrpTimer;
ViWdIrpTimerDpc;
ViWdTickCount;
ViWindowStationTypeName;
ViXdvEPBound;
ViXdvEPThunksNoXdvEntry;
ViXdvThunksBoundToXdv;
ViXdvThunksNoXdvEntry;
ViXdvThunksNotFound;
ViXdvThunksNotPristine;
ViXdvThunksShared;
ViZwBreakForIssues;
VpPoolHitTag;
WDI_SEM_EVENT_INIT_MISCONFIG;
WDI_SEM_EVENT_INIT_PROVIDER_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_CONTEXT_PROVIDER_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_END_EVENT_MAX;
WDI_SEM_EVENT_INIT_SCENARIO_MAX;
WDI_SEM_EVENT_SCENARIO_END;
WDI_SEM_EVENT_SCENARIO_END_FAILED;
WDI_SEM_EVENT_SCENARIO_INFLIGHT_MAX;
WDI_SEM_EVENT_SCENARIO_START;
WDI_SEM_EVENT_SCENARIO_START_FAILED;
WDI_SEM_EVENT_SCENARIO_TIMEOUT;
WDI_SEM_EVENT_SQM_ADD_TO_STREAM;
WDI_SEM_EVENT_SQM_INCREMENT_DWORD;
WDI_SEM_EVENT_SQM_INIT;
WDI_SEM_PROVIDER;
WHEAErrorInjectionMethods_GUID;
WHEAErrorSourceMethods_GUID;
WHEAPolicyManagementMethods_GUID;
WHEA_ERROR_PACKET_SECTION_GUID;
WHEA_ETW_PROVIDER;
WHEA_RECORD_CREATOR_GUID;
WHEA_SQM_EVENT_ADDTOSTREAM;
WHEA_SQM_EVENT_INCREMENTDWORD;
WHEA_SQM_EVENT_SETDWORD;
WHEA_SQM_EVENT_SETIFMAXDWORD;
WNF_BOOT_DIRTY_SHUTDOWN;
WNF_BOOT_INVALID_TIME_SOURCE;
WNF_FLT_RUNDOWN_WAIT;
WNF_FSRL_TIERED_VOLUME_DETECTED;
WNF_MM_BAD_MEMORY_PENDING_REMOVAL;
WNF_PNPA_DEVNODES_CHANGED;
WNF_PNPA_DEVNODES_CHANGED_SESSION;
WNF_PNPA_HARDWAREPROFILES_CHANGED;
WNF_PNPA_HARDWAREPROFILES_CHANGED_SESSION;
WNF_PNPA_PORTS_CHANGED;
WNF_PNPA_PORTS_CHANGED_SESSION;
WNF_PNPA_VOLUMES_CHANGED;
WNF_PNPA_VOLUMES_CHANGED_SESSION;
WNF_PNPB_AWAITING_RESPONSE;
WNF_PO_SCENARIO_CHANGE;
WNF_PS_WAKE_CHARGE_RESOURCE_POLICY;
WNF_SBS_UPDATE_AVAILABLE;
WNF_SEB_TIME_ZONE_CHANGE;
WNF_UBPM_CONSOLE_MONITOR;
WNF_WER_SERVICE_START;
WRITE_UCHAR;
WSOEsp;
WSOThread;
WSServiceStartServiceTrigger;
WatchStepOver;
WatchStepOverBreakAddr;
WatchStepOverHandle;
WatchStepOverSuspended;
WatchdogReadsQueueTimeout;
WatchdogWritesQueueTimeout;
WdipContextLoggerId;
WdipDiagLoggerId;
WdipSemDisabledScenarioTable;
WdipSemEnabled;
WdipSemEnabledInstanceTable;
WdipSemFrequentScenarioTable;
WdipSemInitialized;
WdipSemOneSecond;
WdipSemPool;
WdipSemProviderTable;
WdipSemPushLock;
WdipSemRegHandle;
WdipSemScenarioTable;
WdipSemTimeoutEnabled;
WdipSemTimeoutValue;
WdipTimeoutDpc;
WdipTimeoutTimer;
WdipTimeoutWorkEnabled;
WdipTimeoutWorkItem;
WheaRegPolicyDisableOffline;
WheaRegPolicyMemPersistOffline;
WheaRegPolicyMemPfaDisable;
WheaRegPolicyMemPfaPageCount;
WheaRegPolicyMemPfaThreshold;
WheaRegPolicyMemPfaTimeout;
WheaRegPolicyTable;
WheaRegistryKeysPresent;
WheapConfigTableLock;
WheapCrashDumpInitialized;
WheapDispatchPtr;
WheapErrorRecordId;
WheapErrorSourceTable;
WheapEtwEnabled;
WheapEtwHandle;
WheapEventingInitialized;
WheapInitializationComplete;
WheapMaxCorrectedMCEOutstanding;
WheapPfaInitialized;
WheapPfaList;
WheapPfaLock;
WheapPolicyDisableOffline;
WheapPolicyMemPersistOffline;
WheapPolicyMemPfaDisable;
WheapPolicyMemPfaPageCount;
WheapPolicyMemPfaThreshold;
WheapPolicyMemPfaTimeout;
WheapPrevErrList;
WheapPreviousSessionFailure;
WheapSingleBitEccErrorThreshold;
WheapSourceConfiguration;
WheapSqmWaitQueued;
WheapSqmWaitRetryCount;
WheapSqmWaitTimeout;
WheapSqmWaitTimer;
WheapSqmWaitTimerDpc;
WheapSqmWaitWorkQueueItem;
WheapStatus;
WheapTriageDump;
WheapTriageDumpCreation;
WheapTriageDumpGenerated;
WheapTriageDumpLength;
WheapTriageDumpLock;
WheapTriageDumpReported;
WheapWaitingETWEventLock;
WheapWaitingETWEvents;
WheapWmiGuidList;
WheapWorkQueue;
Win32kFullPath;
Win7VersionHookCollections;
Win7VersionKernelHooks;
Win7VersionLieShim;
Win7VersionLieShimGuid;
Win8VersionHookCollections;
Win8VersionKernelHooks;
Win8VersionLieShim;
Win8VersionLieShimGuid;
WinSqmGlobalSession;
WmiIdleAccntEventEnabled;
WmiIdleStateEventEnabled;
WmiIrpNames;
WmiPerfStateDomainEventEnabled;
WmiPerfStateEventEnabled;
WmiThermalEventEnabled;
WmiThermalPolicyEventEnabled;
WmipAdminDeviceObject;
WmipBinaryMofGuid;
WmipCancelSpinLock;
WmipDSChunkInfo;
WmipDSHead;
WmipDSHeadPtr;
WmipDataProviderPnPIdInstanceNamesGuid;
WmipDataProviderPnpidGuid;
WmipDefaultAccessSd;
WmipDefaultAccessSecurityDescriptor;
WmipEventWorkItems;
WmipEventWorkQueueItem;
WmipFirmwareTableArray;
WmipGEChunkInfo;
WmipGEHead;
WmipGEHeadPtr;
WmipGenericMapping;
WmipGuidList;
WmipGuidObjectType;
WmipISChunkInfo;
WmipInUseRegEntryCount;
WmipInUseRegEntryHead;
WmipInstIdChunkHead;
WmipLoggerContext;
WmipMRChunkInfo;
WmipMRHead;
WmipMRHeadPtr;
WmipNPEvent;
WmipNPNotificationSpinlock;
WmipRegLookaside;
WmipRegWorkItemCount;
WmipRegWorkList;
WmipRegWorkQueue;
WmipRegistrationSpinLock;
WmipRegistryPath;
WmipSMBiosTableLength;
WmipSMBiosTablePhysicalAddress;
WmipSMBiosVersionInfo;
WmipSMMutex;
WmipServiceDeviceObject;
WmipSysId1394;
WmipSysId1394Count;
WmipSysIdRead;
WmipSysIdStatus;
WmipSysIdUuid;
WmipSysIdUuidCount;
WmipSystemSubjectContext;
WmipWmiLibInfo;
WnfGuid;
XdvEnabled;
XpressHashFunction;
XpressHighBitIndexTable;
ZeroPte;
_ClassPropertyRead;
_ClassPropertyWrite;
_CmClassRegPropMap;
_CmDeviceRegPropMap;
_DEFAULT_CW_in_mem;
_DevicePropertyRead;
_DevicePropertyWrite;
_IMPORT_DESCRIPTOR_BOOTVID;
_IMPORT_DESCRIPTOR_CI;
_IMPORT_DESCRIPTOR_HAL;
_IMPORT_DESCRIPTOR_PSHED;
_IMPORT_DESCRIPTOR_ext-ms-win-fs-clfs-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-kcminitcfg-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksecurity-l1-1-1;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksigningpolicy-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-ksr-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-tm-l1-1-0;
_IMPORT_DESCRIPTOR_ext-ms-win-ntos-werkernel-l1-1-0;
_IMPORT_DESCRIPTOR_kdcom;
_IMPORT_DESCRIPTOR_msrpc;
_NLG_Destination;
_NULL_IMPORT_DESCRIPTOR;
___PchSym_;
__clocalestr;
__fastflag;
__guard_check_icall_fptr;
__initiallocalestructinfo;
__initiallocinfo;
__lconv_c;
__lconv_static_W_decimal;
__lconv_static_W_null;
__lconv_static_decimal;
__lconv_static_null;
__lookuptable;
__lookuptable_s;
__mb_cur_max;
__newclmap;
__newctype;
__newcumap;
__safe_se_handler_table;
__security_cookie;
__security_cookie_complement;
_cpower;
_d_inf;
_d_max;
_imp_HalClearSoftwareInterrupt;
_imp_HalRequestClockInterrupt;
_imp_HalRequestSoftwareInterrupt;
_imp_KfLowerIrql;
_imp_KfRaiseIrql;
_imp__AppContainerPrivilegesEnabledExt;
_imp__CiInitialize;
_imp__ClfsAddLogContainer;
_imp__ClfsCloseLogFileObject;
_imp__ClfsCreateLogFile;
_imp__ClfsCreateMarshallingArea;
_imp__ClfsDeleteLogByPointer;
_imp__ClfsDeleteMarshallingArea;
_imp__ClfsFlushToLsn;
_imp__ClfsGetLogFileInformation;
_imp__ClfsLsnContainer;
_imp__ClfsLsnDifference;
_imp__ClfsLsnEqual;
_imp__ClfsLsnInvalid;
_imp__ClfsLsnLess;
_imp__ClfsMgmtDeregisterManagedClient;
_imp__ClfsMgmtInstallPolicy;
_imp__ClfsMgmtRegisterManagedClient;
_imp__ClfsReadLogRecord;
_imp__ClfsReadNextLogRecord;
_imp__ClfsReadRestartArea;
_imp__ClfsRemoveLogContainer;
_imp__ClfsReserveAndAppendLog;
_imp__ClfsTerminateReadLog;
_imp__ClfsWriteRestartArea;
_imp__CmCompleteInitMachineConfig;
_imp__CmSetInitMachineConfig;
_imp__HalAcpiGetTableEx;
_imp__HalAllProcessorsStarted;
_imp__HalAllocateAdapterChannel;
_imp__HalAllocateCommonBuffer;
_imp__HalAllocateCrashDumpRegisters;
_imp__HalBeginSystemInterrupt;
_imp__HalCalibratePerformanceCounter;
_imp__HalDisableInterrupt;
_imp__HalEnableInterrupt;
_imp__HalEndSystemInterrupt;
_imp__HalEnumerateEnvironmentVariablesEx;
_imp__HalFreeCommonBuffer;
_imp__HalGetAdapter;
_imp__HalGetBusDataByOffset;
_imp__HalGetEnvironmentVariable;
_imp__HalGetEnvironmentVariableEx;
_imp__HalGetInterruptTargetInformation;
_imp__HalGetInterruptVector;
_imp__HalGetMemoryCachingRequirements;
_imp__HalGetMessageRoutingInfo;
_imp__HalGetProcessorIdByNtNumber;
_imp__HalGetVectorInput;
_imp__HalHandleNMI;
_imp__HalInitSystem;
_imp__HalInitializeBios;
_imp__HalInitializeOnResume;
_imp__HalInitializeProcessor;
_imp__HalProcessorIdle;
_imp__HalQueryEnvironmentVariableInfoEx;
_imp__HalQueryMaximumProcessorCount;
_imp__HalQueryRealTimeClock;
_imp__HalReadDmaCounter;
_imp__HalRegisterDynamicProcessor;
_imp__HalRegisterErrataCallbacks;
_imp__HalReportResourceUsage;
_imp__HalRequestIpi;
_imp__HalReturnToFirmware;
_imp__HalSetBusDataByOffset;
_imp__HalSetEnvironmentVariable;
_imp__HalSetEnvironmentVariableEx;
_imp__HalSetRealTimeClock;
_imp__HalStartDynamicProcessor;
_imp__HalStartNextProcessor;
_imp__HalStartProfileInterrupt;
_imp__HalStopProfileInterrupt;
_imp__HalTranslateBusAddress;
_imp__IoFlushAdapterBuffers;
_imp__IoFreeAdapterChannel;
_imp__IoFreeMapRegisters;
_imp__IoMapTransfer;
_imp__KdD0Transition;
_imp__KdD3Transition;
_imp__KdDebuggerInitialize0;
_imp__KdDebuggerInitialize1;
_imp__KdHvComPortInUse;
_imp__KdReceivePacket;
_imp__KdRestore;
_imp__KdSave;
_imp__KdSendPacket;
_imp__KdSetHiberRange;
_imp__KeFlushWriteBuffer;
_imp__KeGetCurrentIrql;
_imp__KeLowerIrql;
_imp__KeQueryPerformanceCounter;
_imp__KeRaiseIrql;
_imp__KeRaiseIrqlToDpcLevel;
_imp__KeRaiseIrqlToSynchLevel;
_imp__KeStallExecutionProcessor;
_imp__KsrCleanupPageDatabase;
_imp__KsrInitPageDatabase;
_imp__MesDecodeBufferHandleCreate;
_imp__MesEncodeIncrementalHandleCreate;
_imp__MesHandleFree;
_imp__MesIncrementalHandleReset;
_imp__NdrMesTypeDecode2;
_imp__NdrMesTypeEncode2;
_imp__NtCommitComplete;
_imp__NtCommitEnlistment;
_imp__NtCommitTransaction;
_imp__NtCreateEnlistment;
_imp__NtCreateResourceManager;
_imp__NtCreateTransaction;
_imp__NtCreateTransactionManager;
_imp__NtEnumerateTransactionObject;
_imp__NtFreezeTransactions;
_imp__NtGetNotificationResourceManager;
_imp__NtOpenEnlistment;
_imp__NtOpenResourceManager;
_imp__NtOpenTransaction;
_imp__NtOpenTransactionManager;
_imp__NtPrePrepareComplete;
_imp__NtPrePrepareEnlistment;
_imp__NtPrepareComplete;
_imp__NtPrepareEnlistment;
_imp__NtPropagationComplete;
_imp__NtPropagationFailed;
_imp__NtQueryInformationEnlistment;
_imp__NtQueryInformationResourceManager;
_imp__NtQueryInformationTransaction;
_imp__NtQueryInformationTransactionManager;
_imp__NtReadOnlyEnlistment;
_imp__NtRecoverEnlistment;
_imp__NtRecoverResourceManager;
_imp__NtRecoverTransactionManager;
_imp__NtRegisterProtocolAddressInformation;
_imp__NtRenameTransactionManager;
_imp__NtRollbackComplete;
_imp__NtRollbackEnlistment;
_imp__NtRollbackTransaction;
_imp__NtRollforwardTransactionManager;
_imp__NtSetInformationEnlistment;
_imp__NtSetInformationResourceManager;
_imp__NtSetInformationTransaction;
_imp__NtSetInformationTransactionManager;
_imp__NtSinglePhaseReject;
_imp__NtThawTransactions;
_imp__PshedAllocateMemory;
_imp__PshedArePluginsPresent;
_imp__PshedAttemptErrorRecovery;
_imp__PshedBugCheckSystem;
_imp__PshedClearErrorRecord;
_imp__PshedDisableErrorSource;
_imp__PshedEnableErrorSource;
_imp__PshedFinalizeErrorRecord;
_imp__PshedFreeMemory;
_imp__PshedGetAllErrorSources;
_imp__PshedGetBootErrorPacket;
_imp__PshedGetInjectionCapabilities;
_imp__PshedInitialize;
_imp__PshedInjectError;
_imp__PshedIsSystemWheaEnabled;
_imp__PshedReadErrorRecord;
_imp__PshedSetErrorSourceInfo;
_imp__PshedWriteErrorRecord;
_imp__QueryUpdateFileEaAllowedExt;
_imp__READ_PORT_UCHAR;
_imp__READ_PORT_ULONG;
_imp__READ_PORT_USHORT;
_imp__RpcExceptionFilter;
_imp__RtlCompareUnicodeString;
_imp__RtlCopyUnicodeString;
_imp__RtlEqualUnicodeString;
_imp__RtlIsNameInExpression;
_imp__RtlLengthSid;
_imp__RtlPrefixUnicodeString;
_imp__RtlUpcaseUnicodeChar;
_imp__SeQuerySigningPolicyExt;
_imp__TmCancelPropagationRequest;
_imp__TmCommitComplete;
_imp__TmCommitEnlistment;
_imp__TmCommitTransaction;
_imp__TmCreateEnlistment;
_imp__TmCurrentTransaction;
_imp__TmDereferenceEnlistmentKey;
_imp__TmEnableCallbacks;
_imp__TmEndPropagationRequest;
_imp__TmFreezeTransactions;
_imp__TmGetTransactionId;
_imp__TmInitSystem;
_imp__TmInitSystemPhase2;
_imp__TmInitializeTransactionManager;
_imp__TmIsKTMCommitCoordinator;
_imp__TmIsTransactionActive;
_imp__TmPrePrepareComplete;
_imp__TmPrePrepareEnlistment;
_imp__TmPrepareComplete;
_imp__TmPrepareEnlistment;
_imp__TmPropagationComplete;
_imp__TmPropagationFailed;
_imp__TmReadOnlyEnlistment;
_imp__TmRecoverEnlistment;
_imp__TmRecoverResourceManager;
_imp__TmRecoverTransactionManager;
_imp__TmReferenceEnlistmentKey;
_imp__TmRenameTransactionManager;
_imp__TmRequestOutcomeEnlistment;
_imp__TmRollbackComplete;
_imp__TmRollbackEnlistment;
_imp__TmRollbackTransaction;
_imp__TmSetCurrentTransaction;
_imp__TmShutdownSystem;
_imp__TmSinglePhaseReject;
_imp__TmThawTransactions;
_imp__VidBitBlt;
_imp__VidBitBltEx;
_imp__VidBufferToScreenBlt;
_imp__VidCleanUp;
_imp__VidDisplayString;
_imp__VidInitialize;
_imp__VidResetDisplay;
_imp__VidScreenToBufferBlt;
_imp__VidSetScrollRegion;
_imp__VidSetTextColor;
_imp__VidSolidColorFill;
_imp__WRITE_PORT_UCHAR;
_imp__WRITE_PORT_ULONG;
_imp__WRITE_PORT_USHORT;
_imp__WerLiveKernelCancelReport;
_imp__WerLiveKernelCloseHandle;
_imp__WerLiveKernelCreateReport;
_imp__WerLiveKernelInitSystem;
_imp__WerLiveKernelOpenDumpFile;
_imp__WerLiveKernelSubmitReport;
_indefinite;
_load_config_used;
_matherr_flag;
_pctype;
_pi_by_2_to_61;
_piby2;
_pwctype;
_real;
_wctype;
`PcwpRegisterEventTracingCounterSet'::`2'::Descriptors;
`PcwpRegisterEventTracingSessionCounterSet'::`2'::Descriptors;
`PcwpRegisterFileSystemDiskIOCounterSet'::`2'::Descriptors;
`PcwpRegisterProcessorCounterSet'::`2'::Descriptors;
`PcwpRegisterSynchCounterSet'::`2'::Descriptors;
`PcwpRegisterSynchNumaCounterSet'::`2'::Descriptors;
`PcwpRegisterThermalCounterSet'::`2'::Descriptors;
`ST_STORE<SM_TRAITS>::StDmCheckForCompaction'::`2'::ThresholdShiftTableFile;
`ST_STORE<SM_TRAITS>::StDmCheckForCompaction'::`2'::ThresholdShiftTableInMem;
`_CmDeleteCommonClassRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceContainerRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceInterfaceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmDeleteDeviceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenCommonClassRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceContainerRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceInterfaceRegKeyWorker'::`2'::ObjectPathRootPrefix;
`_CmOpenDeviceRegKeyWorker'::`2'::ObjectPathRootPrefix;
abWPAStringKey;
cpuidBitInfo;
crc32Map1_;
crc32Map32_;
crc32Mult_;
crc64Map1_;
crc64Map32_;
crc64Mult_;
gCcTrace;
g_AhcDeviceObject;
g_AhcFileObject;
g_SecureBootPolicyBlobHeader;
g_SessionLowboxArray;
g_SessionLowboxMap;
g_SymCryptCpuFeaturesNotPresent;
g_SymCryptIsInitialized;
g_fatalFn;
g_pEnvironmentData;
g_rgAttributeTags;
g_szGuidFormat;
gbl_errno;
nullclass;
oldpc;
pFsRtlpMupCalls;
pIoAllocateIrp;
pIoFreeIrp;
pIofCallDriver;
pIofCompleteRequest;
pXdvAddDevice;
pXdvCcWaitForCurrentLazyWriterActivity;
pXdvCmRegisterCallback;
pXdvCmRegisterCallbackEx;
pXdvCmUnRegisterCallback;
pXdvDRIVER_CANCEL;
pXdvDbgBreakPointWithStatus;
pXdvDriverEntry;
pXdvDriverStartIo;
pXdvDriverUnload;
pXdvEtwRegister;
pXdvEtwRegisterClassicProvider;
pXdvEtwUnregister;
pXdvExAcquireFastMutex;
pXdvExAcquireFastMutexUnsafe;
pXdvExAcquireResourceExclusiveLite;
pXdvExAcquireResourceSharedLite;
pXdvExAcquireRundownProtection;
pXdvExAcquireRundownProtectionCacheAware;
pXdvExAcquireRundownProtectionCacheAwareEx;
pXdvExAcquireRundownProtectionEx;
pXdvExAcquireSharedStarveExclusive;
pXdvExAcquireSharedWaitForExclusive;
pXdvExAllocatePool;
pXdvExAllocatePoolWithQuota;
pXdvExAllocatePoolWithQuotaTag;
pXdvExAllocatePoolWithTag;
pXdvExAllocatePoolWithTagPriority;
pXdvExConvertExclusiveToSharedLite;
pXdvExCreateCallback;
pXdvExDeleteLookasideListEx;
pXdvExDeleteNPagedLookasideList;
pXdvExDeletePagedLookasideList;
pXdvExDeleteResourceLite;
pXdvExEnterCriticalRegionAndAcquireResourceExclusive;
pXdvExEnterCriticalRegionAndAcquireResourceShared;
pXdvExEnterCriticalRegionAndAcquireSharedWaitForExclusive;
pXdvExEnterPriorityRegionAndAcquireResourceExclusive;
pXdvExEnterPriorityRegionAndAcquireResourceShared;
pXdvExFreePoolWithTag;
pXdvExGetExclusiveWaiterCount;
pXdvExGetSharedWaiterCount;
pXdvExInitializeLookasideListEx;
pXdvExInitializeNPagedLookasideList;
pXdvExInitializePagedLookasideList;
pXdvExInitializeResourceLite;
pXdvExInterlockedAddLargeInteger;
pXdvExIsProcessorFeaturePresent;
pXdvExIsResourceAcquiredExclusiveLite;
pXdvExIsResourceAcquiredSharedLite;
pXdvExRaiseAccessViolation;
pXdvExRaiseDatatypeMisalignment;
pXdvExRaiseStatus;
pXdvExRegisterCallback;
pXdvExReinitializeResourceLite;
pXdvExReleaseFastMutex;
pXdvExReleaseFastMutexUnsafe;
pXdvExReleaseResourceAndLeaveCriticalRegion;
pXdvExReleaseResourceAndLeavePriorityRegion;
pXdvExReleaseResourceForThreadLite;
pXdvExReleaseResourceLite;
pXdvExReleaseRundownProtection;
pXdvExReleaseRundownProtectionCacheAware;
pXdvExReleaseRundownProtectionEx;
pXdvExSetResourceOwnerPointer;
pXdvExSetResourceOwnerPointerEx;
pXdvExSetTimerResolution;
pXdvExTryToAcquireFastMutex;
pXdvExUnregisterCallback;
pXdvExUuidCreate;
pXdvExWaitForRundownProtectionRelease;
pXdvExWaitForRundownProtectionReleaseCacheAware;
pXdvExfAcquirePushLockExclusive;
pXdvExfAcquirePushLockShared;
pXdvExfInterlockedCompareExchange64;
pXdvExfInterlockedInsertHeadList;
pXdvExfInterlockedInsertTailList;
pXdvExfInterlockedPopEntryList;
pXdvExfInterlockedPushEntryList;
pXdvExfInterlockedRemoveHeadList;
pXdvExfReleasePushLock;
pXdvExfReleasePushLockShared;
pXdvExfTryAcquirePushLockShared;
pXdvExfTryToWakePushLock;
pXdvFsRtlAllocateFileLock;
pXdvFsRtlAreNamesEqual;
pXdvFsRtlBalanceReads;
pXdvFsRtlCancellableWaitForMultipleObjects;
pXdvFsRtlCancellableWaitForSingleObject;
pXdvFsRtlCheckLockForReadAccess;
pXdvFsRtlCheckLockForWriteAccess;
pXdvFsRtlCopyWrite;
pXdvFsRtlDeregisterUncProvider;
pXdvFsRtlDissectName;
pXdvFsRtlDoesNameContainWildCards;
pXdvFsRtlFastCheckLockForRead;
pXdvFsRtlFastCheckLockForWrite;
pXdvFsRtlFastUnlockAll;
pXdvFsRtlFastUnlockAllByKey;
pXdvFsRtlFastUnlockSingle;
pXdvFsRtlFreeFileLock;
pXdvFsRtlGetFileSize;
pXdvFsRtlGetNextFileLock;
pXdvFsRtlIncrementCcFastReadNoWait;
pXdvFsRtlIncrementCcFastReadWait;
pXdvFsRtlInitializeFileLock;
pXdvFsRtlIsNameInExpression;
pXdvFsRtlMdlReadCompleteDev;
pXdvFsRtlMdlWriteCompleteDev;
pXdvFsRtlNotifyFilterChangeDirectory;
pXdvFsRtlNotifyFilterReportChange;
pXdvFsRtlNotifyFullChangeDirectory;
pXdvFsRtlNotifyFullReportChange;
pXdvFsRtlPrivateLock;
pXdvFsRtlProcessFileLock;
pXdvFsRtlRegisterUncProvider;
pXdvFsRtlRegisterUncProviderEx;
pXdvFsRtlRemoveDotsFromPath;
pXdvFsRtlUninitializeFileLock;
pXdvFsRtlValidateReparsePointBuffer;
pXdvHalAllocateCommonBuffer;
pXdvHalAllocateCrashDumpRegisters;
pXdvHalExamineMBR;
pXdvHalFreeCommonBuffer;
pXdvHalGetAdapter;
pXdvHalGetInterruptVector;
pXdvIRP_MJ_CLEANUP;
pXdvIRP_MJ_CLOSE;
pXdvIRP_MJ_CREATE;
pXdvIRP_MJ_CREATE_MAILSLOT;
pXdvIRP_MJ_CREATE_NAMED_PIPE;
pXdvIRP_MJ_DEVICE_CHANGE;
pXdvIRP_MJ_DEVICE_CONTROL;
pXdvIRP_MJ_DIRECTORY_CONTROL;
pXdvIRP_MJ_FILE_SYSTEM_CONTROL;
pXdvIRP_MJ_FLUSH_BUFFERS;
pXdvIRP_MJ_INTERNAL_DEVICE_CONTROL;
pXdvIRP_MJ_LOCK_CONTROL;
pXdvIRP_MJ_PNP;
pXdvIRP_MJ_POWER;
pXdvIRP_MJ_QUERY_EA;
pXdvIRP_MJ_QUERY_INFORMATION;
pXdvIRP_MJ_QUERY_QUOTA;
pXdvIRP_MJ_QUERY_SECURITY;
pXdvIRP_MJ_QUERY_VOLUME_INFORMATION;
pXdvIRP_MJ_READ;
pXdvIRP_MJ_SET_EA;
pXdvIRP_MJ_SET_INFORMATION;
pXdvIRP_MJ_SET_QUOTA;
pXdvIRP_MJ_SET_SECURITY;
pXdvIRP_MJ_SET_VOLUME_INFORMATION;
pXdvIRP_MJ_SHUTDOWN;
pXdvIRP_MJ_SYSTEM_CONTROL;
pXdvIRP_MJ_WRITE;
pXdvInterlockedPopEntrySList;
pXdvInterlockedPushEntrySList;
pXdvIoAcquireCancelSpinLock;
pXdvIoAcquireRemoveLockEx;
pXdvIoAcquireVpbSpinLock;
pXdvIoAllocateAdapterChannel;
pXdvIoAllocateController;
pXdvIoAllocateErrorLogEntry;
pXdvIoAllocateIrp;
pXdvIoAllocateMdl;
pXdvIoAllocateWorkItem;
pXdvIoAttachDevice;
pXdvIoAttachDeviceToDeviceStack;
pXdvIoAttachDeviceToDeviceStackSafe;
pXdvIoBuildAsynchronousFsdRequest;
pXdvIoBuildDeviceIoControlRequest;
pXdvIoBuildSynchronousFsdRequest;
pXdvIoCancelIrp;
pXdvIoCheckShareAccess;
pXdvIoConnectInterrupt;
pXdvIoConnectInterruptEx;
pXdvIoCreateController;
pXdvIoCreateDevice;
pXdvIoCreateFile;
pXdvIoCreateNotificationEvent;
pXdvIoCreateSymbolicLink;
pXdvIoCreateSynchronizationEvent;
pXdvIoCreateUnprotectedSymbolicLink;
pXdvIoDeleteController;
pXdvIoDeleteDevice;
pXdvIoDeleteSymbolicLink;
pXdvIoDetachDevice;
pXdvIoDisconnectInterrupt;
pXdvIoDisconnectInterruptEx;
pXdvIoFlushAdapterBuffers;
pXdvIoFreeAdapterChannel;
pXdvIoFreeController;
pXdvIoFreeIrp;
pXdvIoFreeMapRegisters;
pXdvIoFreeMdl;
pXdvIoGetAttachedDeviceReference;
pXdvIoGetConfigurationInformation;
pXdvIoGetDeviceInterfaceAlias;
pXdvIoGetDeviceInterfaces;
pXdvIoGetDeviceNumaNode;
pXdvIoGetDeviceObjectPointer;
pXdvIoGetDeviceProperty;
pXdvIoGetDevicePropertyData;
pXdvIoGetDeviceToVerify;
pXdvIoGetDmaAdapter;
pXdvIoGetFileObjectGenericMapping;
pXdvIoGetInitialStack;
pXdvIoInitializeIrp;
pXdvIoInitializeRemoveLockEx;
pXdvIoInitializeTimer;
pXdvIoInitializeWorkItem;
pXdvIoInvalidateDeviceRelations;
pXdvIoIsWdmVersionAvailable;
pXdvIoMapTransfer;
pXdvIoOpenDeviceInterfaceRegistryKey;
pXdvIoOpenDeviceRegistryKey;
pXdvIoRaiseHardError;
pXdvIoRaiseInformationalHardError;
pXdvIoReadPartitionTable;
pXdvIoReadPartitionTableEx;
pXdvIoRegisterBootDriverReinitialization;
pXdvIoRegisterDeviceInterface;
pXdvIoRegisterDriverReinitialization;
pXdvIoRegisterLastChanceShutdownNotification;
pXdvIoRegisterPlugPlayNotification;
pXdvIoRegisterShutdownNotification;
pXdvIoReleaseCancelSpinLock;
pXdvIoReleaseRemoveLockAndWaitEx;
pXdvIoReleaseRemoveLockEx;
pXdvIoReleaseVpbSpinLock;
pXdvIoRemoveShareAccess;
pXdvIoReplacePartitionUnit;
pXdvIoReportDetectedDevice;
pXdvIoReportTargetDeviceChange;
pXdvIoReportTargetDeviceChangeAsynchronous;
pXdvIoReuseIrp;
pXdvIoSetCompletionRoutineEx;
pXdvIoSetDeviceInterfaceState;
pXdvIoSetDevicePropertyData;
pXdvIoSetDeviceToVerify;
pXdvIoSetPartitionInformation;
pXdvIoSetPartitionInformationEx;
pXdvIoSetShareAccess;
pXdvIoSetStartIoAttributes;
pXdvIoStartNextPacket;
pXdvIoUnregisterPlugPlayNotification;
pXdvIoUnregisterPlugPlayNotificationEx;
pXdvIoUnregisterShutdownNotification;
pXdvIoUpdateShareAccess;
pXdvIoVolumeDeviceToDosName;
pXdvIoWMIAllocateInstanceIds;
pXdvIoWMIRegistrationControl;
pXdvIoWMIWriteEvent;
pXdvIoWritePartitionTable;
pXdvIoWritePartitionTableEx;
pXdvIofCallDriver;
pXdvIofCompleteRequest;
pXdvIopBuildAsynchronousFsdRequest;
pXdvIopBuildSynchronousFsdRequest;
pXdvKeAcquireGuardedMutex;
pXdvKeAcquireGuardedMutexUnsafe;
pXdvKeAcquireInStackQueuedSpinLock;
pXdvKeAcquireInStackQueuedSpinLockAtDpcLevel;
pXdvKeAcquireInStackQueuedSpinLockForDpc;
pXdvKeAcquireInterruptSpinLock;
pXdvKeAcquireQueuedSpinLock;
pXdvKeAcquireSpinLockForDpc;
pXdvKeAreAllApcsDisabled;
pXdvKeAreApcsDisabled;
pXdvKeCancelTimer;
pXdvKeClearEvent;
pXdvKeDelayExecutionThread;
pXdvKeDeregisterNmiCallback;
pXdvKeEnterCriticalRegion;
pXdvKeEnterGuardedRegion;
pXdvKeFlushQueuedDpcs;
pXdvKeInitializeDeviceQueue;
pXdvKeInitializeEvent;
pXdvKeInitializeGuardedMutex;
pXdvKeInitializeMutant;
pXdvKeInitializeMutex;
pXdvKeInitializeSemaphore;
pXdvKeInitializeSpinLock;
pXdvKeInitializeTimer;
pXdvKeInitializeTimerEx;
pXdvKeInsertByKeyDeviceQueue;
pXdvKeInsertDeviceQueue;
pXdvKeInsertHeadQueue;
pXdvKeInsertQueue;
pXdvKeInsertQueueDpc;
pXdvKeLeaveCriticalRegion;
pXdvKeLeaveGuardedRegion;
pXdvKeLowerIrql;
pXdvKePulseEvent;
pXdvKeQueryActiveProcessors;
pXdvKeQueryPriorityThread;
pXdvKeQueryRuntimeThread;
pXdvKeRaiseIrql;
pXdvKeRaiseIrqlToDpcLevel;
pXdvKeReadStateEvent;
pXdvKeReadStateMutex;
pXdvKeReadStateSemaphore;
pXdvKeReadStateTimer;
pXdvKeRegisterNmiCallback;
pXdvKeReleaseGuardedMutex;
pXdvKeReleaseGuardedMutexUnsafe;
pXdvKeReleaseInStackQueuedSpinLock;
pXdvKeReleaseInStackQueuedSpinLockForDpc;
pXdvKeReleaseInStackQueuedSpinLockFromDpcLevel;
pXdvKeReleaseInterruptSpinLock;
pXdvKeReleaseMutant;
pXdvKeReleaseMutex;
pXdvKeReleaseQueuedSpinLock;
pXdvKeReleaseSemaphore;
pXdvKeReleaseSpinLockForDpc;
pXdvKeRemoveByKeyDeviceQueue;
pXdvKeRemoveDeviceQueue;
pXdvKeRemoveEntryDeviceQueue;
pXdvKeRemoveQueue;
pXdvKeRemoveQueueDpc;
pXdvKeResetEvent;
pXdvKeRevertToUserAffinityThreadEx;
pXdvKeSaveFloatingPointState;
pXdvKeSetEvent;
pXdvKeSetSystemAffinityThread;
pXdvKeSetSystemGroupAffinityThread;
pXdvKeSetTimer;
pXdvKeSetTimerEx;
pXdvKeSynchronizeExecution;
pXdvKeTestSpinLock;
pXdvKeTryToAcquireGuardedMutex;
pXdvKeTryToAcquireQueuedSpinLock;
pXdvKeTryToAcquireSpinLockAtDpcLevel;
pXdvKeWaitForMultipleObjects;
pXdvKeWaitForSingleObject;
pXdvKefAcquireSpinLockAtDpcLevel;
pXdvKefReleaseSpinLockFromDpcLevel;
pXdvKfAcquireSpinLock;
pXdvKfLowerIrql;
pXdvKfRaiseIrql;
pXdvKfReleaseSpinLock;
pXdvMmAddPhysicalMemory;
pXdvMmAllocateContiguousMemory;
pXdvMmAllocateContiguousMemorySpecifyCache;
pXdvMmAllocateContiguousMemorySpecifyCacheNode;
pXdvMmAllocateContiguousNodeMemory;
pXdvMmAllocateNonCachedMemory;
pXdvMmAllocatePagesForMdl;
pXdvMmAllocatePagesForMdlEx;
pXdvMmCreateMdl;
pXdvMmCreateMirror;
pXdvMmDoesFileHaveUserWritableReferences;
pXdvMmFreeContiguousMemory;
pXdvMmFreeContiguousMemorySpecifyCache;
pXdvMmFreeNonCachedMemory;
pXdvMmFreePagesFromMdl;
pXdvMmGetPhysicalMemoryRanges;
pXdvMmGetSystemRoutineAddress;
pXdvMmLockPagableDataSection;
pXdvMmLockPagableSectionByHandle;
pXdvMmMapIoSpace;
pXdvMmMapLockedPages;
pXdvMmMapLockedPagesSpecifyCache;
pXdvMmMapLockedPagesWithReservedMapping;
pXdvMmPageEntireDriver;
pXdvMmPrefetchPages;
pXdvMmProbeAndLockPages;
pXdvMmProbeAndLockProcessPages;
pXdvMmRemovePhysicalMemory;
pXdvMmResetDriverPaging;
pXdvMmSecureVirtualMemory;
pXdvMmUnlockPagableImageSection;
pXdvMmUnlockPages;
pXdvMmUnmapIoSpace;
pXdvMmUnmapLockedPages;
pXdvMmUnsecureVirtualMemory;
pXdvNtCreateFile;
pXdvNtLockFile;
pXdvNtReadFile;
pXdvNtUnlockFile;
pXdvNtWriteFile;
pXdvObGetObjectSecurity;
pXdvObReferenceObjectByHandle;
pXdvObReferenceObjectByHandleWithTag;
pXdvObReferenceObjectByPointer;
pXdvObReferenceObjectByPointerWithTag;
pXdvObReleaseObjectSecurity;
pXdvObfDereferenceObject;
pXdvObfDereferenceObjectWithTag;
pXdvObfReferenceObject;
pXdvObfReferenceObjectWithTag;
pXdvPoCallDriver;
pXdvPoFxActivateComponent;
pXdvPoFxCompleteDevicePowerNotRequired;
pXdvPoFxCompleteIdleCondition;
pXdvPoFxCompleteIdleState;
pXdvPoFxIdleComponent;
pXdvPoFxNotifySurprisePowerOn;
pXdvPoFxPowerControl;
pXdvPoFxRegisterDevice;
pXdvPoFxReportDevicePoweredOn;
pXdvPoFxSetComponentLatency;
pXdvPoFxSetComponentResidency;
pXdvPoFxSetComponentWake;
pXdvPoFxSetDeviceIdleTimeout;
pXdvPoFxStartDevicePowerManagement;
pXdvPoFxUnregisterDevice;
pXdvPoRequestPowerIrp;
pXdvProbeForRead;
pXdvProbeForWrite;
pXdvPsAssignImpersonationToken;
pXdvPsCreateSystemThread;
pXdvPsDereferenceImpersonationToken;
pXdvPsDereferencePrimaryToken;
pXdvPsDisableImpersonation;
pXdvPsGetVersion;
pXdvPsImpersonateClient;
pXdvPsReferenceImpersonationToken;
pXdvPsReferencePrimaryToken;
pXdvPsRemoveLoadImageNotifyRoutine;
pXdvPsRestoreImpersonation;
pXdvPsRevertToSelf;
pXdvPsSetCreateProcessNotifyRoutine;
pXdvPsSetCreateProcessNotifyRoutineEx;
pXdvPsSetCreateThreadNotifyRoutine;
pXdvPsSetLoadImageNotifyRoutine;
pXdvPsTerminateSystemThread;
pXdvRtlAnsiStringToUnicodeString;
pXdvRtlCompareUnicodeString;
pXdvRtlCreateUnicodeString;
pXdvRtlDeleteRegistryValue;
pXdvRtlDowncaseUnicodeChar;
pXdvRtlDowncaseUnicodeString;
pXdvRtlDuplicateUnicodeString;
pXdvRtlEqualUnicodeString;
pXdvRtlFreeUnicodeString;
pXdvRtlGUIDFromString;
pXdvRtlGenerateClass5Guid;
pXdvRtlHashUnicodeString;
pXdvRtlOemStringToCountedUnicodeString;
pXdvRtlOemStringToUnicodeString;
pXdvRtlStringFromGUID;
pXdvRtlUTF8ToUnicodeN;
pXdvRtlUnicodeStringToAnsiString;
pXdvRtlUnicodeStringToCountedOemString;
pXdvRtlUnicodeStringToOemString;
pXdvRtlUnicodeToUTF8N;
pXdvRtlUpcaseUnicodeChar;
pXdvRtlUpcaseUnicodeString;
pXdvRtlUpcaseUnicodeStringToAnsiString;
pXdvRtlUpcaseUnicodeStringToCountedOemString;
pXdvRtlUpcaseUnicodeStringToOemString;
pXdvRtlxAnsiStringToUnicodeSize;
pXdvRtlxUnicodeStringToAnsiSize;
pXdvSeAccessCheck;
pXdvSeAssignSecurity;
pXdvSeAssignSecurityEx;
pXdvSeDeassignSecurity;
pXdvSeLockSubjectContext;
pXdvSeReleaseSubjectContext;
pXdvSeSinglePrivilegeCheck;
pXdvSeUnlockSubjectContext;
pXdvSeValidSecurityDescriptor;
pXdvZwAccessCheckAndAuditAlarm;
pXdvZwAddBootEntry;
pXdvZwAddDriverEntry;
pXdvZwAdjustPrivilegesToken;
pXdvZwAllocateLocallyUniqueId;
pXdvZwAllocateVirtualMemory;
pXdvZwAlpcAcceptConnectPort;
pXdvZwAlpcConnectPort;
pXdvZwAlpcCreatePort;
pXdvZwAlpcCreatePortSection;
pXdvZwAlpcCreateResourceReserve;
pXdvZwAlpcCreateSectionView;
pXdvZwAlpcCreateSecurityContext;
pXdvZwAlpcQueryInformation;
pXdvZwAlpcSendWaitReceivePort;
pXdvZwAlpcSetInformation;
pXdvZwCancelIoFile;
pXdvZwCancelTimer;
pXdvZwClose;
pXdvZwCloseObjectAuditAlarm;
pXdvZwCommitComplete;
pXdvZwCommitEnlistment;
pXdvZwCommitTransaction;
pXdvZwConnectPort;
pXdvZwCreateDirectoryObject;
pXdvZwCreateEnlistment;
pXdvZwCreateEvent;
pXdvZwCreateFile;
pXdvZwCreateJobObject;
pXdvZwCreateKey;
pXdvZwCreateKeyTransacted;
pXdvZwCreateResourceManager;
pXdvZwCreateSection;
pXdvZwCreateSymbolicLinkObject;
pXdvZwCreateTimer;
pXdvZwCreateTransaction;
pXdvZwCreateTransactionManager;
pXdvZwDeleteBootEntry;
pXdvZwDeleteFile;
pXdvZwDeleteKey;
pXdvZwDeleteValueKey;
pXdvZwDeviceIoControlFile;
pXdvZwDisplayString;
pXdvZwDuplicateObject;
pXdvZwDuplicateToken;
pXdvZwEnumerateBootEntries;
pXdvZwEnumerateDriverEntries;
pXdvZwEnumerateKey;
pXdvZwEnumerateTransactionObject;
pXdvZwEnumerateValueKey;
pXdvZwFlushBuffersFile;
pXdvZwFlushInstructionCache;
pXdvZwFlushKey;
pXdvZwFlushVirtualMemory;
pXdvZwFreeVirtualMemory;
pXdvZwFsControlFile;
pXdvZwGetNotificationResourceManager;
pXdvZwLoadDriver;
pXdvZwLoadKey;
pXdvZwLockFile;
pXdvZwMakeTemporaryObject;
pXdvZwMapViewOfSection;
pXdvZwModifyBootEntry;
pXdvZwModifyDriverEntry;
pXdvZwNotifyChangeKey;
pXdvZwOpenDirectoryObject;
pXdvZwOpenEnlistment;
pXdvZwOpenEvent;
pXdvZwOpenFile;
pXdvZwOpenJobObject;
pXdvZwOpenKey;
pXdvZwOpenKeyEx;
pXdvZwOpenKeyTransacted;
pXdvZwOpenKeyTransactedEx;
pXdvZwOpenProcess;
pXdvZwOpenProcessToken;
pXdvZwOpenProcessTokenEx;
pXdvZwOpenResourceManager;
pXdvZwOpenSection;
pXdvZwOpenSymbolicLinkObject;
pXdvZwOpenThread;
pXdvZwOpenThreadToken;
pXdvZwOpenThreadTokenEx;
pXdvZwOpenTimer;
pXdvZwOpenTransaction;
pXdvZwOpenTransactionManager;
pXdvZwPowerInformation;
pXdvZwPrePrepareComplete;
pXdvZwPrePrepareEnlistment;
pXdvZwPrepareComplete;
pXdvZwPrepareEnlistment;
pXdvZwPulseEvent;
pXdvZwQueryBootEntryOrder;
pXdvZwQueryBootOptions;
pXdvZwQueryDefaultLocale;
pXdvZwQueryDefaultUILanguage;
pXdvZwQueryDirectoryFile;
pXdvZwQueryDirectoryObject;
pXdvZwQueryDriverEntryOrder;
pXdvZwQueryEaFile;
pXdvZwQueryFullAttributesFile;
pXdvZwQueryInformationEnlistment;
pXdvZwQueryInformationFile;
pXdvZwQueryInformationJobObject;
pXdvZwQueryInformationProcess;
pXdvZwQueryInformationResourceManager;
pXdvZwQueryInformationThread;
pXdvZwQueryInformationToken;
pXdvZwQueryInformationTransaction;
pXdvZwQueryInformationTransactionManager;
pXdvZwQueryInstallUILanguage;
pXdvZwQueryKey;
pXdvZwQueryLicenseValue;
pXdvZwQueryObject;
pXdvZwQueryQuotaInformationFile;
pXdvZwQuerySection;
pXdvZwQuerySecurityObject;
pXdvZwQuerySymbolicLinkObject;
pXdvZwQuerySystemInformation;
pXdvZwQueryValueKey;
pXdvZwQueryVolumeInformationFile;
pXdvZwReadFile;
pXdvZwReadOnlyEnlistment;
pXdvZwRecoverEnlistment;
pXdvZwRecoverTransactionManager;
pXdvZwRemoveIoCompletionEx;
pXdvZwRenameKey;
pXdvZwReplaceKey;
pXdvZwRequestWaitReplyPort;
pXdvZwResetEvent;
pXdvZwRestoreKey;
pXdvZwRollbackComplete;
pXdvZwRollbackEnlistment;
pXdvZwRollbackTransaction;
pXdvZwSetBootEntryOrder;
pXdvZwSetBootOptions;
pXdvZwSetDriverEntryOrder;
pXdvZwSetEaFile;
pXdvZwSetEvent;
pXdvZwSetInformationEnlistment;
pXdvZwSetInformationFile;
pXdvZwSetInformationJobObject;
pXdvZwSetInformationObject;
pXdvZwSetInformationProcess;
pXdvZwSetInformationResourceManager;
pXdvZwSetInformationThread;
pXdvZwSetInformationToken;
pXdvZwSetInformationTransaction;
pXdvZwSetQuotaInformationFile;
pXdvZwSetSecurityObject;
pXdvZwSetSystemInformation;
pXdvZwSetSystemTime;
pXdvZwSetTimer;
pXdvZwSetTimerEx;
pXdvZwSetValueKey;
pXdvZwSetVolumeInformationFile;
pXdvZwTerminateProcess;
pXdvZwTranslateFilePath;
pXdvZwUnloadDriver;
pXdvZwUnloadKey;
pXdvZwUnlockFile;
pXdvZwUnmapViewOfSection;
pXdvZwWaitForMultipleObjects;
pXdvZwWaitForSingleObject;
pXdvZwWriteFile;
pXdvmemcpy;
pbih;
psMUITest;
szBias;
szDaylightBias;
szDaylightName;
szDaylightStart;
szDynamicDaylightDisabled;
szDynamicDst;
szFirstEntry;
szLastEntry;
szSlashDynamicDst;
szStandardBias;
szStandardName;
szStandardStart;
szTimeZoneKeyName;
szTimeZonesSlash;
ulInvalidTypes;
unconfiguredConfigFlags;
BOOTVID_NULL_THUNK_DATA;
CI_NULL_THUNK_DATA;
HAL_NULL_THUNK_DATA;
PSHED_NULL_THUNK_DATA;
ext-ms-win-fs-clfs-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-kcminitcfg-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-ksecurity-l1-1-1_NULL_THUNK_DATA;
ext-ms-win-ntos-ksigningpolicy-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-ksr-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-tm-l1-1-0_NULL_THUNK_DATA;
ext-ms-win-ntos-werkernel-l1-1-0_NULL_THUNK_DATA;
kdcom_NULL_THUNK_DATA;
msrpc_NULL_THUNK_DATA;

 ?? ::CIFEBFPJ::`string'();
 ?? ::CIJCHKMG::`string'();
 ?? ::DFIOBLLK::`string'();
 ?? ::FNODOBFM::`string'();
 ?? ::JKADOLAD::`string'();
 ?? ::NKKEPPGN::`string'();
 ?? ::NNGAKEGL::`string'();
 ?? ::OKHAJAOM::`string'();
 ?? ::PBOPGDP::`string'();
ADD_MAP_REGISTERS();
AdtpAppendString();
AdtpAppendZString();
AdtpBuildAccessesString();
AdtpBuildDashString();
AdtpBuildGuidString();
AdtpBuildHexInt64String();
AdtpBuildIPv4Strings();
AdtpBuildIPv6Strings();
AdtpBuildLogonIdStrings();
AdtpBuildMacStrings();
AdtpBuildMessageString();
AdtpBuildObjectTypeStrings();
AdtpBuildRegistryValueString();
AdtpBuildReplacementString();
AdtpBuildSidListString();
AdtpBuildSockAddrString();
AdtpBuildStringListString();
AdtpBuildUlongString();
AdtpBuildUserAccountControlString();
AdtpCleanupParameterAllocations();
AdtpDsGuidToString();
AdtpEtwBuildDashString();
AdtpEtwBuildString();
AdtpGetCategoryAndSubCategoryId();
AdtpInitializeAuditingCommon();
AdtpInitializeDriveLetters();
AdtpIsCorrectlyFormedUnicodeString();
AdtpLookupDriveLetter();
AdtpNormalizeAuditInfo();
AdtpObjsInitialize();
AdtpPackageParameters();
AdtpSubstituteDriveLetter();
AdtpWriteToEtw();
AhcAlloc();
AhcCacheQueryHwId();
AhcFreeUnicodeString();
AhcTracePrintf();
AlpcAddHandleTableEntry();
AlpcConnectionDeleteProcedure();
AlpcConnectionDestroyProcedure();
AlpcDeleteBlobByHandle();
AlpcGetHeaderSize();
AlpcGetMessageAttribute();
AlpcHandleDataDeleteProcedure();
AlpcHandleDataDestroyProcedure();
AlpcInitializeHandleTable();
AlpcInitializeMessageAttribute();
AlpcMessageDeleteProcedure();
AlpcMessageDestroyProcedure();
AlpcReferenceBlobByHandle();
AlpcRegionDeleteProcedure();
AlpcRegionDestroyProcedure();
AlpcRegisterLogRoutine();
AlpcReserveDeleteProcedure();
AlpcReserveDestroyProcedure();
AlpcSectionDeleteProcedure();
AlpcSectionDestroyProcedure();
AlpcSecurityDeleteProcedure();
AlpcSecurityDestroyProcedure();
AlpcUnregisterLogRoutine();
AlpcViewDeleteProcedure();
AlpcViewDestroyProcedure();
AlpciDestroyDeferredMessageContext();
AlpciSendDeferredMessageBeforeWait();
AlpcpAcceptConnectPort();
AlpcpAdjustCompletionListConcurrencyCount();
AlpcpAllocateBlob();
AlpcpAllocateBuffer();
AlpcpAllocateCompletionBuffer();
AlpcpAllocateCompletionPacketLookaside();
AlpcpAllocateFromBitmap();
AlpcpAllocateMessage();
AlpcpAllocateMessageFromExtendedTables();
AlpcpAllocateMessageFunction();
AlpcpAllocateMessageLog();
AlpcpAllocateSnapshotMessageLog();
AlpcpAssociateIoCompletionPort();
AlpcpCancelMessage();
AlpcpCancelMessagesByRequestor();
AlpcpCaptureAttributes();
AlpcpCaptureContextAttribute();
AlpcpCaptureHandleAttribute();
AlpcpCaptureHandleAttributeInternal();
AlpcpCaptureMessageData();
AlpcpCaptureMessageDataSafe();
AlpcpCaptureSecurityAttribute();
AlpcpCaptureSecurityAttributeInternal();
AlpcpCaptureViewAttribute();
AlpcpCaptureViewAttributeInternal();
AlpcpCheckConnectionSecurity();
AlpcpCleanupProcessViews();
AlpcpClosePort();
AlpcpCompleteDeferSignalRequest();
AlpcpCompleteDeferSignalRequestAndWait();
AlpcpCompleteDispatchMessage();
AlpcpConnectPort();
AlpcpCopyRequestData();
AlpcpCreateClientPort();
AlpcpCreateConnectionPort();
AlpcpCreateRegion();
AlpcpCreateReserve();
AlpcpCreateSection();
AlpcpCreateSectionView();
AlpcpCreateSecurityContext();
AlpcpCreateView();
AlpcpDeferredFreeCompletionPacketLookaside();
AlpcpDeleteBlob();
AlpcpDeletePort();
AlpcpDestroyBlob();
AlpcpDestroyPort();
AlpcpDisconnectPort();
AlpcpDispatchCloseMessage();
AlpcpDispatchConnectionRequest();
AlpcpDispatchNewMessage();
AlpcpDispatchReplyToPort();
AlpcpDispatchReplyToWaitingThread();
AlpcpDoPortCleanup();
AlpcpEndInitialization();
AlpcpEnterAllocationEventMessageLog();
AlpcpEnterFreeEventMessageLog();
AlpcpEnterStateChangeEventMessageLog();
AlpcpEnumerateResourcesPort();
AlpcpExposeAttributes();
AlpcpExposeHandleAttribute();
AlpcpExposeTokenAttribute();
AlpcpFlushCancelQueue();
AlpcpFlushMessagesByRequestor();
AlpcpFlushMessagesPort();
AlpcpFlushQueue();
AlpcpFlushResourcesPort();
AlpcpForceUnlinkSecureView();
AlpcpFormatConnectionRequest();
AlpcpFreeBitmap();
AlpcpFreeBuffer();
AlpcpFreeCompletionBuffer();
AlpcpFreeCompletionList();
AlpcpFreeCompletionPacketLookaside();
AlpcpFreeMessageFunction();
AlpcpGetDataFromUserVaSafe();
AlpcpGetEffectiveTokenMessage();
AlpcpGetPortNameInformation();
AlpcpImpersonateMessage();
AlpcpInitSystem();
AlpcpInitializeCompletionList();
AlpcpInitializeMessageLog();
AlpcpInitializePort();
AlpcpInsertCompletionListEntry();
AlpcpInvokeLogCallbacks();
AlpcpLocateMessageLog();
AlpcpLocateSectionView();
AlpcpLocateView();
AlpcpLockCommunicationInfoForReply();
AlpcpLogClosePort();
AlpcpLogConnectFail();
AlpcpLogConnectRequest();
AlpcpLogConnectSuccess();
AlpcpLogReceiveMessage();
AlpcpLogSendMessage();
AlpcpLogUnwait();
AlpcpLogWaitForNewMessage();
AlpcpLogWaitForReply();
AlpcpLookasidePacketCallbackRoutine();
AlpcpLookupMessage();
AlpcpMapLegacyPortRemoteView();
AlpcpMapLegacyPortView();
AlpcpOpenPort();
AlpcpPortQueryBasicInfo();
AlpcpPortQueryConnectedSidInfo();
AlpcpPortQueryServerInfo();
AlpcpPrepareViewForDelivery();
AlpcpProcessConnectionRequest();
AlpcpProcessSynchronousRequest();
AlpcpQueryRemoteView();
AlpcpQuerySidMessage();
AlpcpQuerySidToken();
AlpcpQueryTokenModifiedIdMessage();
AlpcpQueueIoCompletionPort();
AlpcpReadMessageData();
AlpcpReceiveLegacyConnectionReply();
AlpcpReceiveLegacyMessage();
AlpcpReceiveMessage();
AlpcpReceiveMessagePort();
AlpcpReceiveSynchronousReply();
AlpcpReceiveView();
AlpcpReferenceAndLockTargetPortsAndCommunicationInfo();
AlpcpReferenceConnectedPort();
AlpcpReferenceMessageByWaitingThread();
AlpcpReferenceMessageByWaitingThreadPort();
AlpcpReferenceMessageByWaitingThreadPortQueue();
AlpcpReferenceReplyTargetPorts();
AlpcpRegisterCompletionListDatabase();
AlpcpReleaseAttributes();
AlpcpReleaseMessageAttributesOnCancel();
AlpcpReplyLegacySynchronousRequest();
AlpcpRestoreWriteAccess();
AlpcpReturnMessageOnInsufficientBuffer();
AlpcpSendCloseMessage();
AlpcpSendLegacySynchronousRequest();
AlpcpSendMessage();
AlpcpSetOwnerProcessPort();
AlpcpSetupMessageDataForDeferredCopy();
AlpcpSignal();
AlpcpSignalAndWait();
AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo();
AlpcpUnregisterCompletionListDatabase();
AlpcpValidateAndSetPortAttributes();
AlpcpValidateDataInformation();
AlpcpViewSearchCallbackFunction();
AlpcpWaitForPortReferences();
AlpcpWalkConnectionList();
AnFwConfigureProgressResources();
AnFwDisableBackgroundUpdateTimer();
AnFwDisplayFade();
AnFwDisplayProgressIndicator();
AnFwFadeCompletion();
AnFwProgressIndicatorTransition();
AnFwpBackgroundUpdateTimer();
AnFwpDisableProgressTimer();
AnFwpFadeAnimationTimer();
AnFwpProgressAnimationManual();
AnFwpProgressIndicatorTimer();
ApiSetResolveToHost();
ApiSetpSearchForApiSet();
ApiSetpSearchForApiSetHost();
AppContainerPrivilegesEnabledExt();
ArbAddAllocation();
ArbAddInaccessibleAllocationRange();
ArbAddMmConfigRangeAsBootReserved();
ArbAddOrdering();
ArbAddReserved();
ArbAllocateEntry();
ArbArbiterHandler();
ArbBacktrackAllocation();
ArbBootAllocation();
ArbBuildAssignmentOrdering();
ArbCommitAllocation();
ArbFindSuitableRange();
ArbFreeOrderingList();
ArbGetNextAllocationRange();
ArbInitializeArbiterInstance();
ArbInitializeOrderingList();
ArbInitializeOsInaccessibleRange();
ArbInitializeRangeList();
ArbIsConflictWithMmConfigRange();
ArbOverrideConflict();
ArbPreprocessEntry();
ArbPruneOrdering();
ArbQueryArbitrate();
ArbQueryConflict();
ArbRetestAllocation();
ArbRollbackAllocation();
ArbShareDriverExclusive();
ArbStartArbiter();
ArbTestAllocation();
ArbpBuildAllocationStack();
ArbpBuildAlternative();
ArbpGetRegistryValue();
ArbpQueryConflictCallback();
ArbpUpdatePriority();
AuthzBasepAddAccessTypeList();
AuthzBasepAddSecurityAttribute();
AuthzBasepAddSecurityAttributeToLists();
AuthzBasepAddSecurityAttributeValueToLists();
AuthzBasepAddSecurityAttributeValues();
AuthzBasepAllocateSecurityAttribute();
AuthzBasepAllocateSecurityAttributeValue();
AuthzBasepCommitSecurityAttributeChanges();
AuthzBasepCompareFQBNOperands();
AuthzBasepCompareIntegerOperands();
AuthzBasepCompareLegacySecurityAttributesInformation();
AuthzBasepCompareOctetStringOperands();
AuthzBasepCompareSecurityAttribute();
AuthzBasepCompareSecurityAttributesInformation();
AuthzBasepCompareSigned();
AuthzBasepCompareUnicodeStringOperands();
AuthzBasepCompareUnsigned();
AuthzBasepConvertRelativeToAbsoluteTokenAttribute();
AuthzBasepCopyoutClaimAttributeValues();
AuthzBasepCopyoutClaimAttributes();
AuthzBasepCopyoutSecurityAttributeValues();
AuthzBasepCopyoutSecurityAttributes();
AuthzBasepDeleteAllSecurityAttributeValues();
AuthzBasepDeleteAllSecurityAttributes();
AuthzBasepDeleteSecurityAttribute();
AuthzBasepDeleteSecurityAttributeValues();
AuthzBasepDeviceMemberOf();
AuthzBasepDuplicateSecurityAttributes();
AuthzBasepEvaluateAceCondition();
AuthzBasepEvaluateAttribute();
AuthzBasepEvaluateExpression();
AuthzBasepEvaluateSetRelationship();
AuthzBasepFinaliseSecurityAttributesList();
AuthzBasepFindSecurityAttribute();
AuthzBasepFindSecurityAttributeValue();
AuthzBasepFreeSecurityAttributeValues();
AuthzBasepFreeSecurityAttributesList();
AuthzBasepGetClaimAttributeValueCopyoutBufferSize();
AuthzBasepGetClaimAttributesCopyoutBufferSize();
AuthzBasepGetConstantOperand();
AuthzBasepGetNextValue();
AuthzBasepGetOperandStringCaseForEvaluation();
AuthzBasepGetOperandTypeForEvaluation();
AuthzBasepGetSecurityAttributeValueCopyoutBufferSize();
AuthzBasepGetSecurityAttributesCopyoutBufferSize();
AuthzBasepInitializeResourceClaimsFromSacl();
AuthzBasepIsCompareRelevantAttribute();
AuthzBasepIsValidExpression();
AuthzBasepMemAlloc();
AuthzBasepMemFree();
AuthzBasepMemberOf();
AuthzBasepMergeAccessReasons();
AuthzBasepObjectInTypeList();
AuthzBasepOperandValueTypesCompatible();
AuthzBasepPopResult();
AuthzBasepPushResult();
AuthzBasepQueryClaimAttributesToken();
AuthzBasepQuerySecurityAttributeAndValues();
AuthzBasepQuerySecurityAttributesToken();
AuthzBasepRemoveSecurityAttributeFromLists();
AuthzBasepRemoveSecurityAttributeValueFromLists();
AuthzBasepReplaceSecurityAttribute();
AuthzBasepResetOperands();
AuthzBasepRestartOperandValueEnumeration();
AuthzBasepRollbackSecurityAttributeChanges();
AuthzBasepSecurityAttributePresent();
AuthzBasepSetAccessReasons();
AuthzBasepSetAppContainerAccessReasons();
AuthzBasepSetSecurityAttributesToken();
AuthzBasepSetTypeListAccessReasons();
AuthzBasepSupportSetOperation();
AuthzBasepUndeleteSecurityAttributeValue();
AuthzBasepUnicodeStringFromOperandValue();
AuthzBasepUpdateParentTypeList();
AuthzBasepValidateSecurityAttributes();
AuthzBasepValueInSet();
BBT_Exclude_Trap_Code_Begin();
BBT_Exclude_Trap_Code_End();
BCryptCloseAlgorithmProvider();
BCryptCreateHash();
BCryptDecrypt();
BCryptDestroyHash();
BCryptDestroyKey();
BCryptEncrypt();
BCryptFinishHash();
BCryptGenRandom();
BCryptGenerateSymmetricKey();
BCryptGetProperty();
BCryptHashData();
BCryptOpenAlgorithmProvider();
BCryptSetProperty();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeDeleteEx();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeFindSeperatorIndexEntry();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeInsert();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeInsertEx();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeIteratorFromSearchResult();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeMergeNodes();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeNewNode();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeNodeFindKey();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeNodeFree();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeRedistribute();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeSearchKey();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeSearchResultDeref();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeSearchResultInitEx();
B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL>::BTreeSplitChild();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeDeleteEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeDeleteNode();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeDescendToSibling();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeFindLeafSibling();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeFindLeafSiblingEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeFindNextEntry();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeFindSeperatorIndexEntry();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeInsertEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeIteratorAttachEx();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeIteratorCleanup();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeIteratorFromSearchResult();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeMergeNodes();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeNewNode();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeNodeFindKey();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeNodeFree();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeRedistribute();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeSearchKey();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeSearchResultDeref();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeSearchResultInit();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeSearchResultIterStart();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeSplitChild();
B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT>::BTreeWalkPostOrderInternal();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeChangeKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeDelete();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeDeleteEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeDeleteNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeDescendToSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeFindLeafSibling();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeFindLeafSiblingEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeFindPreviousEntry();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeFindSeperatorIndexEntry();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeInsert();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeInsertEx();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeIteratorCleanup();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeIteratorFromSearchResult();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeMergeNodes();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeNewNode();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeNodeFindKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeNodeFree();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeRedistribute();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeSearchKey();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeSearchResultDeref();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeSearchResultInit();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeSplitChild();
B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT>::BTreeWalkPostOrderInternal();
BapdRecordFirmwareBootStats();
BapdRegisterSiData();
BapdWriteEtwEvents();
BapdpGetTotalLogSize();
BapdpIsTime1MoreRecentThanTime2();
BapdpProcessBootMetadata();
BapdpProcessBootVhdSqm();
BapdpProcessEDrvHintInfo();
BapdpProcessEtwEvents();
BapdpProcessFwUpdateResults();
BapdpProcessLogResults();
BapdpProcessResumeInformation();
BapdpProcessSecureBootPolicy();
BapdpProcessSiData();
BapdpProcessWmdResults();
BapdpQueryData();
BapdpRegisterBootVhdSqm();
BapdpRegisterEDrvHintInfo();
BapdpRegisterFwUpdateResults();
BapdpRegisterResumeInformation();
BapdpRegisterWmdResult();
BapdpSqmAddToStream();
BapdpWriteEventDataToRegistry();
BcdCloseObject();
BcdCloseStore();
BcdCreateObject();
BcdDeleteElement();
BcdDeleteObject();
BcdEnumerateObjects();
BcdFlushStore();
BcdForciblyUnloadStore();
BcdGetElementData();
BcdGetElementDataWithFlags();
BcdInitializeBcdSyncMutant();
BcdOpenObject();
BcdOpenSystemStore();
BcdQueryObject();
BcdSetElementData();
BcdSetElementDataWithFlags();
BcpConvertBugDataToString();
BcpConvertProgressToString();
BcpCursorLessThan();
BcpDisplayCriticalCharacter();
BcpDisplayCriticalString();
BcpDisplayEarlyBugCheckScreen();
BcpDisplayErrorInformation();
BcpDisplayProgress();
BcpFindMessage();
BcpGetCharacterMaxResourceProfile();
BcpGetDisplayType();
BcpGetMaxResourceProfile();
BcpGetMessageOffsets();
BcpGetProgressMessages();
BcpPrintSpaces();
BcpSanitizeDriverName();
BcpSetCursorPosition();
BcpTicksToMicroseconds();
BgConsoleDestroyInterface();
BgConsoleGetInterface();
BgDisplayBackgroundUpdate();
BgDisplayFade();
BgDisplayProgressIndicator();
BgDisplayString();
BgFreeContext();
BgGetContext();
BgLibraryDestroy();
BgLibraryDisable();
BgLibraryEnable();
BgLibraryInitialize();
BgMarkHiberPhase();
BgQueryBootGraphicsInformation();
BgkAcquireDisplayOwnership();
BgkDestroy();
BgkDisplayBackgroundUpdate();
BgkDisplayCharacter();
BgkDisplayProgressIndicator();
BgkDisplayString();
BgkDisplayStringEx();
BgkDrawText();
BgkGetConsoleState();
BgkGetCursorState();
BgkInitialize();
BgkNotifyDisplayOwnershipChange();
BgkNotifyDisplayOwnershipLost();
BgkQueryBootGraphicsInformation();
BgkResumeFinished();
BgkResumeInitialize();
BgkResumePrepare();
BgkResumeProgressTransition();
BgkSetCursor();
BgkSetDisplayOwnership();
BgkSetTextColor();
BgkSolidColorFill();
BgkpLockBgfxCodeSection();
BgkpResetDisplay();
BgkpUnlockBgfxCodeSection();
BgkpVgaBltRoutine();
BgpBcInitializeCriticalMode();
BgpClearScreen();
BgpConsoleClearScreen();
BgpConsoleClearScreenEx();
BgpConsoleDisplayCharacter();
BgpConsoleDisplayCharacterEx();
BgpConsoleDisplayString();
BgpConsoleDrawCursor();
BgpConsoleGetCursorState();
BgpConsoleGetState();
BgpConsoleInitialize();
BgpConsoleScrollScreen();
BgpConsoleSetCursor();
BgpConsoleSetPointSize();
BgpConsoleSetTextColor();
BgpDisplayCharacter();
BgpDisplayCharacterDestroyContext();
BgpDisplayCharacterEx();
BgpDisplayCharacterGetContext();
BgpFmRoundDefault();
BgpFmRoundUp();
BgpFmScale();
BgpFmSqrt();
BgpFoDestroy();
BgpFoDetermineFontInformation();
BgpFoGetAdvanceWidth();
BgpFoGetFontHandle();
BgpFoGetStringAdvanceWidth();
BgpFoGetTextMetrics();
BgpFoInitialize();
BgpFwAcquireLock();
BgpFwAllocateMemory();
BgpFwDisplayBugCheckProgressUpdate();
BgpFwDisplayBugCheckScreen();
BgpFwFreeMemory();
BgpFwGetCurrentIrql();
BgpFwInitializeLock();
BgpFwInitializeReservePool();
BgpFwLibraryDestroy();
BgpFwLibraryDisable();
BgpFwLibraryEnable();
BgpFwLibraryInitialize();
BgpFwMarkHiberPhase();
BgpFwQueryBootGraphicsInformation();
BgpFwQueryPerformanceCounter();
BgpFwReleaseLock();
BgpFwReserveAllocate();
BgpFwReserveFree();
BgpFwReservePoolSwap();
BgpGetBitsPerPixel();
BgpGetResolution();
BgpGxBlendColor();
BgpGxBlendRectangle();
BgpGxConvertRectangle();
BgpGxCopyBitmapToRectangle();
BgpGxCopyRectangle();
BgpGxDrawBitmapImage();
BgpGxDrawRectangle();
BgpGxFillRectangle();
BgpGxFindSubRectangle();
BgpGxInitializeRectangle();
BgpGxMarkClean();
BgpGxParseBitmap();
BgpGxReadRectangle();
BgpGxRectangleCreate();
BgpGxRectangleDestroy();
BgpGxRectangleSize();
BgpGxReservePoolRectangleSize();
BgpRasGetGlyphAdvanceWidth();
BgpRasGetGlyphTextCellDimensions();
BgpRasInitializeRasterizer();
BgpRasPrintGlyph();
BgpTxtAdjustStaticRegion();
BgpTxtClearRegion();
BgpTxtCreateRegion();
BgpTxtDestroyRegion();
BgpTxtDisplayCharacter();
BgpTxtDisplayString();
BgpTxtGetRegionContext();
BgpTxtRegionSize();
BiAcquireBcdSyncMutant();
BiAcquirePrivilege();
BiAddBootEntry();
BiAddBootEntryToEfiBootManagerDisplayOrder();
BiAddBootEntryToNvramDisplayOrder();
BiAddStoreFromFile();
BiAdjustPrivilege();
BiAreBootEntriesEqual();
BiBindEfiBootManager();
BiBindEfiEntries();
BiBindEfiEntryToBcdObject();
BiBindEfiNamespaceObjects();
BiBuildIdentifierList();
BiCleanupLoadedStores();
BiCloseKey();
BiCloseStore();
BiConvertBootEnvironmentDeviceToElement();
BiConvertBootEnvironmentDeviceToNt();
BiConvertBootEnvironmentDeviceToQualifiedPartition();
BiConvertBootEnvironmentDeviceToUnknown();
BiConvertElementFormatToValueType();
BiConvertElementToRegistryData();
BiConvertNtDeviceToBootEnvironment();
BiConvertNtFilePathToBootEnvironment();
BiConvertQualifiedPartitionToBootEnvironment();
BiConvertRegistryDataToElement();
BiCreateBootEntry();
BiCreateEfiEntry();
BiCreateFileDeviceElement();
BiCreateKey();
BiCreateKeySecurityDescriptor();
BiCreateMergedBootEntry();
BiCreateObject();
BiCreatePartitionDevice();
BiDeleteBootEntry();
BiDeleteEfiVariable();
BiDeleteKey();
BiDeleteRegistryValue();
BiDoesHiveExist();
BiDoesHiveKeyExist();
BiEnumerateBootEntries();
BiEnumerateSubKeys();
BiExportBcdObjects();
BiExportEfiBootManager();
BiExportStoreAlterationsToEfi();
BiExportStoreAlterationsToFirmware();
BiFreeIdentifierList();
BiGetAliasedIdentifier();
BiGetDefaultBootEntryIdentifier();
BiGetDeviceFromEfiPath();
BiGetDriveLayoutBlock();
BiGetDriveLayoutInformation();
BiGetElement();
BiGetFilePathFromEfiPath();
BiGetFirmwareType();
BiGetKeyName();
BiGetNtPartitionPath();
BiGetObjectDescription();
BiGetObjectIdentifier();
BiGetObjectReferenceFromEfiEntry();
BiGetPartitionInformation();
BiGetPartitionVhdFilePath();
BiGetPhysicalDriveName();
BiGetRegistryValue();
BiGetSavedBootEntry();
BiGetSystemPartition();
BiGetSystemStorePath();
BiGetVolumeDiskExtentsInformation();
BiHandleFirmwareDefaultEntry();
BiIsEnumerateMatch();
BiIsImpersonating();
BiIsObjectAliased();
BiIsPortableWorkspaceBoot();
BiIsSystemStore();
BiIsValidObject();
BiIsVolumePartitionInformationRetained();
BiIsWinPEBoot();
BiIsWindowsEfiEntry();
BiIssueGetDriveLayoutIoctl();
BiLoadHive();
BiLoadSystemStore();
BiLookupObjectByBootEntry();
BiLookupObjectByIdentifier();
BiLookupObjectByIdentifierAndBootEntry();
BiMarkTreatAsSystemStore();
BiModifyBootEntry();
BiOpenKey();
BiOpenKeyNonBcd();
BiOpenSystemStore();
BiQueryBootEntryOrder();
BiQueryBootOptions();
BiReleaseBcdSyncMutant();
BiReleasePrivilege();
BiResolveLocateDevice();
BiRevertToSelf();
BiSaveFirmwareVariable();
BiSetBootEntryOrder();
BiSetBootOptions();
BiSetObjectDescription();
BiSetRegistryValue();
BiTranslateBootEntryId();
BiTranslateBootOrder();
BiTranslateDisplayOrder();
BiTranslateFilePath();
BiTranslateObjectIdentifier();
BiTranslateSymbolicLink();
BiTranslateSymbolicLinkFile();
BiUnloadHiveByHandle();
BiUnloadHiveByName();
BiUpdateBcdObject();
BiUpdateEfiEntry();
BiUpdateObjectReferenceInEfiEntry();
BiVerifyBootPartition();
BootApplicationPersistentDataInitialize();
BootApplicationPersistentDataProcess();
BuildQueryDirectoryIrp();
BvgaAcquireDisplayOwnership();
BvgaAcquireLock();
BvgaBitBlt();
BvgaCheckDisplayOwnership();
BvgaDisplayString();
BvgaDriverInitialize();
BvgaEnableBootDriver();
BvgaGetDisplayState();
BvgaGetResourceAddress();
BvgaIndicateProgress();
BvgaIsBootDriverInstalled();
BvgaNotifyDisplayOwnershipChange();
BvgaNotifyDisplayOwnershipLost();
BvgaReleaseLock();
BvgaReleaseResources();
BvgaResetDisplay();
BvgaSaveResources();
BvgaSetDisplayOwnership();
BvgaSetProgressBarSubset();
BvgaSetScrollRegion();
BvgaSetTextColor();
BvgaSolidColorFill();
BvgaUpdateProgressBar();
CMFAllocFn();
CMFCheckAccess();
CMFCreateSecurityDescriptor();
CMFFlushHitsFile();
CMFFreeFn();
CMFGetFileSizeEx();
CMFGetLargePageSectionSize();
CMFReadCompressedSegment();
CMFRegisterEventTime();
CMFSystemThreadRoutine();
CMFUnmapModules();
CanComposeHangul();
CcAcquireByteRangeForWrite();
CcAddDirtyPagesToExternalCache();
CcAdjustCurrentThresholdWrtTop();
CcAdjustThrottle();
CcAdjustVacbLevelLockCount();
CcAdjustWriteBehindThreadPool();
CcAdjustWriteBehindThreadPoolIfNeeded();
CcAllocateInitializeBcb();
CcAllocateInitializeMbcb();
CcAllocateInitializeVacbArray();
CcAllocateObcb();
CcAllocateVacbLevels();
CcApplyLowIoPriorityToThread();
CcBoostLowPriorityWorkerThread();
CcBuildUpHighPriorityMappings();
CcCalculatePagesToWrite();
CcCalculateVacbLevelLockCount();
CcCanIWrite();
CcCanIWriteStream();
CcCanReuseVacb();
CcCancelMmWaitForUninitializeCacheMap();
CcChangeBackingFileObject();
CcChargeThreadForReadAhead();
CcCoalescingCallBack();
CcCoherencyFlushAndPurgeCache();
CcComputeNextScanTime();
CcCopyBytesToUserBuffer();
CcCopyRead();
CcCopyReadEx();
CcCopyReadExceptionFilter();
CcCopyWrite();
CcCopyWriteEx();
CcCopyWriteWontFlush();
CcCreateVacbArray();
CcDeallocateBcb();
CcDeductDirtyPagesFromExternalCache();
CcDeferWrite();
CcDeleteBcbs();
CcDeleteMbcb();
CcDeleteSharedCacheMap();
CcDereferenceFileOffset();
CcDereferenceVacbArray();
CcExceptionFilter();
CcExtendVacbArray();
CcFastCopyRead();
CcFastCopyWrite();
CcFetchDataForRead();
CcFindBcb();
CcFindBitmapRangeToClean();
CcFindBitmapRangeToDirty();
CcFindNextWorkQueueEntry();
CcFlushCache();
CcFlushCachePriv();
CcFlushCacheToLsn();
CcFreeUnusedVacbLevels();
CcFreeVacbArray();
CcFreeVirtualAddress();
CcGetBcbListHead();
CcGetBcbListHeadLargeOffset();
CcGetDirtyPages();
CcGetFileObjectFromBcb();
CcGetFileObjectFromSectionPtrs();
CcGetFileObjectFromSectionPtrsRef();
CcGetFirstVacbArrayWithReference();
CcGetFlushedValidData();
CcGetLsnForFileObject();
CcGetRandomVacbArrayWithReference();
CcGetVacbFromFreeList();
CcGetVacbLargeOffset();
CcGetVacbMiss();
CcGetVirtualAddress();
CcGetVirtualAddressIfMapped();
CcIncrementWriteBehindPriority();
CcInitializeCacheManager();
CcInitializeCacheMap();
CcInitializeProcessor();
CcInitializeVacbs();
CcInitializeVolumeCacheMap();
CcInsertVacbArray();
CcIsLazyWriteScanQueued();
CcIsThereDirtyData();
CcIsThereDirtyDataEx();
CcIsThereDirtyLoggedPages();
CcIsWriteBehindThreadpoolAtLowPriority();
CcLazyWriteScan();
CcLogExtraWBThreadAction();
CcMapAndCopyFromCache();
CcMapAndCopyInToCache();
CcMapAndRead();
CcMapData();
CcMapDataCommon();
CcMapDataForOverwrite();
CcMdlRead();
CcMdlReadComplete();
CcMdlReadComplete2();
CcMdlWriteAbort();
CcMdlWriteComplete();
CcMdlWriteComplete2();
CcMmLogLostDelayedWriteError();
CcNotifyExternalCaches();
CcNotifyOfMappedWrite();
CcNotifyOfMappedWriteComplete();
CcNotifyWriteBehind();
CcOkToAddWriteBehindThread();
CcPerfLogCanWriteFail();
CcPerfLogExtraWBThreadAction();
CcPerfLogFlushCache();
CcPerfLogFlushSection();
CcPerfLogLazyWriteScan();
CcPerfLogLoggedStreamsStats();
CcPerfLogReadAhead();
CcPerfLogReadAheadPrefetch();
CcPerfLogScheduleReadAhead();
CcPerfLogVolumeLogHandleInfo();
CcPerfLogWorkItemComplete();
CcPerfLogWorkItemDequeue();
CcPerfLogWorkItemEnqueue();
CcPerformReadAhead();
CcPinFileData();
CcPinMappedData();
CcPinRead();
CcPostDeferredWrites();
CcPostWorkQueue();
CcPrepareMdlWrite();
CcPreparePinWrite();
CcPurgeAndClearCacheSection();
CcPurgeCacheSection();
CcQueueLazyWriteScanThread();
CcReEngageWorkerThreads();
CcRecalculateVacbArrayHighwaterMark();
CcReferenceFileOffset();
CcReferenceSharedCacheMapByVacb();
CcReferenceVacbArray();
CcRegisterExternalCache();
CcReleaseByteRangeFromWrite();
CcRemapBcb();
CcRemoveVacbArray();
CcRepinBcb();
CcRescheduleLazyWriteScan();
CcScanDpc();
CcScanLogHandleList();
CcScheduleLazyWriteScan();
CcScheduleReadAhead();
CcScheduleReadAheadEx();
CcSetAdditionalCacheAttributes();
CcSetAdditionalCacheAttributesEx();
CcSetBcbOwnerPointer();
CcSetDirtyInMask();
CcSetDirtyPageThreshold();
CcSetDirtyPinnedData();
CcSetFileSizes();
CcSetFileSizesEx();
CcSetLazyWriteScanQueued();
CcSetLogHandleForFile();
CcSetLogHandleForFileEx();
CcSetLoggedDataThreshold();
CcSetParallelFlushFile();
CcSetReadAheadGranularity();
CcSetReadAheadGranularityEx();
CcSetVacbInFreeList();
CcSetVacbIntoList();
CcSetVacbLargeOffset();
CcSetValidData();
CcShouldLazyWriteCacheMap();
CcSlowReferenceSharedCacheMapFileObject();
CcTestControl();
CcUninitializeCacheMap();
CcUninitializeVolumeCacheMap();
CcUnmapAndPurge();
CcUnmapFileOffsetFromSystemCache();
CcUnmapInactiveViews();
CcUnmapVacb();
CcUnmapVacbArray();
CcUnpinData();
CcUnpinDataForThread();
CcUnpinFileDataEx();
CcUnpinRepinnedBcb();
CcUnregisterExternalCache();
CcUpdateReadHistory();
CcUpdateSharedCacheMapFlag();
CcUpdateTimeOnLogHandles();
CcWaitForCurrentLazyWriterActivity();
CcWaitForUninitializeCacheMap();
CcWorkerThread();
CcWriteBehind();
CcWriteBehindInternal();
CcZeroData();
CcZeroDataInCache();
CcZeroDataOnDisk();
CcZeroEndOfLastPage();
CheckEip();
CheckEsp();
CheckOneBitValidFlag();
ChkSum();
CmAddLogForAction();
CmBootLastKnownGood();
CmCallbackGetKeyObjectID();
CmCallbackGetKeyObjectIDEx();
CmCallbackReleaseKeyObjectIDEx();
CmCheckNoTxContext();
CmCheckRegistry();
CmCloseRmHandle();
CmCloseTmHandle();
CmCompleteInitMachineConfig();
CmCompressKey();
CmConvertHandleToKernelHandle();
CmCreateKey();
CmDeleteKey();
CmDeleteKeyRecursive();
CmDeleteValueKey();
CmDrainDelayKCBQueues();
CmDumpKey();
CmEnumerateKey();
CmEnumerateValueKey();
CmEnumerateValueKeyFromMergedView();
CmEqualTrans();
CmEtwRunDown();
CmFreezeRegistry();
CmGetBoundTransaction();
CmGetCallbackVersion();
CmGetKCBCacheSecurity();
CmGetKeyFlags();
CmGetKeyLastWriteTime();
CmGetSystemControlValues();
CmGetSystemDriverList();
CmGetVisibleMaxNameLenAndClassLen();
CmGetVisibleMaxValueNameLenAndDataLen();
CmGetVisibleSubkeyCount();
CmGetVisibleValueCount();
CmInitSystem1();
CmInitializeProcessor();
CmIsLastKnownGoodBoot();
CmKeyBodyNeedsVirtualImage();
CmKeyBodyRemapToVirtual();
CmKeyBodyRemapToVirtualForEnum();
CmKeyBodyReplicateToVirtual();
CmKtmNotification();
CmListGetNextElement();
CmListGetPrevElement();
CmLoadAppKey();
CmLoadKey();
CmLockHive();
CmLockHiveSecurityExclusive();
CmLockKcbForWrite();
CmLogTmRmAction();
CmMoveKey();
CmNotifyRunDown();
CmObReferenceObjectByHandle();
CmObliterateRMTxArray();
CmOpenKey();
CmPostCallbackNotification();
CmQueryKey();
CmQueryMultipleValueKey();
CmQueryRegistryQuotaInformation();
CmQueryValueKey();
CmRealKCBToVirtualPath();
CmReconcileAndValidateAllHives();
CmReferenceKtmTransaction();
CmRegisterCallback();
CmRegisterCallbackEx();
CmRegisterSystemHiveLimitCallback();
CmReleaseLoadKeyContext();
CmRenameKey();
CmReplaceKey();
CmRestoreKey();
CmRmFinalizeRecovery();
CmRmIsKCBDeleted();
CmRmIsKCBVisible();
CmSaveKey();
CmSaveMergedKeys();
CmSelectQualifiedInstallLanguage();
CmSetAcpiHwProfile();
CmSetCallbackObjectContext();
CmSetInitMachineConfig();
CmSetKeyFlags();
CmSetLastWriteTimeKey();
CmSetLazyFlushState();
CmSetRegistryQuotaInformation();
CmSetValueKey();
CmShutdownCmRM();
CmShutdownSystem();
CmSnapshotRMTxArray();
CmThawRegistry();
CmTmCreateEnlistment();
CmUnRegisterCallback();
CmUnloadKey();
CmUnloadKeyEx();
CmUnlockHive();
CmUnlockHiveSecurity();
CmVirtualKCBToRealPath();
CmWorkerEngineDequeueWorkItem();
CmWorkerEngineQueueWorkItem();
CmpAccountForLogReservation();
CmpAddAcpiAliasEntry();
CmpAddAliasEntry();
CmpAddDockingInfo();
CmpAddDriverToList();
CmpAddInfoAfterParseFailure();
CmpAddKeyHashToEntry();
CmpAddProcessorConfigurationEntry();
CmpAddRemoveContainerToCLFSLog();
CmpAddRemoveRMLogContainer();
CmpAddSecurityCellToCache();
CmpAddStringToMapping();
CmpAddSubKey();
CmpAddSubKeyEx();
CmpAddToDelayedClose();
CmpAddToDelayedDeref();
CmpAddToHiveFileList();
CmpAddToLeaf();
CmpAddValueKeyNew();
CmpAddValueToList();
CmpAddValueToListEx();
CmpAdjustSecurityCacheSize();
CmpAdminSystemSecurityDescriptor();
CmpAllocate();
CmpAllocateExtraHashInfo();
CmpAllocateKeyControlBlock();
CmpAllocatePostBlock();
CmpAllocateUnitOfWork();
CmpAppendLine();
CmpAppendSection();
CmpAppendValue();
CmpArmDelayedCloseTimer();
CmpArmLazyWriter();
CmpAssignSecurityDescriptor();
CmpAssignSecurityDescriptorWrapper();
CmpAssignSecurityToKcb();
CmpBecomeActiveFlusherAndReconciler();
CmpBindHiveToTrans();
CmpBlockHiveWrites();
CmpBlockTwoHiveWrites();
CmpBoostActiveHiveWriter();
CmpBuildAdminInformation();
CmpBuildHashStackAndLookupCache();
CmpBuildRegMultiSz();
CmpBuildVirtualReplicationStack();
CmpCallCallBacks();
CmpCallbackFetchCallContext();
CmpCallbackFillObjectContext();
CmpCanGrowHive();
CmpCancelBootDisabledFlush();
CmpCancelSubordinatePost();
CmpCheckAdminAccess();
CmpCheckAndFixSecurityCellsRefcount();
CmpCheckCreateAccess();
CmpCheckKey();
CmpCheckKeyAccess();
CmpCheckKeyBodyAccess();
CmpCheckLeaf();
CmpCheckLexicographicalOrder();
CmpCheckNotifyAccess();
CmpCheckRegistry2();
CmpCheckSecurityCellAccess();
CmpCheckValueList();
CmpCheckWrpKeyAccess();
CmpClaimGlobalQuota();
CmpCleanUpKCBCacheTable();
CmpCleanUpKcbCacheWithLock();
CmpCleanUpKcbValueCache();
CmpCleanUpSubKeyInfo();
CmpCleanupTransactionState();
CmpClearKeyAccessBits();
CmpCloneHwProfile();
CmpCloneKCBValueListForTrans();
CmpCloseKeyObject();
CmpCmdHiveClose();
CmpCmdHiveOpen();
CmpCmdInit();
CmpCmdRenameHive();
CmpCoalescingCallback();
CmpCommitAddKeyUoW();
CmpCommitDeleteKeyUoW();
CmpCommitDeleteValueKeyUoW();
CmpCommitRenameKeyUoW();
CmpCommitSetSecurityUoW();
CmpCommitSetValueKeyUoW();
CmpCompareCompressedName();
CmpCompareInIndex();
CmpCompareKeysByName();
CmpCompareNewValueDataAgainstKCBCache();
CmpCompareTwoCompressedNames();
CmpCompareUnicodeString();
CmpCompleteFlushAndPurgeIrp();
CmpCompleteLazyWrite();
CmpComputeHashKey();
CmpComputeHashKeyForCompressedName();
CmpComputeHashValue();
CmpComputeKcbConvKey();
CmpComputeLogFillLevel();
CmpConfigureProcessors();
CmpConstructName();
CmpConvertLangId();
CmpCopyCell();
CmpCopyCompressedName();
CmpCopyKeyPartial();
CmpCopyName();
CmpCopySaclToVirtualKey();
CmpCopySyncTree();
CmpCopySyncTree2();
CmpCopyValue();
CmpCreateControlSet();
CmpCreateEmptyKey();
CmpCreateEvent();
CmpCreateHwProfileFriendlyName();
CmpCreateKeyControlBlock();
CmpCreateLinkNode();
CmpCreateObjectTypes();
CmpCreatePerfKeys();
CmpCreatePredefined();
CmpCreateRegistryRoot();
CmpCreateRootNode();
CmpCreateTemporaryHive();
CmpDelayCloseWorker();
CmpDelayDerefKCBTimerRoutine();
CmpDelayDerefKCBWorker();
CmpDelayDerefKeyControlBlock();
CmpDelayFreeCmRm();
CmpDelayFreeRMDpcRoutine();
CmpDelayFreeRMWorker();
CmpDelayedDerefKeys();
CmpDeleteHive();
CmpDeleteKcbCache();
CmpDeleteKeyObject();
CmpDeleteTree();
CmpDereferenceHive();
CmpDereferenceKeyControlBlock();
CmpDereferenceKeyControlBlockWithLock();
CmpDereferenceNameControlBlockWithLock();
CmpDestroyHive();
CmpDestroySecurityCache();
CmpDestroyTemporaryHive();
CmpDisableLazyFlush();
CmpDiskFullWarning();
CmpDiskFullWarningWorker();
CmpDoAccessCheckOnKCB();
CmpDoAccessCheckOnSubtree();
CmpDoBuildVirtualStack();
CmpDoCompareKeyName();
CmpDoCreate();
CmpDoCreateChild();
CmpDoFileSetSize();
CmpDoFileWrite();
CmpDoFindSubKeyByNumber();
CmpDoFlushAll();
CmpDoFlushNextHive();
CmpDoOpen();
CmpDoQueueLateUnloadWorker();
CmpDoQueueSystemHiveHysteresis();
CmpDoReDoCreateKey();
CmpDoReDoDeleteKey();
CmpDoReDoDeleteValue();
CmpDoReDoRecord();
CmpDoReDoRenameKey();
CmpDoReDoSetKeyUserFlags();
CmpDoReDoSetLastWriteTime();
CmpDoReDoSetSecurityDescriptor();
CmpDoReDoSetValueExisting();
CmpDoReDoSetValueNew();
CmpDoReOpenTransKey();
CmpDoReadTxRBigLogRecord();
CmpDoReconcileNextHive();
CmpDoSort();
CmpDummyApc();
CmpDumpKeyBodyList();
CmpDumpOneKeyBody();
CmpDuplicateIndex();
CmpDuplicateKey();
CmpEnableLazyFlush();
CmpEnableLazyFlushDpcRoutine();
CmpEtwDumpKcb();
CmpEtwReleaseHivePath();
CmpExamineSaclForAuditEvent();
CmpFatalFilter();
CmpFileFlush();
CmpFileFlushAndPurge();
CmpFileRead();
CmpFileSetSize();
CmpFileWrite();
CmpFilterAcpiDockingState();
CmpFindACPITable();
CmpFindCellInIndex();
CmpFindControlSet();
CmpFindDrivers();
CmpFindGroupOrderList();
CmpFindKeyNameAtIndex();
CmpFindMatchingDescriptorCell();
CmpFindNameInList();
CmpFindNameInListWithStatus();
CmpFindPathByName();
CmpFindRSDTTable();
CmpFindSecurityCellCacheIndex();
CmpFindSubKeyByName();
CmpFindSubKeyByNameWithStatus();
CmpFindSubKeyByNumber();
CmpFindSubKeyByNumberFromMergedView();
CmpFindSubKeyInLeaf();
CmpFindSubKeyInLeafWithStatus();
CmpFindSubKeyInRoot();
CmpFindSubkeyInHashByChildCell();
CmpFindTagIndex();
CmpFindValueByName();
CmpFindValueByNameFromCache();
CmpFinishBeingActiveFlusherAndReconciler();
CmpFinishSystemHivesLoad();
CmpFireCleanupNotifications();
CmpFlushBackupHive();
CmpFlushHive();
CmpFlushNotifiesOnKeyBodyList();
CmpFlushNotify();
CmpForceFlushWorker();
CmpFree();
CmpFreeAllMemory();
CmpFreeBootRegistry();
CmpFreeCallbackObjectContexts();
CmpFreeDriverList();
CmpFreeExtraHashInfo();
CmpFreeKeyBody();
CmpFreeKeyByCell();
CmpFreeKeyControlBlock();
CmpFreeKeyValues();
CmpFreeLineList();
CmpFreeOffsetArray();
CmpFreePostBlock();
CmpFreeSectionList();
CmpFreeSecurityDescriptor();
CmpFreeSubordinatePost();
CmpFreeUnitOfWork();
CmpFreeValue();
CmpFreeValueData();
CmpFreezeThawDpcRoutine();
CmpFreezeThawWorker();
CmpGenerateAppHiveSecurityDescriptor();
CmpGenerateFlushControlData();
CmpGetAcpiBiosInformation();
CmpGetAcpiBiosVersion();
CmpGetAcpiProfileInformation();
CmpGetBiosDate();
CmpGetBiosVersion();
CmpGetBootValueData();
CmpGetCallbackObjectContext();
CmpGetCmHiveFromVirtualPath();
CmpGetConvKeyAtIndex();
CmpGetIndexElementSize();
CmpGetKeyName();
CmpGetLastHive();
CmpGetMappingHiveForString();
CmpGetNameControlBlock();
CmpGetNextActiveHive();
CmpGetNextHive();
CmpGetNextName();
CmpGetRegistryValue();
CmpGetSectionLength();
CmpGetSectionLineIndex();
CmpGetSectionLineIndexValueCount();
CmpGetSymbolicLink();
CmpGetToken();
CmpGetValueData();
CmpGetValueDataFromCache();
CmpGetValueForAudit();
CmpGetValueKeyFromCache();
CmpGetValueListFromCache();
CmpGetVirtualStoreRoot();
CmpGetVirtualizationID();
CmpGetVirtualizationIDFromFullVirtualPath();
CmpGetVolumeClusterSize();
CmpGetVolumeClusterSizeCompletion();
CmpHiveRootSecurityDescriptor();
CmpHwprofileDefaultSelect();
CmpIncrementCachedSecurityRefcount();
CmpInitBackupHive();
CmpInitCallbacks();
CmpInitCmPrivateAlloc();
CmpInitCmRM();
CmpInitDelayDerefKCBEngine();
CmpInitGlobalQuotaAllowed();
CmpInitHiveFromFile();
CmpInitSIDToHiveMapping();
CmpInitSecurityCache();
CmpInitializeDelayedCloseTable();
CmpInitializeFreezeThaw();
CmpInitializeHardwareConfiguration();
CmpInitializeHive();
CmpInitializeKcbCache();
CmpInitializeKeyNameString();
CmpInitializeLazyWriters();
CmpInitializeMachineDependentConfiguration();
CmpInitializeNameCache();
CmpInitializePreloadedHive();
CmpInitializePreloadedHives();
CmpInitializeRegistryNames();
CmpInitializeRegistryNode();
CmpInitializeSystemBiosInformation();
CmpInitializeSystemHive();
CmpInitializeSystemHivesLoad();
CmpInitializeTransactions();
CmpInitializeTrustedInstallerSid();
CmpInitializeValueNameString();
CmpInsertCallbackInListByAltitude();
CmpInsertKeyHash();
CmpInsertKeyHashToDeletedKcbTable();
CmpInsertSecurityCellList();
CmpInterlockedFunction();
CmpIsCmRm();
CmpIsHiveAlreadyLoaded();
CmpIsHiveBoundToTrans();
CmpIsHiveEligibleForLazyReconcile();
CmpIsHiveLoadingOnOtherThread();
CmpIsKcbLockAllowed();
CmpIsKcbLockedExclusive();
CmpIsLoadType();
CmpIsLockAllowedByIndex();
CmpIsMasterHive();
CmpIsSystemEntity();
CmpIsThisSameFile();
CmpKcbCacheLookup();
CmpKeyInfoProbeAlingment();
CmpLateUnloadHiveWorker();
CmpLazyCommitDpcRoutine();
CmpLazyCommitWorker();
CmpLazyFlushDpcRoutine();
CmpLazyWriteWorker();
CmpLinkHiveToMaster();
CmpLinkKeyToHive();
CmpLoadHiveThread();
CmpLoadHiveVolatile();
CmpLoadKeyCommon();
CmpLoadServicesNode();
CmpLockAppHiveLoadList();
CmpLockCallbackListExclusive();
CmpLockCallbackListShared();
CmpLockContextListExclusive();
CmpLockContextListShared();
CmpLockDeletedHashEntryExclusiveByKcb();
CmpLockHashEntryByIndexExclusive();
CmpLockHashEntryByIndexShared();
CmpLockHashEntryExclusive();
CmpLockHashEntryExclusiveByKcb();
CmpLockHashEntryShared();
CmpLockHiveFlusherExclusive();
CmpLockHiveFlusherShared();
CmpLockHiveListExclusive();
CmpLockHiveWriter();
CmpLockIXLockExclusive();
CmpLockIXLockIntent();
CmpLockKcbExclusive();
CmpLockKcbShared();
CmpLockNameHashEntryExclusive();
CmpLockRegistry();
CmpLockRegistryExclusive();
CmpLockRegistryFreezeAware();
CmpLockTableAdd();
CmpLockTableConvertSharedToExclusive();
CmpLockTableRemove();
CmpLockTwoKcbsExclusive();
CmpLockTwoKcbsShared();
CmpLockTwoSecurityCachesExclusiveShared();
CmpLogCheckpoint();
CmpLogClearAccessBitsEvent();
CmpLogDirtyVectorUse();
CmpLogEvent();
CmpLogHiveDestroyEvent();
CmpLogHiveInitializeEvent();
CmpLogHiveLinkEvent();
CmpLogHiveRundownEvent();
CmpLogNotificationRegister();
CmpLogReorganizeEvent();
CmpLogTxrInitEvent();
CmpLogUnload();
CmpMarkCurrentProfileDirty();
CmpMarkCurrentValueDirty();
CmpMarkIndexDirty();
CmpMarkKcbDeleted();
CmpMarkKcbDeletedAndCache();
CmpMarkKeyDirty();
CmpMarkKeyParentDirty();
CmpMarkKeyValuesDirty();
CmpMarkValueDataDirty();
CmpMergeKeyValues();
CmpMigrateOOBELanguageToInstallationLanguage();
CmpMountPreloadedHives();
CmpMoveBiosAliasTable();
CmpNameFromAttributes();
CmpNameSize();
CmpNotifyChangeKey();
CmpNotifyTriggerCheck();
CmpOKToFollowLink();
CmpOpenFileWithExtremePrejudice();
CmpOpenHiveFile();
CmpParseCacheAddHive();
CmpParseCacheAddSymbolicLink();
CmpParseCacheAllocEntry();
CmpParseCacheAllocTable();
CmpParseCacheClose();
CmpParseCacheComputeRegHashKey();
CmpParseCacheDeleteEntry();
CmpParseCacheFreeTable();
CmpParseCacheHashByHash();
CmpParseCacheInit();
CmpParseCacheInsertEntry();
CmpParseCacheLockExclusive();
CmpParseCacheLookup();
CmpParseCacheRemoveEntry();
CmpParseCacheRemoveHive();
CmpParseCacheUnlock();
CmpParseInfBuffer();
CmpParseKey();
CmpPostApc();
CmpPostApcRunDown();
CmpPostNotify();
CmpPreserveSystemHiveData();
CmpProcessForSimpleStringSub();
CmpProtectPool();
CmpPublishEventForPcaResolver();
CmpQueryFileSecurityDescriptor();
CmpQueryKeyData();
CmpQueryKeyDataFromCache();
CmpQueryKeyDataFromNode();
CmpQueryKeyName();
CmpQueryKeyValueData();
CmpQueryNameString();
CmpQueueLazyCommitWorker();
CmpQuitNextHive();
CmpQuotaWarningWorker();
CmpRealignLogBuffers();
CmpRebuildKcbCache();
CmpRecordUnloadEventForHive();
CmpRecoverEnlistment();
CmpReferenceEffectiveToken();
CmpReferenceHive();
CmpReferenceKeyControlBlock();
CmpReferenceKeyControlBlockUnsafe();
CmpRefreshHive();
CmpRefreshParent();
CmpRefreshWorkerRoutine();
CmpRegisterCallbackInternal();
CmpRehashKcbSubtree();
CmpReleaseGlobalQuota();
CmpReleaseWriteQueue();
CmpRemoveCellFromIndex();
CmpRemoveFromDelayedClose();
CmpRemoveFromDelayedDeref();
CmpRemoveFromHiveFileList();
CmpRemoveFromSecurityCache();
CmpRemoveHiveFromMapping();
CmpRemoveKeyControlBlock();
CmpRemoveKeyHash();
CmpRemoveKeyHashFromDeletedKcbTable();
CmpRemoveSecurityCellList();
CmpRemoveSubKey();
CmpRemoveSubKeyCellNoCellRef();
CmpRemoveValueFromList();
CmpReorganizeHive();
CmpReparseToVirtualPath();
CmpReplicateKeyToVirtual();
CmpReportAuditVirtualizationEvent();
CmpReportNotify();
CmpReportNotifyHelper();
CmpRmAnalysisPhase();
CmpRmReDoPhase();
CmpRmRecover();
CmpRmUnDoPhase();
CmpRollbackTransactionArray();
CmpRunDownCmRM();
CmpRunDownDelayDerefKCBEngine();
CmpRundownUnitOfWork();
CmpSaveBootControlSet();
CmpSaveKeyByFileCopy();
CmpSearchAddTrans();
CmpSearchForOpenSubKeys();
CmpSearchForTrans();
CmpSearchKCBForTransChildByName();
CmpSearchKeyControlBlockTree();
CmpSearchLineInSectionByIndex();
CmpSearchSectionByName();
CmpSearchValueInLine();
CmpSecConvKey();
CmpSecurityMethod();
CmpSelectLeaf();
CmpSetConvKeyAtIndex();
CmpSetGlobalQuotaAllowed();
CmpSetIoPriorityThread();
CmpSetNetworkValue();
CmpSetPriorityThread();
CmpSetSecurityDescriptorInfo();
CmpSetSystemBiosInformation();
CmpSetSystemValues();
CmpSetValueDataExisting();
CmpSetValueDataNew();
CmpSetValueKeyExisting();
CmpSetValueKeyNew();
CmpSetVersionData();
CmpSetVideoBiosInformation();
CmpSetupConfigurationTree();
CmpSignalDeferredPosts();
CmpSignalUnloadEventArrayForHive();
CmpSnapshotHiveToOffsetArray();
CmpSnapshotKCBSecurity();
CmpSnapshotTxOwnerArray();
CmpSortByTag();
CmpSortDriverList();
CmpSplitLeaf();
CmpStartCLFSLog();
CmpStartRMLog();
CmpStartRMLogs();
CmpStopRMLog();
CmpSyncKcbCacheForHive();
CmpSyncKeyValues();
CmpSyncNextBackupHive();
CmpSyncSubKeysAfterDelete();
CmpSystemHiveHysteresisWorker();
CmpSystemQuotaWarningWorker();
CmpTraceHiveFlushBoostedActiveFlusher();
CmpTraceHiveFlushFinishWaitForActive();
CmpTraceHiveFlushStartWaitForActive();
CmpTraceHiveFlushWroteLogFile();
CmpTraceHiveFlushWrotePrimaryFile();
CmpTraceHiveLoadStart();
CmpTraceHiveLoadStop();
CmpTraceHiveMountBaseFileMounted();
CmpTraceHiveMountLogEntryApplied();
CmpTraceHiveMountStart();
CmpTraceHiveMountStop();
CmpTraceHiveRestoreStart();
CmpTraceHiveRestoreStop();
CmpTraceHiveSaveFileCopied();
CmpTraceHiveSaveFileWritten();
CmpTraceHiveSaveStart();
CmpTraceHiveSaveStop();
CmpTraceHiveSaveTreeCopied();
CmpTraceHiveUnloadStart();
CmpTraceHiveUnloadStop();
CmpTraceShutdownFlushStart();
CmpTraceShutdownFlushStop();
CmpTraceShutdownRundownComplete();
CmpTraceShutdownStart();
CmpTraceShutdownStop();
CmpTransMgrCommit();
CmpTransMgrCommitUoW();
CmpTransMgrFreeVolatileData();
CmpTransMgrPrepare();
CmpTransMgrRollback();
CmpTransMgrSyncHive();
CmpTransWriteLog();
CmpTrimHive();
CmpTryAcquireIXLockIntent();
CmpTryConvertKcbLockSharedToExclusive();
CmpTryToLockHashEntryByIndexExclusive();
CmpTryToRundownHive();
CmpUnblockHiveWrites();
CmpUnblockTwoHiveWrites();
CmpUndoDeleteKeyForTrans();
CmpUnlockAndLockKcbs();
CmpUnlockAppHiveLoadList();
CmpUnlockCallbackList();
CmpUnlockContextList();
CmpUnlockDeletedHashEntryByKcb();
CmpUnlockHashEntry();
CmpUnlockHashEntryByIndex();
CmpUnlockHashEntryByKcb();
CmpUnlockHiveFlusher();
CmpUnlockHiveList();
CmpUnlockHiveWriter();
CmpUnlockKcb();
CmpUnlockNameHashEntry();
CmpUnlockRegistry();
CmpUnlockTwoKcbs();
CmpUnlockTwoSecurityCaches();
CmpUpdateGlobalQuotaAllowed();
CmpUpdateKeyNodeAccessBits();
CmpUpdateKeyNodeAccessBitsFlushNotHeld();
CmpUpdateParentForEachSon();
CmpUpdatePhaseAccessBit();
CmpUpdateReorganizeRegistryValues();
CmpUpdateSystemHiveHysteresis();
CmpUpgradeKcbLockToExclusive();
CmpUserPresenceCallback();
CmpUuidCreate();
CmpVEExecuteParseLogic();
CmpValidateGlobalFlushControlFlags();
CmpValidateHiveSecurityDescriptors();
CmpValueToData();
CmpVirtualBranchIsReplicated();
CmpVirtualPathPresent();
CmpWaitForHiveMount();
CmpWaitForLateUnloadWorker();
CmpWaitOnHiveWriteQueue();
CmpWalkPath();
CmpWorkerEngineWorker();
CmpWriteOffsetArrayToFile();
CompareFileTimeType();
CompareLangIDs();
CompareLangName();
CompareNamesCaseSensitive();
CompareObjectTypes();
CompareUnicodeStrings();
ComposeHangulLV();
ComposeHangulLVT();
ComputeNameLength();
ComputeUnicodeNameLength();
ConstraintEval();
ConsumerGetBuffer();
ConsumerPeekAndConsumeBuffer();
ConvertDevpropcompkeyToString();
ConvertDevpropertyToString();
CountUTF8ToUnicode();
CountUnicodeToUTF8();
CpDoesPortExist();
CpGetByte();
CpInitialize();
CpPutByte();
CpReadLsr();
CpSetBaud();
CreateFileInfo();
CreateMiniNtBootKey();
CreateSystemRootLink();
CsToLinear();
DECREMENT_ADAPTER_CHANNELS();
DECREMENT_COMMON_BUFFERS();
DECREMENT_SCATTER_GATHER_LISTS();
DaysAndFractionToTime();
DbgBreakPoint();
DbgBreakPointWithStatus();
DbgCommandString();
DbgLoadImageSymbols();
DbgLoadImageSymbolsUnicode();
DbgLoadUserImageSymbols();
DbgPrint();
DbgPrintEx();
DbgPrintReturnControlC();
DbgPrompt();
DbgQueryDebugFilterState();
DbgSetDebugFilterState();
DbgSetDebugPrintCallback();
DbgUnLoadImageSymbols();
DbgUnLoadImageSymbolsUnicode();
DbgUnicodeStringToAnsiString();
DbgUserBreakPoint();
DbgkCaptureLiveDump();
DbgkCaptureLiveKernelDump();
DbgkClearProcessDebugObject();
DbgkCopyProcessDebugPort();
DbgkCreateMinimalThread();
DbgkCreateThread();
DbgkExitProcess();
DbgkExitThread();
DbgkFlushErrorPort();
DbgkForwardException();
DbgkInitialize();
DbgkLkmdRegisterCallback();
DbgkLkmdUnregisterCallback();
DbgkMapViewOfSection();
DbgkOpenProcessDebugPort();
DbgkRegisterErrorPort();
DbgkSendSystemDllMessages();
DbgkUnMapViewOfSection();
DbgkWerAddSecondaryData();
DbgkWerCaptureLiveKernelDump();
DbgkWerInitialize();
DbgkpCloseObject();
DbgkpConvertKernelToUserStateChange();
DbgkpCreateNotificationEvent();
DbgkpDeleteErrorPort();
DbgkpDeleteObject();
DbgkpFreeDebugEvent();
DbgkpInitializePhase0();
DbgkpInitializePhase1();
DbgkpLkmdFireCallbacks();
DbgkpLkmdIsMemoryBlockPresentFromCallback();
DbgkpLkmdLaunchSnapApc();
DbgkpLkmdSnapData();
DbgkpLkmdSnapDataEx();
DbgkpLkmdSnapGlobals();
DbgkpLkmdSnapKernelStack();
DbgkpLkmdSnapKernelStackSegmentCallback();
DbgkpLkmdSnapObject();
DbgkpLkmdSnapPendingIrps();
DbgkpLkmdSnapThread();
DbgkpLkmdSnapThreadApc();
DbgkpLkmdSnapThreadInContext();
DbgkpLkmdSqmIncrementDword();
DbgkpLkmdSqmIsOptedIn();
DbgkpLkmdSqmStatus();
DbgkpMarkProcessPeb();
DbgkpOpenHandles();
DbgkpPostFakeProcessCreateMessages();
DbgkpPostFakeThreadMessages();
DbgkpPostModuleMessages();
DbgkpQueueMessage();
DbgkpRemoveErrorPort();
DbgkpResumeProcess();
DbgkpSectionToFileHandle();
DbgkpSendApiMessage();
DbgkpSendApiMessageLpc();
DbgkpSendErrorMessage();
DbgkpSetProcessDebugObject();
DbgkpStartSystemErrorHandler();
DbgkpSuppressDbgMsg();
DbgkpSuspendProcess();
DbgkpTriageDumpCheckPresentHashTable();
DbgkpTriageDumpFillHeaders();
DbgkpTriageDumpInitialize();
DbgkpTriageDumpIsMemoryBlockPresent();
DbgkpTriageDumpRestoreState();
DbgkpTriageDumpSaveState();
DbgkpTriageDumpSnapData();
DbgkpTriageDumpWrite();
DbgkpWakeTarget();
DbgkpWerAllocateNonpagedPool();
DbgkpWerAllocatePool();
DbgkpWerCaptureLiveFullDump();
DbgkpWerCaptureLiveTriageDump();
DbgkpWerCleanupContext();
DbgkpWerDeferredWriteRoutine();
DbgkpWerFreePool();
DbgkpWerInitializeDeferredLiveDump();
DbgkpWerInvokeCallbacks();
DbgkpWerProcessPolicyResult();
DbgkpWerUpdateTriageDumpHeader();
DbgkpWerWriteSecondaryData();
DbgkpWerWriteTriageDump();
DbgpInsertDebugPrintCallback();
DbgpRemoveDebugPrintCallback();
DebugPrint();
DebugPrompt();
DebugService();
DeleteNodeFromTree();
DelistKeyBodyFromKCB();
DisplayBootBitmap();
DisplayFilter();
DownLevelGetParentLanguageName();
DownLevelLangIDToLanguageName();
DownLevelLanguageNameToLangID();
Dr_FastCallDrSave();
Dr_kcb_a();
Dr_kids_a();
Dr_kira_a();
Dr_kirscf_a();
Dr_kit0_a();
Dr_kit10_a();
Dr_kit11_a();
Dr_kit13_a();
Dr_kit1_a();
Dr_kit3_a();
Dr_kit4_a();
Dr_kit5_a();
Dr_kit6_a();
Dr_kit7_a();
Dr_kit9_a();
Dr_kita_a();
Dr_kitb_a();
Dr_kitc_a();
Dr_kitd_a();
Dr_kite_a();
Dr_kitf_a();
Dr_kitx_a();
Dr_kss_a();
Dr_kui_a();
DrvDbAcquireDatabaseNodeBaseKey();
DrvDbBuildDeviceIdDriverInfMatch();
DrvDbCreateDatabaseNode();
DrvDbCreateDeviceId();
DrvDbCreateDriverFile();
DrvDbCreateDriverInfFile();
DrvDbCreateDriverPackage();
DrvDbDeleteObjectRegKey();
DrvDbDeleteObjectSubKey();
DrvDbDestroyDatabaseNode();
DrvDbDispatchDeviceId();
DrvDbDispatchDriverDatabase();
DrvDbDispatchDriverFile();
DrvDbDispatchDriverInfFile();
DrvDbDispatchDriverPackage();
DrvDbFindDatabaseNode();
DrvDbGetCompositeMappedPropertyKeys();
DrvDbGetDeviceIdDriverInfMatches();
DrvDbGetDeviceIdMappedProperty();
DrvDbGetDeviceIdMappedPropertyKeys();
DrvDbGetDriverDatabaseList();
DrvDbGetDriverDatabaseMappedProperty();
DrvDbGetDriverDatabaseMappedPropertyKeys();
DrvDbGetDriverFileMappedProperty();
DrvDbGetDriverFileMappedPropertyKeys();
DrvDbGetDriverInfFileMappedProperty();
DrvDbGetDriverInfFileMappedPropertyKeys();
DrvDbGetDriverPackageMappedProperty();
DrvDbGetDriverPackageMappedPropertyKeys();
DrvDbGetDriverPackageSignerName();
DrvDbGetDriverPackageSignerScore();
DrvDbGetObjectDatabaseNode();
DrvDbGetObjectList();
DrvDbGetObjectSubKeyCallback();
DrvDbGetObjectSubKeyList();
DrvDbGetRegValueMappedProperty();
DrvDbGetRegValueMappedPropertyKeys();
DrvDbGetSecurityDescriptor();
DrvDbInitializeDatabaseNodeVersion();
DrvDbLoadDatabaseNode();
DrvDbOpenContext();
DrvDbOpenDriverDatabaseRegKey();
DrvDbOpenObjectRegKey();
DrvDbRegisterDatabase();
DrvDbRegisterObjects();
DrvDbReleaseDatabaseNodeBaseKey();
DrvDbSelectDatabase();
DrvDbSetDeviceIdDriverInfMatches();
DrvDbSetDeviceIdMappedProperty();
DrvDbSetDriverDatabaseMappedProperty();
DrvDbSetDriverFileMappedProperty();
DrvDbSetDriverInfFileMappedProperty();
DrvDbSetDriverPackageMappedProperty();
DrvDbSetRegValueMappedProperty();
DrvDbSplitDeviceIdDriverInfMatch();
DrvDbUnloadDatabaseNode();
DrvDbValidateDeviceIdName();
DrvDbValidateDriverDatabaseName();
DrvDbValidateDriverFileName();
DrvDbValidateDriverInfFileName();
DrvDbValidateDriverPackageName();
ElapsedDaysToYears();
EmClientQueryRuleState();
EmClientRuleDeregisterNotification();
EmClientRuleEvaluate();
EmClientRuleRegisterNotification();
EmCpuMatchCallback();
EmFalseCallback();
EmInitSystem();
EmMatchDate();
EmPowerPagingEnabled();
EmProviderDeregister();
EmProviderDeregisterEntry();
EmProviderRegister();
EmProviderRegisterEntry();
EmRegisterBuiltinRulesWithEM();
EmRemoveBadS3PagesCallback();
EmSystemArchitectureCallback();
EmTrueCallback();
EmpAcquirePagingReference();
EmpCacheBiosDate();
EmpCheckOperator();
EmpClientRuleRegisterNotification();
EmpCreateRuleParserStack();
EmpEvaluateNodeLink();
EmpEvaluateParseNodeMapping();
EmpEvaluatePermuteRuleEntries();
EmpEvaluateTargetRule();
EmpEvaluateUpdateRuleEvalState();
EmpInfParseGetGuidFromName();
EmpInfParseGetSectionLineCount();
EmpInfParseGetStringIndexFromName();
EmpInfParseGetValueFromSectionAndKeyName();
EmpInfParseSearchDependencyList();
EmpMapPhysicalAddress();
EmpParseCallbacks();
EmpParseEntryTypes();
EmpParseInfDatabase();
EmpParseRuleExpression();
EmpParseRuleTerm();
EmpParseRuleTermArgMapping();
EmpParseRules();
EmpParseStrings();
EmpParseTargetRuleStringIndexList();
EmpParseTargetRules();
EmpProviderDeregisterEntry();
EmpProviderRegister();
EmpQueueRuleUpdateState();
EmpReleasePagingReference();
EmpRuleParserStackPop();
EmpRuleParserStackPush();
EmpRuleUpdateWorkerThread();
EmpSearchCallbackDatabase();
EmpSearchEntryDatabase();
EmpSearchRuleDatabase();
EmpSearchTargetRuleList();
EmpUpdateRuleState();
EnlightenedSwapContext();
EnlightenedSwapContext_Fxrstor();
EnlightenedSwapContext_Fxsave();
EnlightenedSwapContext_NoNpxLoad();
EnlightenedSwapContext_NoNpxSave();
EnlightenedSwapContext_Xrstor();
EnlightenedSwapContext_Xsave();
EnlightenedSwapContext_Xsaveopt();
EnlistKeyBodyWithKCB();
EtwActivityIdControl();
EtwActivityIdControlKernel();
EtwAdjustTraceBuffers();
EtwDeleteProcessor();
EtwDereferenceSpinLockCounters();
EtwEnableTrace();
EtwEventEnabled();
EtwExitProcess();
EtwGetKernelTraceTimestamp();
EtwGetNotifyRoutine();
EtwGetProcessorBuffer();
EtwGetProviderIdFromHandle();
EtwInitialize();
EtwInitializeProcessor();
EtwKernelMemoryRundown();
EtwLogPfnInfoRundown();
EtwProviderEnabled();
EtwQueryPerformanceTraceInformation();
EtwQueryTraceHandleByLoggerName();
EtwReferenceSpinLockCounters();
EtwRegister();
EtwRegisterClassicProvider();
EtwRegisterCounters();
EtwSendTraceBuffer();
EtwSetPerformanceTraceInformation();
EtwShutdown();
EtwTraceAntiStarvationBoost();
EtwTraceAutoBoostClearFloor();
EtwTraceAutoBoostEntryExhaustion();
EtwTraceAutoBoostSetFloor();
EtwTraceContextSwap();
EtwTraceDequeueWork();
EtwTraceDpcEnqueueEvent();
EtwTraceDuplicateHandle();
EtwTraceEnqueueWork();
EtwTraceEvent();
EtwTraceFreezeThawProcess();
EtwTraceInswapProcess();
EtwTraceIoTimerEvent();
EtwTraceKernelEvent();
EtwTraceMemoryAcg();
EtwTraceObject();
EtwTraceObjectOperation();
EtwTracePageFault();
EtwTracePool();
EtwTracePriority();
EtwTraceProcess();
EtwTraceProcessTerminate();
EtwTraceReadyThread();
EtwTraceSystemTimeChange();
EtwTraceThread();
EtwTraceThreadAffinity();
EtwTraceThreadWorkItem();
EtwTraceTimedEvent();
EtwTraceWakeCounter();
EtwTraceWakeEvent();
EtwTraceWorkingSetSwap();
EtwUnregister();
EtwUnregisterCounters();
EtwWmitraceWorker();
EtwWrite();
EtwWriteEndScenario();
EtwWriteErrorLogEntry();
EtwWriteEx();
EtwWriteKMSecurityEvent();
EtwWriteStartScenario();
EtwWriteString();
EtwWriteTransfer();
EtwpAccessCheck();
EtwpAcquireLoggerContext();
EtwpAcquireLoggerContextByLoggerId();
EtwpAcquireLoggerContextByLoggerName();
EtwpAddBinaryInfoEvents();
EtwpAddDataSource();
EtwpAddDebugInfoEvents();
EtwpAddEventToBuffer();
EtwpAddGuidEntry();
EtwpAddKmRegEntry();
EtwpAddLogHeader();
EtwpAddNotificationEvent();
EtwpAddProviderToSession();
EtwpAddReplyIndex();
EtwpAddUmRegEntry();
EtwpAddWinRtProviderToSession();
EtwpAdjustFreeBuffers();
EtwpAdjustTraceBuffers();
EtwpAllocDataBlock();
EtwpAllocGuidEntry();
EtwpAllocateFreeBuffers();
EtwpAllocatePayloadFilterData();
EtwpAllocatePmcData();
EtwpAllocateStringFilterData();
EtwpAllocateTimeStampIndex();
EtwpAllocateTraceBufferPool();
EtwpApplyEventIdPayloadFilter();
EtwpApplyEventIdPayloadFilterOnUserEvent();
EtwpApplyExeFilter();
EtwpApplyPackageIdFilter();
EtwpApplyPayloadFilterInternal();
EtwpApplyScopeFilters();
EtwpApplyStackWalkFilter();
EtwpApplyStackWalkFilterOnUserEvent();
EtwpBufferingModeFlush();
EtwpBugCheckMultiPartCallback();
EtwpBuildNotificationPacket();
EtwpBuildProcessEvent();
EtwpCCSwapDeleteProcessor();
EtwpCCSwapInitializeProcessor();
EtwpCCSwapStart();
EtwpCCSwapStop();
EtwpCCSwapTrace();
EtwpCapturePreviousRegistryData();
EtwpCaptureRegistryData();
EtwpCaptureString();
EtwpCheckForPoolTagFilterExtension();
EtwpCheckForStackTracingExtension();
EtwpCheckGuidAccess();
EtwpCheckGuidAccessAndDoRundown();
EtwpCheckLoggerAccessAndDoRundown();
EtwpCheckLoggerControlAccess();
EtwpCheckNotificationAccess();
EtwpCheckPoolTagFilters();
EtwpCheckProviderLoggingAccess();
EtwpCheckSystemTraceAccess();
EtwpClockSourceRunDown();
EtwpCloseRealTimeConnectionObject();
EtwpCloseRegistrationObject();
EtwpCompleteBuffer();
EtwpComputeRegEntryEnableInfo();
EtwpCopySchematizedFilters();
EtwpCreateActivityId();
EtwpCreateDirectoryFile();
EtwpCreateLogFile();
EtwpCreateNtFileName();
EtwpCreatePerfectHashFunction();
EtwpCreateUmReplyObject();
EtwpCrimsonProvEnableCallback();
EtwpCrimsonStackWalkApc();
EtwpDelayCreate();
EtwpDeleteRealTimeConnectionObject();
EtwpDeleteRegistrationObject();
EtwpDequeueFreeBuffer();
EtwpDereferenceLoggerSecurityDescriptor();
EtwpDereferenceStackEntry();
EtwpDisableKernelTrace();
EtwpDisableTraceProviders();
EtwpDisassociateConsumer();
EtwpDiskProvTraceDisk();
EtwpEnableAutoLoggerProviders();
EtwpEnableDisableSpecialGuids();
EtwpEnableDisableUMGL();
EtwpEnableGuid();
EtwpEnableKernelTrace();
EtwpEnableKeyProviders();
EtwpEnableStackCaching();
EtwpEnableTrace();
EtwpEnqueueFreeBuffer();
EtwpEnqueueOverflowBuffer();
EtwpEnumerateAddressSpace();
EtwpEnumerateTraceGuids();
EtwpEnumerateWorkingSet();
EtwpEventTracingCounterSetCallback();
EtwpEventWriteFull();
EtwpEventWriteTemplateAdmin();
EtwpEventWriteTemplateBackingFile();
EtwpEventWriteTemplateMaxFileSize();
EtwpEventWriteTemplateSessAndProv();
EtwpEventWriteTemplateSession();
EtwpEventWriteTemplateSessionEnd();
EtwpExecutiveResourceConfigRunDown();
EtwpExpandFileName();
EtwpFailLogging();
EtwpFileProvTrace();
EtwpFillPerfectHashTable();
EtwpFinalizeHeader();
EtwpFindAndLockBufferForFlushing();
EtwpFindDebugId();
EtwpFindGuidEntryByGuid();
EtwpFindUserBufferSpace();
EtwpFlushActiveBuffers();
EtwpFlushBuffer();
EtwpFlushBufferToLogfile();
EtwpFlushBufferToRealtime();
EtwpFlushTrace();
EtwpFreeFilterInfo();
EtwpFreeGuidEntry();
EtwpFreeLoggerContext();
EtwpFreePmcData();
EtwpFreeSecurityDescriptor();
EtwpFreeStackCache();
EtwpFreeSystemLoggerIndex();
EtwpFreeTraceBufferPool();
EtwpFreeUserBufferSpace();
EtwpGenerateFileName();
EtwpGetAutoLoggerProviderFilter();
EtwpGetCycleCount();
EtwpGetDirectMappingCount();
EtwpGetFlagExtension();
EtwpGetGuidSecurityDescriptor();
EtwpGetImageSize();
EtwpGetLoggerInfoFromContext();
EtwpGetMaxDebugIdBufferSize();
EtwpGetMaxNonPagedPoolUsage();
EtwpGetNextEventOffsetType();
EtwpGetNextGuidEntry();
EtwpGetPerfCounter();
EtwpGetPsmKeyExtendedHeaderItem();
EtwpGetSchematizedFilterSize();
EtwpGetScsiPassThroughCdb();
EtwpGetSecurityDescriptorByGuid();
EtwpGetSidExtendedHeaderItem();
EtwpGetStackExtendedHeaderItem();
EtwpGetSystemTime();
EtwpGetTraceGuidInfo();
EtwpGetTraceGuidList();
EtwpGetTrackingLockSlotForThread();
EtwpInitLoggerContext();
EtwpInitialize();
EtwpInitializeActivityIdSeed();
EtwpInitializeAutoLoggers();
EtwpInitializeBufferHeader();
EtwpInitializeLoggerSecurityDescriptor();
EtwpInitializeProviderInfoBuffer();
EtwpInitializeRealTimeConnection();
EtwpInitializeRegistration();
EtwpInitializeSecurity();
EtwpInitializeStackTracing();
EtwpInitializeTimeStamp();
EtwpIsCaptureStateAllowed();
EtwpIsRealtimeLogfileSpaceAvailable();
EtwpKernelProvEnableCallback();
EtwpKernelTraceRundown();
EtwpLockStackCacheBucket();
EtwpLockUnlockBufferList();
EtwpLogAlwaysPresentRundown();
EtwpLogFileNameRundown();
EtwpLogGroupMask();
EtwpLogKernelEvent();
EtwpLogKernelTraceRundown();
EtwpLogMemInfo();
EtwpLogMemInfoDpc();
EtwpLogMemInfoRundown();
EtwpLogMemInfoWs();
EtwpLogPmcCounterRundown();
EtwpLogProcessPerfCtrs();
EtwpLogRefSetAutoMark();
EtwpLogRegistryEvent();
EtwpLogSessionWorkingSetInfo();
EtwpLogSystemEventUnsafe();
EtwpLogTxREvent();
EtwpLogger();
EtwpLoggerDpc();
EtwpLookupLoggerIdByName();
EtwpMapEnableFlags();
EtwpNetProvTraceNetwork();
EtwpNotifyGuid();
EtwpObjectHandleEnumCallback();
EtwpObjectHandleRundown();
EtwpObjectTypeRundown();
EtwpOpenConsumer();
EtwpOpenRealTimeConnectionObject();
EtwpOpenRegistrationObject();
EtwpParsePoolTagFilter();
EtwpPerfMemInfoWork();
EtwpPerfectHashFunctionSearch();
EtwpPmcInterrupt();
EtwpPmcProfileInit();
EtwpPoolRunDown();
EtwpPowerStateCallback();
EtwpPrepareDirtyBuffer();
EtwpPrepareHeader();
EtwpPrepareWmitraceLoggerInfo();
EtwpProcessEnumCallback();
EtwpProcessPerfCtrsRundown();
EtwpProcessThreadImageRundown();
EtwpProcessorRundown();
EtwpProfileInterrupt();
EtwpProviderArrivalCallback();
EtwpPsProvTraceImage();
EtwpPsProvTracePriority();
EtwpPsProvTraceProcess();
EtwpPsProvTraceThread();
EtwpQueryPsmKey();
EtwpQueryReferenceTime();
EtwpQueryRegistryCallback();
EtwpQueryTrace();
EtwpQueueNotification();
EtwpQueuePerfMemInfoWorkItem();
EtwpQueueReply();
EtwpQueueStackWalkApc();
EtwpQueueStackWalkDpc();
EtwpRealtimeConnect();
EtwpRealtimeCreateLogfile();
EtwpRealtimeDeliverBuffer();
EtwpRealtimeDisconnectAllConsumers();
EtwpRealtimeDisconnectConsumer();
EtwpRealtimeDisconnectConsumerByHandle();
EtwpRealtimeFlushSavedBuffers();
EtwpRealtimeInjectEtwBuffer();
EtwpRealtimeNotifyConsumers();
EtwpRealtimeResetReferenceTime();
EtwpRealtimeRestoreBuffer();
EtwpRealtimeRestoreState();
EtwpRealtimeSaveBuffer();
EtwpRealtimeSaveState();
EtwpRealtimeSendEmptyMarker();
EtwpRealtimeUpdateConsumers();
EtwpRealtimeUpdateReferenceTime();
EtwpRealtimeZeroTruncateLogfile();
EtwpReceiveNotification();
EtwpReceiveReplyDataBlock();
EtwpReferenceGuidEntry();
EtwpReferenceLoggerSecurityDescriptor();
EtwpRegTraceCallback();
EtwpRegTraceEnableCallback();
EtwpRegisterProvider();
EtwpRegisterSecurityProvider();
EtwpRegisterUMGuid();
EtwpReleaseLoggerContext();
EtwpReleaseQueueEntry();
EtwpRequestFlushTimer();
EtwpReserveTraceBuffer();
EtwpReserveWithPebsIndex();
EtwpReserveWithPmcCounters();
EtwpResetBufferHeader();
EtwpRundownNotifications();
EtwpSampledProfileRunDown();
EtwpSendBufferToDebugger();
EtwpSendDataBlock();
EtwpSendDbgId();
EtwpSendReplyDataBlock();
EtwpSendSessionNotification();
EtwpSendTraceEvent();
EtwpSetMark();
EtwpSetPmcProfileSource();
EtwpShutdownConsumers();
EtwpSpinLockConfigRunDown();
EtwpStackRundown();
EtwpStackTraceDispatcher();
EtwpStackWalkApc();
EtwpStackWalkDpc();
EtwpStartAutoLogger();
EtwpStartLogger();
EtwpStartTrace();
EtwpStopLoggerInstance();
EtwpStopTrace();
EtwpSwitchBuffer();
EtwpSynchronizationDpc();
EtwpSynchronizeWithLogger();
EtwpSysModuleRunDown();
EtwpSystemImageEnumCallback();
EtwpSystemTraceWdf();
EtwpThreadEnumCallback();
EtwpThreadRundownApc();
EtwpTimeProfileInit();
EtwpTraceALPC();
EtwpTraceCachedStack();
EtwpTraceDebugPrint();
EtwpTraceFileIo();
EtwpTraceFileName();
EtwpTraceFltIo();
EtwpTraceFltTimedIo();
EtwpTraceHandle();
EtwpTraceImageRundown();
EtwpTraceIo();
EtwpTraceIoInit();
EtwpTraceKernelEventWithFilter();
EtwpTraceLostEvent();
EtwpTraceMessageVa();
EtwpTraceNetwork();
EtwpTraceOpticalIo();
EtwpTraceOpticalIoInit();
EtwpTraceProcessRundown();
EtwpTraceRegistry();
EtwpTraceRegistryTransaction();
EtwpTraceSplitIo();
EtwpTraceStackKey();
EtwpTraceStackWalk();
EtwpTraceSystemInitialization();
EtwpTraceSystemShutdown();
EtwpTraceThreadRundown();
EtwpTraceThreadRundownWithStack();
EtwpTraceWdf();
EtwpTracingProvEnableCallback();
EtwpTrackProviderBinary();
EtwpUMGLEnabled();
EtwpUnreferenceDataBlock();
EtwpUnreferenceGuidEntry();
EtwpUpdateEnableMask();
EtwpUpdateFileHeader();
EtwpUpdateFileInfoDriverState();
EtwpUpdateFilterData();
EtwpUpdateGroupMasks();
EtwpUpdateGuidEnableInfo();
EtwpUpdateKernelGroupMasks();
EtwpUpdateKernelGroupsWork();
EtwpUpdateLoggerGroupMasks();
EtwpUpdateLoggerSecurityDescriptor();
EtwpUpdatePayloadFilterData();
EtwpUpdatePerProcessTracing();
EtwpUpdatePerfectHashFunction();
EtwpUpdatePidFilterData();
EtwpUpdatePmcCounters();
EtwpUpdatePmcEvents();
EtwpUpdateProcessTracingCallback();
EtwpUpdateSchematizedFilterData();
EtwpUpdateStackTracing();
EtwpUpdateStringFilterData();
EtwpUpdateTagFilter();
EtwpUpdateTrace();
EtwpValidateEnableNotification();
EtwpValidateFilterDescriptors();
EtwpValidateFlagExtension();
EtwpValidateLoggerInfo();
EtwpValidatePayloadFilter();
EtwpValidateUserModeLoggerInfo();
EtwpWaitForBufferReferenceCount();
EtwpWriteUserEvent();
ExAcquireCacheAwarePushLockExclusive();
ExAcquireCacheAwarePushLockExclusiveEx();
ExAcquireCacheAwarePushLockSharedEx();
ExAcquireFastMutex();
ExAcquireFastMutexUnsafe();
ExAcquirePushLockExclusiveEx();
ExAcquirePushLockSharedEx();
ExAcquireResourceExclusiveLite();
ExAcquireResourceSharedLite();
ExAcquireRundownProtection();
ExAcquireRundownProtectionCacheAware();
ExAcquireRundownProtectionCacheAwareEx();
ExAcquireRundownProtectionEx();
ExAcquireSharedStarveExclusive();
ExAcquireSharedWaitForExclusive();
ExAcquireSpinLockExclusive();
ExAcquireSpinLockExclusiveAtDpcLevel();
ExAcquireSpinLockShared();
ExAcquireSpinLockSharedAtDpcLevel();
ExAcquireTimeRefreshLock();
ExAdjustLookasideDepth();
ExAllocateCacheAwarePushLock();
ExAllocateCacheAwareRundownProtection();
ExAllocateCallBack();
ExAllocateFromNPagedLookasideList();
ExAllocateFromPagedLookasideList();
ExAllocateLocallyUniqueId();
ExAllocatePool();
ExAllocatePoolEx();
ExAllocatePoolSanityChecks();
ExAllocatePoolWithQuota();
ExAllocatePoolWithQuotaTag();
ExAllocatePoolWithTag();
ExAllocatePoolWithTagPriority();
ExAllocateTimer();
ExAllocateTimerInternal();
ExBlockOnAddressPushLock();
ExBlockPushLock();
ExBurnMemory();
ExCallSessionCallBack();
ExCancelTimer();
ExCleanTimerResolutionRequest();
ExClearPoolFlags();
ExCompareExchangeCallBack();
ExComputeTickCountMultiplier();
ExConvertExclusiveToSharedLite();
ExCopyWakeTimerInfo();
ExCovAddInfoToLoaderEntry();
ExCovReadjustUnloadedModuleEntry();
ExCreateCallback();
ExCreateHandle();
ExCreateHandleEx();
ExCreateHandleTable();
ExCreatePoolTagTable();
ExDeferredFreePool();
ExDeleteLookasideListEx();
ExDeleteNPagedLookasideList();
ExDeletePagedLookasideList();
ExDeletePoolTagTable();
ExDeleteResourceLite();
ExDeleteTimer();
ExDeleteWakeTimerInfo();
ExDereferenceCallBackBlock();
ExDereferenceHandleDebugInfo();
ExDestroyHandle();
ExDisableAllLookasideLists();
ExDisableHandleTracing();
ExDisableResourceBoostLite();
ExDrainPoolLookasideList();
ExDupHandleTable();
ExEnableHandleExceptions();
ExEnableHandleTracing();
ExEnterCriticalRegionAndAcquireFastMutexUnsafe();
ExEnterCriticalRegionAndAcquireResourceExclusive();
ExEnterCriticalRegionAndAcquireResourceShared();
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive();
ExEnterPriorityRegionAndAcquireResourceExclusive();
ExEnterPriorityRegionAndAcquireResourceShared();
ExEnumHandleTable();
ExExtendZone();
ExFastReplenishHandleTableEntry();
ExFlushLookasideListEx();
ExFlushTb();
ExFreeCacheAwarePushLock();
ExFreeCacheAwareRundownProtection();
ExFreeCallBack();
ExFreeLargePool();
ExFreePool();
ExFreePoolEx();
ExFreePoolSanityChecks();
ExFreePoolWithTag();
ExFreeSvmAsid();
ExFreeToNPagedLookasideList();
ExFreeToPagedLookasideList();
ExGenRandom();
ExGetBigPoolInfo();
ExGetCallBackBlockContext();
ExGetCallBackBlockRoutine();
ExGetCurrentProcessorCounts();
ExGetCurrentProcessorCpuUsage();
ExGetExclusiveWaiterCount();
ExGetExpirationDate();
ExGetExtensionTable();
ExGetFirmwareEnvironmentVariable();
ExGetLicenseTamperState();
ExGetNextProcess();
ExGetNextWakeTime();
ExGetPoolTagInfo();
ExGetPreviousMode();
ExGetSessionBigPoolInformation();
ExGetSessionPoolTagInfo();
ExGetSessionPoolTagInformation();
ExGetSharedWaiterCount();
ExGetWakeTimerList();
ExHandleLogBadReference();
ExHandleTableQuery();
ExInitLicenseCallback();
ExInitPoolLookasidePointers();
ExInitSystem();
ExInitSystemPhase2();
ExInitializeCallBack();
ExInitializeExternalBootSupport();
ExInitializeLookasideListEx();
ExInitializeLookasideListExInternal();
ExInitializeNPagedLookasideList();
ExInitializeNPagedLookasideListInternal();
ExInitializeNls();
ExInitializePagedLookasideList();
ExInitializePagedLookasideListInternal();
ExInitializePoolDescriptor();
ExInitializeProcessor();
ExInitializePushLock();
ExInitializeResourceLite();
ExInitializeRundownProtection();
ExInitializeRundownProtectionCacheAware();
ExInitializeSystemLookasideList();
ExInitializeTimeRefresh();
ExInitializeZone();
ExInterlockedAddLargeInteger();
ExInterlockedAddLargeStatistic();
ExInterlockedAddUlong();
ExInterlockedCompareExchange64();
ExInterlockedDecrementLong();
ExInterlockedExchangeUlong();
ExInterlockedExtendZone();
ExInterlockedFlushSList();
ExInterlockedIncrementLong();
ExInterlockedInsertHeadList();
ExInterlockedInsertTailList();
ExInterlockedPopEntryList();
ExInterlockedPopEntrySList();
ExInterlockedPushEntryList();
ExInterlockedPushEntrySList();
ExInterlockedRemoveHeadList();
ExIsProcessorFeaturePresent();
ExIsResourceAcquiredExclusiveLite();
ExIsResourceAcquiredSharedLite();
ExIsRestrictedCaller();
ExLocalTimeToSystemTime();
ExLockUserBuffer();
ExMapHandleToPointer();
ExMapHandleToPointerEx();
ExNotifyBootDeviceRemoval();
ExNotifyCallback();
ExNotifyPlatformBinaryExecuted();
ExNotifyWithProcessing();
ExProcessorCounterSetCallback();
ExProtectPool();
ExQueryBootEntropyInformation();
ExQueryHandleExceptionsPermanency();
ExQueryPoolBlockSize();
ExQueryPoolUsage();
ExQueryProcessHandleInformation();
ExQuerySystemLockInformation();
ExQueryTimerResolution();
ExQueryWnfStateData();
ExQueueDebuggerWorker();
ExQueueSafeForwardProgressWorkItem();
ExQueueWorkItem();
ExQueueWorkItemEx();
ExQuitNextProcess();
ExRaiseAccessViolation();
ExRaiseDatatypeMisalignment();
ExRaiseHardError();
ExReArmFastCache();
ExReInitializeRundownProtection();
ExReInitializeRundownProtectionCacheAware();
ExRealTimeIsUniversal();
ExReferenceCallBackBlock();
ExReferenceHandleDebugInfo();
ExRegisterBootDevice();
ExRegisterCallback();
ExRegisterExtension();
ExRegisterHost();
ExReinitializeResourceLite();
ExReleaseCacheAwarePushLockExclusive();
ExReleaseCacheAwarePushLockExclusiveEx();
ExReleaseCacheAwarePushLockSharedEx();
ExReleaseExtensionTable();
ExReleaseFastMutex();
ExReleaseFastMutexUnsafe();
ExReleaseFastMutexUnsafeAndLeaveCriticalRegion();
ExReleasePushLockEx();
ExReleasePushLockExclusiveEx();
ExReleasePushLockSharedEx();
ExReleaseResourceAndLeaveCriticalRegion();
ExReleaseResourceAndLeavePriorityRegion();
ExReleaseResourceForThreadLite();
ExReleaseResourceLite();
ExReleaseRundownProtection();
ExReleaseRundownProtectionCacheAware();
ExReleaseRundownProtectionCacheAwareEx();
ExReleaseRundownProtectionEx();
ExReleaseSpinLockExclusive();
ExReleaseSpinLockExclusiveFromDpcLevel();
ExReleaseSpinLockShared();
ExReleaseSpinLockSharedFromDpcLevel();
ExReleaseTimeRefreshLock();
ExRemoveLowBoxAtomReferences();
ExRemoveVirtualizedTimer();
ExReturnPoolQuota();
ExRundownCompleted();
ExRundownCompletedCacheAware();
ExSessionDeleted();
ExSetFirmwareEnvironmentVariable();
ExSetLicenseTamperState();
ExSetPoolFlags();
ExSetResourceOwnerPointer();
ExSetResourceOwnerPointerEx();
ExSetTimer();
ExSetTimerResolution();
ExShutdownSystem();
ExSizeOfRundownProtectionCacheAware();
ExSlowReplenishHandleTableEntry();
ExSubscribeWnfStateChange();
ExSvmAccessFaultInterrupt();
ExSwapinWorkerThreads();
ExSweepHandleTable();
ExSystemExceptionFilter();
ExSystemTimeToLocalTime();
ExTimedWaitForUnblockPushLock();
ExTimerPause();
ExTimerResume();
ExTimerRundown();
ExTraceTimerResolution();
ExTryAcquireCacheAwarePushLockExclusive();
ExTryAcquirePushLockExclusiveEx();
ExTryAcquirePushLockSharedEx();
ExTryAcquireSpinLockExclusiveAtDpcLevel();
ExTryAcquireSpinLockSharedAtDpcLevel();
ExTryConvertPushLockSharedToExclusiveEx();
ExTryConvertSharedSpinLockExclusive();
ExTryConvertSharedToExclusiveLite();
ExTryQueueWorkItem();
ExTryToAcquireFastMutex();
ExTryToAcquireResourceExclusiveLite();
ExUnblockOnAddressPushLockEx();
ExUnblockPushLockEx();
ExUnlockUserBuffer();
ExUnregisterCallback();
ExUnregisterExtension();
ExUnsubscribeWnfStateChange();
ExUpdateLicenseRegistry();
ExUpdateSystemTimeFromCmos();
ExUuidCreate();
ExVerifySuite();
ExWaitForCallBacks();
ExWaitForRundownProtectionRelease();
ExWaitForRundownProtectionReleaseCacheAware();
ExWaitForUnblockPushLock();
ExWnfExitProcess();
ExceptionRecord32To64();
ExecuteHandler();
ExecuteHandler2();
ExfAcquirePushLockExclusive();
ExfAcquirePushLockExclusiveEx();
ExfAcquirePushLockShared();
ExfAcquirePushLockSharedEx();
ExfAcquireRundownProtection();
ExfInterlockedAddUlong();
ExfInterlockedCompareExchange64();
ExfInterlockedInsertHeadList();
ExfInterlockedInsertTailList();
ExfInterlockedPopEntryList();
ExfInterlockedPushEntryList();
ExfInterlockedRemoveHeadList();
ExfReleasePushLock();
ExfReleasePushLockExclusive();
ExfReleasePushLockShared();
ExfReleaseRundownProtection();
ExfTryAcquirePushLockShared();
ExfTryToWakePushLock();
ExfUnblockPushLock();
ExfWaitForRundownProtectionRelease();
Exfi386InterlockedDecrementLong();
Exfi386InterlockedExchangeUlong();
Exfi386InterlockedIncrementLong();
ExpAcquireFastMutexContended();
ExpAcquireMicrocodeUpdateLock();
ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented();
ExpAcquireSpinLockSharedAtDpcLevelInstrumented();
ExpAllocateBigPool();
ExpAllocateExclusiveWaiterEvent();
ExpAllocateHandleTable();
ExpAllocateHandleTableEntrySlow();
ExpAllocateLowLevelTable();
ExpAllocateMidLevelTable();
ExpAllocateSharedWaiterSemaphore();
ExpAllocateStringRoutine();
ExpAllocateTablePagedPool();
ExpAllocateTablePagedPoolNoZero();
ExpAllocateUuids();
ExpApplyPriorityBoost();
ExpBlockOnLockedHandleEntry();
ExpBoostIoAfterAcquire();
ExpBootFinishedDispatch();
ExpCallProcessing();
ExpCancelTimer();
ExpCaptureWnfStateName();
ExpCenturyDpcRoutine();
ExpCheckForFreedEnhancedTimer();
ExpCheckForLookaside();
ExpCheckForLookasideList();
ExpCheckForResource();
ExpCheckForWorker();
ExpCheckFullProcessInformationAccess();
ExpCheckIRTimerAccess();
ExpCheckThreadHistory();
ExpCloseIRTimer();
ExpCloseWorkerFactory();
ExpCompleteSoftReboot();
ExpConvertArcName();
ExpConvertSignatureName();
ExpCopyProcessInfo();
ExpCovCreateUnloadedModuleEntry();
ExpCovDeleteUnloadedModuleEntry();
ExpCovFreeUnloadedModuleEntry();
ExpCovGetSectionInfo();
ExpCovIsLoadedModulePresent();
ExpCovIsModulePresent();
ExpCovIsUnLoadedModulePresent();
ExpCovQueryInfoCallBack();
ExpCovQueryInformation();
ExpCovQueryLoadedModule();
ExpCovReadFriendlyName();
ExpCovReadRequestBuffer();
ExpCovResetInfoCallBack();
ExpCovResetInformation();
ExpCreateOutputARC();
ExpCreateOutputEFI();
ExpCreateOutputNT();
ExpCreateOutputSIGNATURE();
ExpCreateRestrictedFastCacheRegistryKey();
ExpCreateSystemThreadForNode();
ExpCreateWorkerThread();
ExpDebuggerDpcRoutine();
ExpDebuggerWorker();
ExpDeleteCallback();
ExpDeleteMutant();
ExpDeleteTimer();
ExpDeleteWorkerFactory();
ExpDereferenceHost();
ExpDereferenceObject();
ExpDuplicateSingleHandle();
ExpEventInitialization();
ExpExpandResourceOwnerTable();
ExpExpirationThread();
ExpFastCacheDescriptorCompare();
ExpFinalizeTimerDeletion();
ExpFindArcName();
ExpFindCurrentThread();
ExpFindDiskSignature();
ExpFindEmptyEntry();
ExpFindFastCacheDescriptor();
ExpFindHost();
ExpFreeAsid();
ExpFreeHandleTable();
ExpFreeHandleTableEntry();
ExpFreeLowLevelTable();
ExpFreeTablePagedPool();
ExpGetCurrentUserUILanguage();
ExpGetDeviceDataInformation();
ExpGetDriveGeometry();
ExpGetFirmwareEnvironmentVariable();
ExpGetGlobalLocaleSection();
ExpGetHandleExtraInfo();
ExpGetHandleInformation();
ExpGetHandleInformationEx();
ExpGetInstemulInformation();
ExpGetLockInformation();
ExpGetLookasideInformation();
ExpGetMicrocodeImageFileName();
ExpGetNextHandleTableEntry();
ExpGetNextProcessThread();
ExpGetObjectInformation();
ExpGetPartitionTableInfo();
ExpGetPoolTagInfoTarget();
ExpGetProcessInformation();
ExpGetStackTraceInformation();
ExpGetSystemBasicInformation();
ExpGetSystemFirmwareTableInformation();
ExpGetSystemPlatformBinary();
ExpGetSystemProcessorFeaturesInformation();
ExpGetSystemProcessorInformation();
ExpGetUILanguagePolicy();
ExpHotAddProcessorToWorkers();
ExpInitBootEntropyInformation();
ExpInitSystemPhase0();
ExpInitSystemPhase1();
ExpInitializeBootEnvironment();
ExpInitializeCallbacks();
ExpInitializeMicrocodeUpdateLock();
ExpInitializePcw();
ExpInitializeSessionDriver();
ExpInitializeThreadHistory();
ExpInsertLowLevelTableIntoFreeList();
ExpInsertPoolTracker();
ExpInsertPoolTrackerExpansion();
ExpInterlockedPopEntrySListEnd();
ExpInterlockedPopEntrySListFault();
ExpInterlockedPopEntrySListResume();
ExpIsDevicePathForRemovableMedia();
ExpIsPoolTagPrintable();
ExpIsValidUILanguage();
ExpKeyedEventInitialization();
ExpLeaveWorkerFactoryAwayMode();
ExpLegacyWorkerInitialization();
ExpLoadMicrocodeImage();
ExpLockResource();
ExpLookupHandleTableEntry();
ExpMicrocodeInformationLoad();
ExpMicrocodeInformationUnload();
ExpMicrocodeInitialization();
ExpMicrocodePowerStateCallback();
ExpMutantInitialization();
ExpNextYearDpcRoutine();
ExpOptimizePushLockList();
ExpParseArcPathName();
ExpParseEfiPath();
ExpParseFastCache();
ExpParseFastCacheHelper();
ExpParseSignatureName();
ExpPcwHostCallback();
ExpProfileCreate();
ExpProfileDelete();
ExpProfileInitialization();
ExpPurgeThreadHistory();
ExpQueryChannelInformation();
ExpQueryElamCertInfo();
ExpQueryLegacyDriverInformation();
ExpQueryMemoryTopologyInformation();
ExpQueryModuleInformation();
ExpQueryModuleInformationEx();
ExpQueryNumaAvailableMemory();
ExpQueryNumaProcessorMap();
ExpQueryNumaProximityNode();
ExpQueryPortableWorkspaceEfiLauncherInformation();
ExpQueryProcessorInformationCounters();
ExpQuerySystemInformation();
ExpQuerySystemPerformanceInformation();
ExpQueueWorkItemNode();
ExpRaiseHardError();
ExpReadComPlusPackage();
ExpRecordShutdownTime();
ExpRefreshSystemTime();
ExpRefreshTimeZoneInformation();
ExpRegisterFirmwareTableInformationHandler();
ExpReleaseFastMutexContended();
ExpReleaseMicrocodeUpdateLock();
ExpReleaseMutantExceptionFilter();
ExpReleaseResourceForThreadLite();
ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented();
ExpReleaseSpinLockSharedFromDpcLevelInstrumented();
ExpRemoveCurrentThreadFromThreadHistory();
ExpRemoveGeneralLookaside();
ExpRemoveHandleTable();
ExpRemovePoolTrackerExpansion();
ExpResizeBigPageTable();
ExpRngInitializeSystem();
ExpSafeWcslen();
ExpSafeWcslenUnaligned();
ExpScanGeneralLookasideList();
ExpScanSystemLookasideList();
ExpSeedHotTags();
ExpSemaphoreInitialization();
ExpSetBootEntry();
ExpSetBorrowedTimeOnTimestamp();
ExpSetCurrentUserUILanguage();
ExpSetDriverEntry();
ExpSetFirmwareEnvironmentVariable();
ExpSetHandleExtraInfo();
ExpSetProcessorMicrocodeUpdateInformation();
ExpSetSwappingKernelApc();
ExpSetSystemTime();
ExpSetThreadReaperEvents();
ExpSetTimeZoneInformation();
ExpSetTimer();
ExpSetTimer2();
ExpSetWorkerFactoryDeferredCreateTimer();
ExpShutdownWorkerFactory();
ExpSnapShotHandleTables();
ExpStringCapture();
ExpStringFree();
ExpSvmDpcRoutine();
ExpSvmWorkerThread();
ExpSystemErrorHandler();
ExpTimeRefreshCallback();
ExpTimeRefreshDpcRoutine();
ExpTimeRefreshWork();
ExpTimeZoneDpcRoutine();
ExpTimeZoneWork();
ExpTimerApcRoutine();
ExpTimerDpcRoutine();
ExpTimerInitialization();
ExpTimerResume();
ExpTimerSetParametersAreValid();
ExpTranslateArcPath();
ExpTranslateBootEntryNameToId();
ExpTranslateDriverEntryNameToId();
ExpTranslateEfiPath();
ExpTranslateHexStringToGUID();
ExpTranslateHexStringToULONG();
ExpTranslateHexStringToULONGLONG();
ExpTranslateNtPath();
ExpTranslateSymbolicLink();
ExpTriggerFastCacheReeval();
ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented();
ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented();
ExpTryConvertSharedSpinLockExclusiveInstrumented();
ExpTryEnterWorkerFactoryAwayMode();
ExpUnblockPushLock();
ExpUnicodeStringToNonpagedWStr();
ExpUnloadMicrocodeImage();
ExpUnlockResource();
ExpUpdateComPlusPackage();
ExpUpdateDebugInfo();
ExpUpdateProductSuiteType();
ExpUpdateProductSuiteTypeInRegistry();
ExpUpdateTimerConfiguration();
ExpUpdateTimerConfigurationWorker();
ExpUpdateTimerResolution();
ExpUseSpecialPool();
ExpUuidGetValues();
ExpUuidLoadSequenceNumber();
ExpUuidSaveSequenceNumber();
ExpUuidSaveSequenceNumberIf();
ExpValidateFastCacheSize();
ExpValidateLoader();
ExpValidateLocale();
ExpVerifyFilePath();
ExpVerifyWindowsOsOptions();
ExpWaitForBootDevices();
ExpWaitForResource();
ExpWaitForSpinLockExclusiveAndAcquire();
ExpWaitForSpinLockSharedAndAcquire();
ExpWakePushLock();
ExpWin32CloseProcedure();
ExpWin32DeleteProcedure();
ExpWin32Initialization();
ExpWin32OkayToCloseProcedure();
ExpWin32OpenProcedure();
ExpWin32ParseProcedure();
ExpWnfAcquireSubscriptionByName();
ExpWnfAcquireSubscriptionNameInstance();
ExpWnfAllocateDispatcher();
ExpWnfAllocateNextPersistentNameSequence();
ExpWnfAllocateScopeInstance();
ExpWnfAllocateScopeMap();
ExpWnfCaptureScopeInstanceId();
ExpWnfCheckCallerAccess();
ExpWnfCheckCrossScopeAccess();
ExpWnfCompleteThreadSubscriptions();
ExpWnfComposeValueName();
ExpWnfCreateNameInstance();
ExpWnfCreateProcessContext();
ExpWnfDeleteNameInstance();
ExpWnfDeleteNameInstanceCallback();
ExpWnfDeletePermanentName();
ExpWnfDeletePermanentStateData();
ExpWnfDeleteProcessContext();
ExpWnfDeleteScopeById();
ExpWnfDeleteStateData();
ExpWnfDeleteSubscription();
ExpWnfDeliverThreadNotifications();
ExpWnfDispatchKernelSubscription();
ExpWnfEnumeratePermanentDataStores();
ExpWnfEnumerateScopeInstances();
ExpWnfFindScopeInstance();
ExpWnfFindStateName();
ExpWnfFreeScopeInstance();
ExpWnfGenerateStateName();
ExpWnfGetCurrentScopeInstance();
ExpWnfGetNameStoreRegistryRoot();
ExpWnfGetPermanentDataStoreHandle();
ExpWnfGetPermanentDataStoreHandleByScopeId();
ExpWnfInsertSubscriptionInPendingQueue();
ExpWnfLookupNameInstance();
ExpWnfLookupPermanentName();
ExpWnfNotifyNameSubscribers();
ExpWnfNotifySubscription();
ExpWnfPopulateStateData();
ExpWnfQueryCurrentUserSID();
ExpWnfReadStateData();
ExpWnfRegisterPermanentName();
ExpWnfReleaseCapturedScopeInstanceId();
ExpWnfResolveScopeInstance();
ExpWnfSpecializeSecurityDescriptor();
ExpWnfSubscribeNameInstance();
ExpWnfSubscribeWnfStateChange();
ExpWnfUpdateSubscription();
ExpWnfValidatePubSubPreconditions();
ExpWnfWorkItemRoutine();
ExpWnfWriteStateData();
ExpWorkMicrocode();
ExpWorkerFactoryCheckCreate();
ExpWorkerFactoryCompletionPacketRoutine();
ExpWorkerFactoryCreateThread();
ExpWorkerFactoryDeferredThreadCreation();
ExpWorkerFactoryInitialization();
ExpWorkerFactoryManagerThread();
ExpWorkerHotAddProcessor();
ExpWorkerInitialization();
ExpWorkerThread();
ExpWorkerThreadBalanceManager();
ExpressionConvertToString();
FadePalette();
FilterConvertToString();
FilterEval();
FilterEvalImpliedAnd();
FilterEvalStrict();
FinalExceptionHandler();
FinalExceptionHandlerPad0();
FinalExceptionHandlerPad1();
FinalExceptionHandlerPad10();
FinalExceptionHandlerPad11();
FinalExceptionHandlerPad12();
FinalExceptionHandlerPad13();
FinalExceptionHandlerPad14();
FinalExceptionHandlerPad15();
FinalExceptionHandlerPad16();
FinalExceptionHandlerPad17();
FinalExceptionHandlerPad18();
FinalExceptionHandlerPad19();
FinalExceptionHandlerPad2();
FinalExceptionHandlerPad20();
FinalExceptionHandlerPad21();
FinalExceptionHandlerPad22();
FinalExceptionHandlerPad23();
FinalExceptionHandlerPad24();
FinalExceptionHandlerPad25();
FinalExceptionHandlerPad26();
FinalExceptionHandlerPad27();
FinalExceptionHandlerPad28();
FinalExceptionHandlerPad29();
FinalExceptionHandlerPad3();
FinalExceptionHandlerPad30();
FinalExceptionHandlerPad31();
FinalExceptionHandlerPad32();
FinalExceptionHandlerPad33();
FinalExceptionHandlerPad34();
FinalExceptionHandlerPad35();
FinalExceptionHandlerPad36();
FinalExceptionHandlerPad37();
FinalExceptionHandlerPad38();
FinalExceptionHandlerPad39();
FinalExceptionHandlerPad4();
FinalExceptionHandlerPad40();
FinalExceptionHandlerPad41();
FinalExceptionHandlerPad42();
FinalExceptionHandlerPad43();
FinalExceptionHandlerPad44();
FinalExceptionHandlerPad45();
FinalExceptionHandlerPad46();
FinalExceptionHandlerPad47();
FinalExceptionHandlerPad48();
FinalExceptionHandlerPad49();
FinalExceptionHandlerPad5();
FinalExceptionHandlerPad50();
FinalExceptionHandlerPad51();
FinalExceptionHandlerPad52();
FinalExceptionHandlerPad53();
FinalExceptionHandlerPad54();
FinalExceptionHandlerPad55();
FinalExceptionHandlerPad56();
FinalExceptionHandlerPad57();
FinalExceptionHandlerPad58();
FinalExceptionHandlerPad59();
FinalExceptionHandlerPad6();
FinalExceptionHandlerPad60();
FinalExceptionHandlerPad61();
FinalExceptionHandlerPad62();
FinalExceptionHandlerPad63();
FinalExceptionHandlerPad7();
FinalExceptionHandlerPad8();
FinalExceptionHandlerPad9();
FinalizeBootLogo();
FindBitmapResource();
FindEmailAt();
FindFileInfo();
FindFilterOperatorClose();
FindLabelEnd();
FindNodeOrParent();
FioFwReadBytesAtOffset();
FioFwReadUlong();
FioFwReadUlongAtOffset();
FioFwReadUshortAtOffset();
FirstEntrySList();
FopFreeFontData();
FopGetTableOffsetAndSize();
FopInitializeFonts();
FopReadCmapTable();
FopReadEncodingRecord();
FopReadMappingTable();
FopReadNameRecord();
FopReadNamingTable();
FopReadOffsetTable();
FopReadPushortAtOffset();
FopReadSegmentMapHeader();
FopValidateFontNameTable();
FsFilterAllocateCompletionStack();
FsFilterCtrlFree();
FsFilterCtrlInit();
FsFilterFreeCompletionStack();
FsFilterInit();
FsFilterPerformCallbacks();
FsFilterPerformCompletionCallbacks();
FsRtlAcknowledgeEcp();
FsRtlAcquireEofLock();
FsRtlAcquireFileExclusive();
FsRtlAcquireFileExclusiveCommon();
FsRtlAcquireFileForCcFlushEx();
FsRtlAcquireFileForModWriteEx();
FsRtlAcquireHeaderMutex();
FsRtlAcquireToCreateMappedSection();
FsRtlAddBaseMcbEntry();
FsRtlAddBaseMcbEntryEx();
FsRtlAddDiskIOCounterInstance();
FsRtlAddEntry();
FsRtlAddLargeMcbEntry();
FsRtlAddMcbEntry();
FsRtlAddToTunnelCache();
FsRtlAllocateExtraCreateParameter();
FsRtlAllocateExtraCreateParameterFromLookasideList();
FsRtlAllocateExtraCreateParameterList();
FsRtlAllocateFileLock();
FsRtlAllocatePool();
FsRtlAllocatePoolWithQuota();
FsRtlAllocatePoolWithQuotaTag();
FsRtlAllocatePoolWithTag();
FsRtlAllocateResource();
FsRtlAreThereCurrentOrInProgressFileLocks();
FsRtlAreThereWaitingFileLocks();
FsRtlAreVolumeStartupApplicationsComplete();
FsRtlBalanceReads();
FsRtlCancelNotify();
FsRtlCancellableWaitForMultipleObjects();
FsRtlCancellableWaitForSingleObject();
FsRtlChangeBackingFileObject();
FsRtlCheckLockForOplockRequest();
FsRtlCheckLockForReadAccess();
FsRtlCheckLockForWriteAccess();
FsRtlCheckNoExclusiveConflict();
FsRtlCheckNoSharedConflict();
FsRtlCheckNotifyForDelete();
FsRtlCheckOplock();
FsRtlCheckOplockEx();
FsRtlCheckUpperOplock();
FsRtlCompareNodeAndKey();
FsRtlCompleteLockIrpReal();
FsRtlCopyRead();
FsRtlCopyWrite();
FsRtlCreateSectionForDataScan();
FsRtlCurrentBatchOplock();
FsRtlCurrentOplock();
FsRtlCurrentOplockH();
FsRtlDeleteExtraCreateParameterLookasideList();
FsRtlDeleteKeyFromTunnelCache();
FsRtlDeleteTunnelCache();
FsRtlDeregisterUncProvider();
FsRtlDiskIOCounterSetCallback();
FsRtlDismountComplete();
FsRtlDissectDbcs();
FsRtlDoesDbcsContainWildCards();
FsRtlEmptyFreePoolList();
FsRtlFastCheckLockForRead();
FsRtlFastCheckLockForWrite();
FsRtlFastUnlockAll();
FsRtlFastUnlockAllByKey();
FsRtlFastUnlockSingle();
FsRtlFastUnlockSingleExclusive();
FsRtlFastUnlockSingleShared();
FsRtlFindExtraCreateParameter();
FsRtlFindFirstOverlapInNode();
FsRtlFindFirstOverlappingExclusiveNode();
FsRtlFindFirstOverlappingSharedNode();
FsRtlFindInTunnelCache();
FsRtlFindLargeIndex();
FsRtlFreeExtraCreateParameter();
FsRtlFreeExtraCreateParameterList();
FsRtlFreeFileLock();
FsRtlFreeTunnelNode();
FsRtlGetCompatibilityModeValue();
FsRtlGetEcpListFromIrp();
FsRtlGetFileNameInformation();
FsRtlGetFileSize();
FsRtlGetIoAtEof();
FsRtlGetNextBaseMcbEntry();
FsRtlGetNextExtraCreateParameter();
FsRtlGetNextFileLock();
FsRtlGetNextLargeMcbEntry();
FsRtlGetNextMcbEntry();
FsRtlGetSectorSizeInformation();
FsRtlGetSupportedFeatures();
FsRtlGetTunnelParameterValue();
FsRtlGetVirtualDiskNestingLevel();
FsRtlHeatInit();
FsRtlHeatLogIo();
FsRtlHeatLogTierMove();
FsRtlHeatUninit();
FsRtlIncrementCcFastMdlReadWait();
FsRtlIncrementCcFastReadNoWait();
FsRtlIncrementCcFastReadNotPossible();
FsRtlIncrementCcFastReadResourceMiss();
FsRtlIncrementCcFastReadWait();
FsRtlInitExtraCreateParameterLookasideList();
FsRtlInitSystem();
FsRtlInitializeBaseMcb();
FsRtlInitializeBaseMcbEx();
FsRtlInitializeEofLock();
FsRtlInitializeExtraCreateParameter();
FsRtlInitializeExtraCreateParameterList();
FsRtlInitializeFileLock();
FsRtlInitializeFileLocks();
FsRtlInitializeLargeMcb();
FsRtlInitializeLargeMcbs();
FsRtlInitializeMcb();
FsRtlInitializeOplock();
FsRtlInitializeSmssEvent();
FsRtlInitializeTieringHeat();
FsRtlInitializeTunnelCache();
FsRtlInitializeTunnels();
FsRtlInitializeWorkerThread();
FsRtlInsertExtraCreateParameter();
FsRtlInsertPerFileContext();
FsRtlInsertPerFileContextInternal();
FsRtlInsertPerFileObjectContext();
FsRtlInsertPerStreamContext();
FsRtlInsertReservedPerFileContext();
FsRtlInsertReservedPerStreamContext();
FsRtlIsDbcsInExpression();
FsRtlIsEcpAcknowledged();
FsRtlIsEcpFromUserMode();
FsRtlIsFatDbcsLegal();
FsRtlIsHpfsDbcsLegal();
FsRtlIsNotifyOnList();
FsRtlIsNtstatusExpected();
FsRtlIsPagingFile();
FsRtlIsSystemPagingFile();
FsRtlIsTotalDeviceFailure();
FsRtlIssueDeviceIoControl();
FsRtlIssueFileNotificationFsctl();
FsRtlKernelFsControlFile();
FsRtlLogCcFlushError();
FsRtlLookupBaseMcbEntry();
FsRtlLookupLargeMcbEntry();
FsRtlLookupLastBaseMcbEntry();
FsRtlLookupLastBaseMcbEntryAndIndex();
FsRtlLookupLastLargeMcbEntry();
FsRtlLookupLastLargeMcbEntryAndIndex();
FsRtlLookupLastMcbEntry();
FsRtlLookupMcbEntry();
FsRtlLookupPerFileContext();
FsRtlLookupPerFileObjectContext();
FsRtlLookupPerStreamContextInternal();
FsRtlLookupReservedPerFileContext();
FsRtlLookupReservedPerStreamContext();
FsRtlMdlRead();
FsRtlMdlReadComplete();
FsRtlMdlReadCompleteDev();
FsRtlMdlReadDev();
FsRtlMdlReadEx();
FsRtlMdlWriteComplete();
FsRtlMdlWriteCompleteDev();
FsRtlMupGetProviderIdFromName();
FsRtlMupGetProviderInfoFromFileObject();
FsRtlNormalizeNtstatus();
FsRtlNotifyChangeDirectory();
FsRtlNotifyCleanup();
FsRtlNotifyCleanupAll();
FsRtlNotifyCleanupOneEntry();
FsRtlNotifyCompleteIrp();
FsRtlNotifyCompleteIrpList();
FsRtlNotifyFilterChangeDirectory();
FsRtlNotifyFilterReportChange();
FsRtlNotifyFullChangeDirectory();
FsRtlNotifyFullReportChange();
FsRtlNotifyInitializeSync();
FsRtlNotifyReportChange();
FsRtlNotifySetCancelRoutine();
FsRtlNotifyUninitializeSync();
FsRtlNotifyUpdateBuffer();
FsRtlNotifyVolumeEvent();
FsRtlNotifyVolumeEventEx();
FsRtlNumberOfRunsInBaseMcb();
FsRtlNumberOfRunsInLargeMcb();
FsRtlNumberOfRunsInMcb();
FsRtlOplockBreakH();
FsRtlOplockBreakToNone();
FsRtlOplockBreakToNoneEx();
FsRtlOplockFsctrl();
FsRtlOplockFsctrlEx();
FsRtlOplockIsFastIoPossible();
FsRtlOplockIsSharedRequest();
FsRtlOplockKeysEqual();
FsRtlPTeardownPerFileObjectContexts();
FsRtlPostPagingFileStackOverflow();
FsRtlPostStackOverflow();
FsRtlPrepareMdlWrite();
FsRtlPrepareMdlWriteDev();
FsRtlPrepareMdlWriteEx();
FsRtlPrepareToReuseEcp();
FsRtlPrivateCancelFileLockIrp();
FsRtlPrivateCheckForExclusiveLockAccess();
FsRtlPrivateCheckForSharedLockAccess();
FsRtlPrivateCheckWaitingLocks();
FsRtlPrivateFastUnlockAll();
FsRtlPrivateInitializeFileLock();
FsRtlPrivateInsertExclusiveLock();
FsRtlPrivateInsertLock();
FsRtlPrivateInsertSharedLock();
FsRtlPrivateLock();
FsRtlPrivateRemoveLock();
FsRtlPrivateResetLowestLockOffset();
FsRtlProcessFileLock();
FsRtlPruneTunnelCache();
FsRtlQueryCachedVdl();
FsRtlQueryKernelEaFile();
FsRtlQueryMaximumVirtualDiskNestingLevel();
FsRtlRegisterFileSystemFilterCallbacks();
FsRtlRegisterFltMgrCalls();
FsRtlRegisterMupCalls();
FsRtlRegisterUncProvider();
FsRtlRegisterUncProviderEx();
FsRtlReleaseEofLock();
FsRtlReleaseFile();
FsRtlReleaseFileForCcFlush();
FsRtlReleaseFileForModWrite();
FsRtlReleaseFileNameInformation();
FsRtlReleaseHeaderMutex();
FsRtlRemoveBaseMcbEntry();
FsRtlRemoveDotsFromPath();
FsRtlRemoveExtraCreateParameter();
FsRtlRemoveLargeEntry();
FsRtlRemoveLargeMcbEntry();
FsRtlRemoveMcbEntry();
FsRtlRemoveNodeFromTunnel();
FsRtlRemovePerFileContext();
FsRtlRemovePerFileObjectContext();
FsRtlRemovePerStreamContext();
FsRtlRemoveReservedPerFileContext();
FsRtlRemoveReservedPerStreamContext();
FsRtlResetBaseMcb();
FsRtlResetLargeMcb();
FsRtlSendModernAppTermination();
FsRtlSetEcpListIntoIrp();
FsRtlSetFileSize();
FsRtlSetKernelEaFile();
FsRtlSplitBaseMcb();
FsRtlSplitLargeMcb();
FsRtlSplitLocks();
FsRtlStackOverflowRead();
FsRtlSyncVolumes();
FsRtlTeardownPerFileContexts();
FsRtlTeardownPerStreamContexts();
FsRtlTruncateBaseMcb();
FsRtlTruncateLargeMcb();
FsRtlTruncateMcb();
FsRtlTryToAcquireHeaderMutex();
FsRtlUninitializeBaseMcb();
FsRtlUninitializeFileLock();
FsRtlUninitializeLargeMcb();
FsRtlUninitializeMcb();
FsRtlUninitializeOplock();
FsRtlUpdateDiskCounters();
FsRtlUpperOplockFsctrl();
FsRtlValidateReparsePointBuffer();
FsRtlWaitForSmssEvent();
FsRtlWorkerThread();
FsRtlpAcknowledgeOplockBreak();
FsRtlpAcknowledgeOplockBreakByCacheFlags();
FsRtlpAllocateOplock();
FsRtlpAttachOplockKey();
FsRtlpCallerIsAtomicRequestor();
FsRtlpCancelExclusiveIrp();
FsRtlpCancelOplockRHIrp();
FsRtlpCancelReadOnlyOplockIrp();
FsRtlpCancelWaitingIrp();
FsRtlpCleanupEcps();
FsRtlpClearOwnerThread();
FsRtlpComputeShareableOplockState();
FsRtlpDoBoost();
FsRtlpExclusiveIrpCancelRoutine();
FsRtlpFreeMdlChain();
FsRtlpGenericCompletion();
FsRtlpGetMaxVirtualDiskNestingLevel();
FsRtlpGrantAnyOplockFromExclusive();
FsRtlpHeatRegisterVolume();
FsRtlpHeatUnregisterVolume();
FsRtlpModifyThreadPriorities();
FsRtlpNotifyOplockBreakComplete();
FsRtlpOpBatchBreakClosePending();
FsRtlpOpenDev();
FsRtlpOplockBreakByCacheFlags();
FsRtlpOplockBreakNotify();
FsRtlpOplockBreakToII();
FsRtlpOplockBreakToNone();
FsRtlpOplockCleanup();
FsRtlpOplockDequeueRH();
FsRtlpOplockEnqueueRH();
FsRtlpOplockFsctrlInternal();
FsRtlpOplockKeysEqual();
FsRtlpOplockRHIrpCancelRoutine();
FsRtlpOplockStoreKeyForDeleteOperation();
FsRtlpOplockUpperLowerCompatible();
FsRtlpOplockWaitCompleteRoutine();
FsRtlpPostStackOverflow();
FsRtlpQueryValueKey();
FsRtlpReadOnlyOplockIrpCancelRoutine();
FsRtlpRegisterProviderWithMUP();
FsRtlpRegisterUncProvider();
FsRtlpReleaseIrpsWaitingForRH();
FsRtlpRemoveAndBreakRHIrp();
FsRtlpRemoveAndCompleteReadOnlyIrp();
FsRtlpRemoveAndCompleteWaitingIrp();
FsRtlpRequestExclusiveOplock();
FsRtlpRequestShareableOplock();
FsRtlpRestoreCallerEcpsToCallerList();
FsRtlpValidateExtraCreateParameters();
FsRtlpWaitForIoAtEof();
FsRtlpWaitOnIrp();
FsRtlpWaitingIrpCancelRoutine();
FstubAdjustPartitionCount();
FstubAllocateDiskInformation();
FstubConvertExtendedToLayout();
FstubCopyEntryEFI();
FstubCreateDiskEFI();
FstubCreateDiskMBR();
FstubCreateDiskRaw();
FstubDetectPartitionStyle();
FstubFixupEfiPartition();
FstubFreeDiskInformation();
FstubGetDiskGeometry();
FstubReadHeaderEFI();
FstubReadPartitionTableEFI();
FstubReadPartitionTableMBR();
FstubReadSector();
FstubSetPartitionInformationEFI();
FstubTranslateRequirement();
FstubTranslateResource();
FstubTranslatorNull();
FstubVerifyPartitionTableEFI();
FstubWriteBootSectorEFI();
FstubWriteEntryEFI();
FstubWriteHeaderEFI();
FstubWritePartitionTableEFI();
FstubWritePartitionTableMBR();
FstubWriteSector();
GetBootSystemTime();
GetHandlerAddress();
GetHangulT();
GetIretHookAddress();
GetMachineBootPointers();
GetNextWchar();
GetPropertyFromPropArray();
GetSurrogateHigh();
GetSurrogateLow();
GetUCBytes();
GetUTF32();
GetVirtualBits();
GxpBitsToBytes();
GxpMatchPaletteColor();
GxpReadFrameBufferPixels();
GxpWriteFrameBufferPixels();
HalAllocateCommonBuffer();
HalAllocateCrashDumpRegisters();
HalExamineMBR();
HalFreeCommonBuffer();
HalGetAdapter();
HalGetInterruptVector();
HalInitializeBios();
HalReadDmaCounter();
HalpCalculateChsValues();
HalpGetFullGeometry();
HalpIsValidPartitionEntry();
HashFree();
HdlspAddLogEntry();
HdlspBugCheckProcessing();
HdlspDispatch();
HdlspEnableTerminal();
HdlspGetLine();
HdlspKernelAddLogEntry();
HdlspProcessDumpCommand();
HdlspPutData();
HdlspPutMore();
HdlspPutString();
HdlspPutWideString();
HdlspSendBlueScreenInfo();
HdlspSendStringAtBaud();
HdlspSetBlueScreenInformation();
HdlspUTF8Encode();
HeadlessDispatch();
HeadlessInit();
HeadlessKernelAddLogEntry();
HeadlessTerminalAddResources();
HvAddToLayoutStats();
HvAllocateCell();
HvApplyLegacyLogFile();
HvApplyLogFile();
HvBufferCheckSum();
HvCheckAndUpdateHiveBackupTimeStamp();
HvCheckBin();
HvCheckHive();
HvClearBinTrimStatus();
HvCountFreeLogsLockFree();
HvDuplicateCell();
HvExtendHivePrimaryFileValidDataLength();
HvFoldBackDirtyData();
HvFoldBackUnreconciledData();
HvFreeCell();
HvFreeDirtyData();
HvFreeHive();
HvFreeHivePartial();
HvFreeUnreconciledData();
HvGetCurrentLogFileSizePointer();
HvGetHiveLogFileStatus();
HvInitializeHashLibrary();
HvInitializeHive();
HvIsCellAllocated();
HvIsCurrentLogSwappable();
HvIsInPlaceBaseBlockValid();
HvLoadHive();
HvMarkBaseBlockDirty();
HvMarkDirty();
HvMoveLayoutStats();
HvReallocateCell();
HvRefreshHive();
HvResetDirtyData();
HvResetLogFileStatusAll();
HvResetUnreconciledData();
HvSetRangeProtection();
HvStoreModifiedData();
HvSwapLogFiles();
HvSyncHive();
HvUpdateUnreconciledVector();
HvValidateOrInvalidatePrimaryFileHeader();
HvWriteExternal();
HvWriteHivePrimaryFile();
HvWriteLogFile();
HvlConfigureIdleStates();
HvlConfigurePcc();
HvlConfigurePerfStateCap();
HvlConfigurePerfStates();
HvlConfigurePowerPolicySetting();
HvlConfigureThrottleStates();
HvlDeleteProcessor();
HvlDisableEnlightenment();
HvlEndSystemInterrupt();
HvlEnlightenProcessor();
HvlEnterSleepState();
HvlFlushRangeListTb();
HvlFlushSingleTb();
HvlGetApicIdFromLpIndex();
HvlGetEnlightenmentInfo();
HvlGetLogicalProcessorRunTime();
HvlGetLpIndexFromApicId();
HvlGetReferenceTime();
HvlInitializeProcessor();
HvlInvokeHypervisorDebugger();
HvlInvokeWheaErrorNotificationCallback();
HvlLogGuestCrashInformation();
HvlLpGetMachineCheckContext();
HvlLpReadCpuid();
HvlLpReadMultipleMsr();
HvlLpWriteMultipleMsr();
HvlLpWritebackInvalidate();
HvlMapDeviceInterrupt();
HvlNotifyDebugDeviceAvailable();
HvlNotifyHpetEnabled();
HvlNotifyLongSpinWait();
HvlParkedVirtualProcessors();
HvlPhase0Initialize();
HvlPhase1Initialize();
HvlPhase2Initialize();
HvlQueryActiveHypervisorProcessorCount();
HvlQueryActiveProcessors();
HvlQueryAssociatedProcessors();
HvlQueryConnection();
HvlQueryEnlightenmentInfo();
HvlQueryHypervisorProcessorNodeNumber();
HvlQueryHypervisorTscAdjustment();
HvlQueryNumaDistance();
HvlQueryProcessorTopology();
HvlQueryProcessorTopologyCount();
HvlQueryProcessorTopologyHighestId();
HvlRegisterInterruptCallback();
HvlRegisterWheaErrorNotification();
HvlRestoreEnlightenment();
HvlResumePartition();
HvlSetEnlightenmentInfo();
HvlSetHpetConfig();
HvlSetPartitionProperty();
HvlSetSystemMachineCheckProperty();
HvlSetSystemSleepProperty();
HvlSuspendPartition();
HvlSwitchVirtualAddressSpace();
HvlUnmapDeviceInterrupt();
HvlUnregisterInterruptCallback();
HvlUnregisterWheaErrorNotification();
HvlWriteApicCommandRegister();
HvlpAllocateEarlyPages();
HvlpAllocateOverlayPages();
HvlpCreateRootVirtualProcessor();
HvlpDepositPages();
HvlpDetermineEnlightenments();
HvlpEnlightenSwapContext();
HvlpFreeOverlayPages();
HvlpGetLogicalProcessorProperty();
HvlpGetLpcbByApicId();
HvlpHvIdentityInfoCallback();
HvlpInitializeBootProcessor();
HvlpInitiateHypercall();
HvlpLogHypervisorLaunchError();
HvlpLogIommuEvent();
HvlpLogIommuInitStatus();
HvlpMapEarlyPages();
HvlpMapStatisticsPage();
HvlpPowerPolicySettingCallback();
HvlpSetLogicalProcessorProperty();
HvlpSetupBootProcessorEarlyHypercallPages();
HvlpSetupBootProcessorHypercallPages();
HvlpSlowFlushAddressSpaceTb();
HvlpTryConfigureInterface();
HvlpWriteEventLog();
HvpAddBin();
HvpAddDummyBinToHive();
HvpAddFreeCellHint();
HvpAddLoadedBinToHive();
HvpAdjustBitmap();
HvpAdjustHiveFreeDisplay();
HvpAllocateMap();
HvpApplyLogEntry();
HvpBuildMap();
HvpBuildMapForLoaderHive();
HvpCheckViewBoundary();
HvpCleanMap();
HvpCopyModifiedData();
HvpCountSetRangesInVector();
HvpDelistFreeCell();
HvpDetermineLatestLogFile();
HvpDoAllocateCell();
HvpDropPagedBins();
HvpEnlistBinInMap();
HvpEnlistFreeCell();
HvpEnlistFreeCells();
HvpExpandMap();
HvpFillFileName();
HvpFindFreeCell();
HvpFindFreeCellInBin();
HvpFindNextDirtyBlock();
HvpFinishPrimaryWrite();
HvpFreeAllocatedBins();
HvpFreeHiveFreeDisplay();
HvpFreeMap();
HvpGenerateLogEntry();
HvpGenerateLogEntryChecksums();
HvpGenerateLogMetadata();
HvpGetBinMemAlloc();
HvpGetCellFlat();
HvpGetCellMap();
HvpGetCellPaged();
HvpGetHCell();
HvpGetHiveHeader();
HvpGetLogHeader();
HvpHeaderCheckSum();
HvpInitMap();
HvpIsFreeNeighbor();
HvpIsLogEntryHeaderCoherent();
HvpIsMetadataArrayCoherent();
HvpLogEntryCheckHeaderChecksum();
HvpLogTypeToLogArrayIndex();
HvpMapHiveImage();
HvpMapHiveImageFromFile();
HvpMarkCellDirty();
HvpMarkDirty();
HvpPointMapEntriesToBuffer();
HvpReadHiveDataFromFile();
HvpRecoverData();
HvpRecoverDataReadRoutine();
HvpRemapAndEnlistHiveBins();
HvpRemoveFreeCellHint();
HvpResetPageProtection();
HvpSetRangeProtection();
HvpTruncateBins();
HvpUpdateRecoveryVector();
HvpValidateLoadedBin();
IDT();
INCREASE_MAPPED_TRANSFER_BYTE_COUNT();
INCREMENT_ADAPTER_CHANNELS();
IdnaMemAlloc();
InbvAcquireDisplayOwnership();
InbvAcquireLock();
InbvBitBlt();
InbvCheckDisplayOwnership();
InbvDetermineFunction();
InbvDisplayString();
InbvDriverInitialize();
InbvEnableBootDriver();
InbvEnableDisplayString();
InbvGetDisplayState();
InbvGetResourceAddress();
InbvIndicateProgress();
InbvInstallDisplayStringFilter();
InbvIsBootDriverInstalled();
InbvNotifyDisplayOwnershipChange();
InbvNotifyDisplayOwnershipLost();
InbvPortEnableFifo();
InbvPortGetByte();
InbvPortInitialize();
InbvPortPollOnly();
InbvPortPutByte();
InbvPortTerminate();
InbvReleaseLock();
InbvReleaseResources();
InbvResetDisplay();
InbvRotateGuiBootDisplay();
InbvSetFunction();
InbvSetProgressBarSubset();
InbvSetScrollRegion();
InbvSetTextColor();
InbvSolidColorFill();
InitBootProcessor();
InitOtherProcessors();
InitSafeBoot();
InitializeDynamicPartitioningPolicy();
InitializeListHeadPte();
InitializePagedPool();
InitializePool();
InsertChar();
InsertTailListPte();
InterlockedCompareExchange64();
InterlockedPopEntrySList();
InterlockedPushEntrySList();
InterlockedPushListSList();
InternalBreakpointCheck();
IoAcquireCancelSpinLock();
IoAcquireRemoveLockEx();
IoAcquireVpbSpinLock();
IoAddTriageDumpDataBlock();
IoAdjustStackSizeForRedirection();
IoAllocateAdapterChannel();
IoAllocateController();
IoAllocateDriverObjectExtension();
IoAllocateErrorLogEntry();
IoAllocateGenericErrorLogEntry();
IoAllocateIrp();
IoAllocateMdl();
IoAllocateMiniCompletionPacket();
IoAllocateSfioStreamIdentifier();
IoAllocateWorkItem();
IoAllowExecution();
IoApplyPriorityInfoThread();
IoAssignResources();
IoAsynchronousPageWrite();
IoAttachDevice();
IoAttachDeviceByPointer();
IoAttachDeviceToDeviceStack();
IoAttachDeviceToDeviceStackSafe();
IoBoostThreadIo();
IoBoostThreadIoPriority();
IoBuildAsynchronousFsdRequest();
IoBuildDeviceIoControlRequest();
IoBuildPartialMdl();
IoBuildPoDeviceNotifyList();
IoBuildSynchronousFsdRequest();
IoCallDriver();
IoCancelFileOpen();
IoCancelIrp();
IoCancelThreadIo();
IoCaptureLiveDump();
IoChangeFileObjectFilterContext();
IoCheckDesiredAccess();
IoCheckEaBufferValidity();
IoCheckFunctionAccess();
IoCheckQuerySetFileInformation();
IoCheckQuerySetVolumeInformation();
IoCheckQuotaBufferValidity();
IoCheckShareAccess();
IoCheckShareAccessEx();
IoClearActivityIdThread();
IoClearDependency();
IoClearIrpExtraCreateParameter();
IoCompleteRequest();
IoConfigureCrashDump();
IoConnectInterrupt();
IoConnectInterruptEx();
IoControlPnpDeviceActionQueue();
IoConvertFileHandleToKernelHandle();
IoCopyDeviceObjectHint();
IoCreateArcName();
IoCreateController();
IoCreateDevice();
IoCreateDisk();
IoCreateDriver();
IoCreateFile();
IoCreateFileEx();
IoCreateFileSpecifyDeviceObjectHint();
IoCreateNotificationEvent();
IoCreateObjectTypes();
IoCreateStreamFileObject();
IoCreateStreamFileObjectEx();
IoCreateStreamFileObjectEx2();
IoCreateStreamFileObjectLite();
IoCreateSymbolicLink();
IoCreateSynchronizationEvent();
IoCreateSystemThread();
IoCreateUnprotectedSymbolicLink();
IoCsqInitialize();
IoCsqInitializeEx();
IoCsqInsertIrp();
IoCsqInsertIrpEx();
IoCsqRemoveIrp();
IoCsqRemoveNextIrp();
IoDecrementKeepAliveCount();
IoDeleteAllDependencyRelations();
IoDeleteController();
IoDeleteDevice();
IoDeleteDriver();
IoDeleteSymbolicLink();
IoDetachDevice();
IoDiagTraceDevicesRundown();
IoDiscardDeferredLiveDumpData();
IoDisconnectInterrupt();
IoDisconnectInterruptEx();
IoDumpStackResumeCapable();
IoDuplicateDependency();
IoEnqueueIrp();
IoEnumerateDeviceObjectList();
IoEnumerateEnvironmentVariablesEx();
IoEnumerateRegisteredFiltersList();
IoFastQueryNetworkAttributes();
IoFillDumpHeader();
IoFillTriageDumpBuffer();
IoFindDeviceThatFailedIrp();
IoFlushAdapterBuffers();
IoForwardIrpSynchronously();
IoFreeAdapterChannel();
IoFreeController();
IoFreeDumpRange();
IoFreeErrorLogEntry();
IoFreeIrp();
IoFreeMapRegisters();
IoFreeMdl();
IoFreeMiniCompletionPacket();
IoFreePoDeviceNotifyList();
IoFreeSfioStreamIdentifier();
IoFreeWorkItem();
IoGetActivityIdIrp();
IoGetActivityIdThread();
IoGetAffinityInterrupt();
IoGetAttachedDevice();
IoGetAttachedDeviceReference();
IoGetBaseFileSystemDeviceObject();
IoGetBootDiskInformation();
IoGetBootDiskInformationLite();
IoGetConfigurationInformation();
IoGetContainerInformation();
IoGetDeviceAttachmentBaseRef();
IoGetDeviceInstanceName();
IoGetDeviceInterfaceAlias();
IoGetDeviceInterfacePropertyData();
IoGetDeviceInterfaces();
IoGetDeviceNumaNode();
IoGetDeviceObjectPointer();
IoGetDeviceProperty();
IoGetDevicePropertyData();
IoGetDeviceToVerify();
IoGetDiskDeviceObject();
IoGetDmaAdapter();
IoGetDriverObjectExtension();
IoGetDumpHiberRanges();
IoGetDumpStack();
IoGetEnvironmentVariableEx();
IoGetFileObjectFilterContext();
IoGetFileObjectGenericMapping();
IoGetGenericIrpExtension();
IoGetInitialStack();
IoGetInitiatorProcess();
IoGetIoPriorityHint();
IoGetIrpExtraCreateParameter();
IoGetLegacyVetoList();
IoGetLoadedDriverInfo();
IoGetLowerDeviceObject();
IoGetOplockFullFoExt();
IoGetOplockKeyContext();
IoGetOplockKeyContextEx();
IoGetPagingIoPriority();
IoGetRelatedDeviceObject();
IoGetRelatedTargetDevice();
IoGetRequestorProcess();
IoGetRequestorProcessId();
IoGetRequestorSessionId();
IoGetSfioStreamIdentifier();
IoGetStackLimits();
IoGetSymlinkSupportInformation();
IoGetTopLevelIrp();
IoGetTransactionParameterBlock();
IoIncrementKeepAliveCount();
IoInitSystem();
IoInitializeCrashDump();
IoInitializeDumpStack();
IoInitializeIrp();
IoInitializeMiniCompletionPacket();
IoInitializeProcessor();
IoInitializeRemoveLockEx();
IoInitializeTimer();
IoInitializeWorkItem();
IoInvalidateDeviceRelations();
IoInvalidateDeviceState();
IoIsActivityTracingEnabled();
IoIsDeviceEjectable();
IoIsDumpEnabled();
IoIsFileObjectIgnoringSharing();
IoIsFileOriginRemote();
IoIsOperationSynchronous();
IoIsSystemThread();
IoIsValidIrpStatus();
IoIsValidNameGraftingBuffer();
IoIsWdmVersionAvailable();
IoMakeAssociatedIrp();
IoMapTransfer();
IoMarkTriageDumpBlock();
IoNotifyDump();
IoNotifyPowerOperationVetoed();
IoOpenDeviceInterfaceRegistryKey();
IoOpenDeviceRegistryKey();
IoPageRead();
IoPerfInit();
IoPerfReset();
IoProcessPassiveInterrupts();
IoPropagateActivityIdToThread();
IoPropagateIrpExtension();
IoQueryDeviceDescription();
IoQueryEnvironmentVariableInfoEx();
IoQueryFileDosDeviceName();
IoQueryFileInformation();
IoQueryFullDriverPath();
IoQueryLowPriorityIoInformation();
IoQuerySystemDeviceName();
IoQueryVhdBootInformation();
IoQueryVolumeInformation();
IoQueueThreadIrp();
IoQueueWorkItem();
IoQueueWorkItemEx();
IoQueueWorkItemToNode();
IoRaiseHardError();
IoRaiseInformationalHardError();
IoReadDiskSignature();
IoReadPartitionTable();
IoReadPartitionTableEx();
IoRegisterBootDriverCallback();
IoRegisterBootDriverReinitialization();
IoRegisterContainerNotification();
IoRegisterDeviceInterface();
IoRegisterDriverReinitialization();
IoRegisterFileSystem();
IoRegisterFsRegistrationChange();
IoRegisterFsRegistrationChangeMountAware();
IoRegisterIoTracking();
IoRegisterLastChanceShutdownNotification();
IoRegisterPlugPlayNotification();
IoRegisterPriorityCallback();
IoRegisterShutdownNotification();
IoReleaseCancelSpinLock();
IoReleaseRemoveLockAndWaitEx();
IoReleaseRemoveLockEx();
IoReleaseVpbSpinLock();
IoRemoveIoCompletion();
IoRemoveShareAccess();
IoReplaceFileObjectName();
IoReplacePartitionUnit();
IoReportDetectedDevice();
IoReportHalResourceUsage();
IoReportInterruptActive();
IoReportInterruptInactive();
IoReportResourceForDetection();
IoReportResourceUsage();
IoReportResourceUsageInternal();
IoReportRootDevice();
IoReportTargetDeviceChange();
IoReportTargetDeviceChangeAsynchronous();
IoRequestDeviceEject();
IoRequestDeviceEjectEx();
IoReserveDependency();
IoResolveDependency();
IoRetrievePriorityInfo();
IoReuseIrp();
IoRevokeHandlesForProcess();
IoSetActivityIdIrp();
IoSetActivityIdThread();
IoSetCompletionRoutineEx();
IoSetDependency();
IoSetDeviceInterfacePropertyData();
IoSetDeviceInterfaceState();
IoSetDevicePropertyData();
IoSetDeviceToVerify();
IoSetDumpRange();
IoSetEnvironmentVariableEx();
IoSetFileObjectIgnoreSharing();
IoSetFileOrigin();
IoSetGenericIrpExtension();
IoSetHardErrorOrVerifyDevice();
IoSetInformation();
IoSetIoCompletion();
IoSetIoCompletionEx();
IoSetIoCompletionEx2();
IoSetIoPriorityHint();
IoSetIoPriorityHintIntoFileObject();
IoSetIoPriorityHintIntoThread();
IoSetIrpExtraCreateParameter();
IoSetMasterIrpStatus();
IoSetOplockKeyContext();
IoSetOplockPrivateFoExt();
IoSetPartitionInformation();
IoSetPartitionInformationEx();
IoSetShareAccess();
IoSetShareAccessEx();
IoSetStartIoAttributes();
IoSetSystemPartition();
IoSetThreadHardErrorMode();
IoSetTopLevelIrp();
IoShutdownSystem();
IoSizeofGenericIrpExtension();
IoSizeofWorkItem();
IoStartNextPacket();
IoStartNextPacketByKey();
IoStartPacket();
IoStartTimer();
IoStopTimer();
IoSynchronousCallDriver();
IoSynchronousInvalidateDeviceRelations();
IoSynchronousPageWrite();
IoTestDependency();
IoThreadToProcess();
IoTransferActivityId();
IoTranslateBusAddress();
IoTryQueueWorkItem();
IoUninitializeWorkItem();
IoUnregisterBootDriverCallback();
IoUnregisterContainerNotification();
IoUnregisterFileSystem();
IoUnregisterFsRegistrationChange();
IoUnregisterIoTracking();
IoUnregisterPlugPlayNotification();
IoUnregisterPlugPlayNotificationEx();
IoUnregisterPriorityCallback();
IoUnregisterShutdownNotification();
IoUpdateDumpPhysicalRanges();
IoUpdateShareAccess();
IoValidateDeviceIoControlAccess();
IoVerifierCheckForSettingsChange();
IoVerifierInit();
IoVerifyPartitionTable();
IoVerifyVolume();
IoVolumeDeviceToDosName();
IoVolumeDeviceToGuid();
IoVolumeDeviceToGuidPath();
IoWMIAllocateInstanceIds();
IoWMICompleteRequest();
IoWMIDeviceObjectToInstanceName();
IoWMIExecuteMethod();
IoWMIHandleToInstanceName();
IoWMIOpenBlock();
IoWMIQueryAllData();
IoWMIQueryAllDataMultiple();
IoWMIQuerySingleInstance();
IoWMIQuerySingleInstanceMultiple();
IoWMIRegistrationControl();
IoWMISetNotificationCallback();
IoWMISetSingleInstance();
IoWMISetSingleItem();
IoWMISuggestInstanceName();
IoWMISystemControl();
IoWMIWriteEvent();
IoWithinStackLimits();
IoWriteCrashDump();
IoWriteDeferredLiveDumpData();
IoWriteErrorLogEntry();
IoWritePartitionTable();
IoWritePartitionTableEx();
IofCallDriver();
IofCallDriverSpecifyReturn();
IofCompleteRequest();
IopAbortRequest();
IopAcquireActiveConnectLock();
IopAcquireFileObjectLock();
IopAcquireReleaseConnectLockInternal();
IopAcquireReleaseDispatcherLock();
IopAddBootDiskInformation();
IopAddBugcheckPnpTriageData();
IopAddBugcheckPowerTriageData();
IopAddBugcheckTriageDevice();
IopAddBugcheckTriageDeviceNode();
IopAddBugcheckTriageDriver();
IopAddBugcheckTriageIrp();
IopAddBugcheckTriagePoFxDevice();
IopAddBugcheckTriageThread();
IopAddBugcheckTriageUnicodeString();
IopAddBugcheckTriageWorkQueue();
IopAddPageDumpRange();
IopAddPageToPageMap();
IopAddRelationToList();
IopAddRemoveReqDescs();
IopAddRunTimeTriageDataBlocks();
IopAddTriageDumpDataBlock();
IopAdjustFileObjectKeepAliveCount();
IopAllocRealFileObject();
IopAllocateBackpocketIrp();
IopAllocateBootResources();
IopAllocateBootResourcesInternal();
IopAllocateErrorLogEntry();
IopAllocateFileObjectExtension();
IopAllocateFoExtensionsOnCreate();
IopAllocateGenericTableEntry();
IopAllocateIrpCleanup();
IopAllocateIrpExtension();
IopAllocateIrpMustSucceed();
IopAllocateIrpPrivate();
IopAllocateIrpWithExtension();
IopAllocateLegacyBootResources();
IopAllocateMiniCompletionPacket();
IopAllocatePassiveInterruptBlock();
IopAllocateRelationList();
IopAllocateReserveIrp();
IopAllocateUnicodeString();
IopAllowRemoteDASD();
IopApcHardError();
IopAppendLegacyVeto();
IopAssignBootDriveLetter();
IopAttachDeviceToDeviceStackSafe();
IopBoostThreadCallback();
IopBootAllocation();
IopBootLog();
IopBootLogToFile();
IopBuildAsynchronousFsdRequest();
IopBuildDeviceIoControlRequest();
IopBuildFullDriverPath();
IopBuildGlobalSymbolicLinkString();
IopBuildSpecialMemoryTable();
IopBuildSynchronousFsdRequest();
IopBusNumberInitialize();
IopBusNumberPackResource();
IopBusNumberScoreRequirement();
IopBusNumberUnpackRequirement();
IopBusNumberUnpackResource();
IopCallArbiter();
IopCallBootDriverReinitializationRoutines();
IopCallDriverReinitializationRoutines();
IopCancelAlertedRequest();
IopCancelApcRequired();
IopCancelIrpsInCurrentThreadList();
IopCancelIrpsInCurrentThreadListApcRoutine();
IopCancelIrpsInCurrentThreadListDummyApc();
IopCancelIrpsInCurrentThreadListSpecialApc();
IopCancelIrpsInFileObjectList();
IopCancelIrpsInThreadList();
IopCancelIrpsInThreadListForCurrentProcess();
IopCancelPendingEject();
IopCancelSynchronousIrpsForThread();
IopCancelWaitCompletionPacket();
IopCaptureObjectName();
IopChangeInterfaceType();
IopCheckBackupRestorePrivilege();
IopCheckDeviceAndDriver();
IopCheckDeviceFlags();
IopCheckDiskName();
IopCheckGetQuotaBufferValidity();
IopCheckHandleForRevocation();
IopCheckHardErrorEmpty();
IopCheckIfMergeRequired();
IopCheckInitiatorHint();
IopCheckListForCancelableIrp();
IopCheckSessionDeviceAccess();
IopCheckStackForTransactionSupport();
IopCheckTopDeviceHint();
IopCheckUnloadDriver();
IopCheckVpbMounted();
IopChildToRootTranslation();
IopCleanupExtraCreateParameters();
IopCleanupFileObjectIosbRange();
IopCleanupNotifications();
IopCleanupProcessResources();
IopCleanupSelectedConfiguration();
IopCloseFile();
IopCloseIoCompletion();
IopCloseWaitCompletionPacket();
IopCombineCmResourceList();
IopCombineLegacyResources();
IopCommitConfiguration();
IopCompareIosbRanges();
IopCompareReqAlternativePriority();
IopCompletePageWrite();
IopCompleteRequest();
IopCompleteUnloadOrDelete();
IopCompressRelationList();
IopConnectInterrupt();
IopConnectInterruptFullySpecified();
IopConnectLineBasedInterrupt();
IopConnectLinkTrackingPort();
IopConnectMessageBasedInterrupt();
IopCopyBootLogRegistryToFile();
IopCopyOffloadCapable();
IopCopyOverNewPath();
IopCreateArcName();
IopCreateArcNames();
IopCreateArcNamesCd();
IopCreateArcNamesDisk();
IopCreateCmResourceList();
IopCreateDefaultDeviceSecurityDescriptor();
IopCreateFile();
IopCreatePassiveInterruptRealtimeThreads();
IopCreateRegistryKeyEx();
IopCreateRootDirectories();
IopCreateSecurityDescriptorPerType();
IopCreateVpb();
IopCsqCancelRoutine();
IopDeallocateApc();
IopDebugPrint();
IopDecDisableableDepends();
IopDecrementDeviceObjectHandleCount();
IopDecrementDeviceObjectRef();
IopDecrementDeviceObjectRefCount();
IopDecrementVpbRefCount();
IopDeleteDevice();
IopDeleteDriver();
IopDeleteFile();
IopDeleteFileObjectExtension();
IopDeleteIoCompletion();
IopDeleteIoCompletionInternal();
IopDequeueIrpFromFileObject();
IopDequeueIrpFromThread();
IopDereferencePassiveInterruptBlock();
IopDereferenceVpbAndFree();
IopDestroyActiveConnectBlock();
IopDestroyDeviceNode();
IopDestroyPassiveInterruptBlock();
IopDeviceEjectComplete();
IopDeviceInterfaceFilterCallback();
IopDeviceObjectFromSymbolicName();
IopDisableCrashDump();
IopDisableTimer();
IopDisassociateThreadIrp();
IopDispatchSessionNotifications();
IopDmaInitialize();
IopDmaOverrideConflict();
IopDmaPackResource();
IopDmaScoreRequirement();
IopDmaUnpackRequirement();
IopDmaUnpackResource();
IopDoDeferredSetInterfaceState();
IopDropIrp();
IopDuplicateDetection();
IopEjectDevice();
IopEliminateBogusConflict();
IopEnableTimer();
IopEnumerateRelations();
IopErrorLogConnectSession();
IopErrorLogDpc();
IopErrorLogGetEntry();
IopErrorLogQueueRequest();
IopErrorLogRequeueEntry();
IopErrorLogThread();
IopEtwEnableCallback();
IopExceptionCleanup();
IopExceptionFilter();
IopExecuteHardwareProfileChange();
IopExecuteHwpDefaultSelect();
IopFastQueryNetworkAttributes();
IopFetchConfigurationInformation();
IopFileUtilClearAttributes();
IopFileUtilRename();
IopFileUtilWalkDirectoryTreeBottomUp();
IopFileUtilWalkDirectoryTreeHelper();
IopFileUtilWalkDirectoryTreeTopDown();
IopFillTriageDumpDataBlocks();
IopFilterResourceRequirementsCall();
IopFindActiveConnectBlockLocked();
IopFindLegacyBusDeviceNode();
IopFindLegacyDeviceNode();
IopFindMatchingComponentsLengthR();
IopFindPassiveInterruptBlock();
IopFindPassiveInterruptBlockLocked();
IopFindResourceHandlerInfo();
IopFindSystemDevice();
IopFreeBackpocketIrp();
IopFreeBandwidthContract();
IopFreeCompletionListPackets();
IopFreeGenericTableEntry();
IopFreeIrp();
IopFreeIrpAndMdls();
IopFreeIrpExtension();
IopFreeMiniCompletionPacket();
IopFreePoDeviceNotifyListHead();
IopFreeRelationList();
IopFreeReqAlternative();
IopFreeReqList();
IopFreeReserveIrp();
IopFreeWaitCompletionPacket();
IopGenericPackResource();
IopGenericScoreRequirement();
IopGenericTranslateOrdering();
IopGenericUnpackRequirement();
IopGenericUnpackResource();
IopGetBasicInformationFile();
IopGetBootDiskInformation();
IopGetBootDiskInformationLite();
IopGetDeviceAttachmentBase();
IopGetDeviceInterfaces();
IopGetDevicePDO();
IopGetDriverNameFromKeyNode();
IopGetDriverPathInformation();
IopGetFileInformation();
IopGetFileObjectExtension();
IopGetFileVolumeNameInformation();
IopGetFsRegistrationInProgress();
IopGetInterruptConnectionData();
IopGetLegacyVetoListDeviceNode();
IopGetLegacyVetoListDrivers();
IopGetMaxValidMemorySize();
IopGetMaxValidMemorySizeDown();
IopGetModeInformation();
IopGetMountFlag();
IopGetNetworkOpenInformation();
IopGetNumaNodeInformation();
IopGetPhysicalMemoryBlock();
IopGetRegistryKeyInformation();
IopGetRegistryValue();
IopGetRegistryValues();
IopGetRelatedFileName();
IopGetRootDevices();
IopGetSessionIdFromPDO();
IopGetSessionIdFromSymbolicName();
IopGetSetObjectId();
IopGetSetSecurityObject();
IopGetSetSpecificExtension();
IopGetSetStreamIdentifier();
IopGetVolumeId();
IopGraftName();
IopHardErrorThread();
IopIncDisableableDepends();
IopIncrementDeviceObjectRefCount();
IopIncrementVpbRefCount();
IopInitActivityIdIrp();
IopInitCrashDumpDuringSysInit();
IopInitCrashDumpRegCallback();
IopInitializeActiveConnectBlock();
IopInitializeActiveConnectList();
IopInitializeAttributesAndCreateObject();
IopInitializeBootDrivers();
IopInitializeBootLogging();
IopInitializeBuiltinDriver();
IopInitializeCoreDrivers();
IopInitializeCrashDump();
IopInitializeDeviceInstanceKey();
IopInitializeEarlyLaunchDrivers();
IopInitializeInMemoryDumpData();
IopInitializeIrpStackProfiler();
IopInitializeOfflineCrashDump();
IopInitializePassiveInterruptServices();
IopInitializePlugPlayServices();
IopInitializeReserveIrps();
IopInitializeResourceMap();
IopInitializeSessionNotifications();
IopInitializeSystemDrivers();
IopInsertActiveConnectListLocked();
IopInsertLegacyBusDeviceNode();
IopInsertPassiveInterruptBlock();
IopInsertRemoveDevice();
IopInterlockedDecrementUlong();
IopInterlockedInsertHeadList();
IopInterlockedInsertTailList();
IopInterlockedRemoveHeadList();
IopInvalidDeviceRequest();
IopInvalidateVolumesForDevice();
IopIrpExtensionControl();
IopIrpStackProfilerTimer();
IopIrqInitialize();
IopIrqPackResource();
IopIrqScoreRequirement();
IopIrqTranslateOrdering();
IopIrqUnpackRequirement();
IopIrqUnpackResource();
IopIsAddressRangeValid();
IopIsDescendantNode();
IopIsFileOpenOrSection();
IopIsPciRootBus();
IopIsRelationInList();
IopIsReportedAlready();
IopIssueSystemEnvironmentCallout();
IopIssueSystemEnvironmentRequest();
IopKeepAliveWorker();
IopLegacyResourceAllocation();
IopLiveDumpAllocAndInitResources();
IopLiveDumpAllocNonPagedPool();
IopLiveDumpAllocateDumpBuffers();
IopLiveDumpAllocateMappingResources();
IopLiveDumpBufferDumpData();
IopLiveDumpCaptureMemoryPages();
IopLiveDumpCorralDpc();
IopLiveDumpCorralProcessors();
IopLiveDumpDiscardSecondaryDataBuffersRange();
IopLiveDumpDiscardVirtualAddressRange();
IopLiveDumpEndMirroringCallback();
IopLiveDumpEstimateMemoryPages();
IopLiveDumpFreeDumpBuffers();
IopLiveDumpFreeMappingResources();
IopLiveDumpFreePool();
IopLiveDumpGetCapturePages();
IopLiveDumpGetCapturePagesNoLock();
IopLiveDumpInitiateCorralStateChange();
IopLiveDumpIsTracingEnabled();
IopLiveDumpLockPages();
IopLiveDumpMarkImportantDumpData();
IopLiveDumpMarkLoadedModuleList();
IopLiveDumpMarkProcessorData();
IopLiveDumpMarkRequiredDumpData();
IopLiveDumpMirrorPhysicalMemoryCallback();
IopLiveDumpPopulateBitmapForDump();
IopLiveDumpProcessCorralStateChange();
IopLiveDumpReleaseResources();
IopLiveDumpResetCorralContext();
IopLiveDumpStartDumpDataBuffering();
IopLiveDumpStartMirroringCallback();
IopLiveDumpTrace();
IopLiveDumpTraceBufferAllocation();
IopLiveDumpTraceBufferEstimation();
IopLiveDumpTraceDumpFileWriteEnd();
IopLiveDumpTraceInterfaceEnd();
IopLiveDumpTraceInterfaceStart();
IopLiveDumpTraceMirroringPhase0End();
IopLiveDumpTraceMirroringPhase1End();
IopLiveDumpTraceMirroringStart();
IopLiveDumpTraceSystemQuiesceEnd();
IopLiveDumpTraceSystemQuiesceStart();
IopLiveDumpTracingControlCallback();
IopLiveDumpUnLockPages();
IopLiveDumpUncorralProcessors();
IopLiveDumpValidateCancelObject();
IopLiveDumpValidateDumpFileHandle();
IopLiveDumpValidateParameters();
IopLiveDumpValidateSecondaryData();
IopLiveDumpWriteBuffer();
IopLiveDumpWriteDumpFile();
IopLiveDumpWriteSecondaryData();
IopLoadCrashdumpDriver();
IopLoadDriver();
IopLoadFileSystemDriver();
IopLoadUnloadDriver();
IopMarkBootPartition();
IopMaskInterrupt();
IopMemFindSuitableRange();
IopMemInitialize();
IopMemQueryConflict();
IopMergeRelationLists();
IopMountInitializeVpb();
IopMountVolume();
IopNotifyAlreadyRegisteredFileSystems();
IopOpenLinkOrRenameTarget();
IopOpenRegistryKey();
IopOpenRegistryKeyEx();
IopOpenSystemVariableDevice();
IopParentToRawTranslation();
IopParseDevice();
IopParseFile();
IopPassiveInterruptDpc();
IopPassiveInterruptRealtimeWorker();
IopPassiveInterruptWorker();
IopPerfCallDriver();
IopPerfCompleteRequest();
IopPerfCompletionRoutine();
IopPerfLogCallEvent();
IopPerfLogCallReturnEvent();
IopPnPAddDevice();
IopPnPCompleteRequest();
IopPnPDispatch();
IopPoHandleIrp();
IopPortAddAllocation();
IopPortBacktrackAllocation();
IopPortFindSuitableRange();
IopPortGetNextAlias();
IopPortInitialize();
IopPostProcessIrp();
IopPowerDispatch();
IopPrepareDeviceNotify();
IopProcessIoTracking();
IopProcessIrpStackProfiler();
IopProcessSetInterfaceState();
IopProcessWorkItem();
IopQueryConflictFillConflicts();
IopQueryConflictFillString();
IopQueryConflictList();
IopQueryConflictListInternal();
IopQueryDeviceResources();
IopQueryDockRemovalInterface();
IopQueryLegacyBusInformation();
IopQueryName();
IopQueryNameInternal();
IopQueryPassiveInterruptRegistryOptions();
IopQueryProcessIdsUsingFile();
IopQueryProcessorInitValues();
IopQueryReconfiguration();
IopQueryResourceHandlerInterface();
IopQueryVpbFlagsSafe();
IopQueryXxxInformation();
IopQueueIrpToFileObject();
IopQueueThreadIrp();
IopQueueWorkItemProlog();
IopRaiseHardError();
IopRaiseInformationalHardError();
IopReadDumpRegistry();
IopReadyDeviceObjects();
IopRearrangeReqList();
IopReassignSystemRoot();
IopReferenceDriverObjectByName();
IopReferenceVerifyVpb();
IopRegisterDeviceInterface();
IopRegistryCallback();
IopRegistryInitializeCallbacks();
IopRegistryOpenDeepestPath();
IopReleaseActiveConnectLock();
IopReleaseDeviceResources();
IopReleaseFilteredBootResources();
IopReleaseResources();
IopRemoveDevice();
IopRemoveDeviceRelationsFromList();
IopRemoveHardErrorPacket();
IopRemoveLegacyDeviceNode();
IopRemovePageFromPageMap();
IopRemoveRelationFromList();
IopRemoveTimerFromTimerList();
IopReplaceCompletionPort();
IopReplaceSeperatorWithPound();
IopReplaceSymlinkPath();
IopReportBootResources();
IopResourceRequirementsChanged();
IopResourceRequirementsListToReqList();
IopResurrectDriver();
IopRetestConfiguration();
IopRetrieveSystemDeviceName();
IopRetrieveTransactionParameters();
IopRevokeFileObjectForProcess();
IopSafebootDriverLoad();
IopSaveRestoreConfiguration();
IopSelectNextConfiguration();
IopSendMessageToTrackService();
IopSessionChangeWorker();
IopSetAllRelationsTags();
IopSetDeviceSecurityDescriptor();
IopSetDeviceSecurityDescriptors();
IopSetEaOrQuotaInformationFile();
IopSetFileObjectIosbRange();
IopSetFsRegistrationInProgress();
IopSetIoRoutines();
IopSetLegacyResourcesFlag();
IopSetLockOperationProcess();
IopSetRelationsTag();
IopSetRemoteLink();
IopSetTypeSpecificFoExtension();
IopSetupArbiterAndTranslators();
IopShutdownBaseFileSystems();
IopSizeTriageDumpDataBlocks();
IopStartApcHardError();
IopStartNextPacket();
IopStartNextPacketByKey();
IopStartNextPacketByKeyEx();
IopStoreArcInformation();
IopStoreSystemPartitionInformation();
IopSymlinkAllocateAndAddECP();
IopSymlinkApplyToOpenedName();
IopSymlinkCleanupECP();
IopSymlinkCreateECP();
IopSymlinkEnforceEnabledTypes();
IopSymlinkFreeRelatedMountPointChain();
IopSymlinkGetECP();
IopSymlinkGetRelatedMountPoint();
IopSymlinkInitializeSymlinkInfo();
IopSymlinkProcessReparse();
IopSymlinkPropagateToExtensionIfNeeded();
IopSymlinkQueryEnabledClasses();
IopSymlinkRegistryCallback();
IopSymlinkRegistryInitCallback();
IopSymlinkRememberJunction();
IopSymlinkRemoveECP();
IopSymlinkSetFoExtension();
IopSymlinkUpdateECP();
IopSynchronousApiServiceTail();
IopSynchronousCall();
IopSynchronousServiceTail();
IopSystemControlDispatch();
IopTestConfiguration();
IopThreadStart();
IopTimerDispatch();
IopTrackLink();
IopTranslateAndAdjustReqDesc();
IopTranslateBusAddress();
IopTranslatorHandlerCm();
IopTranslatorHandlerIo();
IopUnMarshalIds();
IopUncacheInterfaceInformation();
IopUnloadDriver();
IopUnloadEarlyLaunchDrivers();
IopUnloadSafeCompletion();
IopUnmaskInterrupt();
IopUpdateFunctionPointers();
IopUpdateMinidumpContext();
IopUserCompletion();
IopUserRundown();
IopVerifyDeviceObjectOnStack();
IopVerifyDiskSignature();
IopVerifyDriverObjectOnStack();
IopWarmEjectDevice();
IopWriteAllocatedResourcesToRegistry();
IopWriteDriverList();
IopWriteResourceList();
IopWriteTriageDumpToFirmware();
IopXxxControlFile();
IopfCompleteRequest();
IovAllocateIrp();
IovAllocateMdl();
IovAllocateWorkItem();
IovAttachDeviceToDeviceStack();
IovBuildAsynchronousFsdRequest();
IovBuildDeviceIoControlRequest();
IovBuildSynchronousFsdRequest();
IovCallDriver();
IovCancelIrp();
IovCompleteRequest();
IovDeleteDevice();
IovDetachDevice();
IovFreeIrpPrivate();
IovInitializeIrp();
IovInitializeTimer();
IovUnloadDrivers();
IovUtilFlushStackCache();
IovUtilGetBottomDeviceObject();
IovUtilGetLowerDeviceObject();
IovUtilGetUpperDeviceObject();
IovUtilIsDeviceObjectMarked();
IovUtilIsInFdoStack();
IovUtilIsPdo();
IovUtilIsVerifiedDeviceStack();
IovUtilIsWdmStack();
IovUtilMarkDeviceObject();
IovUtilMarkStack();
IovUtilMultipleDevicesSameDriver();
IovUtilRelateDeviceObjects();
IovUtilWatermarkIrp();
IovpAdvanceStackDownwards();
IovpBuildDriverObjectList();
IovpCallDriver1();
IovpCallDriver2();
IovpCallDriverNoIrpTracking();
IovpCallDriverWithStackBuffer();
IovpCancelRoutine();
IovpCheckIrpForCriticalTracking();
IovpCompleteRequest();
IovpCompleteRequest1();
IovpCompleteRequest2();
IovpCompleteRequest3();
IovpCompleteRequest4();
IovpCompleteRequest5();
IovpExamineDevObjForwarding();
IovpExamineIrpStackForwarding();
IovpInternalCompletionTrap();
IovpLocalCompletionRoutine();
IovpLogStackCallout();
IovpLogStackTrace();
IovpPacketFromIrp();
IovpSessionDataCreate();
IovpSessionDataDereference();
IovpSessionDataReference();
IovpUnloadDriver();
IovpUtilMarkDeviceObject();
IovpValidateDeviceObject();
IsAnyDot();
IsHangulLV();
IsHangulS();
IsNeutralLanguageItem();
IsRegistryKeyLocked();
IsSurrogate();
KdAcquireDebuggerLock();
KdCallPowerHandlers();
KdChangeOption();
KdCheckForDebugBreak();
KdCopyDataBlock();
KdDeregisterPowerHandler();
KdDisableDebugger();
KdDisableDebuggerWithLock();
KdEnableDebugger();
KdEnableDebuggerWithLock();
KdEnterDebugger();
KdExitDebugger();
KdGetInternalBreakpoint();
KdInitSystem();
KdIsThisAKdTrap();
KdLogDbgPrint();
KdMarkHiberPhase();
KdPollBreakIn();
KdPowerTransition();
KdPullRemoteFile();
KdRefreshDebuggerNotPresent();
KdRegisterDebuggerDataBlock();
KdRegisterPowerHandler();
KdReleaseDebuggerLock();
KdSendTraceData();
KdSetDbgPrintBufferSize();
KdSetInternalBreakpoint();
KdSetOwedBreakpoints();
KdSetSpecialCall();
KdSystemDebugControl();
KdUpdateTimeSlipEvent();
KdpAddBreakpoint();
KdpAllowDisable();
KdpCheckTracePoint();
KdpCloseRemoteFile();
KdpCommandString();
KdpCopyCodeStream();
KdpCopyContext();
KdpCopyMemoryChunks();
KdpCreateRemoteFile();
KdpDeleteBreakpoint();
KdpDeleteBreakpointRange();
KdpFillMemory();
KdpGetBusData();
KdpGetCallNextOffset();
KdpGetContext();
KdpGetContextEx();
KdpGetExtendedContextLength();
KdpGetReturnAddress();
KdpGetStateChange();
KdpGetVersion();
KdpInitializeExtendedContext();
KdpInsertBreakpoint();
KdpIsBreakpoint();
KdpIsSpecialCall();
KdpIsTryFinallyReturn();
KdpLevelChange();
KdpLowRestoreBreakpoint();
KdpLowWriteContent();
KdpPollBreakInWithPortLock();
KdpPrint();
KdpPrintString();
KdpProcessInternalBreakpoint();
KdpPrompt();
KdpPromptString();
KdpQueryMemory();
KdpQuickMoveMemory();
KdpReadControlSpace();
KdpReadIoSpace();
KdpReadIoSpaceExtended();
KdpReadMachineSpecificRegister();
KdpReadPhysicalMemory();
KdpReadRemoteFile();
KdpReadVirtualMemory();
KdpRemoveBreakpoint();
KdpReport();
KdpReportCommandStringStateChange();
KdpReportExceptionStateChange();
KdpReportLoadSymbolsStateChange();
KdpRestoreAllBreakpoints();
KdpRestoreBreakPointEx();
KdpRestoreBreakpoint();
KdpSanitizeContextFlags();
KdpSearchMemory();
KdpSearchPhysicalPage();
KdpSearchPhysicalPageRange();
KdpSendWaitContinue();
KdpSetBusData();
KdpSetCommonState();
KdpSetContext();
KdpSetContextEx();
KdpSetContextState();
KdpSetOwedBreakpoints();
KdpStub();
KdpSuspendAllBreakpoints();
KdpSuspendBreakpoint();
KdpSwitchProcessor();
KdpSymbol();
KdpSysCheckLowMemory();
KdpSysGetVersion();
KdpSysReadBusData();
KdpSysReadControlSpace();
KdpSysReadIoSpace();
KdpSysReadMsr();
KdpSysWriteBusData();
KdpSysWriteControlSpace();
KdpSysWriteIoSpace();
KdpSysWriteMsr();
KdpTimeSlipDpcRoutine();
KdpTimeSlipWork();
KdpTrap();
KdpWriteBreakPointEx();
KdpWriteBreakpoint();
KdpWriteControlSpace();
KdpWriteIoSpace();
KdpWriteIoSpaceExtended();
KdpWriteMachineSpecificRegister();
KdpWritePhysicalMemory();
KdpWriteVirtualMemory();
Ke386ConfigureCyrixProcessor();
Ke386CyrixId();
Ke386GetGdtEntryThread();
Ke386IoSetAccessProcess();
Ke386QueryIoAccessMap();
Ke386SetDescriptorProcess();
Ke386SetIoAccessMap();
Ke386SetLdtProcess();
Ke386SetVdmInterruptHandler();
KeAbEntryFree();
KeAbInitialize();
KeAbInitializeThreadState();
KeAbPostRelease();
KeAbPostReleaseEx();
KeAbPreAcquire();
KeAbPreWait();
KeAbPreWakeup();
KeAbProcessBaseIoPriorityChange();
KeAccumulateTicks();
KeAcquireGuardedMutex();
KeAcquireGuardedMutexUnsafe();
KeAcquireInStackQueuedSpinLock();
KeAcquireInStackQueuedSpinLockAtDpcLevel();
KeAcquireInStackQueuedSpinLockForDpc();
KeAcquireInStackQueuedSpinLockRaiseToSynch();
KeAcquireInterruptSpinLock();
KeAcquireQueuedSpinLock();
KeAcquireQueuedSpinLockRaiseToSynch();
KeAcquireSpinLock();
KeAcquireSpinLockAtDpcLevel();
KeAcquireSpinLockForDpc();
KeAcquireSpinLockRaiseToSynch();
KeAddGroupAffinityEx();
KeAddProcessorAffinityEx();
KeAddProcessorGroupAffinity();
KeAddSystemServiceTable();
KeAdjustInterruptTime();
KeAlertResumeThread();
KeAlertThread();
KeAlertThreadByThreadId();
KeAllocateCalloutStack();
KeAllocateCalloutStackEx();
KeAllocateInterrupt();
KeAllocateXStateContext();
KeAndAffinityEx();
KeAndGroupAffinityEx();
KeAreAllApcsDisabled();
KeAreApcsDisabled();
KeAreInterruptsEnabled();
KeAttachProcess();
KeBalanceSetManager();
KeBoostPriorityThread();
KeBugCheck();
KeBugCheck2();
KeBugCheckAnsiToUnicode();
KeBugCheckEx();
KeBugCheckUnicodeToAnsi();
KeBuildLogicalProcessorSystemInformation();
KeCancelTimer();
KeCancelTimer2();
KeCancelTimerInternal();
KeCapturePersistentThreadState();
KeCheckForTimer();
KeCheckForZeroPage();
KeCheckProcessorAffinityEx();
KeCheckProcessorGroupAffinity();
KeClearEvent();
KeClockInterruptNotify();
KeClockTimerPowerChange();
KeComplementAffinityEx();
KeConnectInterrupt();
KeContextFromKframes();
KeContextToKframes();
KeCopyAffinityEx();
KeCountSetBitsAffinityEx();
KeCountSetBitsGroupAffinity();
KeDelayExecutionThread();
KeDeregisterBugCheckCallback();
KeDeregisterBugCheckReasonCallback();
KeDeregisterNmiCallback();
KeDeregisterObjectNotification();
KeDeregisterProcessorChangeCallback();
KeDetachProcess();
KeDisableInterrupts();
KeDisableProfiling();
KeDisableQueueingPriorityIncrement();
KeDisableTimer2();
KeDisconnectInterrupt();
KeDispatchSecondaryInterrupt();
KeEnableProfiling();
KeEnterCriticalRegion();
KeEnterGuardedRegion();
KeEnterKernelDebugger();
KeEnumerateKernelStackSegments();
KeEnumerateNextProcessor();
KeEnumerateProcessorDpcs();
KeEnumerateQueueApc();
KeEstimateClockTickDuration();
KeExpandKernelStackAndCallout();
KeExpandKernelStackAndCalloutEx();
KeExpandKernelStackAndCalloutInternal();
KeFindConfigurationEntry();
KeFindConfigurationNextEntry();
KeFindFirstSetLeftAffinityEx();
KeFindFirstSetLeftGroupAffinity();
KeFindFirstSetRightAffinityEx();
KeFindFirstSetRightGroupAffinity();
KeFirstGroupAffinityEx();
KeFlushCurrentTb();
KeFlushEntireTb();
KeFlushMultipleRangeCurrentTb();
KeFlushMultipleRangeTb();
KeFlushProcessTb();
KeFlushProcessWriteBuffers();
KeFlushQueuedDpcs();
KeFlushQueuedDpcsEx();
KeFlushSingleCurrentTb();
KeFlushSingleTb();
KeFlushTb();
KeFoldProcessStatisticsThread();
KeForceAttachProcess();
KeForceEnableNx();
KeForceResumeProcess();
KeForceResumeThread();
KeFreeCalloutStack();
KeFreeInterrupt();
KeFreeXStateContext();
KeFreezeExecution();
KeFreezeProcess();
KeGenericCallDpc();
KeGenericProcessorCallback();
KeGetBugMessageResourceEntry();
KeGetBugMessageText();
KeGetClockOwner();
KeGetClockTimerResolution();
KeGetCurrentNodeNumber();
KeGetCurrentProcessorNumberEx();
KeGetCurrentStackPointer();
KeGetCurrentThread();
KeGetDynamicTickDisableReason();
KeGetExecuteOptions();
KeGetNextClockTickDuration();
KeGetNextKernelStackSegment();
KeGetPreviousMode();
KeGetProcessorIndexFromNumber();
KeGetProcessorNumberFromIndex();
KeGetRecommendedSharedDataAlignment();
KeGetSchedulingGroupSize();
KeGetXSaveFeatureFlags();
KeHwPolicyLocateResource();
KeI386GetExceptionChainTerminator();
KeI386InitializeSEHOP();
KeI386VdmInitialize();
KeInitThread();
KeInitializeAffinityEx();
KeInitializeApc();
KeInitializeClock();
KeInitializeCrashDumpHeader();
KeInitializeDeviceQueue();
KeInitializeDpc();
KeInitializeEntropySystem();
KeInitializeEnumerationContext();
KeInitializeEnumerationContextFromGroup();
KeInitializeEvent();
KeInitializeGate();
KeInitializeGuardedMutex();
KeInitializeInterrupt();
KeInitializeInterruptEx();
KeInitializeMutant();
KeInitializeMutex();
KeInitializePriQueue();
KeInitializeProcess();
KeInitializeProfile();
KeInitializeProfileCallback();
KeInitializeQueue();
KeInitializeSecondaryInterruptServices();
KeInitializeSemaphore();
KeInitializeThreadedDpc();
KeInitializeTimer();
KeInitializeTimer2();
KeInitializeTimerEx();
KeInitializeTimerTable();
KeInsertByKeyDeviceQueue();
KeInsertDeviceQueue();
KeInsertHeadQueue();
KeInsertPriQueue();
KeInsertQueue();
KeInsertQueueApc();
KeInsertQueueDpc();
KeInsertSchedulingGroup();
KeIntSteerLogStatus();
KeInterlockedClearProcessorAffinityEx();
KeInterlockedSetProcessorAffinityEx();
KeIntersectFeaturesWithRegistry();
KeInvalidAccessAllowed();
KeInvalidateAllCaches();
KeInvalidateRangeAllCaches();
KeIpiGenericCall();
KeIsApcRunningThread();
KeIsAttachedProcess();
KeIsContextSwapActive();
KeIsEmptyAffinityEx();
KeIsEqualAffinityEx();
KeIsExecutingDpc();
KeIsSingleGroupAffinityEx();
KeIsSubsetAffinityEx();
KeIsWaitListEmpty();
KeKeepProcessorAlive();
KeLeaveCriticalRegion();
KeLeaveGuardedRegion();
KeLoadMTRR();
KeLowerIrql();
KeMarkHiberPhase();
KeMaskInterrupt();
KeNumaInitialize();
KeOptimizeProcessorControlState();
KeOrAffinityEx();
KePerformGroupConfiguration();
KePollFreezeExecution();
KePrepareClockTimerForIdle();
KeProcessorGroupAffinity();
KeProcessorProfileControlArea();
KeProfileInterruptWithSource();
KePulseEvent();
KeQueryActiveGroupCount();
KeQueryActiveProcessorAffinity();
KeQueryActiveProcessorCount();
KeQueryActiveProcessorCountEx();
KeQueryActiveProcessors();
KeQueryAffinityProcess();
KeQueryAffinityThread();
KeQueryBasePriorityThread();
KeQueryBootTimeValues();
KeQueryCurrentStackInformation();
KeQueryDpcWatchdogInformation();
KeQueryEffectivePriorityThread();
KeQueryGroupAffinity();
KeQueryGroupAffinityEx();
KeQueryGroupMaskProcess();
KeQueryHardwareCounterConfiguration();
KeQueryHighestNodeNumber();
KeQueryInterruptTime();
KeQueryInterruptTimePrecise();
KeQueryIntervalProfile();
KeQueryLogicalProcessorRelationship();
KeQueryMaximumGroupCount();
KeQueryMaximumProcessorCount();
KeQueryMaximumProcessorCountEx();
KeQueryNodeActiveAffinity();
KeQueryNodeMaximumProcessorCount();
KeQueryNumaGraph();
KeQueryOwnerMutant();
KeQueryPriorityThread();
KeQueryRuntimeThread();
KeQuerySchedulingGroupHistory();
KeQuerySchedulingGroupReadyTime();
KeQuerySystemTime();
KeQuerySystemTimePrecise();
KeQueryTickCount();
KeQueryTimeIncrement();
KeQueryTimerDueTime();
KeQueryTotalCycleTimeThread();
KeQueryUnbiasedInterruptTime();
KeQueryValuesThread();
KeRaiseIrql();
KeRaiseIrqlToDpcLevel();
KeRaiseUserException();
KeReadStateEvent();
KeReadStateMutant();
KeReadStateQueue();
KeReadStateSemaphore();
KeReadStateTimer();
KeReadyThread();
KeRebaselineInterruptTime();
KeRebaselineSystemTime();
KeRegisterBugCheckCallback();
KeRegisterBugCheckReasonCallback();
KeRegisterNmiCallback();
KeRegisterObjectNotification();
KeRegisterProcessorChangeCallback();
KeReleaseGuardedMutex();
KeReleaseGuardedMutexUnsafe();
KeReleaseInStackQueuedSpinLock();
KeReleaseInStackQueuedSpinLockForDpc();
KeReleaseInStackQueuedSpinLockFromDpcLevel();
KeReleaseInterruptSpinLock();
KeReleaseMutant();
KeReleaseMutex();
KeReleaseQueuedSpinLock();
KeReleaseQueuedSpinLockFromDpcLevel();
KeReleaseSemaphore();
KeReleaseSemaphoreEx();
KeReleaseSpinLock();
KeReleaseSpinLockForDpc();
KeReleaseSpinLockFromDpcLevel();
KeRemoveByKeyDeviceQueue();
KeRemoveByKeyDeviceQueueIfBusy();
KeRemoveDeviceQueue();
KeRemoveEntryDeviceQueue();
KeRemoveGroupAffinityEx();
KeRemovePriQueue();
KeRemovePriorityBoost();
KeRemoveProcessorAffinityEx();
KeRemoveProcessorGroupAffinity();
KeRemoveQueue();
KeRemoveQueueApc();
KeRemoveQueueDpc();
KeRemoveQueueDpcEx();
KeRemoveQueueEntry();
KeRemoveQueueEx();
KeRemoveSchedulingGroup();
KeRemoveSystemServiceTable();
KeRequestTerminationThread();
KeResetEvent();
KeRestoreExtendedProcessorState();
KeRestoreFloatingPointState();
KeRestoreMtrrBroadcast();
KeRestorePAT();
KeRestoreProcessorSpecificFeatures();
KeResumeClockTimer();
KeResumeClockTimerFromIdle();
KeResumeClockTimerSafe();
KeResumeThread();
KeRevertToUserAffinityThread();
KeRevertToUserAffinityThreadEx();
KeRevertToUserGroupAffinityThread();
KeRundownApcQueues();
KeRundownQueue();
KeRundownQueueEx();
KeSaveExtendedProcessorState();
KeSaveFloatingPointState();
KeSaveStateForHibernate();
KeSelectIdealProcessor();
KeSelectNodeForAffinity();
KeSetActualBasePriorityThread();
KeSetAffinityProcess();
KeSetAffinityThread();
KeSetAutoAlignmentProcess();
KeSetBasePriorityThread();
KeSetCheckStackExtentsProcess();
KeSetCoalescableTimer();
KeSetDisableBoostProcess();
KeSetDisableBoostThread();
KeSetDisableQuantumProcess();
KeSetDmaIoCoherency();
KeSetEvent();
KeSetEventBoostPriority();
KeSetEventBoostPriorityEx();
KeSetExecuteOptions();
KeSetHardwareCounterConfiguration();
KeSetIdealProcessorThread();
KeSetIdealProcessorThreadByNumber();
KeSetIdealProcessorThreadEx();
KeSetImportanceDpc();
KeSetIntervalProfile();
KeSetKernelStackSwapEnable();
KeSetLegacyAffinityThread();
KeSetMaximumCountPriQueue();
KeSetPriorityAndQuantumProcess();
KeSetPriorityBoost();
KeSetPriorityThread();
KeSetProcess();
KeSetProcessSchedulingGroup();
KeSetProfileIrql();
KeSetQuantumProcess();
KeSetSchedulingGroupCpuRates();
KeSetSchedulingGroupCycleNotification();
KeSetSchedulingGroupRankBias();
KeSetSchedulingGroupWeights();
KeSetSystemAffinityThread();
KeSetSystemAffinityThreadEx();
KeSetSystemGroupAffinityThread();
KeSetSystemTime();
KeSetTargetProcessorDpc();
KeSetTargetProcessorDpcEx();
KeSetThreadChargeOnlySchedulingGroup();
KeSetTimeAdjustment();
KeSetTimer();
KeSetTimer2();
KeSetTimerEx();
KeSignalCallDpcDone();
KeSignalCallDpcSynchronize();
KeSignalGate();
KeStackAttachProcess();
KeStallWhileFrozen();
KeStartAllProcessors();
KeStartDynamicProcessor();
KeStartProfile();
KeStartThread();
KeStopProfile();
KeSubtractAffinityEx();
KeSuspendClockTimer();
KeSuspendClockTimerSafe();
KeSuspendThread();
KeSwapDirectoryTableBase();
KeSwapProcessOrStack();
KeSweepLocalCaches();
KeSwitchFrozenProcessor();
KeSynchronizeExecution();
KeSynchronizeWithDynamicProcessors();
KeTerminateThread();
KeTestAlertThread();
KeTestSpinLock();
KeThawExecution();
KeThawProcess();
KeTimeOutQueueWaiters();
KeTransitionProcessorParkState();
KeTryToAcquireGuardedMutex();
KeTryToAcquireQueuedSpinLock();
KeTryToAcquireQueuedSpinLockRaiseToSynch();
KeTryToAcquireSpinLockAtDpcLevel();
KeTryToFreezeThreadStack();
KeTryToInsertQueueApc();
KeUnmaskInterrupt();
KeUnstackDetachProcess();
KeUpdateGroupSchedulingConstants();
KeUpdateTotalCyclesCurrentThread();
KeUserModeCallback();
KeValidateBugCheckCallbackRecord();
KeVdmInsertQueueApc();
KeVerifyContextRecord();
KeWaitForAlertByThreadId();
KeWaitForGate();
KeWaitForMultipleObjects();
KeWaitForSingleObject();
KeWriteProtectPAT();
KefAcquireSpinLockAtDpcLevel();
KefReleaseSpinLockFromDpcLevel();
Kei386EoiHelper();
KevSkipVerification();
KfAcquireSpinLock();
KfLowerIrql();
KfRaiseIrql();
KfReleaseSpinLock();
Ki386AdjustEsp0();
Ki386AdlibEmulation();
Ki386CheckDivideByZeroTrap();
Ki386DispatchOpcode();
Ki386DispatchOpcodeV86();
Ki386EnableCurrentLargePage();
Ki386EnableDE();
Ki386EnableGlobalPage();
Ki386FatalExceptionHandler();
Ki386FlushTargetDescriptors();
Ki386GetSelectorParameters();
Ki386LoadTargetInt21Entry();
Ki386LoadTargetLdtr();
Ki386VdmDispatchIo();
Ki386VdmDispatchStringIo();
Ki386VdmEnablePentiumExtentions();
Ki386VdmReflectException();
Ki386VdmReflectException_A();
Ki386VdmSegmentNotPresent();
KiAbApplyWakeupBoost();
KiAbCompareSnappedEntryState();
KiAbCpuBoostOwners();
KiAbDeferredProcessingWorker();
KiAbDetermineMaxWaiterPriority();
KiAbDetermineMinOwnerPriority();
KiAbEntryGetCpuPriorityKey();
KiAbEntryGetLockedHeadEntry();
KiAbEntryRemoveFromTree();
KiAbEntryUpdateOwnerTreePosition();
KiAbEntryUpdateWaiterTreePosition();
KiAbEntryVerifyFree();
KiAbFindWakeupLockEntry();
KiAbIoBoostOwners();
KiAbOwnerComputeCpuPriorityKey();
KiAbProcessContextSwitch();
KiAbProcessLocksWorker();
KiAbProcessThreadLocks();
KiAbProcessThreadPriorityModification();
KiAbQueueAutoBoostDpc();
KiAbReleaseTree();
KiAbSetMinimumThreadPriority();
KiAbThreadBoostIoPriority();
KiAbThreadInsertList();
KiAbThreadUnboostCpuPriority();
KiAbTryDecrementIoWaiterCount();
KiAbTryIncrementIoWaiterCount();
KiAbWaiterComputeCpuPriorityKey();
KiAcquireInterruptConnectLock();
KiAcquireProcessLockExclusive();
KiAcquireQueuedSpinLockCheckForFreeze();
KiAcquireQueuedSpinLockInstrumented();
KiAcquireReleaseThreadLock();
KiAcquireSpinLockInstrumented();
KiAcquireThreadStateLock();
KiAcquireTimer2CollectionLockIfInserted();
KiAcquireTimer2LockUnlessDisabled();
KiActivateWaiterKQueue();
KiActivateWaiterPriQueue();
KiActivateWaiterQueueWithNoLocks();
KiAddProcessorToGroupDatabase();
KiAddThreadToScbQueue();
KiAdjustSimultaneousMultiThreadingCharacteristics();
KiAdjustTimer2DueTimes();
KiAdjustTimerDueTimes();
KiAlertThread();
KiAllProcessorsStarted();
KiArgumentTable();
KiAssignAdjustableNodes();
KiAssignAllNodesToGroup0();
KiAssignFixedNodes();
KiAssignSchedulingGroupWeights();
KiAtomicWrite64();
KiAttachProcess();
KiAttemptFastRemovePriQueue();
KiAttemptFastRemoveQueue();
KiBalanceSetManagerDeferredRoutine();
KiBeginCounterAccumulation();
KiBeginThreadAccountingPeriod();
KiBugCheck2();
KiBugCheckDebugBreak();
KiBugCheckProgress();
KiCalibrateTimeAdjustment();
KiCallInterruptServiceRoutine();
KiCallUserMode();
KiCallbackReturn();
KiCancelTimer();
KiChainedDispatch();
KiChargeSchedulingGroupCycleTime();
KiCheckForDuplicateBugCheckCallback();
KiCheckForEffectivePriorityChange();
KiCheckForKernelApcDelivery();
KiCheckForSListAddress();
KiCheckStall();
KiChooseLowestRankedThread();
KiClearPriorityFloor();
KiCommitNodeAssignment();
KiCommitThreadWait();
KiCompareVarMtrr();
KiCompleteKernelInit();
KiComputeDueTime();
KiComputeGroupSchedulingRank();
KiComputeProcessorDataSize();
KiConfigureDynamicProcessor();
KiConfigureProcessorBlock();
KiConfigureSchedulingInformation();
KiConnectInterrupt();
KiConnectSecondaryInterrupt();
KiConnectVectorAndInterruptObject();
KiContextFromNpxFrame();
KiContextToNpxFrame();
KiContinue();
KiContinuePreviousModeUser();
KiCopyCounters();
KiCopyCountersWorker();
KiCopyXStateArea();
KiDebugService();
KiDecrementProcessStackCount();
KiDeferGroupSchedulingPreemption();
KiDeferredReadyThread();
KiDeliverApc();
KiDetectAccessBitErrata();
KiDirectSwitchThread();
KiDisableCacheErrataSource();
KiDisconnectInterruptCommon();
KiDisconnectInterruptInternal();
KiDisconnectSecondaryInterrupt();
KiDisconnectSecondaryInterruptInternal();
KiDispatchException();
KiDispatchInterrupt();
KiDispatchPassiveInterrupts();
KiDispatchTrapException();
KiDisplayBlueScreen();
KiDoesProcessorMatchErrata();
KiDpcWatchdog();
KiDummyDoubleFaultHandler();
KiDummyNmiHandler();
KiDumpParameterImages();
KiDynamicProcessorAddNotification();
KiEmulateAtlThunk();
KiEnableFastSyscallReturn();
KiEnableGroupScheduling();
KiEnableHeadlessBlueScreen();
KiEnableNXSupport();
KiEnableNpxStateSwitching();
KiEnableXSave();
KiEndCounterAccumulation();
KiEndThreadAccountingPeriod();
KiEndUnexpectedRange();
KiEntropyDpcRoutine();
KiEntropyQueueDpc();
KiEspFromTrapFrame();
KiEspToTrapFrame();
KiEvaluateGroupSchedulingPreemption();
KiExceptionExit();
KiExecuteAllDpcs();
KiExecuteDpc();
KiExitDispatcher();
KiExitThreadWait();
KiExpireTimer2();
KiExpireTimerTable();
KiExtendProcessAffinity();
KiFastCallEntry();
KiFastCallEntry2();
KiFastReadyThread();
KiFatalExceptionHandler();
KiFatalFilter();
KiFinalizeTimer2Disablement();
KiFindFirstAvailableNode();
KiFindFirstPassiveInterruptObject();
KiFindNextTimerDueTime();
KiFindReadyThread();
KiFlushDcache();
KiFlushDescriptors();
KiFlushIcache();
KiFlushProcessWriteBuffersTarget();
KiFlushQueueApc();
KiFlushQueuedDpcsWorker();
KiFlushReadyLists();
KiFlushTargetEntireTb();
KiFlushTargetMultipleRangeTb();
KiFlushTargetProcessTb();
KiFlushTargetSingleTb();
KiForceSymbolReferences();
KiForegroundTimerCallback();
KiFreezeSingleThread();
KiFreezeTargetExecution();
KiFxstateRestore();
KiFxstateSave();
KiGenericCallDpcWorker();
KiGetCacheInformation();
KiGetCpuVendor();
KiGetCurrentGroupCount();
KiGetDeepIdleProcessors();
KiGetFeatureBits();
KiGetInterruptObjectFromSecondaryVector();
KiGetInterruptObjectFromVector();
KiGetIsrStackToSwitch();
KiGetL2L3AssociativityAmd();
KiGetNextTimer2ExpirationDueTime();
KiGetNextTimerExpirationDueTime();
KiGetPendingTick();
KiGetProcessorInformation();
KiGetTickCount();
KiGetVectorInfo();
KiGetXSaveSupportedFeatures();
KiGroupSchedulingGenerationEnd();
KiGroupSchedulingMoveThread();
KiGroupSchedulingQuantumEnd();
KiHandleNmi();
KiHeadlessDisplayString();
KiHwPolicyFindDriverImage();
KiI386PentiumLockErrataFixup();
KiIdleLoop();
KiIdleSchedule();
KiInSwapKernelStacks();
KiInSwapProcesses();
KiInSwapSingleProcess();
KiInitDynamicProcessorIpi();
KiInitMachineDependent();
KiInitSpinLocks();
KiInitSystem();
KiInitializeCacheErrataSupport();
KiInitializeContextThread();
KiInitializeDpcList();
KiInitializeDynamicProcessor();
KiInitializeDynamicProcessorDpc();
KiInitializeFatalTSS();
KiInitializeGSCookieValue();
KiInitializeIdleThread();
KiInitializeIdtGates();
KiInitializeKernel();
KiInitializeMTRR();
KiInitializeMachineType();
KiInitializeMutant();
KiInitializeNXSupport();
KiInitializeNxSupportDiscard();
KiInitializePAT();
KiInitializePcr();
KiInitializePrcbContext();
KiInitializeProcessor();
KiInitializeProcessorGroupSchedulingData();
KiInitializeProcessorState();
KiInitializeTRTSS();
KiInitializeTimer2Data();
KiInitializeUserApc();
KiInitializeXSave();
KiInsertDeferredPreemptionApc();
KiInsertInterruptObjectOrdered();
KiInsertQueue();
KiInsertQueueApc();
KiInsertQueueInternal();
KiInsertSchedulingGroupQueue();
KiInsertSecondarySignalList();
KiInsertTimer2WithCollectionLockHeld();
KiInsertTimerTable();
KiIntSteerConnect();
KiIntSteerDisconnect();
KiIntSteerEnable();
KiIntSteerEventTraceControlCallback();
KiIntSteerInit();
KiIntSteerInitPrcb();
KiIntSteerLogMask();
KiIntSteerLogProc();
KiIntSteerLogState();
KiInterruptDispatch();
KiInterruptDispatchCommon();
KiInterruptMessageDispatch();
KiIntersectFeaturesWithAvailableStack();
KiIntersectFeaturesWithPolicy();
KiIntersectFeaturesWithTest();
KiInvalidateAllCachesTarget();
KiInvalidateRangeAllCachesTarget();
KiInvokeBugCheckEntryCallbacks();
KiInvokeInterruptServiceRoutine();
KiIpiGenericCallTarget();
KiIpiSend();
KiIpiSendPacket();
KiIpiServiceRoutine();
KiIpiSignalPacketDone();
KiIpiSignalPacketDoneAndStall();
KiIsIntelPebsSupported();
KiIsInterruptTypeSecondary();
KiIsNXSupported();
KiIsNodeFull();
KiIsXSaveFeatureAllowed();
KiLoadFastSyscallMachineSpecificRegisters();
KiLoadIopmOffset();
KiLoadLdtr();
KiLoadMTRRTarget();
KiLoadPAT();
KiLoadPATTarget();
KiLockKobjectArray();
KiLockStepExecution();
KiMarkMtrrHiberPhase();
KiMaskInterruptDpc();
KiMaskInterruptInternal();
KiMaskSecondaryInterruptInternal();
KiMaskToLength();
KiMergeXSaveFeatures();
KiMonitorCacheErrata();
KiMoveApcState();
KiMoveThreadsToDeferredReadyList();
KiNodeCostSort();
KiNonNumaQueryNodeCapacity();
KiNonNumaQueryNodeDistance();
KiOutSwapKernelStacks();
KiOutSwapProcesses();
KiParseLoadOptions();
KiPassiveIsrWatchdog();
KiPassiveRelease();
KiPcToFileHeader();
KiPerformGroupConfiguration();
KiPollFreezeExecution();
KiPreprocessAccessViolation();
KiPriQueueThreadPriorityChanged();
KiProcessDebugRegister();
KiProcessDisconnectList();
KiProcessExpiredTimerList();
KiProcessPendingDisconnect();
KiProcessPendingForegroundBoosts();
KiProcessSecondarySignalList();
KiProcessThreadWaitList();
KiProcessorCallbackNop();
KiProcessorStart();
KiQuantumEnd();
KiQueryProcessorNode();
KiQueueReadyThread();
KiRaiseAssertion();
KiRaiseException();
KiRaiseSecurityCheckFailure();
KiReadFixedMtrr();
KiReadyOutSwappedThreads();
KiReadyThread();
KiRecomputeGroupSchedulingRank();
KiRecordDr7();
KiReduceByEffectiveIdleSmtSet();
KiReleaseQueuedSpinLockInstrumented();
KiReleaseSpinLockInstrumented();
KiReloadApcPendingState();
KiRemoveBoostThread();
KiRemoveProcessorFromGroupDatabase();
KiRemoveQueueApc();
KiRemoveThreadFromScbQueue();
KiRemoveThreadFromSchedulingGroup();
KiRemoveTimer2();
KiRequestProcessInSwap();
KiRequestTimer2Expiration();
KiResetClockIntervalAndTraceRequest();
KiRestoreProcessorControlState();
KiRestoreProcessorState();
KiRestoreXSaveSupport();
KiResumeClockTimer();
KiRetireDpcList();
KiRundownMutants();
KiSanitizeProfileInterval();
KiSaveBootProcessorIdt();
KiSaveCurrentEtwTraceBuffer();
KiSaveProcessorControlState();
KiSaveProcessorDebugState();
KiSaveProcessorState();
KiScanBugCheckCallbackList();
KiScheduleNextForegroundBoost();
KiSchedulerApc();
KiSchedulerApcNop();
KiSchedulerApcRundown();
KiSchedulerApcTerminate();
KiSearchForNewThread();
KiSegSsFromTrapFrame();
KiSegSsToTrapFrame();
KiSelectCandidateProcessor();
KiSelectIdealProcessor();
KiSelectIdleProcessor();
KiSelectNextThread();
KiSelectReadyThread();
KiSelectReadyThreadEx();
KiSelectThreadFromSchedulingGroup();
KiSendClockInterruptToClockOwner();
KiSendThawExecution();
KiServiceExit();
KiServiceLimit();
KiServiceTable();
KiSetAffinityThread();
KiSetCacheInformationAmd();
KiSetCacheInformationIntel();
KiSetClockInterval();
KiSetClockIntervalAndTraceRequest();
KiSetClockIntervalForHighResolutionTimers();
KiSetClockIntervalToMinimumRequested();
KiSetClockTickRate();
KiSetDebuggerOwner();
KiSetIdealNodeProcessByGroup();
KiSetIntervalWorker();
KiSetIoMap();
KiSetPendingTick();
KiSetPriorityFloor();
KiSetPriorityThread();
KiSetProcessorType();
KiSetStandardizedCacheInformation();
KiSetSwitchingNpxState();
KiSetSystemAffinityThread();
KiSetSystemAffinityThreadToProcessor();
KiSetSystemTimeDpc();
KiSetThreadSchedulingGroup();
KiSetTimerEx();
KiSetupTimeIncrement();
KiShouldSetClockIntervalForHighResolutionTimers();
KiShuffleAssignedNodes();
KiSignalThread();
KiStartDpcThread();
KiStartDynamicProcessor();
KiStartProfileTarget();
KiStartUnexpectedRange();
KiStartWaitAcknowledge();
KiStopProfileTarget();
KiSuspendClockTimer();
KiSwapContext();
KiSwapDirectoryTableBaseTarget();
KiSwapThread();
KiSwitchKernelStackAndCallout();
KiSwitchPriQueue();
KiSwitchQueue();
KiSynchCounterSetCallback();
KiSynchNumaCounterSetCallback();
KiSynchronizePassiveInterruptExecution();
KiSystemCallExit();
KiSystemCallExit2();
KiSystemCallExitBranch();
KiSystemFatalException();
KiSystemService();
KiSystemServiceAccessTeb();
KiSystemServiceCopyArguments();
KiSystemServicePostCall();
KiSystemStartup();
KiTestNodeAffinity();
KiThawSingleThread();
KiThreadStartup();
KiTimer2Expiration();
KiTimer2IsFullyDisabled();
KiTimerExpiration();
KiTimerExpirationDpc();
KiTimerWaitTest();
KiTraceCancelTimer2();
KiTraceSetTimer();
KiTraceSetTimer2();
KiTransitionSchedulingGroupGeneration();
KiTrap00();
KiTrap01();
KiTrap02();
KiTrap03();
KiTrap04();
KiTrap05();
KiTrap06();
KiTrap07();
KiTrap08();
KiTrap09();
KiTrap0A();
KiTrap0B();
KiTrap0C();
KiTrap0D();
KiTrap0E();
KiTrap0F();
KiTrap10();
KiTrap11();
KiTrap13();
KiTrapFrameToSseFrame();
KiTriggerForegroundBoostDpc();
KiTryForceEnableNx();
KiTryToAcquireQueuedSpinLockInstrumented();
KiTryToAcquireSpinLockInstrumented();
KiTryUnwaitThread();
KiTryUnwaitThreadWithPriority();
KiUncommitNodeAssignment();
KiUnexpectedInterrupt();
KiUnexpectedInterrupt0();
KiUnexpectedInterrupt1();
KiUnexpectedInterrupt10();
KiUnexpectedInterrupt100();
KiUnexpectedInterrupt101();
KiUnexpectedInterrupt102();
KiUnexpectedInterrupt103();
KiUnexpectedInterrupt104();
KiUnexpectedInterrupt105();
KiUnexpectedInterrupt106();
KiUnexpectedInterrupt107();
KiUnexpectedInterrupt108();
KiUnexpectedInterrupt109();
KiUnexpectedInterrupt11();
KiUnexpectedInterrupt110();
KiUnexpectedInterrupt111();
KiUnexpectedInterrupt112();
KiUnexpectedInterrupt113();
KiUnexpectedInterrupt114();
KiUnexpectedInterrupt115();
KiUnexpectedInterrupt116();
KiUnexpectedInterrupt117();
KiUnexpectedInterrupt118();
KiUnexpectedInterrupt119();
KiUnexpectedInterrupt12();
KiUnexpectedInterrupt120();
KiUnexpectedInterrupt121();
KiUnexpectedInterrupt122();
KiUnexpectedInterrupt123();
KiUnexpectedInterrupt124();
KiUnexpectedInterrupt125();
KiUnexpectedInterrupt126();
KiUnexpectedInterrupt127();
KiUnexpectedInterrupt128();
KiUnexpectedInterrupt129();
KiUnexpectedInterrupt13();
KiUnexpectedInterrupt130();
KiUnexpectedInterrupt131();
KiUnexpectedInterrupt132();
KiUnexpectedInterrupt133();
KiUnexpectedInterrupt134();
KiUnexpectedInterrupt135();
KiUnexpectedInterrupt136();
KiUnexpectedInterrupt137();
KiUnexpectedInterrupt138();
KiUnexpectedInterrupt139();
KiUnexpectedInterrupt14();
KiUnexpectedInterrupt140();
KiUnexpectedInterrupt141();
KiUnexpectedInterrupt142();
KiUnexpectedInterrupt143();
KiUnexpectedInterrupt144();
KiUnexpectedInterrupt145();
KiUnexpectedInterrupt146();
KiUnexpectedInterrupt147();
KiUnexpectedInterrupt148();
KiUnexpectedInterrupt149();
KiUnexpectedInterrupt15();
KiUnexpectedInterrupt150();
KiUnexpectedInterrupt151();
KiUnexpectedInterrupt152();
KiUnexpectedInterrupt153();
KiUnexpectedInterrupt154();
KiUnexpectedInterrupt155();
KiUnexpectedInterrupt156();
KiUnexpectedInterrupt157();
KiUnexpectedInterrupt158();
KiUnexpectedInterrupt159();
KiUnexpectedInterrupt16();
KiUnexpectedInterrupt160();
KiUnexpectedInterrupt161();
KiUnexpectedInterrupt162();
KiUnexpectedInterrupt163();
KiUnexpectedInterrupt164();
KiUnexpectedInterrupt165();
KiUnexpectedInterrupt166();
KiUnexpectedInterrupt167();
KiUnexpectedInterrupt168();
KiUnexpectedInterrupt169();
KiUnexpectedInterrupt17();
KiUnexpectedInterrupt170();
KiUnexpectedInterrupt171();
KiUnexpectedInterrupt172();
KiUnexpectedInterrupt173();
KiUnexpectedInterrupt174();
KiUnexpectedInterrupt175();
KiUnexpectedInterrupt176();
KiUnexpectedInterrupt177();
KiUnexpectedInterrupt178();
KiUnexpectedInterrupt179();
KiUnexpectedInterrupt18();
KiUnexpectedInterrupt180();
KiUnexpectedInterrupt181();
KiUnexpectedInterrupt182();
KiUnexpectedInterrupt183();
KiUnexpectedInterrupt184();
KiUnexpectedInterrupt185();
KiUnexpectedInterrupt186();
KiUnexpectedInterrupt187();
KiUnexpectedInterrupt188();
KiUnexpectedInterrupt189();
KiUnexpectedInterrupt19();
KiUnexpectedInterrupt190();
KiUnexpectedInterrupt191();
KiUnexpectedInterrupt192();
KiUnexpectedInterrupt193();
KiUnexpectedInterrupt194();
KiUnexpectedInterrupt195();
KiUnexpectedInterrupt196();
KiUnexpectedInterrupt197();
KiUnexpectedInterrupt198();
KiUnexpectedInterrupt199();
KiUnexpectedInterrupt2();
KiUnexpectedInterrupt20();
KiUnexpectedInterrupt200();
KiUnexpectedInterrupt201();
KiUnexpectedInterrupt202();
KiUnexpectedInterrupt203();
KiUnexpectedInterrupt204();
KiUnexpectedInterrupt205();
KiUnexpectedInterrupt206();
KiUnexpectedInterrupt207();
KiUnexpectedInterrupt21();
KiUnexpectedInterrupt22();
KiUnexpectedInterrupt23();
KiUnexpectedInterrupt24();
KiUnexpectedInterrupt25();
KiUnexpectedInterrupt26();
KiUnexpectedInterrupt27();
KiUnexpectedInterrupt28();
KiUnexpectedInterrupt29();
KiUnexpectedInterrupt3();
KiUnexpectedInterrupt30();
KiUnexpectedInterrupt31();
KiUnexpectedInterrupt32();
KiUnexpectedInterrupt33();
KiUnexpectedInterrupt34();
KiUnexpectedInterrupt35();
KiUnexpectedInterrupt36();
KiUnexpectedInterrupt37();
KiUnexpectedInterrupt38();
KiUnexpectedInterrupt39();
KiUnexpectedInterrupt4();
KiUnexpectedInterrupt40();
KiUnexpectedInterrupt41();
KiUnexpectedInterrupt42();
KiUnexpectedInterrupt43();
KiUnexpectedInterrupt44();
KiUnexpectedInterrupt45();
KiUnexpectedInterrupt46();
KiUnexpectedInterrupt47();
KiUnexpectedInterrupt48();
KiUnexpectedInterrupt49();
KiUnexpectedInterrupt5();
KiUnexpectedInterrupt50();
KiUnexpectedInterrupt51();
KiUnexpectedInterrupt52();
KiUnexpectedInterrupt53();
KiUnexpectedInterrupt54();
KiUnexpectedInterrupt55();
KiUnexpectedInterrupt56();
KiUnexpectedInterrupt57();
KiUnexpectedInterrupt58();
KiUnexpectedInterrupt59();
KiUnexpectedInterrupt6();
KiUnexpectedInterrupt60();
KiUnexpectedInterrupt61();
KiUnexpectedInterrupt62();
KiUnexpectedInterrupt63();
KiUnexpectedInterrupt64();
KiUnexpectedInterrupt65();
KiUnexpectedInterrupt66();
KiUnexpectedInterrupt67();
KiUnexpectedInterrupt68();
KiUnexpectedInterrupt69();
KiUnexpectedInterrupt7();
KiUnexpectedInterrupt70();
KiUnexpectedInterrupt71();
KiUnexpectedInterrupt72();
KiUnexpectedInterrupt73();
KiUnexpectedInterrupt74();
KiUnexpectedInterrupt75();
KiUnexpectedInterrupt76();
KiUnexpectedInterrupt77();
KiUnexpectedInterrupt78();
KiUnexpectedInterrupt79();
KiUnexpectedInterrupt8();
KiUnexpectedInterrupt80();
KiUnexpectedInterrupt81();
KiUnexpectedInterrupt82();
KiUnexpectedInterrupt83();
KiUnexpectedInterrupt84();
KiUnexpectedInterrupt85();
KiUnexpectedInterrupt86();
KiUnexpectedInterrupt87();
KiUnexpectedInterrupt88();
KiUnexpectedInterrupt89();
KiUnexpectedInterrupt9();
KiUnexpectedInterrupt90();
KiUnexpectedInterrupt91();
KiUnexpectedInterrupt92();
KiUnexpectedInterrupt93();
KiUnexpectedInterrupt94();
KiUnexpectedInterrupt95();
KiUnexpectedInterrupt96();
KiUnexpectedInterrupt97();
KiUnexpectedInterrupt98();
KiUnexpectedInterrupt99();
KiUnexpectedInterruptTail();
KiUnlinkWaitBlocks();
KiUnlockKobjectArray();
KiUnmarkTimer2Running();
KiUnmaskSecondaryInterruptInternal();
KiUpdateCpuTargetByRate();
KiUpdateCpuTargetByWeight();
KiUpdateDr7();
KiUpdateGroupSchedulingRank();
KiUpdateMinimumWeight();
KiUpdateNumberProcessors();
KiUpdateNumberProcessorsIpi();
KiUpdateProcessorCount();
KiUpdateRunTime();
KiUpdateSharedReadyQueueAffinityThread();
KiUpdateSystemTime();
KiUpdateThreadSchedulingProperties();
KiUpdateTime();
KiUpdateTimeAssist();
KiUpdateTimer2Flags();
KiUpdateXSaveSize();
KiVdmSetUserCR0();
KiWaitForAllObjects();
KiWaitForContextSwap();
KiWakePriQueueWaiter();
KiWakeQueueWaiter();
KiWriteFixedMtrr();
KiXMMIZeroPages();
KiXMMIZeroPagesNoSave();
KiZeroPages();
KitInitialize();
KitLogFeatureUsage();
KitpInitAitSampleRate();
KitpOpenRegKey();
KitpReadUlongFromKey();
KseAddHardwareId();
KseDriverLoadImage();
KseDriverScopeInitialize();
KseDriverUnloadImage();
KseDsCallbackHookAddDevice();
KseDsCallbackHookDriverStartIo();
KseDsCallbackHookDriverUnload();
KseDsCallbackHookIrpDeviceControlFunction();
KseDsCallbackHookIrpFunction();
KseDsCallbackHookIrpInternalDeviceControlFunction();
KseDsCallbackHookIrpPnpFunction();
KseDsCallbackHookIrpPowerFunction();
KseDsCompletionHookForPowerDevice();
KseDsCompletionHookForStartDevice();
KseDsCompletionHookForStopDevice();
KseDsHookDriverTargeted();
KseDsHookDriverUntargeted();
KseDsHookExAllocatePool();
KseDsHookExAllocatePoolWithTag();
KseDsHookExFreePool();
KseDsHookExFreePoolWithTag();
KseDsHookIoCreateDevice();
KseDsHookPoRequestPowerIrp();
KseGetIoCallbacks();
KseInitialize();
KseLookupHardwareId();
KseQueryDeviceData();
KseQueryDeviceDataList();
KseQueryDeviceFlags();
KseRegisterShim();
KseRegisterShimEx();
KseResetDeviceCache();
KseSetCompletionHook();
KseSetDeviceFlags();
KseShimDatabaseBootInitialize();
KseShimDatabaseBootRelease();
KseShimDatabaseClose();
KseShimDatabaseOpen();
KseShimDriverIoCallbacks();
KseUnregisterShim();
KseVersionLieInitialize();
KsepApplyShimsToDriver();
KsepCacheDeviceEqual();
KsepCacheDeviceFree();
KsepCacheDeviceHash();
KsepCacheDeviceInsertData();
KsepCacheDeviceQueryData();
KsepCacheHwIdEqual();
KsepCacheHwIdFree();
KsepCacheHwIdHash();
KsepCacheInitialize();
KsepCacheInsert();
KsepCacheLock();
KsepCacheLookup();
KsepCacheReset();
KsepCacheUninitialize();
KsepCompletionSafeWrapper();
KsepDbCacheInsertDevice();
KsepDbCacheQueryDevice();
KsepDbCacheQueryDeviceData();
KsepDbCacheQueryDeviceDataList();
KsepDbCacheReadDevice();
KsepDbFreeDriverShims();
KsepDbGetDriverShims();
KsepDbGetSdbString();
KsepDbGetShimInfo();
KsepDbQueryRegistryDeviceData();
KsepDbQueryRegistryDeviceDataList();
KsepDbReadKData();
KsepDbReadKFlag();
KsepDebugPrint();
KsepDriverPathTail();
KsepDsEventAddDevice();
KsepDsEventDataIrp();
KsepDsEventDevicePowerCompleted();
KsepDsEventDevicePowerIrp();
KsepDsEventDriverLoad();
KsepDsEventDriverStartIo();
KsepDsEventDriverUnload();
KsepDsEventIoCreateDevice();
KsepDsEventPnpIrp();
KsepDsEventPnpStartDevice();
KsepDsEventPnpStopDevice();
KsepDsEventPoolAllocate();
KsepDsEventPoolFree();
KsepDsEventRequestPowerIrp();
KsepDsEventSystemPowerIrp();
KsepEngineGetShimsFromRegistry();
KsepEngineInitialize();
KsepEngineReadFlags();
KsepEngineUninitialize();
KsepEvntLogFlagsApplied();
KsepEvntLogShimsApplied();
KsepFindExportedFunctionByName();
KsepGetLoadedModulesList();
KsepGetModuleInfoByAddress();
KsepGetModuleInfoByName();
KsepGetShimCallbacksForDriver();
KsepGetShimsForDriver();
KsepIsModuleShimmed();
KsepIsShimRegistered();
KsepLoadShimProvider();
KsepLogError();
KsepLogEtwMessage();
KsepLogInfo();
KsepMatchInitAcpiOemInfo();
KsepMatchInitBiosInfo();
KsepMatchInitCpuInfo();
KsepMatchInitMachineInfo();
KsepPatchDriverImportsTable();
KsepPatchImportTableEntry();
KsepPoolAllocateNonPaged();
KsepPoolAllocatePaged();
KsepPoolFreeNonPaged();
KsepPoolFreePaged();
KsepRegistryCloseKey();
KsepRegistryCreateKey();
KsepRegistryEnumValue();
KsepRegistryOpenKey();
KsepRegistryQueryDWORD();
KsepRegistryQueryDriverShims();
KsepRegistryQueryKeyInformation();
KsepRegistryQueryMULTISZ();
KsepRegistryQuerySZ();
KsepRegistryQueryValue();
KsepResolveApplicableShimsForDriver();
KsepResolveShimHooks();
KsepShimDbChanged();
KsepShimDbMapToMemory();
KsepShimDbUnmapFromMemory();
KsepStringAnsiToUnicode();
KsepStringConcatenate();
KsepStringDuplicate();
KsepStringDuplicateUnicode();
KsepStringFree();
KsepStringSplitMultiString();
KsepStringTransform();
KsepValidateShimProviderAndData();
KsrCleanupPageDatabase();
KsrInitPageDatabase();
KxFlushEntireTb();
KxWaitForLockChainValid();
KxWaitForLockOwnerShip();
KxWaitForLockOwnerShipWithIrql();
KxWaitForSpinLockAndAcquire();
KzInitializeSpinLock();
LOCK_ADDRESS_SPACE();
LOCK_ADDRESS_SPACE_SHARED();
LOCK_CM_RM_LIST();
LOCK_HIVE_LOAD();
LOCK_PAGED_POOL_WS();
LOCK_PAGED_POOL_WS_SHARED();
LOCK_PAGE_TABLE_COMMITMENT();
LOCK_POST_LIST();
LOCK_SYSTEM_CACHE_WS();
LOCK_SYSTEM_CACHE_WS_SHARED();
LOCK_SYSTEM_PTES_WS();
LOCK_SYSTEM_PTES_WS_SHARED();
LOCK_TRANSACTION_LIST();
LOCK_WORKING_SET();
LOCK_WORKING_SET_SHARED();
LOCK_WS();
LZNT1CompressChunk();
LZNT1DecompressChunk();
LZNT1FindMatchMaximum();
LZNT1FindMatchStandard();
LdrAccessResource();
LdrEnumResources();
LdrFindResourceDirectory_U();
LdrFindResourceEx_U();
LdrFindResource_U();
LdrInitSecurityCookie();
LdrIsResItemExist();
LdrLoadAlternateResourceModuleEx();
LdrProcessRelocationBlockLongLong();
LdrRelocateImage();
LdrResFallbackLangList();
LdrResFindResource();
LdrResFindResourceDirectory();
LdrResGetRCConfig();
LdrResSearchResource();
LdrRscIsTypeExist();
LdrUnloadAlternateResourceModule();
LdrUnloadAlternateResourceModuleEx();
LdrVerifyMappedImageMatchesChecksum();
LdrpAccessResourceData();
LdrpAccessResourceDataNoMultipleLanguage();
LdrpArmProcessRelocation();
LdrpCompareResourceNames_U();
LdrpFetchAddressOfSecurityCookie();
LdrpFindMessageInAlternateModule();
LdrpGenericProcessRelocation();
LdrpGetAlternateResourceModuleHandleEx();
LdrpGetFromMUIMemCache();
LdrpGetImageSize();
LdrpGetMappingFromCacheEntry();
LdrpGetParentLangId();
LdrpGetRcConfig();
LdrpGetResourceFileName();
LdrpInitMuiCrits();
LdrpKrnGetDataTableEntry();
LdrpLoadResourceFromAlternativeModule();
LdrpMapResourceFile();
LdrpOpenKey();
LdrpQueryValueKey();
LdrpResCompareResourceNames();
LdrpResGetMappingSize();
LdrpResGetResourceDirectory();
LdrpResSearchResourceInsideDirectory();
LdrpResSearchResourceMappedFile();
LdrpSearchResourceSection_U();
LdrpSectionTableFromVirtualAddress();
LdrpSetAlternateResourceModuleHandle();
LdrpThumbProcessRelocation();
LdrpVerifyAlternateResourceModule();
LockRMLog();
LockShutdownExclusive();
LockShutdownShared();
LogFwReport();
LogFwStat();
LogFwpRegisterWorker();
LookupEntryPoint();
LpcExitProcess();
LpcInitSystem();
LpcReplyWaitReplyPort();
LpcRequestPort();
LpcRequestWaitReplyPort();
LpcRequestWaitReplyPortEx();
LpcSendWaitReceivePort();
LpcpReplyWaitReplyPort();
LpcpRequestWaitReplyPort();
LsaCallAuthenticationPackage();
LsaDeregisterLogonProcess();
LsaFreeReturnBuffer();
LsaLogonUser();
LsaLookupAuthenticationPackage();
LsaRegisterLogonProcess();
MIDL_user_allocate();
MIDL_user_free();
MI_DECREMENT_USED_PTES_BY_HANDLE();
MI_DECREMENT_USED_PTES_BY_HANDLE_CLUSTER();
MI_DEREFERENCE_CONTROL_AREA_FILE();
MI_FLUSH_CACHE_DUE_TO_ATTRIBUTE_CHANGE();
MI_FREE_PAGED_SESSION_POOL_PAGES_LEFT();
MI_INITIALIZE_COLOR_BASE();
MI_IS_DECAY_PFN();
MI_IS_PFN();
MI_LOCK_COMBINE_FREELIST();
MI_LOCK_COMBINE_HASH();
MI_LOCK_RELOCATIONS_EXCLUSIVE();
MI_PAGEFILE_WRITE();
MI_REFERENCE_CONTROL_AREA_FILE();
MI_SESSION_IMAGE();
MI_SET_PAGING_FILE_INFO();
MI_UNLOCK_COMBINE_FREELIST();
MI_UNLOCK_COMBINE_HASH();
MI_UNLOCK_RELOCATIONS_EXCLUSIVE();
MI_UNUSED_SUBSECTIONS_COUNT_REMOVE();
MI_VA_IN_SESSION_SPECIAL_POOL();
MI_WRITE_VALID_PTE_VOLATILE();
MUIBugCheck();
MUIInitializeResourceLock();
MUIRegistrySystemRoutine();
MY_READ_PORT_UCHAR();
MY_READ_REGISTER_UCHAR();
MY_WRITE_PORT_UCHAR();
MY_WRITE_REGISTER_UCHAR();
MatchAll();
McGenControlCallbackV2();
McGenEventRegister();
MdlInvariantPostDriverCompletion();
MdlInvariantPostProcessing1();
MdlInvariantPreProcessing1();
MiAbortCombineScan();
MiAcquireNonPagedResources();
MiAcquireProperVm();
MiActOnPte();
MiActivePageClaimCandidate();
MiActivePageWorthTrying();
MiAddBackingForNewPoolVa();
MiAddExpansionNonPagedPool();
MiAddHalIoMappings();
MiAddLockedPageCharge();
MiAddLockedPageChargeForModifiedPage();
MiAddLockedPageChargeForProbe();
MiAddLockedPageChargeForTransitionPage();
MiAddMappedPtes();
MiAddMdlTracker();
MiAddPageToFlushMdl();
MiAddRangeToCrashDump();
MiAddSecureEntry();
MiAddToReservationCluster();
MiAddTriageDumpPtes();
MiAddViewsForSection();
MiAddViewsForSectionWithPfn();
MiAddWorkingSetPage();
MiAdjustCachedStacks();
MiAdjustModifiedPageLoad();
MiAdjustPteBins();
MiAdvancePrefetch();
MiAdvanceVadHint();
MiAgeWorkingSet();
MiAllocateAweInfo();
MiAllocateCombineProto();
MiAllocateContiguousMemory();
MiAllocateCrcList();
MiAllocateDriverPage();
MiAllocateDummyPage();
MiAllocateFixupVad();
MiAllocateImportList();
MiAllocateInPageSupport();
MiAllocateKernelStackPages();
MiAllocateLargeZeroPages();
MiAllocateMdlPagesByLists();
MiAllocateMemoryListLocks();
MiAllocateMostlyContiguous();
MiAllocatePagedPoolPages();
MiAllocatePagesForMdl();
MiAllocatePfnRepurposeLogDispatch();
MiAllocatePoolPages();
MiAllocateVad();
MiAllocateWorkingSetSwapSupport();
MiAllocateWsle();
MiAllowGuardFault();
MiAllowProtectionChange();
MiAllowWorkingSetExpansion();
MiAnyAddressLocked();
MiAppendSubsectionChain();
MiApplyBytestreamFixup();
MiApplyCompressedFixups();
MiApplyRawFixups();
MiApplyStraddleFixups();
MiArbitraryCodeBlocked();
MiAssignInitialPageAttribute();
MiAssignNonPagedPoolPtes();
MiAttachAndLockWorkingSet();
MiAttachSession();
MiAttachToOwningSession();
MiAttachTrimmerToSession();
MiAttemptCoalesce();
MiAttemptPageFileExtension();
MiAttemptPageFileReduction();
MiAttemptPageFileReductionApc();
MiAttemptSectionDelete();
MiAweViewInserter();
MiAweViewRemover();
MiBadMemoryLogger();
MiBadRefCount();
MiBadShareCount();
MiBeginProcessClean();
MiBoostUnmapPfn();
MiBuildForkPageTable();
MiBuildForkPte();
MiBuildForkVad();
MiBuildImageControlArea();
MiBuildImportsForBootDrivers();
MiBuildMappedCluster();
MiBuildPageTable();
MiBuildPagedPool();
MiBuildReservationCluster();
MiBuildWakeList();
MiBytesForFixupVad();
MiCacheImageSymbols();
MiCallDllUnloadAndUnloadDll();
MiCanFileBeTruncatedInternal();
MiCanFlushMakeProgress();
MiCanGrantExecute();
MiCanPageMove();
MiCancelPhase0Locking();
MiCaptureAllWorkingSetAccessBits();
MiCaptureAndResetWorkingSetAccessBits();
MiCaptureDeleteHierarchy();
MiCaptureDirtyBitToPfn();
MiCaptureImageExceptionValues();
MiCapturePageFileInfo();
MiCaptureProtectionFromLockedProto();
MiCaptureProtectionFromProto();
MiCaptureUlongPtrArray();
MiCaptureWriteWatchDirtyBit();
MiCauseOverCommitPopup();
MiCfgEliminateZeroPages();
MiChangePageAttribute();
MiChangePageAttributeBatch();
MiChargeCommitment();
MiChargeCommitmentCantExpand();
MiChargeCommitmentPageLockHeld();
MiChargeFullProcessCommitment();
MiChargeGlobalResidentAvailable();
MiChargeProcessCommitment();
MiChargeProcessPhysicalPages();
MiChargeResidentAvailable();
MiChargeSegmentCommit();
MiChargeTemporaryCommitmentForReduction();
MiChargeWsles();
MiCheckAndUpdatePagingFileMinimum();
MiCheckControlArea();
MiCheckDosCalls();
MiCheckForConflictingVad();
MiCheckForConflictingVadExistence();
MiCheckForControlAreaDeletion();
MiCheckForUserStackOverflow();
MiCheckLargePageOk();
MiCheckPageFileMapping();
MiCheckPhysicalAddressRange();
MiCheckProtoPtePageState();
MiCheckPteForWriteCluster();
MiCheckPteRelease();
MiCheckPteReserve();
MiCheckPurgeAndUpMapCount();
MiCheckReservePageFileSpace();
MiCheckSecuredImageVad();
MiCheckSecuredVad();
MiCheckSessionPoolAllocations();
MiCheckSpecialPoolSlop();
MiCheckSystemTrimEndCriteria();
MiCheckTrimUnusedPageFileRegions();
MiCheckUserVirtualAddress();
MiCheckVirtualAddress();
MiCheckWsLimits();
MiClaimPhysicalRun();
MiCleanCfg();
MiCleanEmbryonicProcess();
MiCleanPhysicalProcessPages();
MiCleanSection();
MiCleanWorkingSet();
MiClearContainingMapping();
MiClearFilePointer();
MiClearImports();
MiClearNonPagedPtes();
MiClearPageFileHash();
MiClearPfnImageVerified();
MiClearPteAccessed();
MiClearStackOwners();
MiClearVadBits();
MiCloneCompare();
MiCloneNoChange();
MiCloneProcessAddressSpace();
MiCloneReserveVadCommit();
MiCloneVads();
MiCloneWriteWatch();
MiCollapseRunTopDown();
MiCombineCandidate();
MiCombineCompare();
MiCombinePageSort();
MiCombiningInProgress();
MiCommitExistingVad();
MiCommitPageTablesForVad();
MiCommitPagefileBackedSection();
MiCommitVadCfgBits();
MiCommitmentAvailable();
MiComparePageHash();
MiComparePages();
MiCompleteProtoPteFault();
MiCompressImportList();
MiCompressRelocations();
MiCompressRvaList();
MiCompressedRvaListFirst();
MiCompressedRvaListNext();
MiComputeAgeDistribution();
MiComputeAgingPercent();
MiComputeCommitThresholds();
MiComputeDataFlushRange();
MiComputeDriverProtection();
MiComputeFaultNode();
MiComputeFlushRange();
MiComputeHash64();
MiComputeImagePteIndex();
MiComputeInitialCommitment();
MiComputeNodeMemory();
MiComputeOptimalZeroPath();
MiComputePageCommitment();
MiComputePageHash();
MiComputePrefetchCluster();
MiComputeProcessSharedCommit();
MiComputeProcessUserVa();
MiComputeStartingOffset();
MiComputeSystemTrimCriteria();
MiComputeTotalPrefetchPages();
MiComputeTrimAmount();
MiComputeUserWorkingSetSpan();
MiComputeWslePagesNeeded();
MiComputeZeroClusterMaximum();
MiConfigureMemoryInsertion();
MiConfigureMemoryRemoval();
MiConfirmPageIsZero();
MiConstructLoaderEntry();
MiContractPagingFiles();
MiContractWsSwapPageFile();
MiContractWsSwapPageFileWorker();
MiConvertAndFlushWsleVas();
MiConvertContiguousPages();
MiConvertInitialMemoryBlock();
MiConvertPrivateToProto();
MiConvertSessionImagePages();
MiConvertSessionImageToPagefileBacking();
MiConvertStandbyToProto();
MiConvertStaticSubsections();
MiConvertToLinkedWsles();
MiConvertWsleHash();
MiCopyDataPageToImagePage();
MiCopyForkedFixupVad();
MiCopyFromUntrustedMemory();
MiCopyHeaderIfResident();
MiCopyKstack();
MiCopyLargeVad();
MiCopyOnWrite();
MiCopyPage();
MiCopyPfnEntry();
MiCopySinglePage();
MiCopySystemImage();
MiCopyToCfgBitMap();
MiCopyToUntrustedMemory();
MiCopyToUserVa();
MiCopyTopLevelMappings();
MiCountExistingPageTables();
MiCountSharedPages();
MiCrcInCombineHash();
MiCreateDataFileMap();
MiCreateDecayPfn();
MiCreateFixupRecord();
MiCreateForkWsles();
MiCreateFreePfns();
MiCreateImageFileMap();
MiCreateLargePageVad();
MiCreateMemoryEvent();
MiCreateNewSection();
MiCreateNodeLists();
MiCreatePageFileSpaceBitmaps();
MiCreatePageTablesForPhysicalRange();
MiCreatePagingFileMap();
MiCreatePebOrTeb();
MiCreatePerSessionProtos();
MiCreatePfnDatabase();
MiCreatePteCopyList();
MiCreateRotateView();
MiCreateSection();
MiCreateSectionForDriver();
MiCreateSparsePfnDatabase();
MiCreateVadEventBitmap();
MiCreateWriteWatchView();
MiCreateZeroThreadContext();
MiCurrentPrefetchPageIndex();
MiDbgMarkPfnModified();
MiDbgReleaseAddress();
MiDbgTranslatePhysicalAddress();
MiDbgUnTranslatePhysicalAddress();
MiDbgWriteCheck();
MiDecayPfnFullyInitialized();
MiDecommitPages();
MiDecreaseAvailablePages();
MiDecrementAndInsertStandbyPages();
MiDecrementCloneBlockReference();
MiDecrementCombinedPte();
MiDecrementModifiedWriteCount();
MiDecrementSubsections();
MiDeleteAddressesInWorkingSet();
MiDeleteAllHashMappings();
MiDeleteBatch();
MiDeleteBootRange();
MiDeleteCachedSegment();
MiDeleteCachedSubsection();
MiDeleteControlArea();
MiDeleteControlAreaList();
MiDeleteEmptySubsections();
MiDeleteExcessWorkingSetPages();
MiDeleteFinalPageTables();
MiDeleteImageSecurity();
MiDeleteKernelStack();
MiDeleteKernelStackPages();
MiDeleteLockedTransitionPte();
MiDeleteMergedPte();
MiDeleteNoBlockStacks();
MiDeletePagablePteRange();
MiDeletePageDirectoryPages();
MiDeletePageFileSectionNodes();
MiDeletePageTableHierarchy();
MiDeletePageTablesForPhysicalRange();
MiDeleteParentDecayNode();
MiDeletePerSessionProtos();
MiDeletePfnList();
MiDeletePhysicalProcessPages();
MiDeletePhysmemVad();
MiDeletePteList();
MiDeletePteRange();
MiDeletePteRun();
MiDeleteRotateAndStopFaults();
MiDeleteSegmentPages();
MiDeleteSessionAddressSpace();
MiDeleteSystemPagableVm();
MiDeleteSystemPte();
MiDeleteTransitionPte();
MiDeleteVad();
MiDeleteVadBitmap();
MiDeleteValidSystemPte();
MiDeleteVirtualAddresses();
MiDeleteZeroThreadContext();
MiDemoteCombinedPte();
MiDemoteLargeFreePage();
MiDemotePool();
MiDepleteInitialPool();
MiDeprioritizeVARange();
MiDeprioritizeVad();
MiDerefPageFileSpaceBitmaps();
MiDereferenceControlArea();
MiDereferenceControlAreaBySection();
MiDereferenceControlAreaPfn();
MiDereferenceControlAreaProbe();
MiDereferenceExtendInfo();
MiDereferenceImports();
MiDereferenceIoSpace();
MiDereferencePageRuns();
MiDereferencePerSessionProtos();
MiDereferenceSegmentThread();
MiDereferenceSession();
MiDereferenceSessionFinal();
MiDereferenceVad();
MiDereferenceVadUnsafe();
MiDescribePageRun();
MiDestroySection();
MiDetachFromOwningSession();
MiDetachProcessFromSession();
MiDetachSession();
MiDetermineUserGlobalPteMask();
MiDiscardTransitionPte();
MiDispatchFault();
MiDoReplacement();
MiDoSingleFixup();
MiDoStackCopy();
MiDoneWithThisPageGetAnother();
MiDrainControlAreaWrites();
MiDrainSystemAccessLog();
MiDrainZeroLookasides();
MiDriverLoadSucceeded();
MiDummyApcRoutine();
MiDuplicateCloneLeaf();
MiEmptyAccessLogs();
MiEmptyDecayClusterTimers();
MiEmptyKernelStackCache();
MiEmptyPageAccessLog();
MiEmptyPteBins();
MiEmptyWorkingSet();
MiEmptyWorkingSetHelper();
MiEmptyWorkingSetPrivatePagesByVa();
MiEmptyWsPrivatePagesCallback();
MiEnableNewPfns();
MiEnablePagingOfDriver();
MiEnablePagingTheExecutive();
MiEncodeProtoFill();
MiEndingOffset();
MiEndingOffsetWithLock();
MiEnumKernelLeafPtes();
MiEnumLeafPtes();
MiExamineHalVa();
MiExceptionForMappedVa();
MiExchangeWsle();
MiExpandFlushMdl();
MiExpandNonPagedPool();
MiExpandPagedPool();
MiExpandPtes();
MiExpandSpecialPool();
MiExpandSystemCache();
MiExpandVadBitMap();
MiExpandVadBitMapDown();
MiExtendPagingFileMaximum();
MiExtendPagingFiles();
MiExtendSection();
MiFaultPteIntact();
MiFillCombinePage();
MiFillGapAddresses();
MiFillGapPtes();
MiFillMapFileInfo();
MiFillNoReservationCluster();
MiFillPageExtraInfo();
MiFillPagedPoolLockedDown();
MiFillPfnGaps();
MiFillSessionWorkingSetEntry();
MiFinalizePageAttribute();
MiFindActualFaultingPte();
MiFindClearBitsAligned();
MiFindContiguousMemoryInPool();
MiFindContiguousMemoryInPoolBitmap();
MiFindContiguousPages();
MiFindEmptyAddressRange();
MiFindEmptyAddressRangeDown();
MiFindEmptyAddressRangeDownTree();
MiFindEmptyAddressRangeInTree();
MiFindExportedRoutineByName();
MiFindFreePageFileSpace();
MiFindInitialNonPagedPool();
MiFindLargeNodePages();
MiFindLargePageMemory();
MiFindLargePagePhase0();
MiFindLargestLoaderDescriptor();
MiFindLastSubsection();
MiFindLoaderGap();
MiFindNonPagedPoolPages();
MiFindNonPagedPoolVa();
MiFindPageFileWriteCluster();
MiFindRebuildCandidate();
MiFindSharedCommitVads();
MiFinishHardFault();
MiFinishLastForkPageTable();
MiFinishPageFileExtension();
MiFinishProcessCreate();
MiFinishResume();
MiFinishVadDeletion();
MiFlushAcquire();
MiFlushComplete();
MiFlushControlArea();
MiFlushDataSection();
MiFlushDirtyBitsToPfn();
MiFlushPfnList();
MiFlushRelease();
MiFlushSectionInternal();
MiFlushTbAsNeeded();
MiFlushTbForNonPagedPool();
MiFlushTbList();
MiForcedTrim();
MiFormFullImageName();
MiFreeAweInfo();
MiFreeBootDriverInitializationCode();
MiFreeBootPageTable();
MiFreeClonePool();
MiFreeCombineBlock();
MiFreeCombinePool();
MiFreeContiguousPages();
MiFreeDriverInitialization();
MiFreeEmptyBootPageTable();
MiFreeExcessSegments();
MiFreeForkMaps();
MiFreeInPageSupportBlock();
MiFreeInitializationCode();
MiFreeLargePageMemory();
MiFreeLargePageView();
MiFreeLargePages();
MiFreeMdlTracker();
MiFreeModifiedReservations();
MiFreeOverlappedFlushEntry();
MiFreePageFileHashPfn();
MiFreePageFileHashPfns();
MiFreePageFileSpaceBitmaps();
MiFreePagedPoolPages();
MiFreePhysicalView();
MiFreePoolPages();
MiFreePoolPagesLeft();
MiFreeReadListPages();
MiFreeRelocations();
MiFreeRemainingReservations();
MiFreeResidentHeaderVa();
MiFreeRotateView();
MiFreeSessionSpaceMap();
MiFreeSmallPageFromMdl();
MiFreeUnmappedPageTables();
MiFreeUnusedSparsePages();
MiFreeVadEvents();
MiFreeWriteWatchView();
MiFreeWsleList();
MiGatherHiberRange();
MiGatherMappedPages();
MiGatherPagefilePages();
MiGetAvailablePagesForTrimPass();
MiGetCcAccessLog();
MiGetControlAreaCfg();
MiGetControlAreaPtes();
MiGetEffectivePagePriorityThread();
MiGetExceptionInfo();
MiGetFileHashPage();
MiGetFreeOrZeroPage();
MiGetHighestPteConsumer();
MiGetImageProtection();
MiGetInPageSupportBlock();
MiGetInstructionPointer();
MiGetLargePageToZero();
MiGetNextPageTable();
MiGetNextSession();
MiGetNodeChannelPageCounts();
MiGetPage();
MiGetPageFileSectionForReservation();
MiGetPageForHeader();
MiGetPageForWriteCluster();
MiGetPageProtection();
MiGetPfnProtection();
MiGetPhysicalAddress();
MiGetPrivatePageCount();
MiGetProtoPteAddress();
MiGetProtoPteAddressExtended();
MiGetPteFromCopyList();
MiGetPteMappingPair();
MiGetReadyInPageBlock();
MiGetSharedProtos();
MiGetSharedProtosAtDpcLevel();
MiGetSystemPage();
MiGetSystemPteStatistics();
MiGetSystemRegionIndex();
MiGetTopLevelPfn();
MiGetTopPteAddress();
MiGetVadWakeList();
MiGetWorkingSetInfo();
MiGetWorkingSetInfoEx();
MiGetWorkingSetInfoList();
MiGetWsAndInsertVad();
MiGetWsAndMakePageTablesNx();
MiGetZeroedPages();
MiHandleCallback();
MiHandleForkTransitionPte();
MiHandleInPageError();
MiHandleSynchronousFlushError();
MiHyperPage();
MiIdentifyPfn();
MiIdentifyPfnWrapper();
MiImageCantMove();
MiImagePagable();
MiImagePageOk();
MiImageUnused();
MiInPageSingleKernelStack();
MiInSwapPageDirectories();
MiIncreaseAvailablePages();
MiIncreaseCommitLimits();
MiIncreaseNonPagedPoolUsage();
MiIncrementCombinedPte();
MiInitMachineDependent();
MiInitPerfMemoryFlags();
MiInitSystem();
MiInitializeApiSets();
MiInitializeBlankPfns();
MiInitializeBootDefaults();
MiInitializeBootLoadedDriverPfns();
MiInitializeBootPageDirectoryPages();
MiInitializeBootProcess();
MiInitializeCacheFlushing();
MiInitializeCfg();
MiInitializeColorBase();
MiInitializeColorBaseSession();
MiInitializeColors();
MiInitializeCombining();
MiInitializeCommitment();
MiInitializeDecayPfns();
MiInitializeDriverImages();
MiInitializeDynamicBitmap();
MiInitializeDynamicPfns();
MiInitializeDynamicVa();
MiInitializeForkMaps();
MiInitializeGapFrames();
MiInitializeIdenticalPageList();
MiInitializeInPageSupport();
MiInitializeIoTrackers();
MiInitializeKernelStacks();
MiInitializeLargePageNodeLists();
MiInitializeLoadedModuleList();
MiInitializeLockedPagesTracking();
MiInitializeMdlTracking();
MiInitializeMemoryEvents();
MiInitializeMirroring();
MiInitializeModifiedPageWriter();
MiInitializeNonPagedPool();
MiInitializeNonPagedPoolThresholds();
MiInitializeNuma();
MiInitializeNumaRanges();
MiInitializePageAccessLogging();
MiInitializePageDirectoryPages();
MiInitializePageForHeader();
MiInitializePfn();
MiInitializePfnForOtherProcess();
MiInitializePfnListHeads();
MiInitializePfnsForValidMappings();
MiInitializePoolEvents();
MiInitializePrefetchHead();
MiInitializeProbePacketVm();
MiInitializeProcessBottomUpEntropy();
MiInitializeProcessTopDownEntropy();
MiInitializePrototypePtes();
MiInitializePteInfo();
MiInitializeReadInProgressPfn();
MiInitializeRelocations();
MiInitializeScrubPacket();
MiInitializeSections();
MiInitializeSessionIds();
MiInitializeSessionPool();
MiInitializeSlowPte();
MiInitializeSpecialPool();
MiInitializeStoreSupport();
MiInitializeSystemCache();
MiInitializeSystemImagePage();
MiInitializeSystemPageTable();
MiInitializeSystemPtes();
MiInitializeSystemSpaceMap();
MiInitializeSystemVaRange();
MiInitializeSystemWorkingSetList();
MiInitializeTbFlushList();
MiInitializeTransitionPfn();
MiInitializeTrimCriteria();
MiInitializeUnusablePfn();
MiInitializeUserNoAccess();
MiInitializeVadBitMap();
MiInitializeWorkingSetList();
MiInitializeWorkingSetManagerParameters();
MiInitializeZeroPagePtes();
MiInsertAndUnlockStandbyPages();
MiInsertAweInfo();
MiInsertBasedSection();
MiInsertCachedPte();
MiInsertClone();
MiInsertControlAreaVad();
MiInsertControlAreaView();
MiInsertDecayClusterTimer();
MiInsertInSystemSpace();
MiInsertIoSpaceMap();
MiInsertLargePageInFreeOrZeroList();
MiInsertLargePageInNodeList();
MiInsertNewCombineBlocks();
MiInsertNewProcess();
MiInsertNonPagedPoolOnSlist();
MiInsertPageFileInList();
MiInsertPageInFreeOrZeroedList();
MiInsertPageInList();
MiInsertPrivateVad();
MiInsertProtectedStandbyPage();
MiInsertPteTracker();
MiInsertSubsectionNode();
MiInsertTbFlushEntry();
MiInsertUnusedSegment();
MiInsertUnusedSubsection();
MiInsertVad();
MiInsertVadCharges();
MiInsertVadEvent();
MiInsertVadList();
MiInsertViewOfPhysicalSection();
MiInsertWsle();
MiInvalidateCollidedIos();
MiInvalidateCollidedPfns();
MiInvalidateHiberPhasePages();
MiIrpCompletionApcRoutine();
MiIsAddressValid();
MiIsCfgBitMapPageShared();
MiIsFaultPteIntact();
MiIsLowestPageTablePage();
MiIsPoolHeader();
MiIsProbeActive();
MiIsProcessCfgEnabled();
MiIsPteDecommittedPage();
MiIsPteProtectionCompatible();
MiIsRangeFullyCommitted();
MiIsRegularMemory();
MiIsSubsectionClean();
MiIsVaRangeAvailable();
MiIssueAsynchronousFlush();
MiIssueHardFault();
MiIssueHardFaultIO();
MiIssueNoPtesBugcheck();
MiIssuePageExtendRequest();
MiIssuePageExtendRequestNoWait();
MiIssueSynchronousFlush();
MiJoinSession();
MiJumpStack();
MiJumpStackTarget();
MiLargePageFault();
MiLargestSystemVa();
MiLdwPopupWorker();
MiLeapPrefetch();
MiLoadImageSection();
MiLoadImportDll();
MiLoadUserSymbols();
MiLocateAddress();
MiLocateCloneAddress();
MiLocateCombineBlock();
MiLocateExclusiveSecure();
MiLocateKernelSections();
MiLocatePagefileSubsection();
MiLocatePhysicalViewInTree();
MiLocateSessionProtosInSubsection();
MiLocateSubsection();
MiLocateSubsectionNode();
MiLocateVadEvent();
MiLocateWsle();
MiLockAddressSpaceToo();
MiLockAllMemoryLists();
MiLockAndDecrementReferenceCount();
MiLockAndDecrementShareCount();
MiLockAndInsertPageInFreeList();
MiLockAndSelectSessionAttachProcess();
MiLockCode();
MiLockControlAreaFileObjectExclusive();
MiLockControlAreaFileObjectShared();
MiLockDriverMappings();
MiLockDynamicMemoryExclusive();
MiLockImageSection();
MiLockLeafPageWorker();
MiLockLoadedModuleListExclusive();
MiLockNestedVad();
MiLockNonPagedPoolPte();
MiLockPagableImageSection();
MiLockPagableSections();
MiLockPage();
MiLockPageAndSetDirty();
MiLockPageTablePage();
MiLockPagedAddress();
MiLockProtoPage();
MiLockProtoPoolPage();
MiLockSectionControlArea();
MiLockSetPfnPriority();
MiLockTrackerCompare();
MiLockTransitionLeafPageUnsafe();
MiLockUnlockCommon();
MiLockVad();
MiLockVadRange();
MiLockVadUnsafe();
MiLockWorkingSet();
MiLockWsSwapExclusive();
MiLogAllocateWsleEvent();
MiLogCombinedPteDelete();
MiLogFailedDriverLoad();
MiLogKernelStackEvent();
MiLogMapFileEvent();
MiLogMdlRangeEvent();
MiLogMemResetInfo();
MiLogNonPagedPoolReleaseEvent();
MiLogPageAccess();
MiLogPerfMemoryEvent();
MiLogPerfMemoryRangeEvent();
MiLogRelocationFaults();
MiLogRelocationRva();
MiLogRemoveWsleEvent();
MiLogSectionCreate();
MiLogVirtualRotateEvent();
MiLookupDataTableEntry();
MiMakeHyperRangeAccessible();
MiMakeImageReadOnly();
MiMakeOutswappedPageResident();
MiMakePageBad();
MiMakeProtectionMask();
MiMakeProtectionPfnCompatible();
MiMakeProtoAddressValid();
MiMakeProtoLeafValid();
MiMakeProtoTransition();
MiMakeSpecialPoolPaged();
MiMakeSystemAddressValid();
MiMakeSystemAddressValidSystemWs();
MiMakeSystemCacheRangeValid();
MiMakeZeroedPageTableRange();
MiMakeZeroedPageTables();
MiMapArbitraryPage();
MiMapCacheExceptionFilter();
MiMapImageInSystemProcess();
MiMapImageInSystemSpace();
MiMapInitialNonPagedPool();
MiMapIoSpace();
MiMapLockedPagesInUserSpace();
MiMapLockedPagesInUserSpaceHelper();
MiMapMdlCommon();
MiMapNewPfns();
MiMapNewSession();
MiMapNewWorkingSetPage();
MiMapPageFileHash();
MiMapPageInHyperSpaceWorker();
MiMapPagesToZero();
MiMapProcessExecutable();
MiMapProcessMetaPage();
MiMapSessionImage();
MiMapSinglePage();
MiMapUserLargePages();
MiMapViewInSystemSpace();
MiMapViewOfDataSection();
MiMapViewOfImageSection();
MiMapViewOfPhysicalSection();
MiMapViewOfSection();
MiMapWithLargePages();
MiMapWsleHash();
MiMappedPageWriter();
MiMarkBootGuardPage();
MiMarkBootKernelStack();
MiMarkHiberNotCachedPages();
MiMarkKernelPageTablePages();
MiMarkKernelPageTablesHelper();
MiMarkKernelStack();
MiMarkLargePageRange();
MiMarkMdlComplete();
MiMarkNonPagedHiberPhasePages();
MiMarkPageActive();
MiMarkPfnVerified();
MiMarkPrivateImageCfgBits();
MiMarkPrivateOpenCfgBits();
MiMarkPteDirty();
MiMarkSessionMasterProcess();
MiMarkSharedImageCfgBits();
MiMaximumCommitmentAvailable();
MiMergeTbFlushEntryBackwards();
MiMirrorNodeLargePages();
MiModifiedPageWriter();
MiModifiedWriterNoReservationSort();
MiMoveEccPagesToFreeList();
MiNoFaultFound();
MiNoPagesLastChance();
MiNodeCostSort();
MiNodeFreeZeroPages();
MiNonPagedPoolNumaNode();
MiNumberWsSwapPagefiles();
MiObtainFreePages();
MiObtainInitialPoolChunk();
MiObtainNonPagedPoolNumaVa();
MiObtainPagefileHashes();
MiObtainReferencedSecureVad();
MiObtainReferencedVad();
MiObtainReferencedVadEx();
MiObtainRelocationBits();
MiObtainSectionForDriver();
MiObtainSessionVa();
MiObtainSystemCacheView();
MiObtainSystemVa();
MiObtainTransitionPage();
MiOffsetToProtos();
MiOkToShrinkPageFiles();
MiOrderTrimList();
MiOutPageSingleKernelStack();
MiOutSwapPageDirectoryPages();
MiOutSwapPageDirectoryPtes();
MiOutSwapWorkingSetCallback();
MiPaeAllocate();
MiPaeAllocatePage();
MiPaeFree();
MiPaeFreePage();
MiPaeInitialize();
MiPageAttributeBatchChangeNeeded();
MiPageFileNoFreeSpace();
MiPageInRange();
MiPageNotZero();
MiPageTablesNeeded();
MiPageToNode();
MiPagefileSectionCompare();
MiParseComImage();
MiParseImageCfgBits();
MiParseImageSectionHeaders();
MiPerSessionProtosCompare();
MiPerformCombineScan();
MiPerformFixups();
MiPerformMemoryChange();
MiPfAllocateMdls();
MiPfCoalesceAndIssueIOs();
MiPfCompletePrefetchIos();
MiPfExecuteReadList();
MiPfIssueCoalesceCandidates();
MiPfIssueCoalescedSupport();
MiPfPrepareReadList();
MiPfPrepareSequentialReadList();
MiPfPutPagesInTransition();
MiPfnReferenceCountIsZero();
MiPfnShareCountIsZero();
MiPfnsWorthTrying();
MiPhysicalPoolCheck();
MiPhysicalViewCompareVpn();
MiPopFreeWsle();
MiPopulateCfgBitMap();
MiPopulateWorkingSetFreeList();
MiPreInitializeSystemImagePage();
MiPrefetchControlArea();
MiPrefetchJumpVad();
MiPrefetchRestOfCluster();
MiPrefetchVirtualMemory();
MiPrepareSegmentForDeletion();
MiPrivateFixup();
MiPrivateFixupNeeded();
MiProbeLeafFrame();
MiProbeLockFrame();
MiProcessCrcList();
MiProcessDeleteOnClose();
MiProcessDereferenceList();
MiProcessLoadConfigForDriver();
MiProcessLoaderEntry();
MiProcessWorkingSets();
MiProcessWsInSwapFault();
MiProcessWsInSwapRanges();
MiProtectAweRegion();
MiProtectKernelRegions();
MiProtectPool();
MiProtectPrivateMemory();
MiProtectSystemImage();
MiProtectVirtualMemory();
MiProtoFault();
MiPteBinsNeedTrimming();
MiPteNeedsCommitCharge();
MiPulseCommitSignal();
MiPulseLowAvailableEvent();
MiPurgeImageSection();
MiPurgeLargeZeroNodePages();
MiPurgeSpecialPoolPaged();
MiPurgeSubsection();
MiPurgeTransitionList();
MiPurgeZeroList();
MiPushBadPool();
MiQueryAddressSpan();
MiQueryAddressState();
MiQueryPfnUnsafe();
MiQueueControlAreaDelete();
MiQueuePageAccessLog();
MiQueuePageFileExtension();
MiQueueSyncModifiedWriterApc();
MiQueueWorkingSetRequest();
MiRaisedIrqlFault();
MiReadWriteVirtualMemory();
MiReadyFlushMdlToWrite();
MiReadyStandbyPageForActive();
MiRebuildLargePage();
MiRebuildLargePages();
MiRecheckCombineVm();
MiReclaimSystemVa();
MiReduceCommitLimits();
MiReduceWs();
MiRefPageFileSpaceBitmaps();
MiReferenceCfgVad();
MiReferenceControlArea();
MiReferenceControlAreaForCacheManager();
MiReferenceControlAreaPfn();
MiReferenceInPageFile();
MiReferenceIoSpace();
MiReferencePageForCluster();
MiReferencePageRuns();
MiReferencePagefileSection();
MiReferencePfBackedSection();
MiReferenceSubsection();
MiReferenceVad();
MiRegistryVaSort();
MiReleaseArbitraryPage();
MiReleaseConfirmedPageFileInfo();
MiReleaseControlAreaWaiters();
MiReleaseDriverPtes();
MiReleaseFlushInProgress();
MiReleaseFreshPage();
MiReleaseImageSection();
MiReleaseInPageRefs();
MiReleaseNonPagedResources();
MiReleaseOutSwapReservations();
MiReleasePageFileSectionInfo();
MiReleasePageFileSpace();
MiReleasePageHash();
MiReleaseProcessReferenceToSessionDataPage();
MiReleasePteCopyList();
MiReleasePtes();
MiReleaseReadListResources();
MiReleaseScrubPacket();
MiReleaseSystemCacheView();
MiReleaseWorkingSetForDebugger();
MiReleaseWsle();
MiReleaseZeroingVa();
MiRelinkStandbyPage();
MiReloadBootLoadedDrivers();
MiRelocateImage();
MiRelocateImageAgain();
MiRelocateImagePfn();
MiRelockProtoPoolPage();
MiRememberUnloadedDriver();
MiRemoveAnyPage();
MiRemoveControlAreaView();
MiRemoveDecayClusterTimer();
MiRemoveEntryWsle();
MiRemoveFreePoolMemoryFromDump();
MiRemoveFromSystemSpace();
MiRemoveImageSessionWide();
MiRemoveIoSpaceMap();
MiRemoveLockedPageCharge();
MiRemoveLockedPageChargeAndDecRef();
MiRemoveLockedPageFromWorkingSet();
MiRemoveLowestPriorityStandbyPage();
MiRemoveMappedPtes();
MiRemovePageFromWorkingSet();
MiRemovePhysicalMemory();
MiRemovePoolPages();
MiRemovePoolRegion();
MiRemovePteTracker();
MiRemoveSecureEntry();
MiRemoveSingleWsle();
MiRemoveSpecialPoolRange();
MiRemoveUnusedSegment();
MiRemoveUnusedSegments();
MiRemoveUnusedSubsection();
MiRemoveUserPhysicalPagesVad();
MiRemoveVadCharges();
MiRemoveViewsFromSection();
MiRemoveViewsFromSectionWithPfn();
MiRemoveWakeListEntry();
MiRemoveWorkingSetPages();
MiRemoveWsle();
MiRemoveWsleFromFreeList();
MiReplaceLockedPage();
MiReplacePageOfProtoPool();
MiReplacePageTablePage();
MiReplaceRotateWithDemandZero();
MiReplaceTransitionPage();
MiReplaceWorkingSetEntry();
MiReplaceWorkingSetEntryLarge();
MiReplaceWorkingSetEntrySmall();
MiReplaceWsleHash();
MiReplenishBitMap();
MiReplenishFromNodeLargePages();
MiReplenishLocalCommit();
MiReplenishPageSlist();
MiReplenishProcessorResidentAvailable();
MiReplicatePteChange();
MiReportPageHashError();
MiReserveDriverPtes();
MiReservePageFileSpace();
MiReservePageFileSpaceForPage();
MiReservePageHash();
MiReservePtes();
MiResetVirtualMemory();
MiResidentPagesForSpan();
MiResolveDemandZeroFault();
MiResolveImageReferences();
MiResolveMappedFileFault();
MiResolvePageFileFault();
MiResolvePageTablePage();
MiResolveProtoPteFault();
MiResolveTransitionFault();
MiRestoreTransitionPte();
MiRestrictRangeToNode();
MiResumeFromHibernate();
MiRetardMdl();
MiReturnCcAccessLog();
MiReturnCommitment();
MiReturnDriverLoadPages();
MiReturnFullProcessCommitment();
MiReturnImageBase();
MiReturnLargePages();
MiReturnNonPagedPoolVa();
MiReturnPageTablePageCommitment();
MiReturnPhysicalPoolPages();
MiReturnProcessVads();
MiReturnPteMappingPair();
MiReturnSystemPtes();
MiReturnSystemVa();
MiReturnWsToExpansionList();
MiReuseStandbyPage();
MiRevertHiberPhasePages();
MiRevertRelocatedImagePfn();
MiRevertValidPte();
MiRotateComplete();
MiRotateHeadWsle();
MiRotatedToFrameBuffer();
MiSanitizePfnProtection();
MiScanPagefileSpace();
MiScanRelocationPage();
MiScrubAweMappedPage();
MiScrubLargeMappedPage();
MiScrubMemoryWorker();
MiScrubNode();
MiScrubNodeLargePageList();
MiScrubNodeLargePages();
MiScrubNonPagedPool();
MiScrubPage();
MiScrubProcesses();
MiSectionCompare();
MiSectionCreated();
MiSectionDelete();
MiSectionInitialization();
MiSecureVad();
MiSegmentDelete();
MiSelectCfgBitMap();
MiSelectImageBase();
MiSelectSessionAttachProcess();
MiSelectUserAddress();
MiSessionAddProcess();
MiSessionCreate();
MiSessionCreateInternal();
MiSessionInitializeWorkingSetList();
MiSessionInsertImage();
MiSessionLookupImage();
MiSessionObjectCreate();
MiSessionObjectDelete();
MiSessionPoolVector();
MiSessionProcessGlobalSubsections();
MiSessionRemoveImage();
MiSessionUnlinkProcess();
MiSessionWideInitializeAddresses();
MiSessionWideReserveImageAddress();
MiSessionWsMetaPage();
MiSetContiguousPoolNoSteal();
MiSetDeleteOnClose();
MiSetInPagePrefetchPriority();
MiSetInPagePriority();
MiSetMemoryPriorityProcess();
MiSetNonPagedPoolNoSteal();
MiSetPagesModified();
MiSetPagingOfDriver();
MiSetPermissionsOnInitialPool();
MiSetPfnOwnedAndActive();
MiSetPriorityVaRanges();
MiSetProtectionOnSection();
MiSetProtectionOnTransitionPte();
MiSetReadOnlyOnSectionView();
MiSetSystemCodeProtection();
MiSetVadBits();
MiSetWsleAge();
MiSharePage();
MiShowBadMapper();
MiShutdownSystem();
MiSignalLargePageRebuild();
MiSimpleAging();
MiSlowRotateCopy();
MiSmallVaStillMapsFrame();
MiSnapDriverRange();
MiSnapThunk();
MiSnapUnresolvedImport();
MiSplitBitmapPages();
MiSplitPrivatePage();
MiStartZeroPageWorkers();
MiStealPage();
MiStoreEvictPageFile();
MiStoreEvictThread();
MiStoreFaultComplete();
MiStoreFreeWriteSupport();
MiStoreGetWriteSupport();
MiStoreInPageComplete();
MiStoreInsertEvictMap();
MiStoreSetEvictPageFile();
MiStoreSetPageFileRunEvicted();
MiStoreUpToBeEvictedCount();
MiStoreUpdateBit();
MiStoreWaitForWriteComplete();
MiStoreWritePfn();
MiSubsectionCompare();
MiSwapHardFaultPage();
MiSwapStackPage();
MiSwapStackPageNoDpc();
MiSwapWslEntries();
MiSwitchBaseAddress();
MiSwitchKstackPages();
MiSwitchToPfns();
MiSwitchToTransition();
MiSyncCommitSignals();
MiSyncSystemPdes();
MiSynchronizePageFree();
MiSystemFault();
MiSystemWsMetaPage();
MiTerminateWsle();
MiTrackerRequiresCacheFlush();
MiTranslatePageForCopy();
MiTrimAllSystemPagableMemory();
MiTrimOrAgeWorkingSet();
MiTrimSection();
MiTrimSegmentCache();
MiTrimSharedPage();
MiTrimSharedPageFromViews();
MiTrimUnusedPageFileRegionsApc();
MiTrimUnusedPageFileRegionsWorker();
MiTrimWorkingSet();
MiTruncateLoaderBlock();
MiTryLocateWsle();
MiTryLockLeafAndContainingPagesAtDpc();
MiTryLockLeafPage();
MiTryLockPageAtDpc();
MiTryLockProtoPoolPageAtDpc();
MiTryLockVad();
MiTryUnlinkNodeLargePage();
MiUnlinkFreeOrZeroedPage();
MiUnlinkNodeLargePage();
MiUnlinkNodeLargePageHelper();
MiUnlinkPageFromBadList();
MiUnlinkPageFromLockedList();
MiUnlinkProcessFromSession();
MiUnlinkSessionList();
MiUnlinkSessionWorkingSet();
MiUnlinkWorkingSet();
MiUnloadSystemImage();
MiUnloadSystemImagePartial();
MiUnlockAllMemoryLists();
MiUnlockAndDereferenceVad();
MiUnlockAndDereferenceVadEx();
MiUnlockBootPageSections();
MiUnlockCodePage();
MiUnlockControlAreaFileObjectExclusive();
MiUnlockControlAreaFileObjectShared();
MiUnlockDriverCode();
MiUnlockDriverMappings();
MiUnlockDynamicMemoryExclusive();
MiUnlockImageSection();
MiUnlockMdlWritePages();
MiUnlockNestedProtoPoolPage();
MiUnlockNestedVad();
MiUnlockPage();
MiUnlockPageTableCharges();
MiUnlockPagedAddress();
MiUnlockProtoPoolPage();
MiUnlockVa();
MiUnlockVad();
MiUnlockVadEx();
MiUnlockVadRange();
MiUnlockVadUnsafe();
MiUnlockWsSwapExclusive();
MiUnmapImageInSystemSpace();
MiUnmapLargeDriver();
MiUnmapLargePages();
MiUnmapLargeUserPages();
MiUnmapLockedPagesInUserSpace();
MiUnmapPageInHyperSpaceWorker();
MiUnmapSinglePage();
MiUnmapVad();
MiUnmapViewOfSection();
MiUnsecureVirtualMemoryAgainstWrites();
MiUpControlAreaRefs();
MiUpdateAvailableEvents();
MiUpdateClaimDistribution();
MiUpdateExpansionPoolHighBit();
MiUpdateForkMaps();
MiUpdateInitialPoolHighBit();
MiUpdateLargePagePfns();
MiUpdateLargePageSectionPfn();
MiUpdateLastSubsectionSize();
MiUpdatePageAttributeStamp();
MiUpdatePageFileSectionList();
MiUpdatePageTableUseCount();
MiUpdatePagingFileMinimum();
MiUpdatePerSessionProto();
MiUpdatePfnBackingStore();
MiUpdatePfnPriority();
MiUpdatePfnPriorityByPte();
MiUpdatePfnProtection();
MiUpdatePrefetchPriority();
MiUpdateReserveClusterInfo();
MiUpdateSessionPdeMaster();
MiUpdateSystemPdes();
MiUpdateThunks();
MiUpdateUserMappings();
MiUpdateVadBits();
MiUpdateVadHint();
MiUpdateWorkingSetAgeDistribution();
MiUpdateWsle();
MiUpdateWsleHash();
MiUseLargeDriverPage();
MiUseLowIoPriorityForModifiedPages();
MiVaIsPageFileHash();
MiVaRegionSessionSpecialPool();
MiVaToSessionPdeMaster();
MiVadCompareVpn();
MiVadCompareVpnRange();
MiVadDeleted();
MiVadIsCfgBitmap();
MiVadMapsLargeImage();
MiVadPureReserve();
MiValidFault();
MiValidateImagePages();
MiValidateImagePfn();
MiValidateInPage();
MiValidatePagefilePageHash();
MiValidateReservedMapping();
MiValidateSectionCreate();
MiValidateSinglePageHash();
MiValidateUserCallTarget();
MiVerifyImageHeader();
MiViewMayContainPage();
MiVolunteerForTrimFirst();
MiWaitForAsynchronousFlushes();
MiWaitForCollidedFaultComplete();
MiWaitForFlushInProgress();
MiWaitForForkToComplete();
MiWaitForFreePage();
MiWaitForFreePageEx();
MiWaitForInPageComplete();
MiWaitForPageWriteCompletion();
MiWaitForRotateToComplete();
MiWaitForSystemCacheViewFlush();
MiWaitForVadDeletion();
MiWakeModifiedPageWriter();
MiWalkVaRange();
MiWorkingSetInfoCheckPageTable();
MiWorkingSetVeryLarge();
MiWriteComplete();
MiWriteCompletePfn();
MiWriteDecayPfnTimerLink();
MiWriteDemandZeroPte();
MiWriteLargePde();
MiWritePageFileHash();
MiWriteProtectSystemImages();
MiWsSwapPageFileNumber();
MiZeroAllPageFiles();
MiZeroBootMappings();
MiZeroFault();
MiZeroInParallel();
MiZeroInParallelWorker();
MiZeroLargePage();
MiZeroPageFile();
MiZeroPageFileFirstPage();
MiZeroPageWrite();
MiZeroPfn();
MiZeroPhysicalPage();
MiZeroSectionObjectPointer();
MigrateOOBELanguageToInstallationLanguage();
MmAccessFault();
MmAcquireLoadLock();
MmAddPhysicalMemory();
MmAddPrivateDataToCrashDump();
MmAddRangeToCrashDump();
MmAddVerifierThunks();
MmAdjustWorkingSetSize();
MmAdjustWorkingSetSizeEx();
MmAdvanceMdl();
MmAllocateContiguousMemory();
MmAllocateContiguousMemorySpecifyCache();
MmAllocateContiguousMemorySpecifyCacheNode();
MmAllocateContiguousNodeMemory();
MmAllocateDumpHibernateResources();
MmAllocateIndependentPages();
MmAllocateIsrStack();
MmAllocateMappingAddress();
MmAllocateMdlForIoSpace();
MmAllocateNodePagesForMdlEx();
MmAllocateNonCachedMemory();
MmAllocatePagesForMdl();
MmAllocatePagesForMdlEx();
MmAllocateSpecialPool();
MmAreMdlPagesCached();
MmAreMdlPagesLocked();
MmAssignProcessToJob();
MmAttachSession();
MmBuildMdlForNonPagedPool();
MmCallDllInitialize();
MmCanFileBeTruncated();
MmCanThreadFault();
MmChangeSectionBackingFile();
MmCheckCachedPageStates();
MmCheckForSafeExecution();
MmCheckMapIoSpace();
MmCheckMdlPages();
MmCheckSystemImage();
MmCleanProcessAddressSpace();
MmCombineIdenticalPages();
MmCommitSessionMappedView();
MmCopyMemory();
MmCopyToCachedPage();
MmCopyVirtualMemory();
MmCreateInitialImageSection();
MmCreateKernelStack();
MmCreateMdl();
MmCreateMirror();
MmCreatePeb();
MmCreateProcessAddressSpace();
MmCreateSection();
MmCreateTeb();
MmDbgCopyMemory();
MmDbgMarkPfnModifiedWorker();
MmDeleteKernelStack();
MmDeleteProcessAddressSpace();
MmDeleteProcessor();
MmDeleteTeb();
MmDetachSession();
MmDeterminePoolType();
MmDisableModifiedWriteOfSection();
MmDoesFileHaveUserWritableReferences();
MmDuplicateMemory();
MmEmptyAllWorkingSets();
MmEnableModifiedWriteOfSection();
MmEnablePAT();
MmEnableVerifierAllDrivers();
MmEnableVerifierForDriver();
MmEnforceWorkingSetLimit();
MmEnumerateAddressSpaceAndReferenceImages();
MmEnumerateBadPages();
MmEnumerateSystemImages();
MmExtendSection();
MmFlushAllFilesystemPages();
MmFlushAllPages();
MmFlushImageSection();
MmFlushSection();
MmFlushVirtualMemory();
MmForceSectionClosed();
MmFreeAccessPfnBuffer();
MmFreeBootRegistry();
MmFreeContiguousMemory();
MmFreeContiguousMemorySpecifyCache();
MmFreeIndependentPages();
MmFreeIsrStack();
MmFreeLoaderBlock();
MmFreeMappingAddress();
MmFreeNonCachedMemory();
MmFreePagesFromMdl();
MmFreeSpecialPool();
MmGetAvailablePagesBelowPriority();
MmGetCacheAttribute();
MmGetChannelInformation();
MmGetDefaultPagePriority();
MmGetDirectoryFrameFromProcess();
MmGetDumpRange();
MmGetFileNameForAddress();
MmGetFileNameForSection();
MmGetFileObjectForSection();
MmGetImageBase();
MmGetIoSessionState();
MmGetMaximumFileSectionSize();
MmGetMinWsPagePriority();
MmGetNextNode();
MmGetNextSession();
MmGetNodeChannelRanges();
MmGetNumberOfFreeSystemPtes();
MmGetPageBadStatus();
MmGetPageFileInformation();
MmGetPagedPoolCommitPointer();
MmGetPhysicalAddress();
MmGetPhysicalMemoryRanges();
MmGetSectionInformation();
MmGetSectionRange();
MmGetSessionById();
MmGetSessionGlobalVA();
MmGetSessionId();
MmGetSessionIdEx();
MmGetSessionLocaleId();
MmGetSessionMappedViewInformation();
MmGetSessionObjectById();
MmGetSessionPoolTracking();
MmGetSessionSchedulingGroup();
MmGetSessionSchedulingGroupByProcess();
MmGetStandbyRepurposed();
MmGetSystemPageFile();
MmGetSystemRoutineAddress();
MmGetVirtualForPhysical();
MmGrowKernelStack();
MmGrowKernelStackEx();
MmHardFaultBytesRequired();
MmIdentifyPhysicalMemory();
MmImageSectionPagable();
MmInSwapProcess();
MmInSwapWorkingSet();
MmInitNucleus();
MmInitSystem();
MmInitSystemDll();
MmInitializeHandBuiltProcess();
MmInitializeHandBuiltProcess2();
MmInitializeMemoryLimits();
MmInitializeProcessAddressSpace();
MmInitializeProcessor();
MmInvalidateDumpAddresses();
MmIsAddressValid();
MmIsDriverLoadedCurrentSession();
MmIsDriverSuspectForVerifier();
MmIsDriverVerifying();
MmIsDriverVerifyingByAddress();
MmIsFileMapped();
MmIsFileObjectAPagingFile();
MmIsIoSpaceActive();
MmIsNonPagedPoolNx();
MmIsNonPagedSystemAddressValid();
MmIsRecursiveIoFault();
MmIsSessionAddress();
MmIsSessionSpaceInvalid();
MmIsSpecialPoolAddress();
MmIsThisAnNtAsSystem();
MmIsVerifierEnabled();
MmIsWriteErrorFatal();
MmIssueMemoryListCommand();
MmLoadSystemImage();
MmLocateUnloadedDriver();
MmLockLoadedModuleListShared();
MmLockPagableDataSection();
MmLockPagableSectionByHandle();
MmLockPreChargedPagedPool();
MmLogQueryCombineStats();
MmLogSystemShareablePfnInfo();
MmLowPowerEpochCallback();
MmMapApiSetView();
MmMapIoSpace();
MmMapLockedPages();
MmMapLockedPagesSpecifyCache();
MmMapLockedPagesWithReservedMapping();
MmMapMemoryDumpMdl();
MmMapMemoryDumpMdlEx();
MmMapUserAddressesToPage();
MmMapViewInSessionSpace();
MmMapViewInSessionSpaceEx();
MmMapViewInSystemCache();
MmMapViewInSystemSpace();
MmMapViewInSystemSpaceEx();
MmMapViewOfSection();
MmMarkHiberPhase();
MmMarkHiberRange();
MmMarkImageForHiberPhase();
MmMarkPhysicalMemoryAsBad();
MmMarkPhysicalMemoryAsGood();
MmMdlPageContentsState();
MmMdlPagesAreZero();
MmObtainChargesToLockPagedPool();
MmOutPageKernelStack();
MmOutSwapProcess();
MmOutSwapWorkingSet();
MmPageEntireDriver();
MmPerfLogSessionRundown();
MmPerformMemoryListCommand();
MmPrefetchForCacheManager();
MmPrefetchPages();
MmPrefetchVirtualAddresses();
MmPrefetchVirtualMemory();
MmProbeAndLockPages();
MmProbeAndLockProcessPages();
MmProbeAndLockSelectedPages();
MmProcessWorkingSetControl();
MmPropagateDirtyBitsToPfn();
MmProtectMdlSystemAddress();
MmPurgeSection();
MmQueryMemoryListInformation();
MmQueryPfnList();
MmQueryProcessWorkingSetSwapPages();
MmQuerySessionWorkingSetInformation();
MmQuerySpecialPoolBlockSize();
MmQuerySpecialPoolBlockType();
MmQuerySystemMemoryInformation();
MmQuerySystemSize();
MmQuerySystemVaInformation();
MmQuerySystemWorkingSetInformation();
MmQueryVirtualMemory();
MmQueryWorkingSetInformation();
MmQuitNextSession();
MmRaisePoolQuota();
MmReadProcessPageTables();
MmReleaseDumpHibernateResources();
MmReleaseLoadLock();
MmRelocatePfnList();
MmRemoveExecuteGrants();
MmRemovePhysicalMemory();
MmRemoveSystemCacheFromDump();
MmReserveViewInSystemCache();
MmResetDriverPaging();
MmResetVirtualMemory();
MmResourcesAvailable();
MmReturnChargesToLockPagedPool();
MmReturnPoolQuota();
MmRotatePhysicalView();
MmScrubMemory();
MmSectionToSectionObjectPointers();
MmSecureVirtualMemory();
MmSecureVirtualMemoryAgainstWrites();
MmSessionSetUnloadAddress();
MmSetAccessLogging();
MmSetAddressRangeModified();
MmSetBankedSection();
MmSetChannelHeatOrder();
MmSetHardFaultBehavior();
MmSetMemoryPriorityProcess();
MmSetMinimumAgeRate();
MmSetPageProtection();
MmSetPfnListPriorities();
MmSetSessionLocaleId();
MmSetSessionObjectIoEvent();
MmSetSystemVaInformation();
MmSetTrimWhileAgingState();
MmShrinkInitialPool();
MmShutdownSystem();
MmSizeOfMdl();
MmSnapTriageDumpInformation();
MmStealTopLevelPage();
MmStoreAsyncWriteComplete();
MmStoreRegister();
MmTriageActiveInLastCrash();
MmTrimAllSystemPagableMemory();
MmTrimFilePagesFromWorkingSets();
MmTrimSection();
MmTryIdentifyPage();
MmUnloadSystemImage();
MmUnlockPagableImageSection();
MmUnlockPages();
MmUnlockPreChargedPagedPool();
MmUnmapIoSpace();
MmUnmapLockedPages();
MmUnmapReservedMapping();
MmUnmapViewInSessionSpace();
MmUnmapViewInSystemCache();
MmUnmapViewInSystemSpace();
MmUnmapViewOfSection();
MmUnsecureVirtualMemory();
MmUpdateHiberMappings();
MmUpdateImports();
MmUpdateImportsFinished();
MmUpdateMdlTracker();
MmUpdateOldWorkingSetPages();
MmVerifierTrimMemory();
MmVerifyCallbackFunction();
MmWaitForCacheManagerPrefetch();
MmWaitForSessionObjectIoEvent();
MmWorkingSetManager();
MmWriteTriageInformation();
MmWriteUnloadedDriverInformation();
MmZeroPageFileAtShutdown();
MmZeroPageThread();
MmZeroPageWrite();
MxComputeFreeNodeDescriptorRequirements();
MxComputePfnPagesNeeded();
MxConvertKernelHal();
MxCopyPage();
MxCreateFreePfns();
MxCreatePfn();
MxCreatePfns();
MxDescriptorSort();
MxFillPhysicalPage();
MxGetNextLargePage();
MxGetNextPage();
MxGetPhase0Mapping();
MxInitializeFreeNodeDescriptors();
MxMapPfnRange();
MxMapVa();
MxMemoryLicense();
MxMovePageTables();
MxReleaseFreeDescriptor();
MxRelocatePageTables();
MxSwapPages();
MxZeroBootMappings();
MxZeroPageTablePfns();
NP_CONTEXT::NpCleanup();
NP_CONTEXT::NpGetResidentLeaf();
NP_CONTEXT::NpInitialize();
NP_CONTEXT::NpLeafDerefInternal();
NP_CONTEXT::NpLeafRefInternal();
NP_CONTEXT::NpLeafRemoveInternal();
NP_CONTEXT::NpNodeAllocate();
NP_CONTEXT::NpNodeFree();
NP_CONTEXT::NpNodesPageOut();
NP_CONTEXT::NpStart();
NP_CONTEXT::NpiGetReservedBuffer();
NP_CONTEXT::NpiLeafPageIn();
NP_CONTEXT::NpiLeafPageOut();
NP_CONTEXT::NpiPerformPageOut();
NP_CONTEXT::NpiRebaseCallback();
NP_CONTEXT::NpiTreeWalkCallback();
NTFastDOSIO();
NormBuffer__Append();
NormBuffer__AppendAndSortDecomposed();
NormBuffer__AppendEx();
NormBuffer__GetCurrentOutputChar();
NormBuffer__GetLastChar();
NormBuffer__Insert();
NormBuffer__InsertAtBlockedLocation();
NormBuffer__IsBlocked();
NormBuffer__LastStartBase();
NormBuffer__LastStartBasePair();
NormBuffer__RecheckStartCombinations();
NormBuffer__RemoveCharacter();
NormBuffer__ReplaceLastStartBase();
NormBuffer__ReplaceLastStartBasePair();
NormBuffer__RewindOutputCharacter();
NormBuffer__SetLastStart();
NormBuffer__SortBeforeSameClass();
NormBuffer__VerifyLastStart();
NormalizationList__InitDone();
NormalizationList__Initialize();
NormalizationList__Lookup();
NormalizationLock__Acquire();
Normalization__AppendDecomposedChar();
Normalization__CanCombinableCharactersCombine();
Normalization__CanCombineWithStartBase();
Normalization__CanCombineWithStartFirstPair();
Normalization__GetCharacterInfo();
Normalization__GetFirstDecomposedCharPlane0();
Normalization__GetLastChar();
Normalization__GetSecondAndThirdDecomposedCharPlane0();
Normalization__GetSecondDecomposedCharPlane0();
Normalization__GetThirdAndLastDecomposedCharPlane0();
Normalization__GuessBetterCharCount();
Normalization__GuessCharCount();
Normalization__GuessCharCountBySize();
Normalization__IsNormalized();
Normalization__LoadClassMapExceptions();
Normalization__LoadTables();
Normalization__Normalize();
Normalization__NormalizeCharacter();
Normalization__PageLookup();
Normalization__TableLookup();
NtAcceptConnectPort();
NtAccessCheck();
NtAccessCheckAndAuditAlarm();
NtAccessCheckByType();
NtAccessCheckByTypeAndAuditAlarm();
NtAccessCheckByTypeResultList();
NtAccessCheckByTypeResultListAndAuditAlarm();
NtAccessCheckByTypeResultListAndAuditAlarmByHandle();
NtAddAtom();
NtAddAtomEx();
NtAddBootEntry();
NtAddDriverEntry();
NtAdjustGroupsToken();
NtAdjustPrivilegesToken();
NtAdjustTokenClaimsAndDeviceGroups();
NtAlertResumeThread();
NtAlertThread();
NtAlertThreadByThreadId();
NtAllocateLocallyUniqueId();
NtAllocateReserveObject();
NtAllocateUserPhysicalPages();
NtAllocateUuids();
NtAllocateVirtualMemory();
NtAlpcAcceptConnectPort();
NtAlpcCancelMessage();
NtAlpcConnectPort();
NtAlpcConnectPortEx();
NtAlpcCreatePort();
NtAlpcCreatePortSection();
NtAlpcCreateResourceReserve();
NtAlpcCreateSectionView();
NtAlpcCreateSecurityContext();
NtAlpcDeletePortSection();
NtAlpcDeleteResourceReserve();
NtAlpcDeleteSectionView();
NtAlpcDeleteSecurityContext();
NtAlpcDisconnectPort();
NtAlpcImpersonateClientOfPort();
NtAlpcOpenSenderProcess();
NtAlpcOpenSenderThread();
NtAlpcQueryInformation();
NtAlpcQueryInformationMessage();
NtAlpcRevokeSecurityContext();
NtAlpcSendWaitReceivePort();
NtAlpcSetInformation();
NtApphelpCacheControl();
NtAreMappedFilesTheSame();
NtAssignProcessToJobObject();
NtAssociateWaitCompletionPacket();
NtCallbackReturn();
NtCancelIoFile();
NtCancelIoFileEx();
NtCancelSynchronousIoFile();
NtCancelTimer();
NtCancelTimer2();
NtCancelWaitCompletionPacket();
NtClearEvent();
NtClose();
NtCloseObjectAuditAlarm();
NtCommitComplete();
NtCommitEnlistment();
NtCommitTransaction();
NtCompactKeys();
NtCompareTokens();
NtCompleteConnectPort();
NtCompressKey();
NtConnectPort();
NtContinue();
NtCreateDebugObject();
NtCreateDirectoryObject();
NtCreateDirectoryObjectEx();
NtCreateEnlistment();
NtCreateEvent();
NtCreateEventPair();
NtCreateFile();
NtCreateIRTimer();
NtCreateIoCompletion();
NtCreateJobObject();
NtCreateJobSet();
NtCreateKey();
NtCreateKeyTransacted();
NtCreateKeyTransacted_Stub();
NtCreateKeyedEvent();
NtCreateLowBoxToken();
NtCreateMailslotFile();
NtCreateMutant();
NtCreateNamedPipeFile();
NtCreatePagingFile();
NtCreatePort();
NtCreatePrivateNamespace();
NtCreateProcess();
NtCreateProcessEx();
NtCreateProfile();
NtCreateProfileEx();
NtCreateResourceManager();
NtCreateSection();
NtCreateSemaphore();
NtCreateSymbolicLinkObject();
NtCreateThread();
NtCreateThreadEx();
NtCreateTimer();
NtCreateTimer2();
NtCreateToken();
NtCreateTokenEx();
NtCreateTransaction();
NtCreateTransactionManager();
NtCreateUserProcess();
NtCreateWaitCompletionPacket();
NtCreateWaitablePort();
NtCreateWnfStateName();
NtCreateWorkerFactory();
NtDebugActiveProcess();
NtDebugContinue();
NtDelayExecution();
NtDeleteAtom();
NtDeleteBootEntry();
NtDeleteDriverEntry();
NtDeleteFile();
NtDeleteKey();
NtDeleteObjectAuditAlarm();
NtDeletePrivateNamespace();
NtDeleteValueKey();
NtDeleteWnfStateData();
NtDeleteWnfStateName();
NtDeviceIoControlFile();
NtDisableLastKnownGood();
NtDisplayString();
NtDrawText();
NtDuplicateObject();
NtDuplicateToken();
NtEnableLastKnownGood();
NtEnumerateBootEntries();
NtEnumerateDriverEntries();
NtEnumerateKey();
NtEnumerateSystemEnvironmentValuesEx();
NtEnumerateTransactionObject();
NtEnumerateValueKey();
NtExtendSection();
NtFilterBootOption();
NtFilterToken();
NtFilterTokenEx();
NtFindAtom();
NtFlushBuffersFile();
NtFlushBuffersFileEx();
NtFlushInstallUILanguage();
NtFlushInstructionCache();
NtFlushKey();
NtFlushProcessWriteBuffers();
NtFlushVirtualMemory();
NtFlushWriteBuffer();
NtFreeUserPhysicalPages();
NtFreeVirtualMemory();
NtFreezeRegistry();
NtFreezeTransactions();
NtFsControlFile();
NtGetCachedSigningLevel();
NtGetCompleteWnfStateSubscription();
NtGetContextThread();
NtGetCurrentProcessorNumber();
NtGetDevicePowerState();
NtGetEnvironmentVariableEx();
NtGetMUIRegistryInfo();
NtGetNextProcess();
NtGetNextThread();
NtGetNlsSectionPtr();
NtGetNotificationResourceManager();
NtGetWriteWatch();
NtImpersonateAnonymousToken();
NtImpersonateClientOfPort();
NtImpersonateThread();
NtInitializeNlsFiles();
NtInitializeRegistry();
NtInitiatePowerAction();
NtIsProcessInJob();
NtIsSystemResumeAutomatic();
NtIsUILanguageComitted();
NtListenPort();
NtLoadDriver();
NtLoadKey();
NtLoadKey2();
NtLoadKeyEx();
NtLockFile();
NtLockProductActivationKeys();
NtLockRegistryKey();
NtLockVirtualMemory();
NtMakePermanentObject();
NtMakeTemporaryObject();
NtMapCMFModule();
NtMapUserPhysicalPages();
NtMapUserPhysicalPagesScatter();
NtMapViewOfSection();
NtModifyBootEntry();
NtModifyDriverEntry();
NtNotifyChangeDirectoryFile();
NtNotifyChangeKey();
NtNotifyChangeMultipleKeys();
NtNotifyChangeSession();
NtOpenDirectoryObject();
NtOpenEnlistment();
NtOpenEvent();
NtOpenEventPair();
NtOpenFile();
NtOpenIoCompletion();
NtOpenJobObject();
NtOpenKey();
NtOpenKeyEx();
NtOpenKeyTransacted();
NtOpenKeyTransactedEx();
NtOpenKeyTransacted_Stub();
NtOpenKeyedEvent();
NtOpenMutant();
NtOpenObjectAuditAlarm();
NtOpenPrivateNamespace();
NtOpenProcess();
NtOpenProcessToken();
NtOpenProcessTokenEx();
NtOpenResourceManager();
NtOpenSection();
NtOpenSemaphore();
NtOpenSession();
NtOpenSymbolicLinkObject();
NtOpenThread();
NtOpenThreadToken();
NtOpenThreadTokenEx();
NtOpenTimer();
NtOpenTransaction();
NtOpenTransactionManager();
NtPlugPlayControl();
NtPowerInformation();
NtPrePrepareComplete();
NtPrePrepareEnlistment();
NtPrepareComplete();
NtPrepareEnlistment();
NtPrivilegeCheck();
NtPrivilegeObjectAuditAlarm();
NtPrivilegedServiceAuditAlarm();
NtPropagationComplete();
NtPropagationFailed();
NtProtectVirtualMemory();
NtPulseEvent();
NtQueryAttributesFile();
NtQueryBootEntryOrder();
NtQueryBootOptions();
NtQueryDebugFilterState();
NtQueryDefaultLocale();
NtQueryDefaultUILanguage();
NtQueryDirectoryFile();
NtQueryDirectoryObject();
NtQueryDriverEntryOrder();
NtQueryEaFile();
NtQueryEnvironmentVariableInfoEx();
NtQueryEvent();
NtQueryFullAttributesFile();
NtQueryInformationAtom();
NtQueryInformationEnlistment();
NtQueryInformationFile();
NtQueryInformationJobObject();
NtQueryInformationPort();
NtQueryInformationProcess();
NtQueryInformationResourceManager();
NtQueryInformationThread();
NtQueryInformationToken();
NtQueryInformationTransaction();
NtQueryInformationTransactionManager();
NtQueryInformationWorkerFactory();
NtQueryInstallUILanguage();
NtQueryIntervalProfile();
NtQueryIoCompletion();
NtQueryKey();
NtQueryLicenseValue();
NtQueryMultipleValueKey();
NtQueryMutant();
NtQueryObject();
NtQueryOpenSubKeys();
NtQueryOpenSubKeysEx();
NtQueryPerformanceCounter();
NtQueryPortInformationProcess();
NtQueryQuotaInformationFile();
NtQuerySection();
NtQuerySecurityAttributesToken();
NtQuerySecurityObject();
NtQuerySemaphore();
NtQuerySymbolicLinkObject();
NtQuerySystemEnvironmentValue();
NtQuerySystemEnvironmentValueEx();
NtQuerySystemInformation();
NtQuerySystemInformationEx();
NtQuerySystemTime();
NtQueryTimer();
NtQueryTimerResolution();
NtQueryValueKey();
NtQueryVirtualMemory();
NtQueryVolumeInformationFile();
NtQueryWnfStateData();
NtQueryWnfStateNameInformation();
NtQueueApcThread();
NtQueueApcThreadEx();
NtRaiseException();
NtRaiseHardError();
NtReadFile();
NtReadFileScatter();
NtReadOnlyEnlistment();
NtReadRequestData();
NtReadVirtualMemory();
NtRecoverEnlistment();
NtRecoverResourceManager();
NtRecoverTransactionManager();
NtRegisterProtocolAddressInformation();
NtRegisterThreadTerminatePort();
NtReleaseKeyedEvent();
NtReleaseMutant();
NtReleaseSemaphore();
NtReleaseWorkerFactoryWorker();
NtRemoveIoCompletion();
NtRemoveIoCompletionEx();
NtRemoveProcessDebug();
NtRenameKey();
NtRenameTransactionManager();
NtReplaceKey();
NtReplacePartitionUnit();
NtReplyPort();
NtReplyWaitReceivePort();
NtReplyWaitReceivePortEx();
NtReplyWaitReplyPort();
NtRequestPort();
NtRequestWaitReplyPort();
NtResetEvent();
NtResetWriteWatch();
NtRestoreKey();
NtResumeProcess();
NtResumeThread();
NtRollbackComplete();
NtRollbackEnlistment();
NtRollbackTransaction();
NtRollforwardTransactionManager();
NtSaveKey();
NtSaveKeyEx();
NtSaveMergedKeys();
NtSecureConnectPort();
NtSerializeBoot();
NtSetBootEntryOrder();
NtSetBootOptions();
NtSetCachedSigningLevel();
NtSetContextThread();
NtSetDebugFilterState();
NtSetDefaultHardErrorPort();
NtSetDefaultLocale();
NtSetDefaultUILanguage();
NtSetDriverEntryOrder();
NtSetEaFile();
NtSetEvent();
NtSetEventBoostPriority();
NtSetHighEventPair();
NtSetHighWaitLowEventPair();
NtSetIRTimer();
NtSetInformationDebugObject();
NtSetInformationEnlistment();
NtSetInformationFile();
NtSetInformationJobObject();
NtSetInformationKey();
NtSetInformationObject();
NtSetInformationProcess();
NtSetInformationResourceManager();
NtSetInformationThread();
NtSetInformationToken();
NtSetInformationTransaction();
NtSetInformationTransactionManager();
NtSetInformationVirtualMemory();
NtSetInformationWorkerFactory();
NtSetIntervalProfile();
NtSetIoCompletion();
NtSetIoCompletionEx();
NtSetLdtEntries();
NtSetLowEventPair();
NtSetLowWaitHighEventPair();
NtSetQuotaInformationFile();
NtSetSecurityObject();
NtSetSystemEnvironmentValue();
NtSetSystemEnvironmentValueEx();
NtSetSystemInformation();
NtSetSystemPowerState();
NtSetSystemTime();
NtSetThreadExecutionState();
NtSetTimer();
NtSetTimer2();
NtSetTimerEx();
NtSetTimerResolution();
NtSetUuidSeed();
NtSetValueKey();
NtSetVolumeInformationFile();
NtSetWnfProcessNotificationEvent();
NtShutdownSystem();
NtShutdownWorkerFactory();
NtSignalAndWaitForSingleObject();
NtSinglePhaseReject();
NtStartProfile();
NtStopProfile();
NtSubscribeWnfStateChange();
NtSuspendProcess();
NtSuspendThread();
NtSystemDebugControl();
NtTerminateJobObject();
NtTerminateProcess();
NtTerminateThread();
NtTestAlert();
NtThawRegistry();
NtThawTransactions();
NtTraceControl();
NtTraceEvent();
NtTranslateFilePath();
NtUmsThreadYield();
NtUnloadDriver();
NtUnloadKey();
NtUnloadKey2();
NtUnloadKeyEx();
NtUnlockFile();
NtUnlockVirtualMemory();
NtUnmapViewOfSection();
NtUnmapViewOfSectionEx();
NtUnsubscribeWnfStateChange();
NtUpdateWnfStateData();
NtVdmControl();
NtWaitForAlertByThreadId();
NtWaitForDebugEvent();
NtWaitForKeyedEvent();
NtWaitForMultipleObjects();
NtWaitForMultipleObjects32();
NtWaitForSingleObject();
NtWaitForWorkViaWorkerFactory();
NtWaitHighEventPair();
NtWaitLowEventPair();
NtWorkerFactoryWorkerReady();
NtWriteFile();
NtWriteFileGather();
NtWriteRequestData();
NtWriteVirtualMemory();
NtYieldExecution();
ObAdjustSecurityQuota();
ObAssignObjectSecurityDescriptor();
ObAssignSecurity();
ObAuditInheritedHandleProcedure();
ObCaptureObjectStateForDuplication();
ObCheckActiveHandles();
ObCheckCreateObjectAccess();
ObCheckObjectAccess();
ObCheckRefTraceProcess();
ObCloseHandle();
ObCloseHandleTableEntry();
ObCompleteObjectDuplication();
ObCreateObject();
ObCreateObjectType();
ObCreateObjectTypeEx();
ObDeassignSecurity();
ObDeleteCapturedInsertInfo();
ObDereferenceDeviceMap();
ObDereferenceObject();
ObDereferenceObjectDeferDelete();
ObDereferenceObjectDeferDeleteWithTag();
ObDereferenceObjectEx();
ObDereferenceProcessHandleTable();
ObDereferenceSecurityDescriptor();
ObDisableEtwReferenceTrace();
ObDrainDeferredObjectDeletion();
ObDuplicateObject();
ObEnableEtwReferenceTrace();
ObEnumerateObjectsByType();
ObFastDereferenceObject();
ObFastReferenceObject();
ObFastReferenceObjectLocked();
ObFastReplaceObject();
ObFindHandleForObject();
ObFreeObjectCreateInfoBuffer();
ObGetFilterVersion();
ObGetHandleInformation();
ObGetHandleInformationEx();
ObGetObjectInformation();
ObGetObjectSecurity();
ObGetObjectType();
ObGetProcessHandleCount();
ObInheritObjectHandle();
ObInitProcess();
ObInitSystem();
ObInitializeFastReference();
ObInitializeProcessor();
ObInsertObject();
ObInsertObjectEx();
ObIsDosDeviceLocallyMapped();
ObIsKernelHandle();
ObKillProcess();
ObLogSecurityDescriptor();
ObMakeTemporaryObject();
ObNormalizeHandleValue();
ObOpenObjectByName();
ObOpenObjectByPointer();
ObOpenObjectByPointerWithTag();
ObQueryDeviceMapInformation();
ObQueryHandleEntryInformation();
ObQueryNameInfo();
ObQueryNameString();
ObQueryNameStringMode();
ObQueryObjectAuditingByHandle();
ObQueryRefTraceInformation();
ObQuerySecurityDescriptorInfo();
ObQuerySecurityObject();
ObQueryTypeInfo();
ObQueryTypeName();
ObReferenceFileObjectForWrite();
ObReferenceObjectByHandle();
ObReferenceObjectByHandleWithTag();
ObReferenceObjectByName();
ObReferenceObjectByNameEx();
ObReferenceObjectByPointer();
ObReferenceObjectByPointerWithTag();
ObReferenceObjectExWithTag();
ObReferenceObjectSafe();
ObReferenceObjectSafeWithTag();
ObReferenceProcessHandleTable();
ObReferenceSecurityDescriptor();
ObRegisterCallbacks();
ObReleaseDuplicateInfo();
ObReleaseObjectSecurity();
ObSetDeviceMap();
ObSetDirectoryDeviceMap();
ObSetHandleAttributes();
ObSetRefTraceInformation();
ObSetSecurityDescriptorInfo();
ObSetSecurityObjectByPointer();
ObShutdownSystem();
ObUnRegisterCallbacks();
ObWaitForMultipleObjects();
ObWaitForSingleObject();
ObfDereferenceDeviceMap();
ObfDereferenceObject();
ObfDereferenceObjectWithTag();
ObfReferenceObject();
ObfReferenceObjectWithTag();
ObpAdjustAccessMask();
ObpAdjustCreatorAccessState();
ObpAllocateAndQuerySecurityDescriptorInfo();
ObpAllocateObject();
ObpAllocateObjectNameBuffer();
ObpAllocateTypeIndex();
ObpAssignSecurity();
ObpAuditObjectAccess();
ObpCallPostOperationCallbacks();
ObpCallPreOperationCallbacks();
ObpCaptureBoundaryDescriptor();
ObpCaptureHandleInformation();
ObpCaptureHandleInformationEx();
ObpCaptureObjectCreateInformation();
ObpCaptureObjectName();
ObpChargeQuotaForObject();
ObpCheckDuplicateEntries();
ObpCheckObjectReference();
ObpCheckTraverseAccess();
ObpCloseDirectoryObject();
ObpCloseHandle();
ObpCompareEntryLevel1();
ObpCompareEntryLevel2();
ObpCompareNamespaceEntry();
ObpCreateCacheEntry();
ObpCreateDirectoryObject();
ObpCreateDosDevicesDirectory();
ObpCreateHandle();
ObpCreateSymbolicLinkName();
ObpCreateTypeArray();
ObpDecrementHandleCount();
ObpDeferObjectDeletion();
ObpDeferPushRefDerefInfo();
ObpDeleteDirectoryEntry();
ObpDeleteDirectoryObject();
ObpDeleteNameCheck();
ObpDeleteSymbolicLink();
ObpDeregisterObject();
ObpDestroyStackAndObjectTables();
ObpDestroyTypeArray();
ObpEnumFindHandleProcedure();
ObpFreeDosDevicesProtection();
ObpFreeObject();
ObpFreeObjectNameBuffer();
ObpFreeWorkItemBlock();
ObpGetDosDevicesProtection();
ObpGetObjectRefInfo();
ObpGetObjectSecurity();
ObpGetShadowDirectory();
ObpGetTraceIndex();
ObpGrantAccess();
ObpHashBoundaryFunction();
ObpIncrementHandleCount();
ObpIncrementHandleCountEx();
ObpIncrementHandleDataBase();
ObpInitInfoBlockOffsets();
ObpInitSecurityDescriptorCache();
ObpInitStackAndObjectTables();
ObpInitStackTrace();
ObpInitializeNamespaceTable();
ObpInsertCallbackByAltitude();
ObpInsertDirectoryEntry();
ObpInsertHandleCount();
ObpInsertNamespaceEntry();
ObpInsertOrLocateNamedObject();
ObpIsObjectPoolTagTraced();
ObpIsUnsecureName();
ObpLockHandleDataBaseEntry();
ObpLookupDirectoryEntry();
ObpLookupNamespaceEntry();
ObpLookupObjectName();
ObpParseSymbolicLink();
ObpPostInterceptHandleCreate();
ObpPostInterceptHandleDuplicate();
ObpPreInterceptHandleCreate();
ObpPreInterceptHandleDuplicate();
ObpProcessRemoveObjectDpcWorker();
ObpProcessRemoveObjectQueue();
ObpPushRefDerefInfo();
ObpPushStackInfo();
ObpPushStackInfoQueue();
ObpReferenceDeviceMap();
ObpReferenceObjectByHandle();
ObpReferenceProcessObjectByHandle();
ObpReferenceSecurityDescriptor();
ObpRefillWorkItemFreeList();
ObpRegisterObject();
ObpRegisterPrivateNamespace();
ObpReleaseHandleInfo();
ObpRemoveNamespaceEntry();
ObpRemoveNamespaceFromTable();
ObpRemoveObjectRoutine();
ObpSetCurrentProcessDeviceMap();
ObpSetObjectAuditInfo();
ObpShutdownCloseHandleProcedure();
ObpStartRuntimeStackTrace();
ObpStopRuntimeStackTrace();
ObpUnlockHandleDatabaseEntry();
ObpValidateDesiredAccess();
ObpVerifyAccessToBoundaryEntry();
ObpVerifyCreatorAccessCheck();
Opcode0F();
Opcode0FV86();
OpcodeADDR32Prefix();
OpcodeADDR32PrefixV86();
OpcodeCLI();
OpcodeCLIV86();
OpcodeCSPrefix();
OpcodeCSPrefixV86();
OpcodeDSPrefix();
OpcodeDSPrefixV86();
OpcodeESPrefix();
OpcodeESPrefixV86();
OpcodeFSPrefix();
OpcodeFSPrefixV86();
OpcodeGSPrefix();
OpcodeGSPrefixV86();
OpcodeGenericPrefix();
OpcodeGenericPrefixV86();
OpcodeHLTV86();
OpcodeINB();
OpcodeINBV86();
OpcodeINBimm();
OpcodeINBimmV86();
OpcodeINSB();
OpcodeINSBV86();
OpcodeINSW();
OpcodeINSWV86();
OpcodeINTO();
OpcodeINTOV86();
OpcodeINTnn();
OpcodeINTnnV86();
OpcodeINW();
OpcodeINWV86();
OpcodeINWimm();
OpcodeINWimmV86();
OpcodeIRETV86();
OpcodeInvalid();
OpcodeInvalidV86();
OpcodeLOCKPrefix();
OpcodeLOCKPrefixV86();
OpcodeNPXV86();
OpcodeOPER32Prefix();
OpcodeOPER32PrefixV86();
OpcodeOUTB();
OpcodeOUTBV86();
OpcodeOUTBimm();
OpcodeOUTBimmV86();
OpcodeOUTSB();
OpcodeOUTSBV86();
OpcodeOUTSW();
OpcodeOUTSWV86();
OpcodeOUTW();
OpcodeOUTWV86();
OpcodeOUTWimm();
OpcodeOUTWimmV86();
OpcodePOPFV86();
OpcodePUSHFV86();
OpcodeREPNEPrefix();
OpcodeREPNEPrefixV86();
OpcodeREPPrefix();
OpcodeREPPrefixV86();
OpcodeSSPrefix();
OpcodeSSPrefixV86();
OpcodeSTI();
OpcodeSTIV86();
PDEV_OBJECT_IDL_Decode();
PDEV_QUERY_DATA_IDL_Decode();
PDEV_QUERY_RESULT_ACTION_DATA_IDL_Encode();
PSW_DEVICE_CREATE_IOCTL_DATA_Decode();
PSW_DEVICE_INTERFACE_PROPERTY_SET_IOCTL_DATA_Decode();
PSW_DEVICE_INTERFACE_REGISTER_IOCTL_DATA_Decode();
PSW_DEVICE_INTERFACE_SET_STATE_IOCTL_DATA_Decode();
PSW_DEVICE_PROPERTY_SET_IOCTL_DATA_Decode();
PcwAddInstance();
PcwCloseInstance();
PcwCreateInstance();
PcwRegister();
PcwUnregister();
PcwpAddFileSystemDiskIOCounterSet();
PcwpAddProcessorCounterSet();
PcwpAddSynchCounterSet();
PdcPoBlockSessionSwitch();
PdcPoControlInput();
PdcPoControlMonitor();
PdcPoCsEnterExitReason();
PdcPoCurrentPdcPhase();
PdcPoLowPower();
PdcPoPerfOverride();
PdcPoPpmClearOverride();
PdcPoRecordButton();
PdcPoReportButton();
PdcPoReportLidState();
PdcPoResiliencyClient();
PdcPoScreenOffEnabled();
PdcPoSetPowerAction();
PdcPoSetPowerSettingValue();
PdcPoSpmChangePowerSettings();
PdcPoSpmRegisterScenarios();
PdcPoVerifyActionPolicy();
PdcPoVerifyPowerState();
PdcPoVerifyProcessIntegrity();
PerfDiagInitialize();
PerfDiagpBootSystemProxyCallback();
PerfDiagpBootUserProxyCallback();
PerfDiagpInitializeLoggerInfo();
PerfDiagpIsTracingAllowed();
PerfDiagpProxyWorker();
PerfDiagpRequestState();
PerfDiagpRestartCKCL();
PerfDiagpSaveActiveDCLLogFileName();
PerfDiagpSecondaryLogonProxyCallback();
PerfDiagpShutdownProxyCallback();
PerfDiagpUpdateCKCLEnableFlags();
PerfInfoLogInterrupt();
PerfInfoLogIpi();
PerfInfoLogSysCallEntry();
PerfInfoLogSysCallExit();
PerfInfoLogUnexpectedInterrupt();
PerfInfoLogVirtualAlloc();
PerfInfoLogVirtualFree();
PerfLogExecutiveResourceAcquire();
PerfLogExecutiveResourceInitialize();
PerfLogExecutiveResourceRelease();
PerfLogExecutiveResourceSetOwnerPointer();
PerfLogExecutiveResourceWait();
PerfLogImageLoad();
PerfLogImageUnload();
PerfLogSpinLockAcquire();
PerfLogSpinLockRelease();
PfBlInitialize();
PfCalculateProcessHash();
PfCheckDeprioritizeFile();
PfCheckDeprioritizeImage();
PfFbBufferListAllocate();
PfFbBufferListAllocateTemporary();
PfFbBufferListCleanup();
PfFbBufferListFlushStandby();
PfFbBufferListInitialize();
PfFbBufferListInsertInFree();
PfFbBufferListShutdown();
PfFbBufferListUpdateMax();
PfFbLogEntryComplete();
PfFbLogEntryReserve();
PfFileInfoNotify();
PfGenerateTrace();
PfGetCompletedTrace();
PfHardFaultLog();
PfHardFaultRecord();
PfInitializeSuperfetch();
PfIoPowerEventNotify();
PfLogDeleteHelper();
PfLogEvent();
PfLogFileDataAccess();
PfLogForegroundProcess();
PfPowerActionNotify();
PfPrefetchRequestPrepareForVerify();
PfPrefetchRequestVerify();
PfPrefetchRequestVerifyPath();
PfPrefetchRequestVerifyRanges();
PfProcessCreateNotification();
PfProcessExitNotification();
PfQuerySuperfetchInformation();
PfRequestRangeCheck();
PfSetSuperfetchInformation();
PfSnActivateTrace();
PfSnAddProcessTrace();
PfSnAllocateEnablePrefetcherTimer();
PfSnAppLaunchScenarioControl();
PfSnBeginAppLaunch();
PfSnBeginBootPhase();
PfSnBeginScenario();
PfSnBeginTrace();
PfSnBuildDumpFromTrace();
PfSnBuildScenarioEventDescriptors();
PfSnCancelTraceTimer();
PfSnCaptureParamBlockString();
PfSnCheckActionsNeeded();
PfSnCheckLoggingForThread();
PfSnCheckModernApp();
PfSnCheckScenario();
PfSnCleanupPrefetchHeader();
PfSnCleanupPrefetchSectionInfo();
PfSnCleanupTrace();
PfSnDeactivateTrace();
PfSnDetermineEnablePrefetcher();
PfSnEnablePrefetcherTimerRoutine();
PfSnEndProcessTrace();
PfSnEndTrace();
PfSnEndTraceWorkerThreadRoutine();
PfSnFindImageFileName();
PfSnFindPrefetchVolumeInfoInList();
PfSnFindString();
PfSnGetCompletedTrace();
PfSnGetFirstPrefetchPhase();
PfSnGetPrefetchInstructions();
PfSnGetSectionObject();
PfSnGetUnsafeProcessParameters();
PfSnHashUnsafeUnicodeString();
PfSnInitializePrefetchHeader();
PfSnInitializePrefetcher();
PfSnIsHostingApplication();
PfSnIsSectionPrefetchedAfterPhase();
PfSnIsVolumeMounted();
PfSnLogEndTrace();
PfSnLogOpenVolumesForPrefetch();
PfSnLogPageFault();
PfSnLogPageFaultCommon();
PfSnLogPrefetchMetadata();
PfSnLogPrefetchSectionsStart();
PfSnLogPrefetchSectionsStop();
PfSnLogScenarioDecision();
PfSnOpenVolumesForPrefetch();
PfSnOperationProcess();
PfSnParametersRead();
PfSnParametersSetDefaults();
PfSnParametersVerify();
PfSnParsePrefetchParam();
PfSnPreallocatePrefetchHeader();
PfSnPrefetchCacheCtxInitialize();
PfSnPrefetchCacheCtxStart();
PfSnPrefetchCacheEntryGet();
PfSnPrefetchCacheEntryUpdate();
PfSnPrefetchCacheRepurposeAmount();
PfSnPrefetchFileMetadata();
PfSnPrefetchMetadata();
PfSnPrefetchScenario();
PfSnPrefetchSections();
PfSnQueryPrefetcherInformation();
PfSnQueryVolumeInfo();
PfSnQueueEnablePrefetcherTimer();
PfSnReferenceProcessTrace();
PfSnRemoveProcessTrace();
PfSnScanCommandLine();
PfSnSetPrefetcherInformation();
PfSnStartTraceTimer();
PfSnTraceBufferAllocate();
PfSnTraceGetLogEntry();
PfSnTraceTimerRoutine();
PfSnTracingStateDpcRoutine();
PfSnTracingStateExWorkerRoutine();
PfSnUpdatePrefetcherFlags();
PfTAccessTracingCleanup();
PfTAccessTracingInitialize();
PfTAccessTracingStart();
PfTAcquireEntryInfo();
PfTAcquireLogEntry();
PfTAllocateBuffers();
PfTCleanup();
PfTCleanupBuffers();
PfTCreateTraceDump();
PfTDumpEntryInfo();
PfTEntryInfoTableInitialize();
PfTFreeBufferList();
PfTFreeTraceDump();
PfTFullEventListAdd();
PfTGenerateTrace();
PfTGetFreeBuffer();
PfTGetLogEntryInfo();
PfTInitialize();
PfTInitializeBufferManager();
PfTLbInitialize();
PfTLoggingWorker();
PfTReplaceCurrentBuffer();
PfTSectInfoDisableDpc();
PfTSectInfoDisableSchedule();
PfTSectInfoDisableWorkItem();
PfTSetTraceWorkerPriority();
PfTSetTracingPriority();
PfTStart();
PfTTraceListAdd();
PfTTraceListTrim();
PfVerifyScenarioBuffer();
PfVerifyScenarioId();
PfVerifyTraceBuffer();
PfVolumeSupportedForPrefetch();
PfpAvailablePagesForPrefetch();
PfpChannelPowerInfo();
PfpChannelPowerRequest();
PfpCopyEvent();
PfpCopyUserPfnPrioRequest();
PfpCreateEvent();
PfpDeprioritizeOldPagesInWs();
PfpEventHandleFullBuffer();
PfpEventHandleOutOfBuffers();
PfpFileBuildReadList();
PfpFileBuildReadSupport();
PfpFileCheckAttributesForPrefetch();
PfpFileSetupObjectAttributes();
PfpFlushBuffers();
PfpFlushEventBuffers();
PfpGetPageListCount();
PfpGetParameter();
PfpLogApplicationEvent();
PfpLogEventRequest();
PfpLogPageAccess();
PfpLogScenarioEvent();
PfpLogStandbyRepurpose();
PfpMemoryListQuery();
PfpMemoryRangesQuery();
PfpOpenHandleClose();
PfpOpenHandleCreate();
PfpOpenHandleInitialize();
PfpParametersInitialize();
PfpParametersPropagate();
PfpParametersRead();
PfpParametersVerify();
PfpParametersWatcher();
PfpPfnPrioRequest();
PfpPowerActionDpcRoutine();
PfpPowerActionStartScenarioTracing();
PfpPrefetchDirectoryStream();
PfpPrefetchEntireDirectory();
PfpPrefetchFiles();
PfpPrefetchFilesTrickle();
PfpPrefetchPrivatePages();
PfpPrefetchRequest();
PfpPrefetchRequestPatchOffsets();
PfpPrefetchRequestPerform();
PfpPrefetchSharedCleanup();
PfpPrefetchSharedConflictNotify();
PfpPrefetchSharedInitialize();
PfpPrefetchSharedStart();
PfpPrefetchVolumesCleanup();
PfpPrivSourceAdd();
PfpPrivSourceEnum();
PfpProcessScenarioPhase();
PfpQueryFileExtentsRequest();
PfpQueryGpuUtilization();
PfpQueryScenarioInformation();
PfpReadSupportCleanup();
PfpReadSupportInitialize();
PfpRepurposeNameLoggingTrace();
PfpReturnAccessBuffer();
PfpRpCHashAddEntries();
PfpRpCHashDeleteEntries();
PfpRpCHashEmpty();
PfpRpCHashGrow();
PfpRpControlRequest();
PfpRpControlRequestCopy();
PfpRpControlRequestPerform();
PfpRpControlRequestReset();
PfpRpControlRequestUpdate();
PfpRpControlRequestVerify();
PfpRpFileKeyUpdate();
PfpRpInitialize();
PfpRpRehashIfNeeded();
PfpRpShutdown();
PfpRpStart();
PfpScenCtxInitialize();
PfpScenCtxPrefetchAbortSet();
PfpScenCtxPrefetchStateSet();
PfpScenCtxPrefetchWait();
PfpScenCtxQueryScenarioInformation();
PfpScenCtxScenarioSet();
PfpScenCtxServiceThreadSet();
PfpScenCtxStart();
PfpSectInfoHandleFullBuffer();
PfpSectInfoHandleOutOfBuffers();
PfpServiceMainThreadBoost();
PfpServiceMainThreadBoostPrep();
PfpServiceMainThreadUnboost();
PfpSetBaseTime();
PfpSetChannelOrdering();
PfpSetParameter();
PfpSourceBuildVaArray();
PfpSourceGetPrefetchSupport();
PfpStartLoggingHardFaultEvents();
PfpUpdateRepurposedByPrefetch();
PfpVirtualQuery();
PfpVolumeOpenAndVerify();
PfpVolumePrefetchMetadata();
PfxFindPrefix();
PfxInitialize();
PfxInsertPrefix();
PfxRemovePrefix();
Phase1Initialization();
Phase1InitializationDiscard();
PiAllocateDeviceObjectList();
PiAuAllocateAndInitializeSid();
PiAuCheckClientInteractive();
PiAuCheckTokenMembership();
PiAuCreateLocalSystemSecurityObject();
PiAuCreateSecurityObjects();
PiAuCreateStandardSecurityObject();
PiAuCreateUserSids();
PiAuDoesClientHaveAccess();
PiAuDoesClientHavePrivilege();
PiAuFreeUserSids();
PiAuIsLocalSystem();
PiAuVerifyAccessToObject();
PiBuildDeviceNodeInstancePath();
PiCMCaptureCreateDeviceInputData();
PiCMCaptureDeviceListInputData();
PiCMCaptureEnumerateInputData();
PiCMCaptureInterfaceAliasInputData();
PiCMCaptureInterfaceListInputData();
PiCMCaptureObjectInputData();
PiCMCaptureProblemInputData();
PiCMCapturePropertyInputData();
PiCMCaptureRegisterInterfaceInputData();
PiCMCaptureRegistryInputData();
PiCMCaptureRegistryPropertyInputData();
PiCMConvertDeviceKeyType();
PiCMConvertDeviceListFilters();
PiCMConvertRegistryProperty();
PiCMCreateDevice();
PiCMCreateObject();
PiCMDeleteClassKey();
PiCMDeleteDevice();
PiCMDeleteDeviceInterfaceKey();
PiCMDeleteDeviceKey();
PiCMDeleteObject();
PiCMDeviceAction();
PiCMDispatch();
PiCMDuplicateRegistryHandle();
PiCMEnumerateSubKeys();
PiCMFastIoDeviceDispatch();
PiCMGenerateDeviceInstance();
PiCMGetDeviceDepth();
PiCMGetDeviceIdList();
PiCMGetDeviceInterfaceAlias();
PiCMGetDeviceInterfaceList();
PiCMGetDeviceStatus();
PiCMGetObjectList();
PiCMGetObjectProperty();
PiCMGetObjectPropertyKeys();
PiCMGetRegistryProperty();
PiCMGetRelatedDeviceInstance();
PiCMHandleIoctl();
PiCMMandatoryFilterCallback();
PiCMOpenClassKey();
PiCMOpenDeviceInterfaceKey();
PiCMOpenDeviceKey();
PiCMOpenObjectKey();
PiCMQueryRemove();
PiCMRegisterDeviceInterface();
PiCMReleaseObjectInputData();
PiCMReleasePropertyInputData();
PiCMReleaseRegistryInputData();
PiCMReleaseRegistryPropertyInputData();
PiCMReturnBasicResultData();
PiCMReturnBufferResultData();
PiCMReturnDepthResultData();
PiCMReturnHandleResultData();
PiCMReturnStatusResultData();
PiCMSetDeviceProblem();
PiCMSetObjectProperty();
PiCMSetProblem();
PiCMSetRegistryProperty();
PiCMUnregisterDeviceInterface();
PiCMValidateDeviceInstance();
PiClearDeviceObjectList();
PiCollapseEnumRequests();
PiCollapseRebalanceRequests();
PiCompareDDBCacheEntries();
PiConfigureDevice();
PiControlCopyUserModeCallersBuffer();
PiControlGetDeviceDepth();
PiControlGetDeviceInterfaceEnabled();
PiControlGetDevicePowerData();
PiControlGetDeviceStack();
PiControlGetPropertyData();
PiControlGetRelatedDevice();
PiControlGetSetDeviceStatus();
PiControlGetUserFlagsFromDeviceNode();
PiControlMakeUserModeCallersCopy();
PiControlQueryAndRemoveDevice();
PiControlQueryConflictList();
PiControlQueryDeviceRelations();
PiControlStartDevice();
PiCreateDeviceInstanceKey();
PiCreateDriverSwDeviceCallback();
PiCreateDriverSwDevices();
PiDaDispatch();
PiDaDriverEntry();
PiDaFastIoDispatch();
PiDaInit();
PiDcAllocateGenericTableEntry();
PiDcCompareDevPropKeys();
PiDcContainerRequiresConfiguration();
PiDcFreeGenericTableEntry();
PiDcHandleContainerPropertyChange();
PiDcHandleCustomDeviceEvent();
PiDcHandleDevicePropertyChange();
PiDcHandleObjectEvent();
PiDcHandleSystemFirmwareUpdate();
PiDcInit();
PiDcInitUpdateProperties();
PiDcResetChildDeviceContainerCallback();
PiDcResetChildDeviceContainers();
PiDcUpdateDeviceContainerMembership();
PiDcWriteConfigEventIfContainerRequiresConfiguration();
PiDcWriteContainerConfigRequiredEvent();
PiDeferSetInterfaceState();
PiDevCfgAppendMultiSz();
PiDevCfgBuildDriverConfigurationId();
PiDevCfgBuildDriverNodeStrongName();
PiDevCfgBuildIndirectString();
PiDevCfgCheckDeviceNeedsUpdate();
PiDevCfgClearDeviceDriverSettings();
PiDevCfgConfigureDevice();
PiDevCfgConfigureDeviceInterfaces();
PiDevCfgConfigureDeviceKeys();
PiDevCfgConfigureDeviceLocation();
PiDevCfgConfigureSoftwareDevices();
PiDevCfgCopyDeviceKeys();
PiDevCfgCopyObjectProperties();
PiDevCfgCopyVariableData();
PiDevCfgEnforceDevicePolicy();
PiDevCfgFindDeviceDriver();
PiDevCfgFreeDriverNode();
PiDevCfgFreeResolveContext();
PiDevCfgFreeVariable();
PiDevCfgGetKeySecurityDescriptor();
PiDevCfgInitDeviceCallback();
PiDevCfgInitResolveContext();
PiDevCfgLogDeviceConfigured();
PiDevCfgLogDeviceStarted();
PiDevCfgMakeServiceBootStart();
PiDevCfgOpenDeviceMigrationKey();
PiDevCfgProcessDeviceCallback();
PiDevCfgQueryDriverConfiguration();
PiDevCfgQueryDriverNode();
PiDevCfgQueryDriverVersionValueCallback();
PiDevCfgQueryObjectProperties();
PiDevCfgQueryPolicyEnabled();
PiDevCfgQueryPolicyStringList();
PiDevCfgRequestDriverConfigurations();
PiDevCfgResolveDeviceDependencies();
PiDevCfgResolveDriverDependencies();
PiDevCfgResolveMultiSzValue();
PiDevCfgResolveVariable();
PiDevCfgResolveVariableConstant();
PiDevCfgResolveVariableDeviceProperty();
PiDevCfgResolveVariableExpression();
PiDevCfgResolveVariableFormatString();
PiDevCfgResolveVariableGenerateGuid();
PiDevCfgResolveVariableKeyCopy();
PiDevCfgResolveVariableKeyHandle();
PiDevCfgResolveVariableKeyValue();
PiDevCfgResolveVariableSwitchCase();
PiDevCfgVerifyDeviceAllowed();
PiDevCfgVerifyService();
PiDeviceDependencyInit();
PiDeviceRegistration();
PiDmAddCacheReferenceForObject();
PiDmAllocMem();
PiDmAllocateGenericTableEntry();
PiDmCacheDataDecode();
PiDmCacheDataEncode();
PiDmCacheDataFree();
PiDmCmObjectMatchCallback();
PiDmCompareObjects();
PiDmEnumObjectsWithCallback();
PiDmFreeGenericTableEntry();
PiDmFreeMem();
PiDmGetCacheKeys();
PiDmGetCachedKeyIndex();
PiDmGetCmObjectConstraintListFromCache();
PiDmGetCmObjectListFromCache();
PiDmGetObject();
PiDmGetObjectConstraintList();
PiDmGetObjectCount();
PiDmGetObjectList();
PiDmGetObjectListCallback();
PiDmGetObjectManagerForObjectType();
PiDmGetPnpObjectListFromCache();
PiDmGetReferencedObjectFromProperty();
PiDmInit();
PiDmInitializeComparisonObject();
PiDmListAddList();
PiDmListAddObject();
PiDmListAddObjectWorker();
PiDmListEnumObjectsWithCallback();
PiDmListInit();
PiDmListInitEnumCallback();
PiDmListIsObjectInList();
PiDmListRemoveList();
PiDmListRemoveObject();
PiDmListRemoveObjectWorker();
PiDmListUpdateAggregationCountWorker();
PiDmLookupObject();
PiDmObjectAcquireExclusiveLock();
PiDmObjectAcquireSharedLock();
PiDmObjectCreate();
PiDmObjectGetAggregatedBooleanPropertyData();
PiDmObjectGetCachedCmProperty();
PiDmObjectGetCachedObjectProperty();
PiDmObjectGetCachedObjectPropertyData();
PiDmObjectGetCachedObjectReference();
PiDmObjectIsEnumerable();
PiDmObjectManagerInit();
PiDmObjectManagerPopulate();
PiDmObjectProcessPropertyChange();
PiDmObjectRelease();
PiDmObjectReleaseLock();
PiDmObjectUpdateCachedCmProperty();
PiDmObjectUpdateCachedObjectProperty();
PiDmPnpObjectMatchCallback();
PiDmRemoveCacheReferenceForObject();
PiDqActionDataCreate();
PiDqActionDataFree();
PiDqActionDataGetAllPropertiesInAllLanguages();
PiDqActionDataGetAllPropertiesInBestLanguage();
PiDqActionDataGetChangedProperties();
PiDqActionDataGetRequestedProperties();
PiDqAllocMem();
PiDqAllocateGenericTableEntry();
PiDqCompareAddresses();
PiDqConvertObjectTypeToString();
PiDqConvertQueryFlagsToString();
PiDqConvertQueryTypeToString();
PiDqDeleteUserObject();
PiDqDeleteUserObjectFromLoadedHives();
PiDqDispatch();
PiDqEnumQueryObjectsCallback();
PiDqFreeGenericTableEntry();
PiDqFreeMem();
PiDqGetObjectManagerForPnpObjectType();
PiDqGetPnpObjectType();
PiDqGetRelativeObjectRegPath();
PiDqGrowPropertyArray();
PiDqInit();
PiDqIrpCancel();
PiDqIrpComplete();
PiDqIrpPropertySet();
PiDqIrpQueryCreate();
PiDqIrpQueryGetResult();
PiDqObjectActionQueueEntryCreate();
PiDqObjectManagerEnumerateAndRegisterQuery();
PiDqObjectManagerHandleObjectEvent();
PiDqObjectManagerInit();
PiDqObjectManagerLockData();
PiDqObjectManagerMakeInconsistent();
PiDqObjectManagerServiceActionQueue();
PiDqObjectManagerUnlockData();
PiDqObjectManagerUnregisterQuery();
PiDqOpenObjectRegKey();
PiDqOpenUserObjectRegKey();
PiDqPnPGetObjectProperty();
PiDqPnPGetObjectPropertyInBestLocale();
PiDqPnPGetObjectPropertyKeys();
PiDqPnPGetObjectPropertyLocales();
PiDqPropertyCallback();
PiDqQueryActionQueueEntryCreate();
PiDqQueryActionQueueEntryFree();
PiDqQueryAddObjectToResultSet();
PiDqQueryAppendActionEntry();
PiDqQueryApplyObjectEvent();
PiDqQueryCompletePendedIrp();
PiDqQueryCreate();
PiDqQueryDeleteObjectFromResultSet();
PiDqQueryEnumObject();
PiDqQueryEvaluateFilter();
PiDqQueryFreeActiveData();
PiDqQueryGetNextIoctlInfo();
PiDqQueryGetObjectManager();
PiDqQueryLock();
PiDqQueryMakeInconsistent();
PiDqQueryRelease();
PiDqQuerySerializeActionQueue();
PiDqQueryUnlock();
PiDqQueryValidateQueryData();
PiDqSameUserHive();
PiDqSerializationAlloc();
PiDqSerializationWrite();
PiDrvDbCreateNode();
PiDrvDbDestroyNode();
PiDrvDbInit();
PiDrvDbLoadHive();
PiDrvDbLoadNode();
PiDrvDbLoadNodeWorkerCallback();
PiDrvDbNodeActionCallback();
PiDrvDbUnloadHive();
PiDrvDbUnloadNode();
PiDrvDbUnloadNodeDpcRoutine();
PiDrvDbUnloadNodeReset();
PiDrvDbUnloadNodeWaitWorkerCallback();
PiDrvDbUnloadNodeWorkerCallback();
PiEnumerateDependentListEntry();
PiEnumerateDeviceObjectList();
PiEnumerateProviderListEntry();
PiFindDevInstMatch();
PiForEachDriverQueryRoutine();
PiFreeDeviceObjectList();
PiGetDefaultMessageString();
PiGetDependentList();
PiGetDeviceDepth();
PiGetDeviceRegProperty();
PiGetDeviceRegistryProperty();
PiGetProviderList();
PiGetRelatedDevice();
PiHotSwapGetDefaultBusRemovalPolicy();
PiHotSwapGetDetachableNode();
PiIndexDeviceObjectList();
PiInitCacheGroupInformation();
PiInitReleaseCachedGroupInformation();
PiInitializeDDBCache();
PiInitializeDevice();
PiIrpQueryRemoveDevice();
PiIsDriverBlocked();
PiLastGoodCopyKeyContents();
PiLastGoodRevertCopyCallback();
PiLastGoodRevertLastKnownDirectory();
PiListEntryToDependencyEdge();
PiLookupInDDB();
PiLookupInDDBCache();
PiMarkDeviceTreeForReenumeration();
PiMarkDeviceTreeForReenumerationWorker();
PiNormalizeDeviceText();
PiPagePathSetState();
PiPnpAddDeviceToPdoDeviceListEnumContext();
PiPnpFreePdoDeviceList();
PiPnpPdoDeviceListEnumCallback();
PiPnpRtlApplyMandatoryDeviceContainerFilters();
PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback();
PiPnpRtlApplyMandatoryDeviceFilters();
PiPnpRtlApplyMandatoryDeviceInterfaceFilters();
PiPnpRtlApplyMandatoryFilters();
PiPnpRtlBeginOperation();
PiPnpRtlCacheObjectBaseKey();
PiPnpRtlCmActionCallback();
PiPnpRtlDisableRemoveOperationDispatch();
PiPnpRtlEnableRemoveOperationDispatch();
PiPnpRtlEndOperation();
PiPnpRtlEnterRemoveOperationDispatch();
PiPnpRtlEnumDevicesInContainerCallback();
PiPnpRtlEnumeratorFilterCallback();
PiPnpRtlFreeContainerRemoveInfo();
PiPnpRtlFreeDeviceDeleteInfo();
PiPnpRtlFreeInstallerClassChangeInfo();
PiPnpRtlFreeInterfaceDeleteInfo();
PiPnpRtlGatherContainerRemoveInfo();
PiPnpRtlGatherDeviceDeleteInfo();
PiPnpRtlGatherInstallerClassChangeInfo();
PiPnpRtlGatherInterfaceDeleteInfo();
PiPnpRtlGetCurrentOperation();
PiPnpRtlGetDeviceInterfaceEnabled();
PiPnpRtlGetDeviceNtPropertyRoutine();
PiPnpRtlGetDeviceRelatedDeviceRoutine();
PiPnpRtlGetDeviceRelationsList();
PiPnpRtlGetDeviceStatus();
PiPnpRtlGetFilteredDeviceInterfaceList();
PiPnpRtlGetFilteredDeviceList();
PiPnpRtlInit();
PiPnpRtlInterfaceFilterCallback();
PiPnpRtlIsDeviceEnumerableForUser();
PiPnpRtlIsDeviceValidForSession();
PiPnpRtlLeaveRemoveOperationDispatch();
PiPnpRtlObjectActionCallback();
PiPnpRtlObjectEventCallback();
PiPnpRtlObjectEventCompareObjects();
PiPnpRtlObjectEventCreate();
PiPnpRtlObjectEventDispatch();
PiPnpRtlObjectEventRelease();
PiPnpRtlObjectEventWorker();
PiPnpRtlOperationAllocMem();
PiPnpRtlOperationAllocateGenericTableEntry();
PiPnpRtlOperationFreeGenericTableEntry();
PiPnpRtlOperationFreeMem();
PiPnpRtlOperationListAcquireSharedLock();
PiPnpRtlOperationListReleaseLock();
PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent();
PiPnpRtlServiceFilterCallback();
PiPnpRtlSetDeviceRegProperty();
PiPnpRtlSetObjectProperty();
PiProcessAddBootDevices();
PiProcessClearDeviceProblem();
PiProcessDriverInstance();
PiProcessHaltDevice();
PiProcessNewDeviceNode();
PiProcessQueryDeviceState();
PiProcessReenumeration();
PiProcessRequeryDeviceState();
PiProcessResourceRequirementsChanged();
PiProcessSetDeviceProblem();
PiProcessStartSystemDevices();
PiProfileSendHardwareProfileCancel();
PiProfileSendHardwareProfileCommit();
PiProfileUpdateDeviceTree();
PiProfileUpdateDeviceTreeCallback();
PiProfileUpdateDeviceTreeWorker();
PiQueryAndAllocateBootResources();
PiQueryDeviceRelations();
PiQueryPowerDependencyRelations();
PiQueryPowerRelations();
PiQueryRemovableDeviceOverride();
PiQueryResourceRequirements();
PiQueueDeviceRequest();
PiRearrangeDeviceInstances();
PiRebalanceOptOut();
PiResetProblemDevicesWorker();
PiRestartDevice();
PiSortDeviceObjectListForRemove();
PiSwAllocateGenericTableEntry();
PiSwBusRelationAdd();
PiSwBusRelationRemove();
PiSwBusRelationsCompareInstancePath();
PiSwCloseDecendents();
PiSwCloseDevice();
PiSwCompleteCreate();
PiSwDeviceCompareObjects();
PiSwDeviceCreate();
PiSwDeviceDereference();
PiSwDeviceFindInterfaceEntry();
PiSwDeviceFree();
PiSwDeviceInterfaceSetState();
PiSwDeviceInterfacesUpdateState();
PiSwDeviceMakeCompatibleIds();
PiSwDispatch();
PiSwDoesCreateChangesRequireReEnum();
PiSwFinalizeRemove();
PiSwFindBusRelations();
PiSwFindChildren();
PiSwFindSwDevice();
PiSwFreeGenericTableEntry();
PiSwFreeInterfaceList();
PiSwGetChildPdo();
PiSwInit();
PiSwInstanceInfoFree();
PiSwInstanceInfoInit();
PiSwInterfaceCreate();
PiSwInterfaceFree();
PiSwIrpCancelStartCreate();
PiSwIrpCleanup();
PiSwIrpGetLifetime();
PiSwIrpInterfacePropertySet();
PiSwIrpInterfaceRegister();
PiSwIrpInterfaceSetState();
PiSwIrpPropertySet();
PiSwIrpSetLifetime();
PiSwIrpStartCreate();
PiSwIrpStartCreateWorker();
PiSwIsValidPnpId();
PiSwPdoDriverEntry();
PiSwPdoPnPDispatch();
PiSwPnPInfoFree();
PiSwPnPInfoInit();
PiSwProcessParentRemoveIrp();
PiSwProcessParentStartIrp();
PiSwPropertySet();
PiSwQueuedCreateInfoCreate();
PiSwQueuedCreateInfoFree();
PiSwStartCreate();
PiSwStopDestroy();
PiSwUpdateArrayProperties();
PiSwValidateCreateData();
PiSwValidatePropertyArray();
PiUEventApplyAdditionalFilters();
PiUEventBroadcastAwaitingResponseEvent();
PiUEventBroadcastDevnodesChangedEvent();
PiUEventBroadcastEventWorker();
PiUEventBroadcastHardwareProfilesChangedEvent();
PiUEventBroadcastPortsChangedEvent();
PiUEventBroadcastVolumesChangedEvent();
PiUEventCacheObjectProperties();
PiUEventCoalesceBroadcastEvents();
PiUEventCopyEventData();
PiUEventDequeuePendingEventWorker();
PiUEventDereferenceEventEntry();
PiUEventDeviceNeedsInstall();
PiUEventDispatch();
PiUEventEstimateRequiredClientBufferSize();
PiUEventFreeClientRegistrationContext();
PiUEventFreeEventEntry();
PiUEventGetDeviceInstanceIdFromUserHandle();
PiUEventHandleGetEvent();
PiUEventHandleIoctl();
PiUEventHandleRegistration();
PiUEventHandleUnregisterClient();
PiUEventHandleVetoEvent();
PiUEventHashGuidIntoBucket();
PiUEventHashStringIntoBucket();
PiUEventInit();
PiUEventInitClientRegistrationContext();
PiUEventInitializeVeto();
PiUEventIsClientStuck();
PiUEventIsDeviceEventVetoable();
PiUEventMetaNotificationCallback();
PiUEventMovePendingEventToSynchronousQueue();
PiUEventNotifyClient();
PiUEventNotifyClientPendingEvent();
PiUEventNotifyDeviceInstanceChange();
PiUEventNotifyDeviceInstancePropertyChange();
PiUEventNotifyDeviceInterfaceChange();
PiUEventNotifyTargetDeviceChange();
PiUEventNotifyUserMode();
PiUEventProcessBroadcastNotifications();
PiUEventProcessEventWorker();
PiUEventProcessNotifyEventEntry();
PiUEventQueueBroadcastEventEntry();
PiUEventQueuePendingEvent();
PiUEventReferenceEventEntry();
PiUEventSendDeviceInterfaceArrivalETWEvent();
PiUpdateDriverDBCache();
PiValidatePowerRelations();
PipAddBindingId();
PipAddDependencyEdgeBetweenNodes();
PipAddDependentsToRebuildPowerRelationsQueue();
PipAddDevicesToBootDriver();
PipAddDevicesToBootDriverWorker();
PipAddtoRebuildPowerRelationsQueue();
PipAllocateDeviceNode();
PipApplyFunctionToServiceInstances();
PipAreDriversLoaded();
PipAreDriversLoadedWorker();
PipCallDriverAddDevice();
PipCallDriverAddDeviceQueryRoutine();
PipCallbackHasDeviceOverrides();
PipChangeDeviceObjectFromRegistryProperties();
PipCheckComputerSupported();
PipCheckDependencies();
PipCheckForDenyExecute();
PipCheckForUnsatisfiedDependencies();
PipCheckSystemFirmwareUpdated();
PipCheckValidNewDependencyEdge();
PipClearDevNodeFlags();
PipClearDevNodeProblem();
PipClearDevNodeUserFlags();
PipCommitPendingOsExtensionResource();
PipCommitPendingService();
PipConvertResolutionsToReservations();
PipCreateComputerId();
PipCreateDependencyNode();
PipCreateEntry();
PipCreateNewDependencyEdge();
PipDeleteAllDependencyRelations();
PipDeleteBindingIds();
PipDeleteDependencyEdge();
PipDeleteDependencyNode();
PipDependencyGraphDepthFirstSearch();
PipDereferenceDependencyNode();
PipDeviceNodeListInsert();
PipDeviceRemovalCheckDeviceNodeState();
PipEnumerateCompleted();
PipEnumerateDevice();
PipFindDependencyNodePath();
PipFindDeviceOverrideEntry();
PipForAllChildDeviceNodes();
PipForAllDeviceNodes();
PipForAllDeviceNodesCallback();
PipForDeviceNodeSubtree();
PipFreeGroupTree();
PipGenerateContainerID();
PipGetDriverTagPriority();
PipGetRegistryDwordWithFallback();
PipGetRegistrySecurityWithFallback();
PipHardwareConfigActivateService();
PipHardwareConfigClearStartOverrideCallback();
PipHardwareConfigClearStartOverrides();
PipHardwareConfigExists();
PipHardwareConfigGetIndex();
PipHardwareConfigGetLastUseTime();
PipHardwareConfigInit();
PipHardwareConfigTriggerRespecialize();
PipInitComputerIds();
PipInitDeviceOverrideCache();
PipInsertDriverList();
PipIrpCheckDeletedChildren();
PipIsDevNodeDNStarted();
PipIsDeviceReadyForPowerRelations();
PipIsProblemReadonly();
PipLinkDeviceObjectAndDependencyNode();
PipLookupGroupName();
PipMakeGloballyUniqueId();
PipMergeDependencyEdgeList();
PipMergeDependencyEdges();
PipMergeDependencyNodes();
PipMoveListEntries();
PipOpenServiceEnumKeys();
PipPendingServicesFilter();
PipPnPDriverEntry();
PipProcessDevNodeTree();
PipProcessEnumeratedChildDevice();
PipProcessPendingObjects();
PipProcessPendingOsExtensionResources();
PipProcessPendingServices();
PipProcessRebuildPowerRelationsQueue();
PipProcessRestartPhase1();
PipProcessRestartPhase2();
PipProcessStartPhase1();
PipProcessStartPhase2();
PipProcessStartPhase3();
PipQueryBindingResolution();
PipReferenceDependencyNode();
PipRestoreDevNodeState();
PipSearchDeviceObjectList();
PipServiceInstanceToDeviceInstance();
PipSetDependency();
PipSetDevNodeFlags();
PipSetDevNodeProblem();
PipSetDevNodeState();
PipSetDevNodeUserFlags();
PipSmBiosFindStruct();
PipSmBiosGetString();
PipSortDeviceObjectList();
PipUnlinkDeviceObjectAndDependencyNode();
PipVisitDeviceObjectListEntry();
PlugPlayGetDeviceProperty();
PlugPlayGetDeviceRelations();
PlugPlayGetDeviceStatus();
PlugPlayGetRelatedDevice();
PnpAcquireDependencyRelationsLock();
PnpAddVetoInformation();
PnpAllocateCriticalMemory();
PnpAllocateDeviceInstancePath();
PnpAllocateGenericTableEntry();
PnpAllocateMultiSZ();
PnpAllocatePWSTR();
PnpAllocateResources();
PnpAllocateUpcaseUnicodeString();
PnpAssignResourcesToDevices();
PnpAsynchronousCall();
PnpBootDeviceWait();
PnpBootPhaseComplete();
PnpBugcheckPowerTimeout();
PnpBuildCmResourceList();
PnpBuildCmResourceLists();
PnpBuildRemovalRelationList();
PnpBuildUnsafeRemovalDeviceList();
PnpBusTypeGuidGet();
PnpBusTypeGuidGetIndex();
PnpBusTypeGuidInitialize();
PnpCallAddDevice();
PnpCallDriverQueryServiceHelper();
PnpCancelRemoveLockedDeviceNode();
PnpCancelStopDeviceNode();
PnpCancelStopDeviceSubtree();
PnpChainDereferenceComplete();
PnpCheckDeviceIdsChanged();
PnpCheckDriverDependencies();
PnpCheckForActiveDependencies();
PnpCheckForWaitingReportedDevice();
PnpCleanupDeviceRegistryValues();
PnpCmResourcesToIoResources();
PnpCollectOpenHandles();
PnpCollectOpenHandlesCallBack();
PnpCompareGuid();
PnpCompareInstancePath();
PnpCompareMultiSz();
PnpCompareResourceRequestPriority();
PnpCompleteDeviceEvent();
PnpCompleteSystemStartProcess();
PnpCompletionRoutine();
PnpConcatPWSTR();
PnpConcatenateUnicodeStrings();
PnpConvertDevpropcompkeyArrayToString();
PnpCopyDevProperty();
PnpCopyDevPropertyArray();
PnpCopyDeviceInstancePath();
PnpCreateDeviceEventEntry();
PnpDeferNotification();
PnpDelayedRemoveWorker();
PnpDeleteDeviceInterfaces();
PnpDeleteLockedDeviceNode();
PnpDeleteLockedDeviceNodes();
PnpDequeuePendingSurpriseRemoval();
PnpDereferenceNotify();
PnpDetermineResourceListSize();
PnpDeviceActionWorker();
PnpDeviceCompletionProcessCompletedRequest();
PnpDeviceCompletionProcessCompletedRequests();
PnpDeviceCompletionQueueAddDispatchedRequest();
PnpDeviceCompletionQueueDispatchedEntryCompleted();
PnpDeviceCompletionQueueGetCompletedRequest();
PnpDeviceCompletionQueueInitialize();
PnpDeviceCompletionQueueIsEmpty();
PnpDeviceCompletionQueueRemoveCompletedRequest();
PnpDeviceCompletionRequestCreate();
PnpDeviceCompletionRequestDestroy();
PnpDeviceCompletionRoutine();
PnpDeviceEventWorker();
PnpDeviceObjectFromDeviceInstance();
PnpDeviceObjectToDeviceInstance();
PnpDiagInitialize();
PnpDiagnosticCompletionRoutine();
PnpDisableDevice();
PnpDisableDeviceInterfaces();
PnpDisableUserModeNotifications();
PnpDoPolicyCheck();
PnpDriverLoadingFailed();
PnpDriverObjectDereferenceComplete();
PnpDriverStarted();
PnpEarlyLaunchHasCallbacksRegistered();
PnpEarlyLaunchImageNotificationPostProcess();
PnpEarlyLaunchImageNotificationPreProcess();
PnpEarlyLaunchStatusNotificationPreProcess();
PnpFilterResourceRequirementsList();
PnpFinalizeVetoedRemove();
PnpFindAlternateStringData();
PnpFindBestConfiguration();
PnpFindBestConfigurationWorker();
PnpFindMountableDevice();
PnpFindRebalanceCandidates();
PnpFixupID();
PnpFreeDevProperty();
PnpFreeDevPropertyArray();
PnpFreeDeviceInstancePath();
PnpFreeGenericTableEntry();
PnpFreeResourceRequirementsForAssignTable();
PnpFreeUnicodeStringList();
PnpFreeVetoInformation();
PnpGenerateDeviceIdsHash();
PnpGetCallerSessionId();
PnpGetDeviceInstanceCsConfigFlags();
PnpGetDeviceInstancePropertyData();
PnpGetDeviceInstanceRegistryValue();
PnpGetDeviceInterfacePropertyData();
PnpGetDeviceLocationStrings();
PnpGetDevicePropertyData();
PnpGetDeviceResourcesFromRegistry();
PnpGetMultiSzLength();
PnpGetObjectProperty();
PnpGetRelatedTargetDevice();
PnpGetResourceRequirementsForAssignTable();
PnpGetStableSystemBootTime();
PnpGetSystemPdoList();
PnpHandleEnumerateHandlesAgainstDeviceObject();
PnpHandleEnumerateHandlesAgainstPdoStack();
PnpHandleProcessWalkWorker();
PnpInitializeBootStartDriver();
PnpInitializeDeviceActions();
PnpInitializeDeviceEvents();
PnpInitializeDeviceReferenceTable();
PnpInitializeLegacyBusInformationTable();
PnpInitializeNotification();
PnpInitializeNotifyEntry();
PnpInitializeProcessor();
PnpInitializeSessionId();
PnpInitializeTargetDeviceRemoveEvent();
PnpInsertEventInQueue();
PnpInvalidateRelationsInList();
PnpIrpDeviceEnumerated();
PnpIrpQueryID();
PnpIsAnyDeviceInUse();
PnpIsAnyDeviceInstanceEnabled();
PnpIsBeingRemovedSafely();
PnpIsChainDereferenced();
PnpIsDeviceInstanceEnabled();
PnpIsDuplicateDevice();
PnpIsLegacyDriver();
PnpIsNullGuid();
PnpIsNullGuidString();
PnpIsRangeWithin();
PnpIsValidGuidString();
PnpLoadBootFilterDriver();
PnpLockDeviceActionQueue();
PnpLockMountableDevice();
PnpLogDuplicateDevice();
PnpLogEvent();
PnpLogVetoInformation();
PnpLookupArbitersNewResources();
PnpMapDeviceObjectToDeviceInstance();
PnpMarkDeviceForRemove();
PnpMarkHalDeviceNode();
PnpMergeFilteredResourceRequirementsList();
PnpNeedToReleaseBootResources();
PnpNewDeviceNodeDependencyCheck();
PnpNotifyDeviceClassChange();
PnpNotifyDriverCallback();
PnpNotifyEarlyLaunchImageLoad();
PnpNotifyEarlyLaunchStatusUpdate();
PnpNotifyHwProfileChange();
PnpNotifyTargetDeviceChange();
PnpNotifyUserModeDeviceRemoval();
PnpOpenFirstMatchingSubKey();
PnpOrphanNotification();
PnpPrepareDriverLoading();
PnpProcessAssignResources();
PnpProcessAssignResourcesWorker();
PnpProcessCompletedEject();
PnpProcessCustomDeviceEvent();
PnpProcessDeferredRegistrations();
PnpProcessDependencyRelations();
PnpProcessQueryRemoveAndEject();
PnpProcessRebalance();
PnpProcessRelation();
PnpProcessTargetDeviceEvent();
PnpProfileUpdateHardwareProfile();
PnpQueryAndSaveDeviceNodeCapabilities();
PnpQueryBusInformation();
PnpQueryDeviceRelations();
PnpQueryDeviceText();
PnpQueryID();
PnpQueryInterface();
PnpQueryRebalance();
PnpQueryRebalanceWorker();
PnpQueryRemoveLockedDeviceNode();
PnpQueryStopDeviceNode();
PnpQueuePendingEject();
PnpQueuePendingSurpriseRemoval();
PnpQueueQueryAndRemoveEvent();
PnpReadDeviceConfiguration();
PnpReallocateResources();
PnpRebalance();
PnpRegMultiSzToUnicodeStrings();
PnpRegSzToString();
PnpReleaseBootResourcesForFilteredRequirements();
PnpReleaseDependencyRelationsLock();
PnpReleaseResourcesInternal();
PnpRemoveDeviceActionRequests();
PnpRemoveEventFromQueue();
PnpRemoveLockedDeviceNode();
PnpRemovedDeviceNodeDependencyCheck();
PnpReplacePartitionUnit();
PnpReportTargetDeviceChangeAsyncWorker();
PnpRequestDeviceAction();
PnpRequestDeviceEjectExWorker();
PnpRequestDeviceRemoval();
PnpRequestDeviceRemovalWorker();
PnpRequestHwProfileChangeNotification();
PnpResizeTargetDeviceBlock();
PnpRestartDeviceNode();
PnpRestoreResourcesInternal();
PnpSaveDeviceCapabilities();
PnpSelectFirstConfiguration();
PnpSerializeBoot();
PnpSetBlockedDriverEvent();
PnpSetCustomTargetEvent();
PnpSetDeviceClassChange();
PnpSetDeviceInstancePropertyChangeEvent();
PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance();
PnpSetDeviceInstanceRemovalEvent();
PnpSetDeviceInstanceStartedEvent();
PnpSetDeviceInstanceStartedEventFromDeviceInstance();
PnpSetDeviceInterfacePropertyData();
PnpSetDevicePropertyData();
PnpSetDeviceRemovalSafe();
PnpSetHwProfileChangeEvent();
PnpSetInvalidIDEvent();
PnpSetPlugPlayEvent();
PnpSetPowerVetoEvent();
PnpSetRegistryDword();
PnpSetRegistryRequirementsList();
PnpSetRegistryResourceList();
PnpSetTargetDeviceRemove();
PnpShutdownDevices();
PnpSqmAddToStream();
PnpSqmAppVeto();
PnpSqmCreateStringStreamEntry();
PnpSqmDeviceConfig();
PnpSqmEndSession();
PnpSqmInitialize();
PnpSqmSetDword();
PnpSqmSetString();
PnpSqmStartSession();
PnpStartDevice();
PnpStartDeviceNode();
PnpStartedDeviceNodeDependencyCheck();
PnpStopDeviceSubtree();
PnpStringFromGuid();
PnpSurpriseRemoveLockedDeviceNode();
PnpSurpriseRemovedDeviceNodeDependencyCheck();
PnpSynchronizeDeviceEventQueue();
PnpTraceStartDevice();
PnpUnicodeStringToWstr();
PnpUnicodeStringToWstrFree();
PnpUnlinkDeviceRemovalRelations();
PnpUnloadAttachedDriver();
PnpUnlockDeviceActionQueue();
PnpUnlockMountableDevice();
PnpUnregisterPlugPlayNotification();
PnpUpdateExtensionFlags();
PnpValidateMultiSz();
PnpWaitForDevicesToStart();
PnpWaitForEmptyDeviceActionQueue();
PnpWaitForEmptyDeviceEventQueue();
PnprAddDeviceResources();
PnprAddMemoryResources();
PnprAddProcessorResources();
PnprAllocateMappingReserves();
PnprCollectResources();
PnprCompleteWake();
PnprCopyReservedMapping();
PnprEndMirroring();
PnprFreeMappingReserve();
PnprGetMillisecondCounter();
PnprGetPageDestination();
PnprGetPluginDriverImagePath();
PnprGetStackLimits();
PnprIdentifyUnits();
PnprInitializeMappingReserve();
PnprInitiateReplaceOperation();
PnprIsMemoryDevice();
PnprIsProcessorDevice();
PnprLegacyDeviceDriversPresent();
PnprLoadPluginDriver();
PnprLockPagesForReplace();
PnprLogFailureEvent();
PnprLogStartEvent();
PnprLogSuccessEvent();
PnprMapPhysicalPages();
PnprMapTargetSparePhysicalPages();
PnprMarkOrMirrorPages();
PnprMirrorMarkedPages();
PnprMirrorPhysicalMemory();
PnprMmAddRange();
PnprMmConstruct();
PnprMmFree();
PnprQueryReplaceFeatures();
PnprQuiesce();
PnprQuiesceDevices();
PnprQuiesceProcessorDpc();
PnprQuiesceProcessors();
PnprQuiesceWorker();
PnprRecopyAddress();
PnprRecopyMappingReserve();
PnprRecopyMirrorPages();
PnprReplaceStart();
PnprStartMirroring();
PnprSwap();
PnprSwapFinalize();
PnprUnlockPagesForReplace();
PnprWakeDevices();
PnprWakeProcessors();
PoAllProcessorsDeepIdle();
PoBlockConsoleSwitch();
PoBroadcastSystemState();
PoBugcheckEarlyCallback();
PoCallDriver();
PoCancelDeviceNotify();
PoCaptureReasonContext();
PoClearBroadcast();
PoClearPowerRequest();
PoClearPowerRequestInternal();
PoClearTransitionMarker();
PoCreatePowerRequest();
PoDeletePowerRequest();
PoDestroyReasonContext();
PoDeviceAcquireIrp();
PoDeviceReleaseIrp();
PoDiagCaptureUsermodeStack();
PoDiagFreeUsermodeStack();
PoDiagTraceDeviceRundown();
PoDisableSleepStates();
PoEndDeviceBusy();
PoEndPartitionReplace();
PoEndPowerStateTasks();
PoFxAbandonDevice();
PoFxActivateComponent();
PoFxActivateDevice();
PoFxActivateDeviceForSystemTransition();
PoFxCompleteDevicePowerNotRequired();
PoFxCompleteIdleCondition();
PoFxCompleteIdleState();
PoFxIdleComponent();
PoFxIdleDevice();
PoFxInitPowerManagement();
PoFxNotifySurprisePowerOn();
PoFxPowerControl();
PoFxPowerOnCrashdumpDevice();
PoFxPrepareDevice();
PoFxProcessorNotification();
PoFxRegisterCoreDevice();
PoFxRegisterCrashdumpDevice();
PoFxRegisterDebugger();
PoFxRegisterDevice();
PoFxRegisterPlugin();
PoFxRegisterPluginEx();
PoFxRegisterPrimaryDevice();
PoFxReportDevicePoweredOn();
PoFxSendSystemLatencyUpdate();
PoFxSetComponentLatency();
PoFxSetComponentResidency();
PoFxSetComponentWake();
PoFxSetDeviceIdleTimeout();
PoFxStartDevicePowerManagement();
PoFxSystemLatencyNotify();
PoFxUnregisterDevice();
PoGetIdleTimes();
PoGetLightestSystemStateForEject();
PoGetPerfStateAndParkingInfo();
PoGetProcessorIdleAccounting();
PoGetRequester();
PoGetSystemWake();
PoHandleIrp();
PoIdle();
PoInitDriverServices();
PoInitHiberServices();
PoInitSystem();
PoInitializeBroadcast();
PoInitializePdc();
PoInitializePrcb();
PoInitiateProcessorWake();
PoIssueCoalescingNotification();
PoLatencySensitivityHint();
PoNotifySystemTimeSet();
PoNotifyVSyncChange();
PoPowerOffMonitor();
PoQueryWatchdogTime();
PoQueueShutdownWorkItem();
PoReenableSleepStates();
PoRegisterCoalescingCallback();
PoRegisterDeviceForIdleDetection();
PoRegisterDeviceNotify();
PoRegisterPowerSettingCallback();
PoRegisterSystemState();
PoRequestPowerIrp();
PoRequestShutdownEvent();
PoRundownSystemTimer();
PoRundownThread();
PoSetDeviceBusyEx();
PoSetFixedWakeSource();
PoSetHiberRange();
PoSetPowerRequest();
PoSetPowerRequestInternal();
PoSetPowerState();
PoSetSystemState();
PoSetSystemWake();
PoSetUserPresent();
PoShutdownBugCheck();
PoStartDeviceBusy();
PoStartNextPowerIrp();
PoStartPartitionReplace();
PoStartPowerStateTasks();
PoStoreDiagnosticContext();
PoStoreRequester();
PoThermalCounterSetCallback();
PoTraceDynamicTickDisabled();
PoTraceSystemTimerResolution();
PoTraceSystemTimerResolutionKernel();
PoTraceSystemTimerResolutionUpdate();
PoUnblockConsoleSwitch();
PoUnregisterCoalescingCallback();
PoUnregisterPowerSettingCallback();
PoUnregisterSystemState();
PoUserShutdownCancelled();
PoUserShutdownInitiated();
PoVolumeDevice();
PopAcDcPowerSettingCallback();
PopAccumulateNonActivatedCpuTime();
PopAcquireAdaptiveLock();
PopAcquireAwaymodeLock();
PopAcquireDripsWatchdogLock();
PopAcquirePolicyLock();
PopAcquirePowerRequestPushLock();
PopAcquireTransitionLock();
PopAcquireUmpoPushLock();
PopAcquireWakeSourceSpinLock();
PopActionRetrieveInitialState();
PopAdaptivePowerSettingCallback();
PopAddPagesToCompressedPageSet();
PopAdvanceSystemPowerState();
PopAllocateHiberContext();
PopAllocateIrp();
PopAllocateOwnMemory();
PopAllocatePages();
PopAllowAwayModeSettingCallback();
PopAoacExecutionRequiredPowerRequest();
PopApplyAdminPolicy();
PopApplyLegacyPowerRequestFlags();
PopApplyPolicy();
PopArePowerSettingsEqual();
PopAwayModePowerRequest();
PopAwayModeUserPresenceDpc();
PopBatteryAdd();
PopBatteryAlarmPowerSettingCallback();
PopBatteryApplyCompositeState();
PopBatteryCapacityToRate();
PopBatteryCheckTrigger();
PopBatteryEtwCallback();
PopBatteryEtwInit();
PopBatteryInit();
PopBatteryInitialize();
PopBatteryIrpComplete();
PopBatteryQueryEstimatedTime();
PopBatteryQueryStatus();
PopBatteryQueueWork();
PopBatteryReadTag();
PopBatteryRefreshStatus();
PopBatteryRemove();
PopBatteryTracePercentageRemaining();
PopBatteryTraceSystemBatteryStatus();
PopBatteryUpdateAlarms();
PopBatteryUpdateCompositeInformation();
PopBatteryUpdateCurrentState();
PopBatteryWaitTag();
PopBatteryWakeDpc();
PopBatteryWorker();
PopBcdClearPendingResume();
PopBcdClose();
PopBcdEstablishResumeObject();
PopBcdReadElement();
PopBcdRegenerateResumeObject();
PopBcdSetDefaultResumeObjectElements();
PopBcdSetPendingResume();
PopBcdSetupResumeObject();
PopBootLoaderTraceCopyPfnList();
PopBootLoaderTraceEtwEvents();
PopBootLoaderTraceProcess();
PopBroadcastSessionInfo();
PopBuildDeviceNotifyList();
PopBuildDeviceNotifyListWatchdog();
PopBuildMemoryImageHeader();
PopCalculateCsSummary();
PopCalculateIdleInformation();
PopCalculateTotalHwDripsResidency();
PopCallPowerSettingCallback();
PopCancelDripsWatchdog();
PopCaptureReasonContext();
PopCaptureTimeOnProcZero();
PopChangeCapability();
PopCheckConsoleTimeouts();
PopCheckDisabledReason();
PopCheckDisabledState();
PopCheckExecutionRequiredPowerRequests();
PopCheckForAbnormalReset();
PopCheckForIdleness();
PopCheckForUpgradeInProgress();
PopCheckForWork();
PopCheckResiliencyScenarios();
PopCheckShutdownMarker();
PopCheckSkipTick();
PopCheckThermalPolicy();
PopClearHiberFileSignature();
PopClearSleepMarker();
PopClearSpecialRequest();
PopClearSpmPowerSettingOverride();
PopCloneRange();
PopClosePowerRequestObject();
PopCoalescingActivate();
PopCoalescingCallback();
PopCoalescingCheck();
PopCoalescingEnforce();
PopCoalescingInitialize();
PopCoalescingNotify();
PopCoalescingPowerSettingCallback();
PopCoalescingSetTimer();
PopCoalesingTimerCallback();
PopCollectProcessorInformation();
PopCompareActions();
PopCompleteAction();
PopCompressCallback();
PopComputeDerivedHiberStats();
PopComputeTimeout();
PopComputeWatchdogTimeout();
PopConnectToPolicyDevice();
PopConnectedStandbySettingCallback();
PopConsoleLockPowerSettingCallback();
PopConsoleSessionActiveInput();
PopConsoleSessionPassiveInput();
PopControlIdleResiliency();
PopCopyWakeSource();
PopCountDataAsProduced();
PopCreateDumpMdl();
PopCreateDynamicIrpWorker();
PopCreateHiberFile();
PopCreateHiberFileSecurityDescriptor();
PopCreateKernelPowerRequest();
PopCreateNotificationName();
PopCreatePowerRequestObject();
PopCreatePowerThread();
PopCreateUserPowerRequest();
PopCriticalShutdown();
PopCsAudioAccountingCallback();
PopCsStateChanged();
PopCurrentPowerState();
PopCurrentPowerStatePrecise();
PopDecompressCallback();
PopDecompressHiberBlocks();
PopDefaultPolicy();
PopDeleteHiberFile();
PopDeletePowerRequestObject();
PopDequeueQuerySetIrp();
PopDereferenceWakeInfos();
PopDeviceIdleCompletion();
PopDeviceIdlePolicySettingCallback();
PopDiagDeviceRundownWorker();
PopDiagGetDriverName();
PopDiagInitialize();
PopDiagNextSleepStudySession();
PopDiagTraceAbnormalReset();
PopDiagTraceAcDcStateChange();
PopDiagTraceAppPowerMessage();
PopDiagTraceAppPowerMessageEnd();
PopDiagTraceConsoleDisplayState();
PopDiagTraceControlCallback();
PopDiagTraceCsConsumption();
PopDiagTraceCsDripsWatchdogPerfTrack();
PopDiagTraceCsEnterReason();
PopDiagTraceCsExitReason();
PopDiagTraceCsFanPerfTrack();
PopDiagTraceDeviceAcquireIrp();
PopDiagTraceDeviceReleaseIrp();
PopDiagTraceDeviceVerboseRundown();
PopDiagTraceDevicesLevel();
PopDiagTraceDevicesSuspend();
PopDiagTraceDevicesWakeEnd();
PopDiagTraceDirtyTransition();
PopDiagTraceDiskIdleCheck();
PopDiagTraceDisplayTimeout();
PopDiagTraceDriverVeto();
PopDiagTraceDynamicTickStatusRundown();
PopDiagTraceEventNoPayload();
PopDiagTraceFirmwareS3Stats();
PopDiagTraceFxComponentAccounting();
PopDiagTraceFxComponentIdleConstraints();
PopDiagTraceFxComponentIdleState();
PopDiagTraceFxComponentLogicalCondition();
PopDiagTraceFxComponentRegistration();
PopDiagTraceFxComponentWake();
PopDiagTraceFxDeviceAccounting();
PopDiagTraceFxDeviceIdleConstraints();
PopDiagTraceFxDevicePowerRequirement();
PopDiagTraceFxDevicePowerState();
PopDiagTraceFxDevicePowered();
PopDiagTraceFxDevicePreparation();
PopDiagTraceFxDeviceRegistration();
PopDiagTraceFxDeviceStartPowerManagement();
PopDiagTraceFxDeviceUnregistration();
PopDiagTraceFxPluginRegistration();
PopDiagTraceFxRundown();
PopDiagTraceHiberStats();
PopDiagTraceHibernateErrorStatus();
PopDiagTraceIdleCheck();
PopDiagTraceIdleResiliencyEnd();
PopDiagTraceIdleResiliencyStart();
PopDiagTraceIllegalProcessorThrottle();
PopDiagTraceInputTimeout();
PopDiagTraceIoCoalescingDiskIdle();
PopDiagTraceIoCoalescingFlush();
PopDiagTraceIoCoalescingOff();
PopDiagTraceIoCoalescingOn();
PopDiagTraceIrpFinish();
PopDiagTraceIrpStart();
PopDiagTraceKernelQueriesAllowed();
PopDiagTraceMtrrError();
PopDiagTracePassiveCooling();
PopDiagTracePerfTrackData();
PopDiagTracePlatformRoleRundown();
PopDiagTracePolicyChange();
PopDiagTracePostSleepNotification();
PopDiagTracePowerRequestChange();
PopDiagTracePowerRequestClose();
PopDiagTracePowerRequestCreate();
PopDiagTracePowerSetting();
PopDiagTracePowerTransitionEnd();
PopDiagTracePowerTransitionStart();
PopDiagTracePowerTransitionTime();
PopDiagTracePreSleepNotification();
PopDiagTraceProcessorThrottleDurationPerfTrack();
PopDiagTraceProcessorThrottlePerfTrack();
PopDiagTraceRegisterSystemState();
PopDiagTraceServiceNotification();
PopDiagTraceSessionState();
PopDiagTraceSessionStates();
PopDiagTraceSetSystemState();
PopDiagTraceSetThreadExecutionState();
PopDiagTraceShutdownAction();
PopDiagTraceSkipTick();
PopDiagTraceSleepStudyStart();
PopDiagTraceSleepStudyStop();
PopDiagTraceSpmPolicyAliasRundown();
PopDiagTraceSpmScenarioPoliciesRundown();
PopDiagTraceSpmStatus();
PopDiagTraceSystemLatencyUpdate();
PopDiagTraceThermalZoneEnumeration();
PopDiagTraceThermalZoneRundown();
PopDiagTraceThermalZoneThrottleDurationPerfTrack();
PopDiagTraceThermalZoneThrottlePerfTrack();
PopDiagTraceTripPointExceeded();
PopDiagTraceUsermodeThermalEvent();
PopDiagTraceUsermodeTripPointExceeded();
PopDiagTraceZeroHiberFile();
PopDiagTraceZeroHiberFileEnd();
PopDiagTraceZoneCriticalTripPointExceeded();
PopDiagTraceZoneS4TripPointExceeded();
PopDisablePowerExecutionRequest();
PopDiscardRange();
PopDisksRegisteredForIdle();
PopDispatchAcDcCallback();
PopDispatchCallback();
PopDispatchCallout();
PopDispatchFullWake();
PopDispatchNotifications();
PopDispatchNotificationsToList();
PopDispatchPowerSettingCallbacks();
PopDispatchQuerySetIrp();
PopDispatchShutdownEvent();
PopDispatchStateCallout();
PopDispatchSuperfetchNotification();
PopDripsWatchdogTakeAction();
PopDripsWatchdogTimerDpcRoutine();
PopDripsWatchdogWorkerRoutine();
PopEnableExecutionRequiredPowerRequests();
PopEnableHiberFile();
PopEnableIrpWatchdog();
PopEnablePowerExecutionRequest();
PopEndMirroring();
PopEnforceIdleResiliency();
PopEnforceResiliencyScenarios();
PopEvaluateGlobalUserStatus();
PopEventCalloutDispatch();
PopExecuteOnTargetProcessors();
PopExecuteProcessorCallback();
PopExecutionRequiredPowerRequest();
PopExecutionRequiredSettingCallback();
PopExecutionRequiredTimeoutCallback();
PopExtendConnectionState();
PopFanAdd();
PopFanCheckSystemStatus();
PopFanEndCsFanPeriod();
PopFanIrpComplete();
PopFanRemove();
PopFanReportBootStartDevices();
PopFanUpdateCsState();
PopFanUpdateRunningState();
PopFanWorker();
PopFastS4Check();
PopFilterCapabilities();
PopFinalizeDeviceWakeSource();
PopFinalizeWakeInfo();
PopFindNextSystemPowerState();
PopFindPowerSettingConfiguration();
PopFireThermalWmiEvent();
PopFlushAndHold();
PopFlushVolumeWorker();
PopFlushVolumes();
PopFreeHiberContext();
PopFreeIrp();
PopFreeRegistration();
PopFreeSessionState();
PopFreeSessionStateInList();
PopFreeWakeInfo();
PopFreeWakeSource();
PopFxActivateComponent();
PopFxActivateComponentWorker();
PopFxActivateDevice();
PopFxActivateDevicesForSx();
PopFxAddRefDevice();
PopFxAllocatePowerIrp();
PopFxAllocateUniqueId();
PopFxArmResidentTimer();
PopFxAssignDeviceToDevNode();
PopFxBugCheck();
PopFxCaptureDeviceAccounting();
PopFxCompleteComponentActivation();
PopFxCompleteDevicePowerRequired();
PopFxComponentWork();
PopFxConvertV1Components();
PopFxCreateEmergencyWorkerThread();
PopFxDebuggerPowerCriticalTransitionCallback();
PopFxDeliverDevicePowerRequired();
PopFxDeviceWork();
PopFxEmergencyWorker();
PopFxEnablePlatformStates();
PopFxEnableWorkOrderWatchdog();
PopFxFreeUniqueId();
PopFxIdleComponent();
PopFxIdleDevicesFromSx();
PopFxIdleTimeoutDpcRoutine();
PopFxIdleWorker();
PopFxIdleWorkerTail();
PopFxIncrementDeviceSleepCount();
PopFxInsertDevice();
PopFxLockDevice();
PopFxLowPowerEpochCallback();
PopFxNotifyMiniPepIdleState();
PopFxPauseDeviceAccounting();
PopFxPlatformIdleVeto();
PopFxPluginWork();
PopFxPrepareDevicesForShutdown();
PopFxProcessWork();
PopFxProcessorIdleVeto();
PopFxQueueWorkOrder();
PopFxRegisterDevice();
PopFxRegisterDeviceWithPep();
PopFxRegisterDeviceWorker();
PopFxRegisterPluginEx();
PopFxReleasePowerIrp();
PopFxRemoveDevice();
PopFxRequestMiniComponentIdleConstraints();
PopFxRequestMiniDeviceIdleConstraints();
PopFxRequestWorker();
PopFxResidentTimeoutDpcRoutine();
PopFxResidentTimeoutRoutine();
PopFxResumeDeviceAccounting();
PopFxScheduleDeviceIdleTimer();
PopFxSetDeviceAccountingCsPlatformState();
PopFxStartDeviceAccounting();
PopFxStopDeviceAccounting();
PopFxTraceDeviceRegistration();
PopFxTransitionCriticalResource();
PopFxUnregisterDevice();
PopFxUnregisterDeviceOrWait();
PopFxUpdateComponentAccountingEnhanced();
PopFxUpdateDeviceAccountingEnhanced();
PopFxUpdateDeviceIdleTimer();
PopFxUpdatePlatformIdleState();
PopFxUpdateProcessorIdleState();
PopFxVerifyDependencies();
PopFxWorkOrderWatchdog();
PopGenerateMdl();
PopGenerateScratchMdl();
PopGenerateUnHibernatedMdl();
PopGetBitlockerKeyLocation();
PopGetCurrentWakeInfos();
PopGetDisplayTimeout();
PopGetDope();
PopGetHiberFlags();
PopGetHwConfigurationSignature();
PopGetIdleResiliencyDuration();
PopGetIdleTimesCallback();
PopGetIoLocation();
PopGetLegacyPowerRequestFlags();
PopGetListHead();
PopGetLockConsoleTimeout();
PopGetNextTable();
PopGetPolicyDeviceObject();
PopGetPolicyWorker();
PopGetPowerRequestListInfo();
PopGetPowerSettingValue();
PopGetRangeCount();
PopGetReasonListByReasonCode();
PopGetRemainingHibernateRangeDataSize();
PopGetSessionId();
PopGetSettingNotificationName();
PopGetSettingValue();
PopGetWakeSource();
PopGracefulShutdown();
PopHaltDeviceIdle();
PopHandleNextState();
PopHandleWakeSources();
PopHardDiskPowerSettingCallback();
PopHiberCheckForDebugBreak();
PopHiberCheckResume();
PopHiberEarlyCleanup();
PopHiberInitializeResources();
PopHiberPeekRangeTable();
PopIdleResiliencyPowerSettingCallback();
PopIgnoreBatteryStatusChange();
PopInitPlatformSettings();
PopInitSIdle();
PopInitShutdownList();
PopInitSpm();
PopInitSystemSleeperThread();
PopInitializeAdpm();
PopInitializeIrpWorkers();
PopInitializePowerPolicySimulate();
PopInitializePowerSettingCallbacks();
PopInitializePowerSettings();
PopInitializeTimer();
PopInitilizeAcDcSettings();
PopInputDisabled();
PopInsertPowerRequestObject();
PopIntSteerSetMode();
PopIntSteerSetPerProcTrigger();
PopIntSteerSetTimeUnparkTrigger();
PopInternalAddToDumpFile();
PopInternalSaveStackToDumpFile();
PopInterruptSteeringEnabled();
PopInvokeStateHandlerTargetProcessor();
PopInvokeSystemStateHandler();
PopIrpWatchdog();
PopIrpWatchdogBugcheck();
PopIrpWorker();
PopIrpWorkerControl();
PopIsAddressRangeValid();
PopIssueActionRequest();
PopIssueCoalescingNotification();
PopIssueNextState();
PopLazySensorActiveInput();
PopLoadResumeContext();
PopLockGetDoDevicePowerState();
PopLogDisabledSleepReason();
PopLogNotifyDevice();
PopLogSleepDisabled();
PopLoggingInformation();
PopMapInternalActionToIrpAction();
PopMarkHiberPhase();
PopMarshalSettingValues();
PopMirrorPhysicalMemory();
PopMonitorAlpcCallback();
PopMonitorInvocation();
PopMonitorProcessLoop();
PopMoveList();
PopNewProcessorCallback();
PopNewWakeInfo();
PopNewWakeSource();
PopNotifyBrightnessChangesWorker();
PopNotifyCallbacksPreSleep();
PopNotifyConsoleUserPresent();
PopNotifyDevice();
PopNotifyPolicyDevice();
PopNotifySessionDisplayRequired();
PopNotifyShutdownListener();
PopOpenKey();
PopOpenPowerKey();
PopPdcCallback();
PopPdcCsDeviceNotification();
PopPdcIsBootOptionPresent();
PopPdcLogConnectedStandbyComplianceChecks();
PopPdcRegister();
PopPdcScreenOff();
PopPdcSpmScenarioRegisterationComplete();
PopPdcUpdateDeviceCompliance();
PopPepAbandonDevice();
PopPepAcceptDeviceNotification();
PopPepArmIdleTimer();
PopPepAttemptAcitivityPromotion();
PopPepCancelActivities();
PopPepCancelActivityRange();
PopPepCompleteActivity();
PopPepCompleteComponentActiveActivity();
PopPepCompleteComponentIdleState();
PopPepCompleteComponentIdleStateChangeActivity();
PopPepCompleteDevicePowerOnActivity();
PopPepCompleteVoidActivity();
PopPepComponentActive();
PopPepComponentGetLatencyIdleState();
PopPepComponentGetResidencyIdleState();
PopPepComponentGetWork();
PopPepComponentSetLatency();
PopPepComponentSetResidency();
PopPepComponentSetWakeHint();
PopPepCountReadyActivities();
PopPepDeviceDState();
PopPepDevicePoweredOn();
PopPepDeviceStarted();
PopPepDeviceWaitWake();
PopPepDispatchAbandonDevice();
PopPepDispatchCompleteComponentIdleState();
PopPepDispatchComponentActivated();
PopPepDispatchComponentActive();
PopPepDispatchComponentIdleState();
PopPepDispatchComponentSetLatency();
PopPepDispatchComponentSetResidency();
PopPepDispatchComponentSetWakeHint();
PopPepDispatchDeviceDState();
PopPepDispatchDevicePower();
PopPepDispatchDevicePoweredOn();
PopPepDispatchDeviceStarted();
PopPepDispatchDeviceSurprisePowerOn();
PopPepDispatchDeviceWaitWake();
PopPepDispatchLowPowerEpoch();
PopPepDispatchPowerControl();
PopPepDispatchPowerControlComplete();
PopPepDispatchPrepareDevice();
PopPepDispatchRegisterDevice();
PopPepDispatchUnregisterDevice();
PopPepDispatchWork();
PopPepEntry();
PopPepGetComponentVetoMasks();
PopPepGetDevicePlatformStateDependents();
PopPepGetDeviceVetoMasks();
PopPepGetMinimumComponentIdleState();
PopPepGetMinimumDevicePowerState();
PopPepGetReadyActivityType();
PopPepIdleTimeoutDpcRoutine();
PopPepIdleTimeoutRoutine();
PopPepInitializeVetoMasks();
PopPepInsertDevice();
PopPepLockActivityLink();
PopPepNotifyIdleState();
PopPepPlatformStateRegistered();
PopPepPrepareDevice();
PopPepProcessEvent();
PopPepPromoteActivities();
PopPepRegisterDevice();
PopPepReleaseActivityLink();
PopPepRemoveDevice();
PopPepRequestWork();
PopPepResetDeviceAccountingLevel();
PopPepShouldActivityWait();
PopPepStartActivity();
PopPepStartComponentActivatingActivity();
PopPepStartComponentIdleStateChangeActivity();
PopPepStartDevicePowerOffActivity();
PopPepStartDevicePowerOnActivity();
PopPepStartDeviceUnregisterActivity();
PopPepStartVoidActivity();
PopPepTriggerActivity();
PopPepTriggerComponentActivatingActivity();
PopPepTriggerComponentActiveActivity();
PopPepTriggerComponentIdleStateChangeActivity();
PopPepTriggerVoidActivity();
PopPepTryPowerDownComponent();
PopPepTryPowerDownDevice();
PopPepTryPowerUpComponent();
PopPepUnregisterDevice();
PopPepUpdateComponentResidentStatus();
PopPepUpdateConstraints();
PopPepUpdateIdleState();
PopPepUpdateIdleStateRefCount();
PopPepVerifyActivities();
PopPepWaitForDeviceRelease();
PopPepWork();
PopPerfBoostPowerRequest();
PopPluginAbandonDevice();
PopPluginComponentActive();
PopPluginComponentIdleState();
PopPluginDeviceDState();
PopPluginDevicePower();
PopPluginGetComponentVetoMasks();
PopPluginGetDevicePlatformStateDependents();
PopPluginGetDeviceVetoMasks();
PopPluginPowerControlComplete();
PopPluginRegisterCrashdumpDevice();
PopPluginRegisterDevice();
PopPluginRequestPowerControl();
PopPluginUnregisterDevice();
PopPluginWork();
PopPoCoalescinCallback();
PopPolicyDeviceRemove();
PopPolicyDeviceTargetChange();
PopPolicySystemIdle();
PopPolicyTimeChange();
PopPolicyWorkerAction();
PopPolicyWorkerActionPromote();
PopPolicyWorkerMain();
PopPolicyWorkerNotify();
PopPolicyWorkerThread();
PopPowerActionString();
PopPowerButtonSettingCallback();
PopPowerRequestActionInfo();
PopPowerRequestAllocate();
PopPowerRequestCallbackWorker();
PopPowerRequestCleanUp();
PopPowerRequestCompare();
PopPowerRequestCreateInfo();
PopPowerRequestDeleteEntryById();
PopPowerRequestDeleteEntryNoLock();
PopPowerRequestExecuteCallbacks();
PopPowerRequestFindEntryById();
PopPowerRequestFree();
PopPowerRequestInit();
PopPowerRequestInsertElementNoLock();
PopPowerRequestOverrideInitialize();
PopPreCriticalBatteryNotify();
PopPreallocateHibernateMemory();
PopPrepChildWake();
PopPrepareIoctl();
PopPrintEx();
PopPrintUserActivityPresence();
PopProcessNotifyLegacyEventResponse();
PopProcessPowerRequestOverrideQueryResponse();
PopProcessWakeSourceWork();
PopProcessorInformation();
PopPromoteActionFlag();
PopQpcTimeInMs();
PopQueueBatteryStatusTimeout();
PopQueuePowerRequestCallbacks();
PopQueueQuerySetIrp();
PopQueueTargetDpc();
PopReadHiberbootGroupPolicy();
PopReadHiberbootPolicy();
PopReadProducerConsumerBuffer();
PopReadShutdownPolicy();
PopReadSystemAwayModePolicy();
PopReadyChildWake();
PopReadyParentSleep();
PopRecalculateCBTriggerLevels();
PopRecordPowerButton();
PopRegisterClient();
PopRegisterForDeviceNotification();
PopReleaseAdaptiveLock();
PopReleaseAwaymodeLock();
PopReleaseDripsWatchdogLock();
PopReleasePolicyLock();
PopReleasePowerRequestPushLock();
PopReleaseTransitionLock();
PopReleaseUmpoPushLock();
PopReleaseWakeSourceSpinLock();
PopRemoteSessionActiveInput();
PopRemoveReasonRecordByReasonCode();
PopRequestCompletion();
PopRequestPowerIrp();
PopRequestRead();
PopRequestShutdownWait();
PopRequestWrite();
PopResetActionDefaults();
PopResetCBTriggers();
PopResetCurrentPolicies();
PopResetRangeEnum();
PopRestoreHiberContext();
PopResumeApps();
PopResumeDeviceIdle();
PopResumeServices();
PopRunMaximumIrpWorkers();
PopRunNormalIrpWorkers();
PopRundownPowerSettings();
PopSafeCopyUnicodeString();
PopSaveHiberContext();
PopSaveHiberContextWrapper();
PopSaveHibernateEnabled();
PopScanIdleList();
PopScreenOffIdleResiliencyEngaged();
PopSendSessionInfo();
PopSensorActiveInput();
PopSessionClosed();
PopSessionConnected();
PopSessionConnectionChange();
PopSessionCreated();
PopSessionDisconnected();
PopSessionInputChange();
PopSessionWinlogonNotification();
PopSetAwayModeStatus();
PopSetBootPhaseRange();
PopSetDevicesSystemState();
PopSetDisplayStatus();
PopSetDripsWatchdog();
PopSetGlobalUserStatus();
PopSetHiberFileSize();
PopSetLastReferenceTime();
PopSetNewPolicyValue();
PopSetNotificationWork();
PopSetPowerAction();
PopSetPowerSettingValue();
PopSetPowerSettingValueAcDc();
PopSetRange();
PopSetSessionDisplayStatus();
PopSetSessionUserStatus();
PopSetShutdownMarker();
PopSetSleepMarker();
PopSetSpecialRequest();
PopSetSpmPowerSettingOverride();
PopSetSystemAwayMode();
PopSetSystemState();
PopSetWin32kDisplayTimeout();
PopSetWin32kInputTimeout();
PopSetupSleepNotifies();
PopShutdownHandler();
PopShutdownSystem();
PopSleepDeviceList();
PopSleepPowerSettingCallback();
PopSleepStudyPreCriticalBatteryNotify();
PopSpmAllocateQueryTable();
PopSpmChangePowerSettings();
PopSpmDisableUnusedScenarios();
PopSpmGetScenario();
PopSpmGetScenarioPolicySetting();
PopSpmInheritPowerSettings();
PopSpmInitScenario();
PopSpmOpenRegistryKey();
PopSpmReadPolicyListFromRegistry();
PopSpmReadScenarioSettingsFromRegistry();
PopSpmReadSettingValuesFromQueryTable();
PopSpmRegister();
PopSpmRegisterPowerSettings();
PopSpmSetScenarioPolicySetting();
PopSpmSetupIrForCs();
PopSpmUpdatePowerSettings();
PopSpmUpdateScenarioCommonAccounting();
PopSqmAddToStream();
PopSqmBatteryUpdate();
PopSqmCreateDwordStreamEntry();
PopSqmCreateStringStreamEntry();
PopSqmFanEnumeration();
PopSqmIllegalProcessorThrottleEvent();
PopSqmThermalCriticalEvent();
PopSqmThermalCriticalShutdown();
PopSqmThermalHibernate();
PopSqmThermalUsermodeEvent();
PopSqmThermalZoneEnumeration();
PopSqmThermalZoneMetrics();
PopSqmUpdateDword();
PopStartMirroring();
PopStateIsSessionSpecific();
PopSuspendApps();
PopSuspendResumeInvocation();
PopSuspendResumePdc();
PopSuspendServices();
PopSwitchForcedShutdownSettingCallback();
PopSystemIrpCompletion();
PopSystemRequiredCallback();
PopSystemRequiredSet();
PopSystemStateString();
PopThermalIrpComplete();
PopThermalLogMetricsInformation();
PopThermalPowerSettingCallback();
PopThermalProcessUsermodeEvent();
PopThermalReadCounters();
PopThermalTraceRundownEvents();
PopThermalWorker();
PopThermalZoneAdd();
PopThermalZoneDpc();
PopThermalZoneRemove();
PopThermalZoneUpdateCoolingPolicy();
PopTimeoutWakeTracking();
PopTimestampTargetProcessor();
PopTracePowerSettingChange();
PopTransitionToSleep();
PopTriggerDiagTraceAoAcCapability();
PopUmpoInitializeChannel();
PopUmpoInitializeMonitorChannel();
PopUmpoMessageCallback();
PopUmpoProcessMessage();
PopUmpoProcessMessages();
PopUmpoProcessPowerMessage();
PopUmpoSendBrightness();
PopUmpoSendHotKey();
PopUmpoSendLegacyEvent();
PopUmpoSendPowerMessage();
PopUmpoSendPowerRequestOverrideCleanup();
PopUmpoSendPowerRequestOverrideQuery();
PopUnlinkWakeSources();
PopUnlockAfterSleepWorker();
PopUnreferencePowerSetting();
PopUnregisterPowerSettingCallback();
PopUpdateConsoleDisplayState();
PopUpdateDiskCoalescingTimeout();
PopUpdateDiskIdleTimeout();
PopUpdateDiskIdleTimeoutSetting();
PopUpdateTimeouts();
PopUpdateWakeSource();
PopUpdateWakeSourceWorker();
PopUserIsAdmin();
PopUserPresentOverride();
PopUserPresentSet();
PopUserPresentSetWorker();
PopValidateContextMembership();
PopValidateExistingHiberFile();
PopValidatePowerSettingData();
PopValidateRTCWake();
PopValidateServiceNotification();
PopVerifyPowerActionPolicy();
PopVerifySystemPowerPolicy();
PopVerifySystemPowerState();
PopVideoBrightnessCapableSettingCallback();
PopVideoPowerSettingCallback();
PopWakeDeviceList();
PopWakeInfoDereference();
PopWakeInfoReference();
PopWakeSourceGetDeviceProperty();
PopWakeSourceInit();
PopWakeSourceIsChild();
PopWakeSourceIsParent();
PopWakeSourceSize();
PopWakeSourceTimeoutDpc();
PopWakeSourceTimeoutWorker();
PopWdiTimerCallback();
PopWdiTimerWorkerThread();
PopWriteHeaderPages();
PopWriteHiberPages();
PopWriteImageHeader();
PopZeroHiberFile();
PotentialNewSymbol();
PpCheckInDriverDatabase();
PpCreateLegacyDeviceIds();
PpDevCfgInit();
PpDevCfgProcessDevice();
PpDevCfgProcessDeviceClass();
PpDevCfgProcessDeviceExtensions();
PpDevCfgProcessDevices();
PpDevCfgTraceDeviceStart();
PpDevNodeInsertIntoTree();
PpDevNodeLockTree();
PpDevNodeRemoveFromTree();
PpDevNodeUnlockTree();
PpDeviceRegistration();
PpForEachDeviceInstanceDriver();
PpHotSwapGetDevnodeRemovalPolicy();
PpHotSwapInitRemovalPolicy();
PpHotSwapUpdateRemovalPolicy();
PpInitGetGroupOrderIndex();
PpInitSystem();
PpInitializeBootDDB();
PpIrpQueryBusInformation();
PpIrpQueryCapabilities();
PpIrpQueryResourceRequirements();
PpLastGoodDeleteFilesCallback();
PpLastGoodDoBootProcessing();
PpMarkDeviceStackExtensionFlag();
PpPagePathAssign();
PpProcessClearProblem();
PpProfileBeginHardwareProfileTransition();
PpProfileCancelHardwareProfileTransition();
PpProfileCancelTransitioningDock();
PpProfileCommitTransitioningDock();
PpProfileIncludeInHardwareProfileTransition();
PpProfileInit();
PpProfileMarkAllTransitioningDocksEjected();
PpProfileQueryHardwareProfileChange();
PpReleaseBootDDB();
PpResetProblemDevices();
PpSystemHiveLimitCallback();
PpmAcquireLock();
PpmAllocWmiEvent();
PpmApplyIdlePolicy();
PpmApplyIdlePolicyChanges();
PpmCancelExitLatencyTrace();
PpmCapturePerformanceDistribution();
PpmCapturePerformanceDistributionCallback();
PpmCheckApplyLatencySensitivityHint();
PpmCheckApplyParkConstraints();
PpmCheckApplyPerfConstraints();
PpmCheckApplyProcessorPerformance();
PpmCheckCustomRun();
PpmCheckEnd();
PpmCheckInit();
PpmCheckInitProcessors();
PpmCheckMakeupSkippedChecks();
PpmCheckNoOp();
PpmCheckPeriodicStart();
PpmCheckReInit();
PpmCheckRecordAllUtility();
PpmCheckReset();
PpmCheckRun();
PpmCheckSnapAllUtility();
PpmCheckStart();
PpmClearExitLatencySamplingPercentage();
PpmClearSimulatedIdle();
PpmClearSimulatedLoad();
PpmContinueActiveTimeAccumulation();
PpmContinueTimeAccumulation();
PpmConvertTime();
PpmConvertTimeFrom();
PpmConvertTimeTo();
PpmDeepestHardwareIdleState();
PpmDripsStateUpdateCallback();
PpmEnableWmiInterface();
PpmEnterPlatformIdle();
PpmEventBiosCapChange();
PpmEventCoreParkingStateChange();
PpmEventDomainPerfStateChange();
PpmEventIdleStateChange();
PpmEventInitialize();
PpmEventLPICoreParking();
PpmEventParkNodeCapChange();
PpmEventParkNodePreference();
PpmEventParkNodeRecordedStats();
PpmEventPerfState();
PpmEventPlatformVetoRequest();
PpmEventPlatformVetoRundown();
PpmEventProcessorPerfStateChange();
PpmEventProcessorPerfStateChangeInitiated();
PpmEventProcessorVetoRequest();
PpmEventProcessorVetoRundown();
PpmEventThermalCapChange();
PpmEventTraceAccountingBucketIntervalsRundown();
PpmEventTraceControlCallback();
PpmEventTraceDripsAccountingSnapshot();
PpmEventTraceExpectedUtility();
PpmEventTraceFailedPerfCheckStart();
PpmEventTraceLPIState();
PpmEventTraceLatencySensitivityHint();
PpmEventTraceMakeupPerfCheck();
PpmEventTracePerfCheckStop();
PpmEventTracePlatformIdleAccounting();
PpmEventTraceProcessorIdle();
PpmEventTraceProcessorIdleAccounting();
PpmEventTraceProcessorState();
PpmEventTraceRecordedUtility();
PpmExecutePolicySettingsChange();
PpmFireWmiEvent();
PpmGetExitSamplingCountdown();
PpmGetHypervisorState();
PpmGetPlatformIdleDurationHint();
PpmGetPlatformSelectionVetoCounts();
PpmGetThroughputInfoCallback();
PpmIdleCompleteExitLatencyTrace();
PpmIdleDefaultCancel();
PpmIdleDefaultComplete();
PpmIdleDefaultExecute();
PpmIdleDefaultInitiateWake();
PpmIdleDefaultIsHalted();
PpmIdleDefaultPrepare();
PpmIdleEvaluateConstraints();
PpmIdleExecuteTransition();
PpmIdleGetCIndexForState();
PpmIdleGuestExecute();
PpmIdleGuestPrepare();
PpmIdleInitializeConcurrency();
PpmIdleInstallConcurrency();
PpmIdleInstallDefaultStates();
PpmIdleLockProcessor();
PpmIdlePolicySettingCallback();
PpmIdlePrepare();
PpmIdleRegisterDefaultStates();
PpmIdleRemoveConcurrency();
PpmIdleSelectStates();
PpmIdleSnapConcurrency();
PpmIdleSnapConcurrencyIdleTime();
PpmIdleUnlockProcessor();
PpmIdleUpdateConcurrency();
PpmIdleUpdateHvStates();
PpmInitIdlePolicy();
PpmInitIllegalThrottleLogging();
PpmInitPerfPolicy();
PpmInstallFeedbackCounters();
PpmInstallNewIdleDomains();
PpmInstallNewIdleStates();
PpmInstallPlatformIdleStates();
PpmParkApplyForcedMask();
PpmParkApplyPolicy();
PpmParkCalculateCoreParkingMask();
PpmParkCalculateUnparkCount();
PpmParkChooseCoresToUnpark();
PpmParkClearForcedMask();
PpmParkCompleteMakeup();
PpmParkComputeDiff();
PpmParkDistributeUtility();
PpmParkMaximumCoresParked();
PpmParkParkingAvailable();
PpmParkRecordNodeStatistics();
PpmParkRegisterParking();
PpmParkReportParkedCore();
PpmParkReportParkedCores();
PpmParkReportUnparkedCore();
PpmParkReportUnparkedCores();
PpmParkSetLpiCap();
PpmParkSnapNodeIdleTime();
PpmParkSnapNodeStatistics();
PpmParkSteerInterrupts();
PpmParkUpdateConcurrencyTracking();
PpmPerfAction();
PpmPerfAllocateHistory();
PpmPerfApplyDomainState();
PpmPerfApplyDomainStates();
PpmPerfApplyLatencyHint();
PpmPerfApplyLatencyHints();
PpmPerfApplyProcessorState();
PpmPerfApplyProcessorStates();
PpmPerfCalculateMinMaxStates();
PpmPerfCheckForIllegalProcessorThrottle();
PpmPerfClearMaximumOverride();
PpmPerfCommitPerformance();
PpmPerfComputeHistoryAverage();
PpmPerfComputePerfReductionTolerance();
PpmPerfControlActionCallback();
PpmPerfControlExecuteAction();
PpmPerfDisableBootOverride();
PpmPerfDisableBootOverrideWorker();
PpmPerfFeedbackCounterRead();
PpmPerfForceDomainStates();
PpmPerfGetCurrentState();
PpmPerfLatencySensitivityHintWorker();
PpmPerfMinimumPerfReached();
PpmPerfPolicySettingCallback();
PpmPerfQueueAction();
PpmPerfReApplyStates();
PpmPerfReadFeedback();
PpmPerfRecordUtility();
PpmPerfRegisterHvCap();
PpmPerfRegisterHvStates();
PpmPerfRemoveMaximumOverride();
PpmPerfSelectDomainState();
PpmPerfSelectDomainStates();
PpmPerfSelectProcessorState();
PpmPerfSelectProcessorStates();
PpmPerfSetMaximumOverride();
PpmPerfSnapUtility();
PpmPerfUpdateDomains();
PpmPerfUpdateHistory();
PpmPrepareExitLatencyTrace();
PpmQueryPlatformStateResidency();
PpmQueryTime();
PpmRegisterPerfCap();
PpmRegisterPerfStates();
PpmReleaseLock();
PpmRemoveIdleStates();
PpmResetDripsAccountingSnapshot();
PpmResetIdleAccounting();
PpmResetIdlePolicy();
PpmResetPerfTimes();
PpmResetPlatformIdleAccounting();
PpmResetProcessorIdleAccounting();
PpmScaleIdleStateValues();
PpmSetExitLatencySamplingPercentage();
PpmSetPlatformIdleDurationHint();
PpmSetSimulatedIdle();
PpmSetSimulatedLoad();
PpmSnapDripsAccountingSnapshot();
PpmSnapPerformanceAccumulation();
PpmStartIllegalProcessorThrottleLogging();
PpmStopIllegalProcessorThrottleLogging();
PpmTestAndLockProcessors();
PpmTraceExitLatency();
PpmTracePerfIdleRundown();
PpmTranslateIdleAccounting();
PpmTranslatePlatformIdleAccounting();
PpmTryAcquireLock();
PpmUnlockProcessors();
PpmUpdateIdleDomains();
PpmUpdateIdleStates();
PpmUpdateIdleStatesInplace();
PpmUpdateIdleVeto();
PpmUpdatePerfBoostPolicy();
PpmUpdatePerfBoostPolicyCallback();
PpmUpdatePerformanceFeedback();
PpmUpdatePlatformIdleAccounting();
PpmUpdatePlatformIdleVeto();
PpmUpdateProcessorIdleVeto();
PpmUpdateTimeAccumulation();
PpmWmiDispatch();
PpmWmiFireIdleAccountingEvent();
PpmWmiGetAllData();
PpmWmiIdleAccountingProcedure();
PpmWmiIdleAccountingWork();
PpmWmiInit();
PpmWmiRegisterInfo();
PpvUtilCallAddDevice();
PpvUtilFailDriver();
PpvUtilGetDevnodeRemovalOption();
PpvUtilIsHardwareBeingVerified();
PpvUtilIsPdo();
PpvUtilTestStartedPdoStack();
ProbeForRead();
ProbeForWrite();
ProducerConsumerBufferComplete();
ProducerConsumerCopyFromContextBuffer();
ProducerConsumerCopyToContextBuffer();
ProducerGetBuffer();
PromoteNode();
PropertyEval();
Ps386GetVdmIoHandler();
PsAcquireProcessExitSynchronization();
PsAssignImpersonationToken();
PsBoostThreadIo();
PsBoostThreadIoEx();
PsBootPhaseComplete();
PsCallImageNotifyRoutines();
PsCaptureExceptionPort();
PsCaptureUserProcessParameters();
PsChangeQuantumTable();
PsChargePoolQuota();
PsChargeProcessNonPagedPoolQuota();
PsChargeProcessPageFileQuota();
PsChargeProcessPagedPoolQuota();
PsChargeProcessPoolQuota();
PsChargeProcessQuota();
PsChargeProcessWakeCounter();
PsChargeSharedPoolQuota();
PsConvertToGuiThread();
PsCreateSystemThread();
PsCreateSystemThreadEx();
PsDereferenceImpersonationToken();
PsDereferenceKernelStack();
PsDereferencePrimaryToken();
PsDisableImpersonation();
PsEnforceExecutionLimits();
PsEnterPriorityRegion();
PsEnumProcessThreads();
PsEnumProcesses();
PsEstablishWin32Callouts();
PsFreezeProcess();
PsGetAllocatedFullProcessImageName();
PsGetContextThread();
PsGetCurrentProcess();
PsGetCurrentProcessId();
PsGetCurrentProcessSessionId();
PsGetCurrentProcessWin32Process();
PsGetCurrentThread();
PsGetCurrentThreadId();
PsGetCurrentThreadPreviousMode();
PsGetCurrentThreadProcess();
PsGetCurrentThreadProcessId();
PsGetCurrentThreadStackBase();
PsGetCurrentThreadStackLimit();
PsGetCurrentThreadTeb();
PsGetCurrentThreadWin32Thread();
PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion();
PsGetDefaultWsMaximum();
PsGetJobLock();
PsGetJobSessionId();
PsGetJobUIRestrictionsClass();
PsGetNextProcess();
PsGetNextProcessThread();
PsGetProcessCommonJob();
PsGetProcessCreateTimeQuadPart();
PsGetProcessDebugPort();
PsGetProcessExitProcessCalled();
PsGetProcessExitStatus();
PsGetProcessExitTime();
PsGetProcessId();
PsGetProcessImageFileName();
PsGetProcessInheritedFromUniqueProcessId();
PsGetProcessJob();
PsGetProcessPeb();
PsGetProcessPriorityClass();
PsGetProcessProtection();
PsGetProcessSectionBaseAddress();
PsGetProcessSecurityPort();
PsGetProcessSessionId();
PsGetProcessSessionIdEx();
PsGetProcessSignatureLevel();
PsGetProcessWin32Process();
PsGetProcessWin32WindowStation();
PsGetThreadExitStatus();
PsGetThreadFreezeCount();
PsGetThreadHardErrorsAreDisabled();
PsGetThreadId();
PsGetThreadProcess();
PsGetThreadProcessId();
PsGetThreadSessionId();
PsGetThreadTeb();
PsGetThreadWin32Thread();
PsGetVersion();
PsImpersonateClient();
PsInitSystem();
PsInitializeFullProcessImageName();
PsInitializeQuotaSystem();
PsInsertVirtualizedTimer();
PsInvokeWin32Callout();
PsIsCurrentThreadPrefetching();
PsIsDiskCountersEnabled();
PsIsProcessBeingDebugged();
PsIsProtectedProcess();
PsIsProtectedProcessLight();
PsIsSystemProcess();
PsIsSystemThread();
PsIsSystemWideMitigationOptionSet();
PsIsThreadImpersonating();
PsIsThreadTerminating();
PsLeavePriorityRegion();
PsLocateSystemDlls();
PsLookupProcessByProcessId();
PsLookupProcessThreadByCid();
PsLookupThreadByThreadId();
PsMapSystemDlls();
PsOpenProcess();
PsOpenThread();
PsOpenTokenOfProcess();
PsQueryCpuQuotaInformation();
PsQueryFullProcessImageName();
PsQueryProcessAttributesByToken();
PsQueryProcessCommandLine();
PsQueryProcessExceptionFlags();
PsQueryRuntimeProcess();
PsQuerySectionSignatureInformation();
PsQueryStatisticsProcess();
PsQuerySystemDllInfo();
PsQueryTotalCycleTimeProcess();
PsQuitNextProcess();
PsQuitNextProcessThread();
PsReferenceEffectiveToken();
PsReferenceImpersonationToken();
PsReferenceImpersonationTokenEx();
PsReferenceKernelStack();
PsReferencePrimaryToken();
PsReferenceProcessFilePointer();
PsReleaseProcessExitSynchronization();
PsReleaseProcessWakeCounter();
PsRemoveCreateThreadNotifyRoutine();
PsRemoveLoadImageNotifyRoutine();
PsRemoveVirtualizedTimer();
PsReportProcessMemoryLimitViolation();
PsRestoreImpersonation();
PsResumeProcess();
PsResumeThread();
PsReturnPoolQuota();
PsReturnProcessNonPagedPoolQuota();
PsReturnProcessPageFileQuota();
PsReturnProcessPagedPoolQuota();
PsReturnProcessQuota();
PsReturnSharedPoolQuota();
PsRevertThreadToSelf();
PsRevertToSelf();
PsRevertToUserPagePriorityThread();
PsSetContextThread();
PsSetCpuQuotaInformation();
PsSetCreateProcessNotifyRoutine();
PsSetCreateProcessNotifyRoutineEx();
PsSetCreateThreadNotifyRoutine();
PsSetCurrentThreadPrefetching();
PsSetLdtEntries();
PsSetLegoNotifyRoutine();
PsSetLoadImageNotifyRoutine();
PsSetProcessHandleTracingInformation();
PsSetProcessLdtInfo();
PsSetProcessPriorityByClass();
PsSetProcessPriorityClass();
PsSetProcessSecurityPort();
PsSetProcessWin32Process();
PsSetProcessWindowStation();
PsSetSystemPagePriorityThread();
PsSetThreadHardErrorsAreDisabled();
PsSetThreadWin32Thread();
PsShutdownSystem();
PsSuspendProcess();
PsSuspendThread();
PsSwapImpersonationToken();
PsSwapProcessWorkingSet();
PsSynchronizeWithThreadInsertion();
PsTerminateProcess();
PsTerminateSystemThread();
PsThawProcess();
PsTransferProcessQuotaToSharedQuota();
PsUpdateActiveProcessAffinity();
PsUpdateDiskCounters();
PsWaitForAllProcesses();
PsWatchWorkingSet();
PsWrapApcWow64Thread();
Psp386CreateVdmIoListHead();
Psp386GetVdmIoHandler();
Psp386InsertVdmIoHandlerBlock();
Psp386InstallIoHandler();
Psp386RemoveIoHandler();
PspAddProcessToJobChain();
PspAddProcessToWorkingSetChangeList();
PspAdjustKeepAliveCountProcess();
PspAllocateAndQueryNotificationChannel();
PspAllocateCpuRateControl();
PspAllocateProcess();
PspAllocateThread();
PspApplyIFEOPerfOptions();
PspApplyJobLimitsToProcess();
PspApplyMitigationOptions();
PspApplyWorkingSetLimits();
PspApplyWorkingSetLimitsToProcess();
PspAssignPrimaryToken();
PspAssignProcessQuotaBlock();
PspAssignProcessToJob();
PspAssociateCompletionPortCallback();
PspAttachSession();
PspBindProcessSessionToJob();
PspBoostJobIoPriorityCallback();
PspBuildCreateProcessContext();
PspCallJobHierarchyCallbacks();
PspCaptureAndValidateUnicodeString();
PspCaptureCreateInfo();
PspCaptureProcessParameters();
PspCaptureUserProcessParameters();
PspCatchCriticalBreak();
PspChangeJobMemoryUsageByProcess();
PspChangeProcessExecutionState();
PspChargeJobWakeCounter();
PspChargeQuota();
PspCheckConditionalWakeCharge();
PspCheckForInvalidAccessByProtection();
PspCheckJobAccessState();
PspClearProcessThreadCidRefs();
PspComputeQuantum();
PspComputeQuantumAndPriority();
PspComputeReportWakeFilter();
PspCopyAndFixupParameters();
PspCopyUnicodeString();
PspCreateLdt();
PspCreateObjectHandle();
PspCreateProcess();
PspCreateThread();
PspDecodeMitigationExecuteOptions();
PspDeleteCreateProcessContext();
PspDeleteKernelStack();
PspDeleteThreadSecurity();
PspDereferenceQuotaBlock();
PspDfssConfigurationChangeHandler();
PspEnableProcessTimerVirtualization();
PspEnableProcessWakeCounters();
PspEnableTimerVirtualization();
PspEnableWakeCounters();
PspEnforceLimits();
PspEnforceLimitsJobPostCallback();
PspEnforceLimitsJobPreCallback();
PspEnforceLimitsProcessCallback();
PspEnumJobsAndProcessesInJobHierarchy();
PspEnumProcessesInJobHierarchy();
PspEstablishJobHierarchy();
PspEvaluateAndNotifyEmptyJob();
PspExecuteJobFreezeThawCallback();
PspExitProcess();
PspExitThread();
PspExpandLimit();
PspExpandQuota();
PspFoldProcessAccountingIntoJob();
PspFreeCpuRateControl();
PspFreezeJobTree();
PspFreezeProcessWorker();
PspGetContext();
PspGetContextThreadInternal();
PspGetEffectiveNoWakeCharge();
PspGetJobAssignmentDisposition();
PspGetJobLockHierarchyForAssignment();
PspGetJobLockHierarchyForDeletion();
PspGetNextChildJob();
PspGetNextJob();
PspGetNextJobProcess();
PspGetPreviousProcessThread();
PspGetProcessAccountingInformation();
PspGetProcessInJobHierarchy();
PspGetProcessInJobHierarchyCallback();
PspGetSetContextSpecialApc();
PspGetStandardHandleList();
PspHandleTableWalker();
PspHardenMitigationOptions();
PspHashKeyValue();
PspImplicitAssignProcessToJob();
PspInheritMitigationOptions();
PspInheritQuota();
PspInitPhase0();
PspInitPhase1();
PspInitializeCallbacks();
PspInitializeJobStructures();
PspInitializeProcessSecurity();
PspInitializeProtectedProcessParameters();
PspInitializeQuotaBlock();
PspInitializeQuotaExpansionDescriptor();
PspInitializeSystemDlls();
PspInitializeThunkContext();
PspInsertExpansionEntry();
PspInsertProcess();
PspInsertThread();
PspIoMiniPacketCallbackRoutine();
PspIsDescriptorValid();
PspIsDfssEnabled();
PspIsProcessInJob();
PspJobClose();
PspJobCycleTimeNotificationDpcRoutine();
PspJobDelete();
PspJobNotificationWorker();
PspJobTimeLimitsWork();
PspLocateInPEManifest();
PspLocateSystemDll();
PspLockJobChain();
PspLockJobsAndProcessExclusive();
PspLockQuotaExpansion();
PspLookupProcessQuotaBlock();
PspMapSystemDll();
PspNotificationPacketCallback();
PspNotifyEmptyJobsInJobChain();
PspPrepareSystemDllInitBlock();
PspProcessClose();
PspProcessDelete();
PspProcessOpen();
PspProcessRundownWorker();
PspProcessRundownWorkerSingle();
PspQueryCpuRateHistory();
PspQueryDescriptorThread();
PspQueryJobHierarchyAccountingInformation();
PspQueryJobHierarchyInterferenceCount();
PspQueryJobHierarchyProcessIdList();
PspQueryLastCallThread();
PspQueryLdtInformation();
PspQueryPooledQuotaLimits();
PspQueryProcessAccountingInformationCallback();
PspQueryProcessIdListCallback();
PspQueryProcessInterferenceCountCallback();
PspQueryQuotaLimits();
PspQueryWorkingSetWatch();
PspQueueApcSpecialApc();
PspReadDfssConfigurationValues();
PspReadIFEOMitigationOptions();
PspReadIFEONodeOptions();
PspReadIFEOPerfOptions();
PspReadUserQuotaLimits();
PspReaper();
PspReferenceCidTableEntry();
PspReferenceTokenForNewProcess();
PspReleaseProcessQuota();
PspReleaseReturnedQuota();
PspRemoveCpuRateControl();
PspRemoveProcessFromJobChain();
PspRemoveQuotaBlock();
PspRequestDeferredJobNotification();
PspReturnQuota();
PspReturnResourceQuota();
PspRundownProcess();
PspRundownSingleProcess();
PspSafeReferenceQuotaBlock();
PspSanitizeResourceLimits();
PspScheduleEnforcementWorker();
PspSelectNodeForProcess();
PspSendJobNotification();
PspSendNoWakeChargeLimitNotification();
PspSendProcessNotificationToJobChain();
PspSendReliableJobNotification();
PspSendWakeNotification();
PspSetAffinityLimitCallback();
PspSetBackgroundJobTree();
PspSetContextThreadInternal();
PspSetCpuRateControlJobPostCallback();
PspSetCpuRateControlJobPreCallback();
PspSetCreateProcessNotifyRoutine();
PspSetEffectiveJobLimits();
PspSetEffectiveLimit();
PspSetJobBackgroundCountCallback();
PspSetJobFreezeCountCallback();
PspSetJobLimitsJobPostCallback();
PspSetJobLimitsJobPreCallback();
PspSetJobLimitsProcessCallback();
PspSetJobNotificationCountCallback();
PspSetJobTimeLimitCallback();
PspSetLdtInformation();
PspSetLdtSize();
PspSetProcessAffinitySafe();
PspSetProcessAffinityUpdateMode();
PspSetProcessBackgroundCountCallback();
PspSetProcessFreezeStateCallback();
PspSetProcessIoHandlers();
PspSetProcessPriorityClass();
PspSetProcessSchedulingGroup();
PspSetQuotaLimits();
PspSetupUserProcessAddressSpace();
PspSinglePrivCheck();
PspSinglePrivCheckAudit();
PspSortHandleList();
PspSubtractAccountingValues();
PspSwapSystemDll();
PspSystemThreadStartup();
PspTerminateAllProcessesInJobHierarchy();
PspTerminateAllThreads();
PspTerminateProcess();
PspTerminateProcessesJobCallback();
PspTerminateThreadByPointer();
PspThreadDelete();
PspThreadOpen();
PspUnlinkJobProcess();
PspUnlockJobChain();
PspUnlockJobsAndProcessExclusive();
PspUnlockQuotaExpansion();
PspUpdateCreateInfo();
PspUpdateJobPeakProcessMemory();
PspUpdateSingleProcessAffinity();
PspUserApcReserveKernelRoutine();
PspUserApcReserveRundownRoutine();
PspUserThreadStartup();
PspValidateEnvironmentBlock();
PspValidateJobAffinityState();
PspValidateJobLimitsDuringAssignment();
PspValidateMitigationOptions();
PspWaitForUsermodeExit();
PspWritePebAffinityInfo();
PspWriteTebIdealProcessor();
PspWriteTebImpersonationInfo();
PushException();
PushInt();
PushPmInterrupt();
PushRmInterrupt();
QueryUpdateFileEaAllowedExt();
RDMSR();
READ_REGISTER_BUFFER_UCHAR();
READ_REGISTER_BUFFER_ULONG();
READ_REGISTER_BUFFER_USHORT();
READ_REGISTER_UCHAR();
READ_REGISTER_ULONG();
READ_REGISTER_USHORT();
RaiseException();
RamdiskStart();
RaspAddCacheEntry();
RaspAllocateMemory();
RaspAntiAlias();
RaspClearCache();
RaspConvertDeltas();
RaspCreatePointList();
RaspCreateSegmentList();
RaspDestroyCachedBitmap();
RaspDestroySegmentList();
RaspFreeMemory();
RaspGetCacheEntry();
RaspGetCompositeGlyphList();
RaspGetSegmentDirection();
RaspGetUnscaledGlyphData();
RaspGetXExtent();
RaspInitializeCompositeGlyphData();
RaspInitializeGlyphData();
RaspInterpolatePoint();
RaspLoadBearings();
RaspLoadCompositeGlyphData();
RaspLoadEmptyGlyph();
RaspLoadGlyphData();
RaspMapCharacterCodeToGlyphIndex();
RaspMapGlyphIndexToLocation();
RaspRasterize();
RaspRectangleCreate();
RaspRectangleDestroy();
RaspScale();
RaspScaleCoordinates();
RaspScanConvert();
RaspTestIntersection();
RawCheckForDeleteVolume();
RawCleanup();
RawCleanupVcb();
RawClose();
RawCompletionRoutine();
RawComputeFileSystemInformationChecksum();
RawCreate();
RawDeleteVcb();
RawDispatch();
RawFileSystemControl();
RawInitialize();
RawInitializeVcb();
RawInitiateDeleteVolume();
RawMountVolume();
RawPerformDevIoCtrl();
RawQueryFileSystemInformation();
RawQueryFsAttributeInfo();
RawQueryFsDeviceInfo();
RawQueryFsSizeInfo();
RawQueryFsVolumeInfo();
RawQueryInformation();
RawQueryVolumeInformation();
RawReadWriteDeviceControl();
RawScanDeletedList();
RawSetInformation();
RawShutdown();
RawUnload();
RawUserFsCtrl();
RawVerifyVolume();
ReadAMDMsr();
RealPredecessor();
RealSuccessor();
RebalanceNode();
ReferenceVacbLevel();
RemoveListEntryPte();
RemoveListHeadPte();
ResFwBackgroundTransition();
ResFwConfigureDisplayStringResources();
ResFwFindMessage();
ResFwFreeContext();
ResFwGetContext();
ResFwpPageInBackground();
ResFwpPageOutBackground();
RotBarInit();
RotBarUpdate();
RtlAbsoluteToSelfRelativeSD();
RtlAcquirePrivilege();
RtlAddAccessAllowedAce();
RtlAddAccessAllowedAceEx();
RtlAddAccessDeniedAceEx();
RtlAddAce();
RtlAddAtomToAtomTable();
RtlAddAtomToAtomTableEx();
RtlAddAuditAccessAce();
RtlAddMandatoryAce();
RtlAddProcessTrustLabelAce();
RtlAddRange();
RtlAddResourceAttributeAce();
RtlAddressInSectionTable();
RtlAllocateAndInitializeSid();
RtlAllocateHeap();
RtlAnsiCharToUnicodeChar();
RtlAnsiStringToUnicodeString();
RtlAppendAsciizToString();
RtlAppendStringToString();
RtlAppendUnicodeStringToString();
RtlAppendUnicodeToString();
RtlAreAllAccessesGranted();
RtlAreAnyAccessesGranted();
RtlAreBitsClear();
RtlAreBitsSet();
RtlAreNamesEqual();
RtlAssert();
RtlAvlInsertNodeEx();
RtlAvlRemoveNode();
RtlBackoff();
RtlCaptureContext();
RtlCaptureStackBackTrace();
RtlCharToInteger();
RtlCheckPortableOperatingSystem();
RtlCheckRegistryKey();
RtlCheckTokenCapability();
RtlCheckTokenMembership();
RtlCheckTokenMembershipEx();
RtlClearAllBits();
RtlClearBit();
RtlClearBits();
RtlCmDecodeMemIoResource();
RtlCmEncodeMemIoResource();
RtlCompareAltitudes();
RtlCompareMemory();
RtlCompareMemoryUlong();
RtlCompareString();
RtlCompareUnicodeString();
RtlCompareUnicodeStrings();
RtlCompressBuffer();
RtlCompressBufferLZNT1();
RtlCompressBufferProgress();
RtlCompressBufferXpressHuff();
RtlCompressBufferXpressHuffMax();
RtlCompressBufferXpressHuffStandard();
RtlCompressBufferXpressLz();
RtlCompressBufferXpressLzMax();
RtlCompressBufferXpressLzStandard();
RtlCompressChunks();
RtlCompressWorkSpaceSizeLZNT1();
RtlCompressWorkSpaceSizeXpressHuff();
RtlCompressWorkSpaceSizeXpressLz();
RtlComputeCrc32();
RtlComputeLfnChecksum();
RtlComputeReciprocal();
RtlContractHashTable();
RtlControlStackTraceDataBase();
RtlConvertSidToUnicodeString();
RtlCopyBitMap();
RtlCopyLuid();
RtlCopyLuidAndAttributesArray();
RtlCopyMemoryNonTemporal();
RtlCopyRangeList();
RtlCopySid();
RtlCopySidAndAttributesArray();
RtlCopyString();
RtlCopyUnicodeString();
RtlCrc32();
RtlCrc64();
RtlCreateAcl();
RtlCreateAtomTable();
RtlCreateAtomTableEx();
RtlCreateHashTable();
RtlCreateHashTableEx();
RtlCreateHeap();
RtlCreateRegistryKey();
RtlCreateSecurityDescriptor();
RtlCreateSecurityDescriptorRelative();
RtlCreateSystemVolumeInformationFolder();
RtlCreateUnicodeString();
RtlCreateUnicodeStringFromAsciiz();
RtlCreateUserProcess();
RtlCreateUserStack();
RtlCreateUserThread();
RtlCultureNameToLCID();
RtlCustomCPToUnicodeN();
RtlCutoverTimeToSystemTime();
RtlDecompressBuffer();
RtlDecompressBufferEx();
RtlDecompressBufferLZNT1();
RtlDecompressBufferProgress();
RtlDecompressBufferXpressHuff();
RtlDecompressBufferXpressHuffProgress();
RtlDecompressBufferXpressLz();
RtlDecompressBufferXpressLzProgress();
RtlDecompressChunks();
RtlDecompressFragment();
RtlDecompressFragmentLZNT1();
RtlDecompressFragmentNS();
RtlDelete();
RtlDeleteAce();
RtlDeleteAtomFromAtomTable();
RtlDeleteElementGenericTable();
RtlDeleteElementGenericTableAvl();
RtlDeleteElementGenericTableAvlEx();
RtlDeleteHashTable();
RtlDeleteNoSplay();
RtlDeleteOwnersRanges();
RtlDeleteRange();
RtlDeleteRegistryValue();
RtlDereferenceAtomTable();
RtlDescribeChunk();
RtlDescribeChunkLZNT1();
RtlDescribeChunkNS();
RtlDestroyAtomTable();
RtlDestroyHeap();
RtlDestroyLowBoxAtoms();
RtlDispatchException();
RtlDissectName();
RtlDoesNameContainWildCards();
RtlDowncaseUnicodeChar();
RtlDowncaseUnicodeString();
RtlDuplicateUnicodeString();
RtlEmptyAtomTable();
RtlEndEnumerationHashTable();
RtlEndWeakEnumerationHashTable();
RtlEnlargedUnsignedDivide();
RtlEnoughStackSpaceForStackCapture();
RtlEnumerateBoundaryDescriptorEntries();
RtlEnumerateEntryHashTable();
RtlEnumerateGenericTable();
RtlEnumerateGenericTableAvl();
RtlEnumerateGenericTableLikeADirectory();
RtlEnumerateGenericTableWithoutSplaying();
RtlEnumerateGenericTableWithoutSplayingAvl();
RtlEqualLuid();
RtlEqualPrefixSid();
RtlEqualSid();
RtlEqualString();
RtlEqualUnicodeString();
RtlEqualWnfChangeStamps();
RtlEthernetAddressToStringA();
RtlEthernetAddressToStringW();
RtlEthernetStringToAddressA();
RtlEthernetStringToAddressW();
RtlExpandHashTable();
RtlExtendedIntegerMultiply();
RtlExtendedLargeIntegerDivide();
RtlExtendedMagicDivide();
RtlExtractBitMap();
RtlFillMemory();
RtlFillMemoryUlong();
RtlFillMemoryUlonglong();
RtlFindAceBySid();
RtlFindAceByType();
RtlFindClearBits();
RtlFindClearBitsAndSet();
RtlFindClearRuns();
RtlFindClosestEncodableLength();
RtlFindFirstRunClear();
RtlFindLastBackwardRunClear();
RtlFindLeastSignificantBit();
RtlFindLongestRunClear();
RtlFindLongestRunClearCapped();
RtlFindMessage();
RtlFindMessageInTable();
RtlFindMostSignificantBit();
RtlFindNextAlignedForwardRunClear();
RtlFindNextForwardRunClear();
RtlFindNextForwardRunClearCapped();
RtlFindRange();
RtlFindSetBits();
RtlFindSetBitsAndClear();
RtlFindUnicodePrefix();
RtlFirstFreeAce();
RtlFnToFxFrame();
RtlFormatCurrentUserKeyPath();
RtlFormatMessage();
RtlFormatMessageEx();
RtlFreeAnsiString();
RtlFreeHeap();
RtlFreeOemString();
RtlFreeRangeList();
RtlFreeUnicodeString();
RtlFreeUserStack();
RtlFxToFnFrame();
RtlGUIDFromString();
RtlGenerate8dot3Name();
RtlGenerateClass5Guid();
RtlGetAce();
RtlGetAppContainerNamedObjectPath();
RtlGetAppContainerParent();
RtlGetAppContainerSidType();
RtlGetCallersAddress();
RtlGetCompressionWorkSpaceSize();
RtlGetControlSecurityDescriptor();
RtlGetDaclSecurityDescriptor();
RtlGetDefaultCodePage();
RtlGetElementGenericTable();
RtlGetElementGenericTableAvl();
RtlGetEnabledExtendedFeatures();
RtlGetExtendedContextLength();
RtlGetFirstRange();
RtlGetGroupSecurityDescriptor();
RtlGetIntegerAtom();
RtlGetInterruptTimePrecise();
RtlGetLastRange();
RtlGetNextEntryHashTable();
RtlGetNextRange();
RtlGetNtGlobalFlags();
RtlGetNtProductType();
RtlGetOwnerSecurityDescriptor();
RtlGetProductInfo();
RtlGetSaclSecurityDescriptor();
RtlGetSetBootStatusData();
RtlGetSystemTimePrecise();
RtlGetThreadLangIdByIndex();
RtlGetVersion();
RtlGuardIsValidStackPointer();
RtlHashUnicodeString();
RtlIdentifierAuthoritySid();
RtlIdnToAscii();
RtlIdnToNameprepUnicode();
RtlIdnToUnicode();
RtlImageDirectoryEntryToData();
RtlImageNtHeader();
RtlImageNtHeaderEx();
RtlImpersonateSelfEx();
RtlInitAnsiString();
RtlInitAnsiStringEx();
RtlInitCodePageTable();
RtlInitEnumerationHashTable();
RtlInitNlsTables();
RtlInitString();
RtlInitTickLock();
RtlInitUnicodeString();
RtlInitUnicodeStringEx();
RtlInitWeakEnumerationHashTable();
RtlInitializeBitMap();
RtlInitializeExceptionLog();
RtlInitializeExtendedContext();
RtlInitializeGenericTable();
RtlInitializeGenericTableAvl();
RtlInitializeRangeList();
RtlInitializeRangeListPackage();
RtlInitializeSid();
RtlInitializeUnicodePrefix();
RtlInsertElementGenericTable();
RtlInsertElementGenericTableAvl();
RtlInsertElementGenericTableFull();
RtlInsertElementGenericTableFullAvl();
RtlInsertEntryHashTable();
RtlInsertUnicodePrefix();
RtlInt64ToUnicodeString();
RtlIntegerToChar();
RtlIntegerToUnicode();
RtlIntegerToUnicodeString();
RtlInterlockedClearBitRun();
RtlInterlockedCompareExchange64();
RtlInterlockedSetBitRun();
RtlInterlockedSetClearBits();
RtlInterlockedSetClearRun();
RtlInvertRangeList();
RtlInvertRangeListEx();
RtlIoDecodeMemIoResource();
RtlIoEncodeMemIoResource();
RtlIpv4AddressToStringA();
RtlIpv4AddressToStringExA();
RtlIpv4AddressToStringExW();
RtlIpv4AddressToStringW();
RtlIpv4StringToAddressA();
RtlIpv4StringToAddressExA();
RtlIpv4StringToAddressExW();
RtlIpv4StringToAddressW();
RtlIpv6AddressToStringA();
RtlIpv6AddressToStringExA();
RtlIpv6AddressToStringExW();
RtlIpv6AddressToStringW();
RtlIpv6StringToAddressA();
RtlIpv6StringToAddressExA();
RtlIpv6StringToAddressExW();
RtlIpv6StringToAddressW();
RtlIsCapabilitySid();
RtlIsGenericTableEmpty();
RtlIsGenericTableEmptyAvl();
RtlIsNameInExpression();
RtlIsNameLegalDOS8Dot3();
RtlIsNormalizedString();
RtlIsNtDdiVersionAvailable();
RtlIsPackageSid();
RtlIsParentOfChildAppContainer();
RtlIsRangeAvailable();
RtlIsServicePackVersionInstalled();
RtlIsUntrustedObject();
RtlIsValidHandler();
RtlIsValidOemCharacter();
RtlIsValidProcessTrustLabelSid();
RtlLCIDToCultureName();
RtlLargeIntegerAdd();
RtlLargeIntegerArithmeticShift();
RtlLargeIntegerDivide();
RtlLargeIntegerNegate();
RtlLargeIntegerShiftLeft();
RtlLargeIntegerShiftRight();
RtlLargeIntegerSubtract();
RtlLargeIntegerToChar();
RtlLargeIntegerToUnicode();
RtlLengthRequiredSid();
RtlLengthSecurityDescriptor();
RtlLengthSid();
RtlLengthSidAsUnicodeString();
RtlLoadString();
RtlLocalTimeToSystemTime();
RtlLocateLegacyContext();
RtlLockBootStatusData();
RtlLogStackBackTraceEx();
RtlLookupAtomInAtomTable();
RtlLookupElementGenericTable();
RtlLookupElementGenericTableAvl();
RtlLookupElementGenericTableFull();
RtlLookupElementGenericTableFullAvl();
RtlLookupEntryHashTable();
RtlLookupFirstMatchingElementGenericTableAvl();
RtlMakeSelfRelativeSD();
RtlMapGenericMask();
RtlMapSecurityErrorToNtStatus();
RtlMarkHiberPhase();
RtlMergeBitMaps();
RtlMergeRangeLists();
RtlMoveMemory();
RtlMultiByteToUnicodeN();
RtlMultiByteToUnicodeSize();
RtlNextUnicodePrefix();
RtlNormalizeString();
RtlNtStatusToDosError();
RtlNtStatusToDosErrorNoTeb();
RtlNumberGenericTableElements();
RtlNumberGenericTableElementsAvl();
RtlNumberOfClearBits();
RtlNumberOfClearBitsInRange();
RtlNumberOfSetBits();
RtlNumberOfSetBitsInRange();
RtlNumberOfSetBitsUlongPtr();
RtlOemStringToCountedUnicodeString();
RtlOemStringToUnicodeString();
RtlOemToUnicodeN();
RtlOpenCurrentUser();
RtlOwnerAcesPresent();
RtlPcToFileHeader();
RtlPcToFileName();
RtlPcToFilePath();
RtlPinAtomInAtomTable();
RtlPrefetchMemoryNonTemporal();
RtlPrefixString();
RtlPrefixUnicodeString();
RtlQueryAtomInAtomTable();
RtlQueryAtomsInAtomTable();
RtlQueryDynamicTimeZoneInformation();
RtlQueryElevationFlags();
RtlQueryImageFileKeyOption();
RtlQueryInformationAcl();
RtlQueryModuleInformation();
RtlQueryPackageIdentity();
RtlQueryPackageIdentityEx();
RtlQueryRegistryValues();
RtlQueryRegistryValuesEx();
RtlQueryTimeZoneInformation();
RtlQueryValidationRunlevel();
RtlRaiseException();
RtlRaiseStatus();
RtlRandom();
RtlRandomEx();
RtlRbInsertNodeEx();
RtlRbRemoveNode();
RtlRbReplaceNode();
RtlReadAcquireTickLock();
RtlReadTryCommitTickLock();
RtlRealPredecessor();
RtlRealSuccessor();
RtlReleasePrivilege();
RtlRemoveEntryHashTable();
RtlRemoveUnicodePrefix();
RtlReplaceSidInSd();
RtlReserveChunk();
RtlReserveChunkLZNT1();
RtlReserveChunkNS();
RtlResetRtlTranslations();
RtlRunOnceBeginInitialize();
RtlRunOnceComplete();
RtlRunOnceExecuteOnce();
RtlRunOnceInitialize();
RtlSIZETAdd();
RtlSIZETMult();
RtlScrubMemory();
RtlSecondsSince1970ToTime();
RtlSecondsSince1980ToTime();
RtlSectionTableFromVirtualAddress();
RtlSelfRelativeToAbsoluteSD();
RtlSelfRelativeToAbsoluteSD2();
RtlSetActiveTimeBias();
RtlSetAllBits();
RtlSetBit();
RtlSetBits();
RtlSetControlSecurityDescriptor();
RtlSetDaclSecurityDescriptor();
RtlSetDynamicTimeZoneInformation();
RtlSetGroupSecurityDescriptor();
RtlSetOwnerSecurityDescriptor();
RtlSetPortableOperatingSystem();
RtlSetSaclSecurityDescriptor();
RtlSetTimeZoneInformation();
RtlSidDominates();
RtlSidDominatesForTrust();
RtlSidHashInitialize();
RtlSidHashLookup();
RtlSizeHeap();
RtlSizeTAdd();
RtlSparseBitmapCtxAllocateArray();
RtlSparseBitmapCtxAllocateRange();
RtlSparseBitmapCtxCleanup();
RtlSparseBitmapCtxFindNextBitInternal();
RtlSparseBitmapCtxInitializeRange();
RtlSparseBitmapCtxPrepareBits();
RtlSparseBitmapCtxStart();
RtlSparseBitmapCtxUpdateBitRanges();
RtlSparseBitmapCtxUpdateBits();
RtlSplay();
RtlStackTraceHashFunction();
RtlStdInitializeStackDatabase();
RtlStdLogStackTrace();
RtlStdReleaseStackTrace();
RtlStringCbCatExA();
RtlStringCbCatW();
RtlStringCbCopyA();
RtlStringCbCopyExA();
RtlStringCbCopyExW();
RtlStringCbCopyNA();
RtlStringCbCopyNExW();
RtlStringCbCopyNW();
RtlStringCbCopyUnicodeString();
RtlStringCbCopyW();
RtlStringCbLengthW();
RtlStringCbPrintfA();
RtlStringCbPrintfExA();
RtlStringCbPrintfExW();
RtlStringCbPrintfW();
RtlStringCbVPrintfA();
RtlStringCchCatExW();
RtlStringCchCatNW();
RtlStringCchCatW();
RtlStringCchCopyExW();
RtlStringCchCopyNExW();
RtlStringCchCopyNW();
RtlStringCchCopyW();
RtlStringCchLengthW();
RtlStringCchPrintfA();
RtlStringCchPrintfExW();
RtlStringCchPrintfW();
RtlStringFromGUID();
RtlStringFromGUIDEx();
RtlSubAuthorityCountSid();
RtlSubAuthoritySid();
RtlSubtreePredecessor();
RtlSubtreeSuccessor();
RtlSystemTimeToLocalTime();
RtlTestBit();
RtlTestProtectedAccess();
RtlTimeFieldsToTime();
RtlTimeToElapsedTimeFields();
RtlTimeToSecondsSince1970();
RtlTimeToSecondsSince1980();
RtlTimeToTimeFields();
RtlTraceDatabaseAdd();
RtlTraceDatabaseCreate();
RtlTraceDatabaseDestroy();
RtlTraceDatabaseEnumerate();
RtlTraceDatabaseFind();
RtlTraceDatabaseLock();
RtlTraceDatabaseUnlock();
RtlTraceDatabaseValidate();
RtlUIntAdd();
RtlUIntPtrAdd();
RtlULongAdd();
RtlULongLongAdd();
RtlULongLongMult();
RtlULongLongSub();
RtlULongLongToUInt();
RtlULongLongToULong();
RtlULongMult();
RtlULongPtrAdd();
RtlULongPtrSub();
RtlULongSub();
RtlUShortAdd();
RtlUTF8ToUnicodeN();
RtlUlongByteSwap();
RtlUlonglongByteSwap();
RtlUnicodeStringCopy();
RtlUnicodeStringCopyStringEx();
RtlUnicodeStringPrintf();
RtlUnicodeStringPrintfEx();
RtlUnicodeStringToAnsiString();
RtlUnicodeStringToCountedOemString();
RtlUnicodeStringToInteger();
RtlUnicodeStringToOemString();
RtlUnicodeToCustomCPN();
RtlUnicodeToMultiByteN();
RtlUnicodeToMultiByteSize();
RtlUnicodeToOemN();
RtlUnicodeToUTF8N();
RtlUnlockBootStatusData();
RtlUnwind();
RtlUpcaseUnicodeChar();
RtlUpcaseUnicodeString();
RtlUpcaseUnicodeStringToAnsiString();
RtlUpcaseUnicodeStringToCountedOemString();
RtlUpcaseUnicodeStringToOemString();
RtlUpcaseUnicodeToCustomCPN();
RtlUpcaseUnicodeToMultiByteN();
RtlUpcaseUnicodeToOemN();
RtlUpperChar();
RtlUpperString();
RtlUshortByteSwap();
RtlValidAcl();
RtlValidProcessProtection();
RtlValidRelativeSecurityDescriptor();
RtlValidSecurityDescriptor();
RtlValidSid();
RtlValidateUnicodeString();
RtlVerifyVersionInfo();
RtlWalkFrameChain();
RtlWeaklyEnumerateEntryHashTable();
RtlWriteAcquireTickLock();
RtlWriteRegistryValue();
RtlWriteReleaseTickLock();
RtlWriteTryAcquireTickLock();
RtlXRestore();
RtlXSave();
RtlZeroHeap();
RtlZeroMemory();
RtlpAddIntersectingRanges();
RtlpAddKnownAce();
RtlpAddRange();
RtlpAddToMergedRange();
RtlpAllocDeallocQueryBuffer();
RtlpAllocateAtom();
RtlpAllocateAtomTableEntry();
RtlpAllocateHeap();
RtlpAllocateSecondLevelDir();
RtlpAllocateSecondLevelDirUsingFreeList();
RtlpAllowsLowBoxAccess();
RtlpAnalyzeHeapFailure();
RtlpApplyAclToObject();
RtlpAtomMapAtomToHandleEntry();
RtlpBreakWithStatusInstruction();
RtlpCallQueryRegistryRoutine();
RtlpCaptureContext();
RtlpCaptureStackLimits();
RtlpCheckDynamicTimeZoneInformation();
RtlpCoalesceFreeBlocks();
RtlpCombineAcls();
RtlpCompareAces();
RtlpCompareKnownAces();
RtlpCompareKnownObjectAces();
RtlpComputeCrcInternal();
RtlpComputeMergedAcl();
RtlpComputeMergedAcl2();
RtlpConvertAbsoluteToRelativeSecurityAttribute();
RtlpConvertToMergedRange();
RtlpCopyAces();
RtlpCopyBitMapTailToHead();
RtlpCopyEffectiveAce();
RtlpCopyExtendedContext();
RtlpCopyLegacyContextAmd64();
RtlpCopyLegacyContextArm();
RtlpCopyLegacyContextX86();
RtlpCopyRangeListEntry();
RtlpCopyXStateChunk();
RtlpCreateHashTable();
RtlpCreateHeapEncoding();
RtlpCreateRangeListEntry();
RtlpCreateServerAcl();
RtlpCreateSplitBlock();
RtlpCreateUCREntry();
RtlpCreateUserProcess();
RtlpCreateUserThreadEx();
RtlpDeCommitFreeBlock();
RtlpDeleteData();
RtlpDeleteFromMergedRange();
RtlpDeleteRangeListEntry();
RtlpDereferenceAtom();
RtlpDidUnicodeToOemWork();
RtlpExecuteHandlerForException();
RtlpExecuteHandlerForUnwind();
RtlpExtendHeap();
RtlpFillMemoryRandomDown();
RtlpFillMemoryRandomInvertedDown();
RtlpFillMemoryRandomInvertedUp();
RtlpFillMemoryRandomUp();
RtlpFillMemoryWithInverseStride();
RtlpFillMemoryWithStride();
RtlpFilterSacl();
RtlpFindAndCommitPages();
RtlpFindEntry();
RtlpFindRegTziForCurrentYear();
RtlpFindUCREntry();
RtlpFreeAllAtom();
RtlpFreeAtom();
RtlpFreeHandleForAtom();
RtlpFreeHeap();
RtlpFreeRangeListEntry();
RtlpGenerateInheritAcl();
RtlpGenerateInheritedAce();
RtlpGenericBasicInverseCoupling();
RtlpGenericBasicMATSPlus();
RtlpGenericBasicStride6();
RtlpGenericInverseCouplingWorker();
RtlpGenericMATSPlusWorker();
RtlpGenericRandomPatternWorker();
RtlpGenericStrideWorker();
RtlpGetBucketIndex();
RtlpGetChainHead();
RtlpGetDynamicTimeZoneInfoHandle();
RtlpGetNameFromLangInfoNode();
RtlpGetNormalization();
RtlpGetRegistrationHead();
RtlpGetRegistryHandle();
RtlpGetStackLimits();
RtlpGetTimeZoneInfoHandle();
RtlpGetWindowsPolicy();
RtlpGuidPresentInGuidList();
RtlpHashStringToAtom();
RtlpHeapAddListEntry();
RtlpHeapExceptionFilter();
RtlpHeapFindListLookupEntry();
RtlpHeapGenerateRandomValue32();
RtlpHeapGenerateRandomValue64();
RtlpHeapHandleError();
RtlpHeapListCompare();
RtlpHeapLogRangeCreate();
RtlpHeapLogRangeDestroy();
RtlpHeapLogRangeRelease();
RtlpHeapLogRangeReserve();
RtlpHeapRemoveListEntry();
RtlpImageDirectoryEntryToData32();
RtlpImageDirectoryEntryToData64();
RtlpImageDirectoryEntryToDataEx();
RtlpInheritAcl();
RtlpInheritAcl2();
RtlpInitNlsFileName();
RtlpInitNlsSectionName();
RtlpInitializeHandleTableForAtomTable();
RtlpInitializeHeapSegment();
RtlpInitializeLockAtomTable();
RtlpInitializeStackTraceDatabase();
RtlpInsertFreeBlock();
RtlpInsertStringAtom();
RtlpInsertUCRBlock();
RtlpInterlockedFlushSList();
RtlpInterlockedPopEntrySList();
RtlpInterlockedPushEntrySList();
RtlpIsALicensedLIPLanguage();
RtlpIsALicensedRegularLanguage();
RtlpIsDuplicateAce();
RtlpIsNameInExpressionPrivate();
RtlpIsRangeAvailable();
RtlpIsValidExceptionChain();
RtlpLangNameInMultiSzString();
RtlpLoadInstallLanguageFallback();
RtlpLoadLanguageConfigList();
RtlpLoadPolicyLanguageSpec();
RtlpLocateRelatedBlocks();
RtlpLockAtomTable();
RtlpLogExceptionDispatch();
RtlpLogExceptionHandler();
RtlpLogHeapAllocateEvent();
RtlpLogHeapCommit();
RtlpLogHeapContractEvent();
RtlpLogHeapCreateEvent();
RtlpLogHeapDecommit();
RtlpLogHeapDestroyEvent();
RtlpLogHeapExtendEvent();
RtlpLogHeapFailure();
RtlpLogHeapFreeEvent();
RtlpLookupLowBox();
RtlpLookupOrCreateLowBox();
RtlpMakeXpressCallback();
RtlpMuiRegAddAlternateCodePage();
RtlpMuiRegAddLanguageByName();
RtlpMuiRegConfigListAddLanguage();
RtlpMuiRegConfigMatchesInstalled();
RtlpMuiRegConfigNodePopulate();
RtlpMuiRegCreateKernelRegistryInfo();
RtlpMuiRegCreateLanguageConfigList();
RtlpMuiRegCreateLanguages();
RtlpMuiRegCreateRegistryInfo();
RtlpMuiRegCreateStringPool();
RtlpMuiRegFreeRegistryInfo();
RtlpMuiRegGetInstalledLangInfoIndex();
RtlpMuiRegGetInstalledLanguageIndex();
RtlpMuiRegGetInstalledLanguageIndexByLangId();
RtlpMuiRegGetInstalledLanguageIndexByName();
RtlpMuiRegGetLangInfoIndex();
RtlpMuiRegGetLanguageSpec();
RtlpMuiRegGetOrAddLangInfo();
RtlpMuiRegGetOrAddString();
RtlpMuiRegGetOrAddStringToPool();
RtlpMuiRegGetStringIndexInPool();
RtlpMuiRegGrowLanguageConfigList();
RtlpMuiRegGrowLanguages();
RtlpMuiRegGrowStringPool();
RtlpMuiRegLangInfoMatchesSpec();
RtlpMuiRegLoadLicInformation();
RtlpMuiRegLoadRegistryInfo();
RtlpMuiRegResizeLanguageConfigList();
RtlpMuiRegResizeLanguages();
RtlpMuiRegResizeStringPool();
RtlpMuiRegValidateConfigNode();
RtlpNameprepAsciiWorker();
RtlpNewSecurityObject();
RtlpNormalizeStringWorker();
RtlpOpenBaseImageFileOptionsKey();
RtlpOpenImageFileOptionsKey();
RtlpOpenThreadToken();
RtlpOwnerAcesPresent();
RtlpPopulateContext();
RtlpPopulateLanguageConfigList();
RtlpPopulateListIndex();
RtlpProbeUserBufferSafe();
RtlpProcessIFEOKeyFilter();
RtlpQueryLowBoxId();
RtlpQueryPackageIdentityAttributes();
RtlpQueryRegistryDirect();
RtlpQueryRegistryValues();
RtlpQuerySecurityDescriptor();
RtlpQueryTimeZoneInformationWorker();
RtlpQueryTimeZoneKeyNameRoutine();
RtlpReadExtendedContext();
RtlpReadExtendedContextLayout();
RtlpReferenceAtom();
RtlpRegTziFormatToTzi();
RtlpRemoveUCRBlock();
RtlpRunOnceWaitForInit();
RtlpSampleLFGRng();
RtlpSanitizeContextFlags();
RtlpSearchUCRBlock();
RtlpSecondLevelDirFreeUsingFreeList();
RtlpSeedGlfsr();
RtlpSetSecurityObject();
RtlpSetTimeZoneInformationWorker();
RtlpSetupExtendedBlock();
RtlpSparseBitmapCtxCheckRangeArray();
RtlpSparseBitmapCtxLockExclusive();
RtlpSparseBitmapCtxLockShared();
RtlpSparseBitmapCtxPrepareRanges();
RtlpSpreadBits();
RtlpStackTracePrefix();
RtlpStdExtendLowerWatermark();
RtlpStdExtendUpperWatermark();
RtlpStdGetRecordedStackTraceIndex();
RtlpStdGetSpaceForTrace();
RtlpStdLogCapturedStackTrace();
RtlpSysVolAllocate();
RtlpSysVolCheckOwnerAndSecurity();
RtlpSysVolCreateSecurityDescriptor();
RtlpSysVolFree();
RtlpSysVolTakeOwnership();
RtlpTerminateCurrentProcess();
RtlpTestAndFillMemoryDown();
RtlpTestAndFillMemoryRandomUp();
RtlpTestAndFillMemoryUp();
RtlpTestMemory();
RtlpTestMemoryRandomDown();
RtlpTestMemoryRandomUp();
RtlpTestMemoryWithStride();
RtlpTraceDatabaseAcquireLock();
RtlpTraceDatabaseAllocate();
RtlpTraceDatabaseInitializeLock();
RtlpTraceDatabaseInternalAdd();
RtlpTraceDatabaseInternalFind();
RtlpTraceDatabaseReleaseLock();
RtlpTreeDoubleRotateNodes();
RtlpUnlinkHandler();
RtlpUnlockAtomTable();
RtlpUpcaseUnicodeStringPrivate();
RtlpUpdateDynamicTimeZones();
RtlpUpdateHeapRates();
RtlpValidAttribute();
RtlpValidAttributeAce();
RtlpValidAttributeInfo();
RtlpValidCompoundAce();
RtlpValidObjectAce();
RtlpValidRelativeAttribute();
RtlpValidTrustSubjectContext();
RtlpValidateAsciiStd3AndLength();
RtlpValidateContextFlags();
RtlpValidateKeyTrust();
RtlpValidateSDOffsetAndSize();
RtlpValidateSidBuffer();
RtlpVerCompare();
RtlpVerGetConditionMask();
RtlpWriteExtendedContext();
RtlpxLookupFunctionTable();
RtlxAnsiStringToUnicodeSize();
RtlxOemStringToUnicodeSize();
RtlxUnicodeStringToAnsiSize();
RtlxUnicodeStringToOemSize();
SMKM_STORE<SM_TRAITS>::SmStAllocatePhysicalRegion();
SMKM_STORE<SM_TRAITS>::SmStAllocateResetRegion();
SMKM_STORE<SM_TRAITS>::SmStCleanup();
SMKM_STORE<SM_TRAITS>::SmStDirectRead();
SMKM_STORE<SM_TRAITS>::SmStEtaQuery();
SMKM_STORE<SM_TRAITS>::SmStEtwFillStoreEvent();
SMKM_STORE<SM_TRAITS>::SmStEtwFillStoreStatsEvent();
SMKM_STORE<SM_TRAITS>::SmStFindResetLockedRegion();
SMKM_STORE<SM_TRAITS>::SmStGetStoreStats();
SMKM_STORE<SM_TRAITS>::SmStHelperSendCommand();
SMKM_STORE<SM_TRAITS>::SmStInitialize();
SMKM_STORE<SM_TRAITS>::SmStMakeRegionResetBitmap();
SMKM_STORE<SM_TRAITS>::SmStMapPhysicalRegion();
SMKM_STORE<SM_TRAITS>::SmStMapResetRegion();
SMKM_STORE<SM_TRAITS>::SmStReleaseResetRegion();
SMKM_STORE<SM_TRAITS>::SmStStart();
SMKM_STORE<SM_TRAITS>::SmStStatsUpdate();
SMKM_STORE<SM_TRAITS>::SmStUnhandledExceptionFilter();
SMKM_STORE<SM_TRAITS>::SmStUnmapPhysicalRegion();
SMKM_STORE<SM_TRAITS>::SmStUnmapResetRegion();
SMKM_STORE<SM_TRAITS>::SmStWorkItemGet();
SMKM_STORE<SM_TRAITS>::SmStWorkItemQueue();
SMKM_STORE<SM_TRAITS>::SmStWorker();
SMKM_STORE<SM_TRAITS>::SmStWorkerThread();
SMKM_STORE_MGR<SM_TRAITS>::SmAsyncReadQueueInsert();
SMKM_STORE_MGR<SM_TRAITS>::SmAsyncReadQueueWorker();
SMKM_STORE_MGR<SM_TRAITS>::SmEmptyQueueToStores();
SMKM_STORE_MGR<SM_TRAITS>::SmEmptyStores();
SMKM_STORE_MGR<SM_TRAITS>::SmEmptyWorker();
SMKM_STORE_MGR<SM_TRAITS>::SmEvictKeys();
SMKM_STORE_MGR<SM_TRAITS>::SmFeAddComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeAddFirstPass();
SMKM_STORE_MGR<SM_TRAITS>::SmFeAddInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeCheckPresent();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEmpty();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEmptyComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEmptyInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictFirstPass();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictQueued();
SMKM_STORE_MGR<SM_TRAITS>::SmFeEvictRundown();
SMKM_STORE_MGR<SM_TRAITS>::SmFeMakePresentForUnpersist();
SMKM_STORE_MGR<SM_TRAITS>::SmFeReadFailComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeReadInitiate();
SMKM_STORE_MGR<SM_TRAITS>::SmFeSetEvictFailed();
SMKM_STORE_MGR<SM_TRAITS>::SmFeStoreDelete();
SMKM_STORE_MGR<SM_TRAITS>::SmFeStoreEtaQuery();
SMKM_STORE_MGR<SM_TRAITS>::SmFeStoreEvictKeys();
SMKM_STORE_MGR<SM_TRAITS>::SmFeUnpersistStore();
SMKM_STORE_MGR<SM_TRAITS>::SmInitialize();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxPrepareToQueue();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxQueueWork();
SMKM_STORE_MGR<SM_TRAITS>::SmIoCtxWorkItemComplete();
SMKM_STORE_MGR<SM_TRAITS>::SmLogRemoveBatch();
SMKM_STORE_MGR<SM_TRAITS>::SmPageCheckPresent();
SMKM_STORE_MGR<SM_TRAITS>::SmPageEvict();
SMKM_STORE_MGR<SM_TRAITS>::SmPageRead();
SMKM_STORE_MGR<SM_TRAITS>::SmPageWrite();
SMKM_STORE_MGR<SM_TRAITS>::SmPickStoreForWrite();
SMKM_STORE_MGR<SM_TRAITS>::SmProcessAddCompletion();
SMKM_STORE_MGR<SM_TRAITS>::SmProcessIoCompletion();
SMKM_STORE_MGR<SM_TRAITS>::SmProcessReadCompletion();
SMKM_STORE_MGR<SM_TRAITS>::SmQueueContextCleanup();
SMKM_STORE_MGR<SM_TRAITS>::SmReadPickStore();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreActionNotify();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreContentsRundown();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreMgrCallback();
SMKM_STORE_MGR<SM_TRAITS>::SmStorePrepare();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreRequest();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreRequestEx();
SMKM_STORE_MGR<SM_TRAITS>::SmStoreTerminate();
SMKM_STORE_MGR<SM_TRAITS>::SmStoresContentsRundown();
SMKM_STORE_MGR<SM_TRAITS>::SmStoresEtaCheck();
SMKM_STORE_MGR<SM_TRAITS>::SmWorkItemFree();
SMKM_STORE_MGR<SM_TRAITS>::SmpPageEvict();
ST_STORE<SM_TRAITS>::StAcquireReadContext();
ST_STORE<SM_TRAITS>::StAddRemoveRegions();
ST_STORE<SM_TRAITS>::StChangeState();
ST_STORE<SM_TRAITS>::StCleanup();
ST_STORE<SM_TRAITS>::StCompactRegion();
ST_STORE<SM_TRAITS>::StCompactRegions();
ST_STORE<SM_TRAITS>::StCompactionFindEmptiest();
ST_STORE<SM_TRAITS>::StCompactionPerformFile();
ST_STORE<SM_TRAITS>::StCompactionPerformInMem();
ST_STORE<SM_TRAITS>::StCompactionPickPriority();
ST_STORE<SM_TRAITS>::StCompactionWorker();
ST_STORE<SM_TRAITS>::StCopyIoStats();
ST_STORE<SM_TRAITS>::StDeviceIoBuild();
ST_STORE<SM_TRAITS>::StDeviceIoIssue();
ST_STORE<SM_TRAITS>::StDeviceIoMarkFailed();
ST_STORE<SM_TRAITS>::StDeviceWorkItemCleanup();
ST_STORE<SM_TRAITS>::StDirectRead();
ST_STORE<SM_TRAITS>::StDmCheckForCompaction();
ST_STORE<SM_TRAITS>::StDmCleanup();
ST_STORE<SM_TRAITS>::StDmComputeSpaceUsageForPriority();
ST_STORE<SM_TRAITS>::StDmCurrentRegionFind();
ST_STORE<SM_TRAITS>::StDmCurrentRegionSet();
ST_STORE<SM_TRAITS>::StDmDeviceError();
ST_STORE<SM_TRAITS>::StDmDeviceIoCompletion();
ST_STORE<SM_TRAITS>::StDmDeviceIoListBuild();
ST_STORE<SM_TRAITS>::StDmDeviceIoTransfer();
ST_STORE<SM_TRAITS>::StDmEtaPerformIo();
ST_STORE<SM_TRAITS>::StDmEtaQueueRefresh();
ST_STORE<SM_TRAITS>::StDmEtaRefresh();
ST_STORE<SM_TRAITS>::StDmEtwPageRundown();
ST_STORE<SM_TRAITS>::StDmEtwRegionRundown();
ST_STORE<SM_TRAITS>::StDmGetFreeStagingRegionBytes();
ST_STORE<SM_TRAITS>::StDmGetOutstandingRegionWrites();
ST_STORE<SM_TRAITS>::StDmGetSpaceStats();
ST_STORE<SM_TRAITS>::StDmGetStatsBitmap();
ST_STORE<SM_TRAITS>::StDmInitialize();
ST_STORE<SM_TRAITS>::StDmLazyRegionsWorker();
ST_STORE<SM_TRAITS>::StDmLazyRemoveKeysWorker();
ST_STORE<SM_TRAITS>::StDmLazyRemoveStateUpdate();
ST_STORE<SM_TRAITS>::StDmLazyWorkItemQueue();
ST_STORE<SM_TRAITS>::StDmPageAdd();
ST_STORE<SM_TRAITS>::StDmPageEntryLazyRemove();
ST_STORE<SM_TRAITS>::StDmPageError();
ST_STORE<SM_TRAITS>::StDmPageMove();
ST_STORE<SM_TRAITS>::StDmPageRemove();
ST_STORE<SM_TRAITS>::StDmPageRetrieve();
ST_STORE<SM_TRAITS>::StDmPagesLazyRemove();
ST_STORE<SM_TRAITS>::StDmPickRandomRegion();
ST_STORE<SM_TRAITS>::StDmRegionAdd();
ST_STORE<SM_TRAITS>::StDmRegionEvict();
ST_STORE<SM_TRAITS>::StDmRegionGetKeys();
ST_STORE<SM_TRAITS>::StDmRegionRemove();
ST_STORE<SM_TRAITS>::StDmResetRegionEvict();
ST_STORE<SM_TRAITS>::StDmSinglePageCopy();
ST_STORE<SM_TRAITS>::StDmSinglePageRetrieveSync();
ST_STORE<SM_TRAITS>::StDmSinglePageTransfer();
ST_STORE<SM_TRAITS>::StDmSparseBitmapAlloc();
ST_STORE<SM_TRAITS>::StDmSparseBitmapFree();
ST_STORE<SM_TRAITS>::StDmStart();
ST_STORE<SM_TRAITS>::StDmStartDataLossCheck();
ST_STORE<SM_TRAITS>::StDmUpdateRegionLazyCleanup();
ST_STORE<SM_TRAITS>::StDmpCurrentRegionWrite();
ST_STORE<SM_TRAITS>::StDmpSinglePageAdd();
ST_STORE<SM_TRAITS>::StDmpSinglePageFindSpace();
ST_STORE<SM_TRAITS>::StDmpSinglePageInsert();
ST_STORE<SM_TRAITS>::StDmpSinglePageRetrieve();
ST_STORE<SM_TRAITS>::StDrainReadContextList();
ST_STORE<SM_TRAITS>::StEmptyStore();
ST_STORE<SM_TRAITS>::StGetFreeSpace();
ST_STORE<SM_TRAITS>::StGetStats();
ST_STORE<SM_TRAITS>::StGetStatsWorker();
ST_STORE<SM_TRAITS>::StInitialize();
ST_STORE<SM_TRAITS>::StLazyWorkMgrIdleTimeoutProcess();
ST_STORE<SM_TRAITS>::StLazyWorkMgrInitialize();
ST_STORE<SM_TRAITS>::StLazyWorkMgrQueueWork();
ST_STORE<SM_TRAITS>::StLazyWorkMgrResetIdle();
ST_STORE<SM_TRAITS>::StLazyWorkMgrRunExpiredWork();
ST_STORE<SM_TRAITS>::StLazyWorkMgrSetSchedule();
ST_STORE<SM_TRAITS>::StMapAndLockRegion();
ST_STORE<SM_TRAITS>::StMetaRegionsUpdate();
ST_STORE<SM_TRAITS>::StNpEnumBTreeNodes();
ST_STORE<SM_TRAITS>::StNpLeafDelete();
ST_STORE<SM_TRAITS>::StNpLeafPageIn();
ST_STORE<SM_TRAITS>::StNpLeafPageOut();
ST_STORE<SM_TRAITS>::StPageCopyExceptionFilter();
ST_STORE<SM_TRAITS>::StRegionFindCompact();
ST_STORE<SM_TRAITS>::StRegionFindRepurpose();
ST_STORE<SM_TRAITS>::StRegionLATRebase();
ST_STORE<SM_TRAITS>::StReleaseReadContext();
ST_STORE<SM_TRAITS>::StReleaseRegion();
ST_STORE<SM_TRAITS>::StStagingRegionCleanup();
ST_STORE<SM_TRAITS>::StStagingRegionFind();
ST_STORE<SM_TRAITS>::StStagingRegionIssueIo();
ST_STORE<SM_TRAITS>::StStagingRegionMap();
ST_STORE<SM_TRAITS>::StStagingRegionReuse();
ST_STORE<SM_TRAITS>::StStagingRegionStart();
ST_STORE<SM_TRAITS>::StStart();
ST_STORE<SM_TRAITS>::StStoreWorkItemCleanup();
ST_STORE<SM_TRAITS>::StUnlockAndUnmapRegion();
ST_STORE<SM_TRAITS>::StValidateResetRegion();
ST_STORE<SM_TRAITS>::StWorkItemProcess();
ST_STORE<SM_TRAITS>::StpKeyCompare();
ST_STORE<SM_TRAITS>::StpLocationCompare();
SUBTRACT_MAP_REGISTERS();
SdbAlloc();
SdbCloseDatabaseRead();
SdbExpandEnvironmentStrings();
SdbFindFirstNamedTag();
SdbFindFirstStringIndexedTag();
SdbFindFirstTag();
SdbFindNextStringIndexedTag();
SdbFindNextTag();
SdbFree();
SdbFreeFileInfo();
SdbFreeUnicodeString();
SdbGetBinaryTagData();
SdbGetDatabaseID();
SdbGetDatabaseMatch();
SdbGetDatabaseMatchEx();
SdbGetEntryFlags();
SdbGetFileInfo();
SdbGetFirstChild();
SdbGetIndex();
SdbGetNextChild();
SdbGetStringTagPtr();
SdbGetTagDataSize();
SdbGetTagFromTagID();
SdbInitDatabaseInMemory();
SdbMakeIndexKeyFromStringEx();
SdbQueryDataExTagID();
SdbReadBinaryTag();
SdbReadDWORDTag();
SdbReadEntryInformation();
SdbReadGUIDTag();
SdbReadQWORDTag();
SdbReadWORDTag();
SdbReleaseDatabase();
SdbTagRefToTagID();
SdbpBinarySearchFirst();
SdbpBinarySearchUnique();
SdbpCheckAllAttributes();
SdbpCheckAttribute();
SdbpCheckExe();
SdbpCheckForMatch();
SdbpCheckFromVersion();
SdbpCheckKObject();
SdbpCheckMatchingDevice();
SdbpCheckMatchingFiles();
SdbpCheckMatchingRegistry();
SdbpCheckMatchingRegistryEntry();
SdbpCheckMatchingText();
SdbpCheckMatchingTextEntry();
SdbpCheckUptoVersion();
SdbpCheckVersion();
SdbpComputeCrc32();
SdbpCreateSearchDBContext();
SdbpCreateSearchPathPartsFromPath();
SdbpDoesFileExists_U();
SdbpFindFirstIndexedWildCardTag();
SdbpFindMatchingName();
SdbpFindNextIndexedWildCardTag();
SdbpFindNextNamedTag();
SdbpFormatMatchMode();
SdbpGUIDToUnicodeString();
SdbpGetAttribute();
SdbpGetChecksum();
SdbpGetCrcChecksum();
SdbpGetDeviceDWORD();
SdbpGetExeEntryFlags();
SdbpGetFileChecksum();
SdbpGetFileDirectoryAttributesNT();
SdbpGetFileVersionInformation();
SdbpGetFirstIndexedRecord();
SdbpGetHeaderAttributes();
SdbpGetImageNTHeader();
SdbpGetIndex();
SdbpGetMappedStringFromTable();
SdbpGetMappedTagData();
SdbpGetMatchingTextAttributes();
SdbpGetModuleImageSize();
SdbpGetModulePECheckSum();
SdbpGetModuleType();
SdbpGetNextIndexedRecord();
SdbpGetNextTagId();
SdbpGetRegistryMatchingAttributes();
SdbpGetTagHeadSize();
SdbpGetVersionAttributesNT();
SdbpInitializeSearchDBContext();
SdbpKeyToAnsiString();
SdbpMatchAcpi();
SdbpMatchBios();
SdbpMatchCpu();
SdbpMatchDeviceDWORD();
SdbpMatchDeviceString();
SdbpMatchOem();
SdbpOpenAndMapFile();
SdbpOpenDatabaseInMemory();
SdbpPatternMatch();
SdbpPatternMatchAnsi();
SdbpQueryAppCompatFlagsByExeID();
SdbpQueryBinVersionInformation();
SdbpQueryStringVersionInformation();
SdbpQueryVersionString();
SdbpReadMappedData();
SdbpReadStringRef();
SdbpReadTagData();
SdbpReleaseSearchDBContext();
SdbpResolveAndSplitPath();
SdbpResolveInternalEnvironmentVariables();
SdbpResolveMatchingFile();
SdbpScanIndexes();
SdbpSearchDB();
SdbpSearchForTextA();
SdbpSearchForTextW();
SdbpSetAttribute();
SdbpUnmapAndCloseFile();
SdbpUpcaseUnicodeStringToMultiByteN();
SdbpVerQueryValue();
SeAccessCheck();
SeAccessCheckByType();
SeAccessCheckEx();
SeAccessCheckFromState();
SeAccessCheckFromStateEx();
SeAccessCheckWithHint();
SeAdjustAccessStateForTrustLabel();
SeAdjustObjectAppContainerSecurity();
SeAdtRegistryValueChangedAuditAlarm();
SeAppendPrivileges();
SeAssignPrimaryToken();
SeAssignSecurity();
SeAssignSecurityEx();
SeAssignSecurityEx2();
SeAssignWorldSecurityDescriptor();
SeAuditHandleCreation();
SeAuditHandleDuplication();
SeAuditHardLinkCreation();
SeAuditHardLinkCreationWithTransaction();
SeAuditHeaderRequired();
SeAuditProcessCreation();
SeAuditProcessExit();
SeAuditSystemTimeChange();
SeAuditTransactionStateChange();
SeAuditingAnyFileEventsWithContext();
SeAuditingAnyFileEventsWithContextEx();
SeAuditingFileEvents();
SeAuditingFileEventsWithContext();
SeAuditingFileEventsWithContextEx();
SeAuditingFileOrGlobalEvents();
SeAuditingHardLinkEvents();
SeAuditingHardLinkEventsWithContext();
SeAuditingWithTokenForSubcategory();
SeCaptureAcl();
SeCaptureAtomTableCallout();
SeCaptureLuidAndAttributesArray();
SeCaptureObjectTypeList();
SeCaptureSecurityDescriptor();
SeCaptureSecurityQos();
SeCaptureSid();
SeCaptureSidAndAttributesArray();
SeCaptureSubjectContext();
SeCaptureSubjectContextEx();
SeCaptureUnicodeStringStructures();
SeCheckAuditPrivilege();
SeCheckPrivilegedObject();
SeClearLearningModeObjectInformation();
SeCloseObjectAuditAlarm();
SeCloseObjectAuditAlarmForNonObObject();
SeCodeIntegrityHashMemory();
SeCodeIntegrityInitializePolicy();
SeCodeIntegrityQueryInformation();
SeCompareSigningLevels();
SeCompareSigningLevelsForAuditableProcess();
SeComputeAutoInheritByObjectType();
SeComputeAutoInheritByObjectTypeEx();
SeComputeCreatorDeniedRights();
SeComputeQuotaInformationSize();
SeCopyClientToken();
SeCreateAccessState();
SeCreateAccessStateEx();
SeCreateClientSecurity();
SeCreateClientSecurityEx();
SeCreateClientSecurityFromSubjectContext();
SeCreateClientSecurityFromSubjectContextEx();
SeDeassignPrimaryToken();
SeDeassignSecurity();
SeDefaultObjectMethod();
SeDeleteAccessState();
SeDeleteObjectAuditAlarm();
SeDeleteObjectAuditAlarmWithTransaction();
SeEtwEnableCallback();
SeExamineGlobalSacl();
SeExamineSacl();
SeExchangePrimaryToken();
SeFastTraverseCheck();
SeFilterToken();
SeFreeCapturedObjectTypeList();
SeFreePrivileges();
SeGetCachedSigningLevel();
SeGetImageRequiredSigningLevel();
SeGetLinkedToken();
SeGetLogonSessionToken();
SeGetTokenControlInformation();
SeGetTokenDeviceMap();
SeImpersonateClient();
SeImpersonateClientEx();
SeInitSystem();
SeIsAppContainerOrIdentifyLevelContext();
SeIsParentOfChildAppContainer();
SeIsSecureBootDebugPolicyPresent();
SeIsSystemContext();
SeIsTokenAssignableToProcess();
SeLocateProcessImageName();
SeLockSubjectContext();
SeLogAccessFailure();
SeMakeAnonymousLogonToken();
SeMakeAnonymousLogonTokenNoEveryone();
SeMakeSystemToken();
SeMarkLogonSessionForTerminationNotification();
SeMaximumAuditMask();
SeMaximumAuditMaskFromGlobalSacl();
SeObjectCreateSaclAccessBits();
SeObjectReferenceAuditAlarm();
SeOpenObjectAuditAlarm();
SeOpenObjectAuditAlarmForNonObObject();
SeOpenObjectAuditAlarmWithTransaction();
SeOpenObjectForDeleteAuditAlarm();
SeOpenObjectForDeleteAuditAlarmWithTransaction();
SeOperationAuditAlarm();
SePrivilegeCheck();
SePrivilegeObjectAuditAlarm();
SePrivilegePolicyCheck();
SePrivilegedServiceAuditAlarm();
SeQueryAuthenticationIdToken();
SeQueryInformationToken();
SeQueryMandatoryPolicyToken();
SeQuerySecureBootPolicyValue();
SeQuerySecurityAccessMask();
SeQuerySecurityAttributesToken();
SeQuerySecurityDescriptorInfo();
SeQuerySessionIdToken();
SeQuerySigningPolicy();
SeQuerySigningPolicyExt();
SeQuerySigningPolicyWorker();
SeQueryTokenTrustLink();
SeQueryTokenTrustSid();
SeQueryUserSidToken();
SeRegisterCodeIntegritySigningInformation();
SeRegisterElamCertResources();
SeRegisterImageVerificationCallback();
SeRegisterLogonSessionTerminatedRoutine();
SeRegisterObjectTypeMandatoryPolicy();
SeReleaseAcl();
SeReleaseLuidAndAttributesArray();
SeReleaseSecurityDescriptor();
SeReleaseSid();
SeReleaseSidAndAttributesArray();
SeReleaseSubjectContext();
SeReleaseUnicodeStringStructures();
SeReportSecurityEvent();
SeReportSecurityEventWithSubCategory();
SeRmInitPhase1();
SeSecureBootQueryInformation();
SeSecureBootRegisterPolicy();
SeSecurityAttributePresent();
SeSecurityDescriptorChangedAuditAlarm();
SeSetAccessStateGenericMapping();
SeSetAuditParameter();
SeSetLearningModeObjectInformation();
SeSetMandatoryPolicyToken();
SeSetSecurityAccessMask();
SeSetSecurityAttributesToken();
SeSetSecurityDescriptorInfo();
SeSetSecurityDescriptorInfoEx();
SeSetSessionIdToken();
SeSetTokenTrustLink();
SeSetVirtualizationToken();
SeShouldCheckForAccessRightsFromParent();
SeSinglePrivilegeCheck();
SeSrpAccessCheck();
SeSubProcessToken();
SeTokenCanImpersonate();
SeTokenDefaultDaclChangedAuditAlarm();
SeTokenFromAccessInformation();
SeTokenImpersonationLevel();
SeTokenIsAdmin();
SeTokenIsRestricted();
SeTokenIsWriteRestricted();
SeTokenType();
SeUnlockSubjectContext();
SeUnregisterImageVerificationCallback();
SeUnregisterLogonSessionTerminatedRoutine();
SeValidSecurityDescriptor();
SeValidateFileAsImageType();
SeValidateImageData();
SeValidateImageHeader();
SeValidateSecurityQos();
SepAccessCheck();
SepAccessCheckAndAuditAlarm();
SepAccessCheckEx();
SepAdjustGroups();
SepAdjustPrivileges();
SepAdtAuditObjectAccessWithContext();
SepAdtAuditPrivilegeUseWithContext();
SepAdtAuditStagingEventWithAccessState();
SepAdtAuditThisEventByCategoryWithContext();
SepAdtAuditThisEventWithContext();
SepAdtCheckPrivilegeForSensitivity();
SepAdtClassifyObjectIntoSubCategory();
SepAdtCloseObjectAuditAlarm();
SepAdtCopyToLsaSharedMemory();
SepAdtDeleteObjectAuditAlarm();
SepAdtDetermineInsertQueue();
SepAdtGenerateDiscardAudit();
SepAdtIncorporatePerUserPolicy();
SepAdtInitLsaDeadEventForNonPagedList();
SepAdtInitializeAuditingOptions();
SepAdtInitializeBounds();
SepAdtInitializeCrashOnFail();
SepAdtInitializePrivilegeAuditing();
SepAdtLogAuditFailureEvent();
SepAdtLogAuditRecord();
SepAdtMarshallAuditRecord();
SepAdtObjectReferenceAuditAlarm();
SepAdtOpenObjectAuditAlarm();
SepAdtOpenObjectForDeleteAuditAlarm();
SepAdtOpenRegAndSetupNotification();
SepAdtPrivilegeObjectAuditAlarm();
SepAdtPrivilegedServiceAuditAlarm();
SepAdtRegNotificationCallback();
SepAdtSecurityDescriptorChangedAuditAlarm();
SepAdtStagingEvent();
SepAppContainerAceProtectionApplies();
SepAppendAceToTokenDefaultDacl();
SepAppendAceToTokenObjectAcl();
SepAppendAdminAceToTokenAcl();
SepAppendDefaultDacl();
SepAppendPrimaryGroup();
SepAssemblePrivileges();
SepAuditAssignPrimaryToken();
SepAuditFailed();
SepAuditFailedRaisedIrql();
SepAuditTypeList();
SepAuditingEnabledForSubcategory();
SepAuditingForSubCategory();
SepBuildCapPolicyTable();
SepBuildCapeSecurityDescriptor();
SepBuildDaclWithAllApplicationPackageSid();
SepBuildDefaultCap();
SepBuildDefaultCape();
SepBuildObjectSecurityDescriptor();
SepCaptureAuditPolicy();
SepCaptureFqbnArray();
SepCaptureHandles();
SepCaptureInt64Array();
SepCaptureOctetStringArray();
SepCapturePackageMoniker();
SepCaptureTokenSecurityAttributesAndOperationsInformation();
SepCaptureTokenSecurityAttributesInformation();
SepCaptureTokenSecurityOperations();
SepCaptureUnicodeStringArray();
SepCheckAcl();
SepCheckAndCopySelfRelativeSD();
SepCheckCapabilities();
SepCheckCreateLowBox();
SepCheckForAllAppPackagesAceRemoval();
SepCleanupLUIDDeviceMapDirectory();
SepCommonAccessCheckEx();
SepCompareSidAndAttributeArrays();
SepComputeSidSignature();
SepConcatenatePrivileges();
SepConstrainByMandatory();
SepConstrainByTrust();
SepConvertTokenPrivileges();
SepConvertTokenPrivilegesToLuidAndAttributes();
SepCopyObjectTypeList();
SepCopyTokenAccessInformation();
SepCopyTokenIntegrity();
SepCreateAccessStateFromSubjectContext();
SepCreateClientSecurity();
SepCreateClientSecurityEx();
SepCreateImpersonationTokenDacl();
SepCreateLogonSessionTrack();
SepCreateToken();
SepCreateTokenEx();
SepDeReferenceLogonSession();
SepDeleteAccessState();
SepDeleteLogonSessionTrack();
SepDeleteSessionLowboxEntries();
SepDereferenceLowBoxHandlesEntry();
SepDereferenceLowBoxNumberEntry();
SepDereferenceLowBoxObjects();
SepDeviceSidInToken();
SepDuplicateToken();
SepDuplicateTokenClaims();
SepExamineGlobalSaclEx();
SepExamineSaclEx();
SepExpandDynamic();
SepFilterPrivilegeAudits();
SepFilterToken();
SepFindMatchingLowBoxHandlesEntry();
SepFindMatchingLowBoxNumberEntries();
SepFindMatchingLowBoxNumberEntry();
SepFlattenAcl();
SepFreeCapturedString();
SepFreeCapturedTokenSecurityAttributesInformation();
SepFreeDefaultDacl();
SepFreePrimaryGroup();
SepFreeResourceInfo();
SepGetAnonymousToken();
SepGetCurrentLogLevel();
SepGetDefaultsSubjectContext();
SepGetLearningModeObjectInformation();
SepGetLogonSessionAccountInfo();
SepGetLowBoxHandlesEntry();
SepGetLowBoxNumberEntry();
SepGetProcessTrustLabelAce();
SepGetScopedPolicySid();
SepGetTokenAccessInformationBufferSize();
SepGetTokenSessionMapEntry();
SepHasAllAppPackagesPresent();
SepIdAssignableAsGroup();
SepIdAssignableAsOwner();
SepImageVerificationCallbackPreProcess();
SepImageVerificationCallbackWorker();
SepInformFileSystemsOfDeletedLogon();
SepInformLsaOfDeletedLogon();
SepInitQuerySigningPolicyExt();
SepInitSystemDacls();
SepInitializationPhase0();
SepInitializationPhase1();
SepInitializeAuthorizationCallbacks();
SepInitializeCodeIntegrity();
SepInitializeLowBoxNumberTable();
SepInitializeSessionLowboxStructures();
SepInitializeWorkList();
SepIsAclEqual();
SepIsChildTokenByPointer();
SepIsImageInMinTcbList();
SepIsLockedDown();
SepIsMinTCB();
SepIsNgenImage();
SepIsOptionPresent();
SepIsRemovableStorageDevice();
SepIsSiblingTokenByPointer();
SepIsSidEqual();
SepIsUmciDisabled();
SepLengthSidAndAttributesArray();
SepLinkLogonSessions();
SepLoadNgenLocations();
SepLocateTokenIntegrity();
SepLocateTokenTrustLevel();
SepMakeTokenEffectiveOnly();
SepMandatoryIntegrityCheck();
SepMandatorySubProcessToken();
SepMandatoryToDiscretionary();
SepMaximumAccessCheck();
SepMaximumAccessCheckEx();
SepMergeObjectTypeListAccesses();
SepModifyTokenPolicyCounter();
SepNormalAccessCheck();
SepNormalAccessCheckEx();
SepNotifyFileSystems();
SepOpenTokenOfThread();
SepParseElamCertResources();
SepPrivilegeCheck();
SepProbeAndCaptureString_U();
SepQueryNameString();
SepQueryTypeString();
SepQueueWorkItem();
SepReadAndInsertCaps();
SepReadAndPopulateCapes();
SepReadSingleCap();
SepReconcileTrustSidWithProcessProtection();
SepReferenceLogonSession();
SepReferenceLowBoxHandlesEntry();
SepReferenceLowBoxNumberEntry();
SepReferenceLowBoxObjects();
SepRegOpenKey();
SepRegQueryDwordValue();
SepRegQueryValue();
SepReleaseAuditPolicy();
SepReleaseTokenSecurityAttributesAndOperationsInformation();
SepRemoveAceFromTokenDefaultDacl();
SepRemoveDisabledGroupsAndPrivileges();
SepRmAddLogonSessionInfoWrkr();
SepRmCallLsa();
SepRmCapPoolExpand();
SepRmCapUpdateWrkr();
SepRmCommandServerThread();
SepRmCommandServerThreadInit();
SepRmCreateLogonSessionWrkr();
SepRmDbInitialization();
SepRmDeleteLogonSessionWrkr();
SepRmDereferenceCapTable();
SepRmDestroyCapTable();
SepRmDispatchDataToLsa();
SepRmFetchGlobalSacl();
SepRmGlobalSaclFind();
SepRmGlobalSaclSetWrkr();
SepRmProcessCreationCommandLineAuditSettingsWrkr();
SepRmReferenceCapTable();
SepRmReferenceFindCap();
SepRmSetAuditEventWrkr();
SepRmVerifyLsaProtectionLevel();
SepSDContainsAttributeACE();
SepScheduleImageVerificationCallbacks();
SepSecureBootBuildRules();
SepSecureBootCheckForUpdates();
SepSecureBootCorrectBcd();
SepSecureBootFilterBootOptionDelete();
SepSecureBootFindMatchingRegistryRule();
SepSecureBootGetPolicyDefaultValue();
SepSecureBootGetPolicyValueByRef();
SepSecureBootGetQWordPolicyValue();
SepSecureBootHasPermission();
SepSecureBootSetRegistryKey();
SepSecureBootUpdateBcdDataForRule();
SepSecureBootValidateBcdDataAgainstBcdRule();
SepSecurityDescriptorStrictLength();
SepSetAuditInfoForObjectType();
SepSetClaimsInToken();
SepSetLogonSessionToken();
SepSetSqmObjectName();
SepSetSystemPaths();
SepSetTokenCapabilities();
SepSetTokenLowboxHandles();
SepSetTokenLowboxNumber();
SepSetTokenPackage();
SepSetTokenTrust();
SepSetTrustLevelForProcessToken();
SepSidFromProcessProtection();
SepSidInSidAndAttributes();
SepSidInToken();
SepSidInTokenSidHash();
SepSinglePrivilegeCheck();
SepSqmInformation();
SepTokenDeleteMethod();
SepTokenFromAccessInformation();
SepTokenInitialization();
SepTokenIsOwner();
SepTrustLevelCheck();
SepTrustToDiscretionary();
SepUpdateLogonSessionTrack();
SepValidLabelSubjectContext();
SepValidOwnerSubjectContext();
SepValidTrustSubjectContext();
SepVariableInitialization();
SepZwLockRegistryKey();
SetFailureLocation();
SetVacb();
SiDisambiguateSystemDevice();
SiGetBiosSystemDisk();
SiGetBiosSystemPartition();
SiGetDefaultSystemPartition();
SiGetDeviceNumberInformation();
SiGetDiskPartitionInformation();
SiGetDriveLayoutInformation();
SiGetEfiSystemDevice();
SiGetEspFromFirmware();
SiGetFirmwareBootDeviceName();
SiGetFirmwareBootDeviceNameFromRegistry();
SiGetRegistryValue();
SiGetSystemDeviceName();
SiGetSystemDisk();
SiGetSystemPartition();
SiIsWinPEBoot();
SiIsWinPeHardDiskZeroUfdBoot();
SiIssueSynchronousIoctl();
SiOpenArcNameObject();
SiOpenRegistryKey();
SiQuerySystemPartitionInformation();
SiTranslateSymbolicLink();
SiValidateSystemPartition();
SimplifyFilter();
SkippingWhichBP();
SmAlloc();
SmArrayGrow();
SmCalcIoWorkItemSize();
SmCrAuthDecrypt();
SmCrAuthEncrypt();
SmCrEncCleanup();
SmCrEncInitialize();
SmCrEncStart();
SmCrGenRandom();
SmCreateEvent();
SmEtwEnableCallback();
SmEtwLogRegionOp();
SmEtwLogStoreCorruption();
SmEtwLogStoreOp();
SmEtwLogStoreStateChange();
SmFpAllocate();
SmFpCleanup();
SmFpFree();
SmFpInitialize();
SmFpPreAllocate();
SmFree();
SmGetRegistrationInfo();
SmGlobalsInitialize();
SmInitSystem();
SmIoRequestComplete();
SmIssueIo();
SmKmEtwAppendObjectName();
SmKmEtwAppendProductName();
SmKmEtwLogGlobalStats();
SmKmEtwLogStoreChange();
SmKmEtwLogStoreRundown();
SmKmEtwLogStoreStats();
SmKmFileInfoCleanup();
SmKmFileInfoDuplicate();
SmKmFileInfoGetPath();
SmKmFileInfoInit();
SmKmGenericCompletion();
SmKmGetCacheStatsBucketIndex();
SmKmGetStoreList();
SmKmInitialize();
SmKmIsVolumeIoPossible();
SmKmIssueFileIo();
SmKmIssueIo();
SmKmIssueVolumeIo();
SmKmKeyGenGenerate();
SmKmKeyGenKeyDelete();
SmKmKeyGenKeyFind();
SmKmKeyGenLoadKey();
SmKmKeyGenNewKey();
SmKmKeyGenStart();
SmKmProbeAndLockAddress();
SmKmRegParamsLoad();
SmKmSendDeviceControl();
SmKmSendUsageNotification();
SmKmSqmAddToStream();
SmKmStoreAdd();
SmKmStoreCreatePrepare();
SmKmStoreDelete();
SmKmStoreFileCreate();
SmKmStoreFileCreateForIoType();
SmKmStoreFileDelete();
SmKmStoreFileGetExtents();
SmKmStoreFileMakeSecurityDescriptor();
SmKmStoreFileOpenVolume();
SmKmStoreFileWriteHeader();
SmKmStoreHelperCleanup();
SmKmStoreHelperCommandCleanup();
SmKmStoreHelperCommandProcess();
SmKmStoreHelperInitialize();
SmKmStoreHelperSendCommand();
SmKmStoreHelperStart();
SmKmStoreHelperWaitForCommand();
SmKmStoreHelperWorker();
SmKmStoreTerminateWorker();
SmKmStoresDereference();
SmKmStoresReferenceEx();
SmKmUnlockAndFreeMdl();
SmKmVolumeQueryUniqueId();
SmLogAllocate();
SmLogBufferFull();
SmLogBufferInit();
SmLogFree();
SmLogInitialize();
SmLogIo();
SmLogRetrieve();
SmLogShutdown();
SmLogStart();
SmMapPage();
SmPageEvict();
SmPageRead();
SmPageWrite();
SmProcessCreateRequest();
SmProcessDeleteRequest();
SmProcessEmptyRequest();
SmProcessGlobalCacheStatsRequest();
SmProcessListRequest();
SmProcessListRequestExtended();
SmProcessLogRequest();
SmProcessRegistrationRequest();
SmProcessResizeRequest();
SmProcessStatsRequest();
SmQueryStoreInformation();
SmRegistrationCtxInitialize();
SmRegistrationCtxStart();
SmRegistrationInfoFill();
SmResetVirtualMemory();
SmSanitizeString();
SmSetStoreInformation();
SmSetThreadPagePriority();
SmSetThreadSystemPagePriority();
SmStoreCreate();
SmStoreDelete();
SmStorePhysicalRequestIssue();
SmStoreResize();
SmStoresUnpersist();
SmUniqueIdParseProductName();
SmWaitForSyncIo();
SmWdCompleteWorkItems();
SmWdDPC();
SmWdInitialize();
SmWdProcessStore();
SmWdRemoveWorkItems();
SmWdStartMonitoring();
SmWdStopMonitoring();
SmWdWorkItemMarkBusy();
SmWdWorkItemRegister();
SmWdWorkItemUpdate();
SmWdWritesApcRoutine();
SmWdWritesApcRundown();
SmcCacheAdd();
SmcCacheCleanup();
SmcCacheCreatePrepare();
SmcCacheDelete();
SmcCacheDereference();
SmcCacheInitialize();
SmcCacheManagerInitialize();
SmcCacheManagerStart();
SmcCacheReference();
SmcCacheRemove();
SmcCacheStart();
SmcGetCacheList();
SmcGetCacheStats();
SmcProcessCreateRequest();
SmcProcessDeleteRequest();
SmcProcessListRequest();
SmcProcessResizeRequest();
SmcProcessStatsRequest();
SmcProcessStoreCreateRequest();
SmcProcessStoreDeleteRequest();
SmcStoreCreate();
SmcStoreDelete();
SmcStoreEntryFind();
SmcStorePlacementGet();
SmcStoreResize();
SmcStoreSlotAbort();
SmcStoreSlotCommit();
SmcStoreSlotReserve();
SmcVolumeChangeNotificationUnregister();
SmcVolumePnpNotification();
SmpCacheStatsCopy();
SmpDeviceIoCompletion();
SmpFpAllocateResource();
SmpFpReleaseResource();
SmpFpWaitForResource();
SmpIoCompletionApc();
SmpPageRead();
SmpPageWrite();
SmpStoreMgrCallback();
SmpUpdateCacheStatsBucketIndex();
SmpUtilsGetControlDevice();
SsToLinear();
StEtaCheckForRefresh();
StEtaCleanup();
StEtaInitialize();
StEtaIoComplete();
StEtaIoStart();
StEtaIoTimeout();
StEtaStart();
StEtaStartRefresh();
StIoCountsMovePeriod();
StLcBucketLocate();
StLcBucketsCombine();
StLcBucketsCopy();
StLcInitialize();
StRtlIoStorInfoSetNvCachePriority();
StartFirstUserProcess();
StringCbCatW();
StringCbCopyNW();
StringCbLengthW();
StringCchCatW();
StringCchCopyA();
StringCchCopyNW();
StringCchCopyW();
StringCchPrintfA();
StringCchPrintfW();
StringListContains();
StringListElementSubstringMatch();
SubstringMatch();
SwapContext();
SwapContext_Fxrstor();
SwapContext_Fxsave();
SwapContext_NoNpxLoad();
SwapContext_NoNpxSave();
SwapContext_Xrstor();
SwapContext_Xsave();
SwapContext_Xsaveopt();
SwapSplayLinks();
SwitchToHandlerStack();
SymCryptDetectCpuFeaturesByCpuid();
SymCryptEnvWindowsKernelModeFatal();
SymCryptEnvWindowsKernelModeInit();
SymCryptFatalInternal();
SymCryptInit_ApplicationRequested_Non_SaveXmmLibrary();
SymCryptMarvin32();
SymCryptMarvin32ExpandSeed();
SymNumFor();
SyspartDirectGetSystemDisk();
SyspartDirectGetSystemPartition();
SyspartGetSystemPartition();
TagToIndex();
Template_j();
Template_jj();
Template_jjzjq();
Template_jq();
Template_jz();
Template_jzj();
Template_jzt();
Template_p();
Template_pqzzzzzzz();
Template_pz();
Template_q();
Template_qz();
Template_qzq();
Template_xxxqq();
Template_xxxqqqq();
Template_z();
Template_zjqq();
Template_zzjzzzqq();
Template_zzjzzztzqzztq();
Template_zzt();
TmCancelPropagationRequest();
TmCommitComplete();
TmCommitEnlistment();
TmCommitTransaction();
TmCreateEnlistment();
TmCurrentTransaction();
TmDereferenceEnlistmentKey();
TmEnableCallbacks();
TmEndPropagationRequest();
TmFreezeTransactions();
TmGetTransactionId();
TmInitSystem();
TmInitSystemPhase2();
TmInitializeTransactionManager();
TmIsKTMCommitCoordinator();
TmIsTransactionActive();
TmPrePrepareComplete();
TmPrePrepareEnlistment();
TmPrepareComplete();
TmPrepareEnlistment();
TmPropagationComplete();
TmPropagationFailed();
TmReadOnlyEnlistment();
TmRecoverEnlistment();
TmRecoverResourceManager();
TmRecoverTransactionManager();
TmReferenceEnlistmentKey();
TmRenameTransactionManager();
TmRequestOutcomeEnlistment();
TmRollbackComplete();
TmRollbackEnlistment();
TmRollbackTransaction();
TmSetCurrentTransaction();
TmShutdownSystem();
TmSinglePhaseReject();
TmThawTransactions();
TraceDataRecordCallInfo();
TriageGetBugcheckData();
TriageGetDriverCount();
TriageGetLoaderEntry();
TriageGetMmInformation();
TriagepGetPageSize();
TriagepVerifyDump();
TryLockShutdownShared();
TxtpAddCacheEntry();
TxtpClearCache();
TxtpGetCacheEntry();
TxtpJustifyRectangle();
ULongAdd();
UNLOCK_ADDRESS_SPACE();
UNLOCK_ADDRESS_SPACE_SHARED();
UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED();
UNLOCK_ADDRESS_SPACE_SHARED_UNSAFE();
UNLOCK_ADDRESS_SPACE_UNORDERED();
UNLOCK_CM_RM_LIST();
UNLOCK_HIVE_LOAD();
UNLOCK_PAGED_POOL_WS();
UNLOCK_PAGED_POOL_WS_SHARED();
UNLOCK_PAGE_TABLE_COMMITMENT();
UNLOCK_POST_LIST();
UNLOCK_SYSTEM_CACHE_WS();
UNLOCK_SYSTEM_CACHE_WS_SHARED();
UNLOCK_SYSTEM_PTES_WS();
UNLOCK_SYSTEM_PTES_WS_SHARED();
UNLOCK_TRANSACTION_LIST();
UNLOCK_WORKING_SET();
UNLOCK_WORKING_SET_SHARED();
UNLOCK_WS();
UnlockRMLog();
UnlockShutdown();
V86_kids_a();
V86_kira_a();
V86_kirscf_a();
V86_kit0_a();
V86_kit10_a();
V86_kit11_a();
V86_kit13_a();
V86_kit1_a();
V86_kit3_a();
V86_kit4_a();
V86_kit5_a();
V86_kit6_a();
V86_kit7_a();
V86_kit9_a();
V86_kita_a();
V86_kitb_a();
V86_kitc_a();
V86_kitd_a();
V86_kite_a();
V86_kitf_a();
V86_kitx_a();
V86_kui_a();
VERIFY_BUFFER_LOCKED();
VF_ASSERT_IRQL();
VF_ASSERT_MAX_IRQL();
VF_FIND_BUFFER();
VF_FIND_DEVICE_INFORMATION_AND_REMOVE();
VF_FIND_INACTIVE_ADAPTER_AND_REMOVE();
VF_MARK_FOR_DEFERRED_REMOVE();
VF_MARK_SCATTER_GATHER_LIST();
VF_UNMARK_SCATTER_GATHER_LIST();
ValidFilter();
ValidateRegistrLangType();
ValidateStd3Range();
VdmCallStringIoHandler();
VdmCheckPMCliTimeStamp();
VdmClearPMCliTimeStamp();
VdmConvertToLinearAddress();
VdmDecodeOperand();
VdmDispatchBop();
VdmDispatchException();
VdmDispatchIRQ13();
VdmDispatchIntAck();
VdmDispatchInterrupts();
VdmDispatchIoToHandler();
VdmDispatchOpcodeV86_try();
VdmDispatchOpcode_try();
VdmDispatchPageFault();
VdmDispatchStringIoToHandler();
VdmDispatchUnalignedIoToHandler();
VdmEndExecution();
VdmFetchBop1();
VdmFetchBop4();
VdmFetchULONG();
VdmFixEspEbp();
VdmOpcode0f();
VdmOpcodeClts();
VdmOpcodeGetCrx();
VdmOpcodeGetDrx();
VdmOpcodeLmsw();
VdmOpcodeSetCrx();
VdmOpcodeSetDrx();
VdmPrinterStatus();
VdmPrinterWriteData();
VdmRundownDpcs();
VdmSegParams();
VdmSetPMCliTimeStamp();
VdmSwapContexts();
VdmTibPass1();
VdmTraceEvent();
VdmpDelayIntApcRoutine();
VdmpDelayIntDpcRoutine();
VdmpDelayInterrupt();
VdmpDispatchableIntPending();
VdmpEnterIcaLock();
VdmpExceptionHandler();
VdmpFlushPrinterWriteData();
VdmpGetVdmTib();
VdmpIcaAccept();
VdmpIcaScan();
VdmpInitialize();
VdmpIsThreadTerminating();
VdmpLeaveIcaLock();
VdmpPreInitialize();
VdmpPrinterDirectIoClose();
VdmpPrinterInitialize();
VdmpQueryVdmProcess();
VdmpQueueIntApcRoutine();
VdmpQueueIntNopRoutine();
VdmpQueueIntNormalRoutine();
VdmpQueueInterrupt();
VdmpRestartDelayedInterrupts();
VdmpRundownRoutine();
VdmpStartExecution();
VeAllocatePoolWithTagPriority();
VerSetConditionMask();
VerifierBugCheckIfAppropriate();
VerifierCcWaitForCurrentLazyWriterActivity();
VerifierCmRegisterCallback();
VerifierCmRegisterCallbackEx();
VerifierCmUnRegisterCallback();
VerifierDbgBreakPointWithStatus();
VerifierEtwRegister();
VerifierEtwRegisterClassicProvider();
VerifierEtwUnregister();
VerifierExAcquireFastMutex();
VerifierExAcquireFastMutexNoReboot();
VerifierExAcquireFastMutexUnsafe();
VerifierExAcquireFastMutexUnsafeNoReboot();
VerifierExAcquireResourceExclusiveLite();
VerifierExAcquireResourceExclusiveLiteNoReboot();
VerifierExAcquireResourceSharedLite();
VerifierExAcquireResourceSharedLiteNoReboot();
VerifierExAcquireRundownProtection();
VerifierExAcquireRundownProtectionCacheAware();
VerifierExAcquireRundownProtectionCacheAwareEx();
VerifierExAcquireRundownProtectionEx();
VerifierExAcquireSharedStarveExclusive();
VerifierExAcquireSharedStarveExclusiveNoReboot();
VerifierExAcquireSharedWaitForExclusive();
VerifierExAcquireSharedWaitForExclusiveNoReboot();
VerifierExAllocatePool();
VerifierExAllocatePoolEx();
VerifierExAllocatePoolWithQuota();
VerifierExAllocatePoolWithQuotaTag();
VerifierExAllocatePoolWithTag();
VerifierExAllocatePoolWithTagPriority();
VerifierExConvertExclusiveToSharedLite();
VerifierExCreateCallback();
VerifierExDeleteLookasideListEx();
VerifierExDeleteNPagedLookasideList();
VerifierExDeletePagedLookasideList();
VerifierExDeleteResourceLite();
VerifierExEnterCriticalRegionAndAcquireResourceExclusive();
VerifierExEnterCriticalRegionAndAcquireResourceExclusiveNoReboot();
VerifierExEnterCriticalRegionAndAcquireResourceShared();
VerifierExEnterCriticalRegionAndAcquireResourceSharedNoReboot();
VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive();
VerifierExEnterPriorityRegionAndAcquireResourceExclusive();
VerifierExEnterPriorityRegionAndAcquireResourceExclusiveNoReboot();
VerifierExEnterPriorityRegionAndAcquireResourceShared();
VerifierExEnterPriorityRegionAndAcquireResourceSharedNoReboot();
VerifierExFreePool();
VerifierExFreePoolEx();
VerifierExFreePoolWithTag();
VerifierExGetExclusiveWaiterCount();
VerifierExGetSharedWaiterCount();
VerifierExInitializeLookasideListEx();
VerifierExInitializeNPagedLookasideList();
VerifierExInitializePagedLookasideList();
VerifierExInitializeResourceLite();
VerifierExInterlockedAddLargeInteger();
VerifierExIsProcessorFeaturePresent();
VerifierExIsResourceAcquiredExclusiveLite();
VerifierExIsResourceAcquiredSharedLite();
VerifierExRaiseAccessViolation();
VerifierExRaiseDatatypeMisalignment();
VerifierExRaiseStatus();
VerifierExRegisterCallback();
VerifierExReinitializeResourceLite();
VerifierExReleaseFastMutex();
VerifierExReleaseFastMutexNoReboot();
VerifierExReleaseFastMutexUnsafe();
VerifierExReleaseFastMutexUnsafeNoReboot();
VerifierExReleaseResourceAndLeaveCriticalRegion();
VerifierExReleaseResourceAndLeaveCriticalRegionNoReboot();
VerifierExReleaseResourceAndLeavePriorityRegion();
VerifierExReleaseResourceAndLeavePriorityRegionNoReboot();
VerifierExReleaseResourceForThreadLite();
VerifierExReleaseResourceForThreadLiteNoReboot();
VerifierExReleaseResourceLite();
VerifierExReleaseResourceLiteNoReboot();
VerifierExReleaseRundownProtection();
VerifierExReleaseRundownProtectionCacheAware();
VerifierExReleaseRundownProtectionEx();
VerifierExSetResourceOwnerPointer();
VerifierExSetResourceOwnerPointerEx();
VerifierExSetTimerResolution();
VerifierExTryToAcquireFastMutex();
VerifierExTryToAcquireFastMutexNoReboot();
VerifierExUnregisterCallback();
VerifierExUuidCreate();
VerifierExWaitForRundownProtectionRelease();
VerifierExWaitForRundownProtectionReleaseCacheAware();
VerifierExfAcquirePushLockExclusive();
VerifierExfAcquirePushLockShared();
VerifierExfInterlockedCompareExchange64();
VerifierExfInterlockedInsertHeadList();
VerifierExfInterlockedInsertTailList();
VerifierExfInterlockedPopEntryList();
VerifierExfInterlockedPushEntryList();
VerifierExfInterlockedRemoveHeadList();
VerifierExfReleasePushLock();
VerifierExfReleasePushLockShared();
VerifierExfTryAcquirePushLockShared();
VerifierExfTryToWakePushLock();
VerifierFreeTrackedPool();
VerifierFsRtlAllocateFileLock();
VerifierFsRtlAreNamesEqual();
VerifierFsRtlBalanceReads();
VerifierFsRtlCancellableWaitForMultipleObjects();
VerifierFsRtlCancellableWaitForSingleObject();
VerifierFsRtlCheckLockForReadAccess();
VerifierFsRtlCheckLockForWriteAccess();
VerifierFsRtlCopyWrite();
VerifierFsRtlDeregisterUncProvider();
VerifierFsRtlDissectName();
VerifierFsRtlDoesNameContainWildCards();
VerifierFsRtlFastCheckLockForRead();
VerifierFsRtlFastCheckLockForWrite();
VerifierFsRtlFastUnlockAll();
VerifierFsRtlFastUnlockAllByKey();
VerifierFsRtlFastUnlockSingle();
VerifierFsRtlFreeFileLock();
VerifierFsRtlGetFileSize();
VerifierFsRtlGetNextFileLock();
VerifierFsRtlIncrementCcFastReadNoWait();
VerifierFsRtlIncrementCcFastReadWait();
VerifierFsRtlInitializeFileLock();
VerifierFsRtlIsNameInExpression();
VerifierFsRtlMdlReadCompleteDev();
VerifierFsRtlMdlWriteCompleteDev();
VerifierFsRtlNotifyFilterChangeDirectory();
VerifierFsRtlNotifyFilterReportChange();
VerifierFsRtlNotifyFullChangeDirectory();
VerifierFsRtlNotifyFullReportChange();
VerifierFsRtlPrivateLock();
VerifierFsRtlProcessFileLock();
VerifierFsRtlRegisterUncProvider();
VerifierFsRtlRegisterUncProviderEx();
VerifierFsRtlRemoveDotsFromPath();
VerifierFsRtlUninitializeFileLock();
VerifierFsRtlValidateReparsePointBuffer();
VerifierHalExamineMBR();
VerifierHalGetInterruptVector();
VerifierInitSystem();
VerifierInterlockedPopEntrySList();
VerifierInterlockedPushEntrySList();
VerifierIoAcquireCancelSpinLock();
VerifierIoAcquireRemoveLockEx();
VerifierIoAcquireVpbSpinLock();
VerifierIoAllocateController();
VerifierIoAllocateErrorLogEntry();
VerifierIoAllocateIrp();
VerifierIoAllocateMdl();
VerifierIoAllocateWorkItem();
VerifierIoAttachDevice();
VerifierIoAttachDeviceToDeviceStack();
VerifierIoAttachDeviceToDeviceStackSafe();
VerifierIoCancelIrp();
VerifierIoCheckShareAccess();
VerifierIoConnectInterrupt();
VerifierIoConnectInterruptEx();
VerifierIoCreateController();
VerifierIoCreateDevice();
VerifierIoCreateFile();
VerifierIoCreateNotificationEvent();
VerifierIoCreateSymbolicLink();
VerifierIoCreateSynchronizationEvent();
VerifierIoCreateUnprotectedSymbolicLink();
VerifierIoDeleteController();
VerifierIoDeleteDevice();
VerifierIoDeleteSymbolicLink();
VerifierIoDetachDevice();
VerifierIoDisconnectInterrupt();
VerifierIoDisconnectInterruptEx();
VerifierIoFreeController();
VerifierIoFreeIrp();
VerifierIoFreeMdl();
VerifierIoGetAttachedDeviceReference();
VerifierIoGetConfigurationInformation();
VerifierIoGetDeviceInterfaceAlias();
VerifierIoGetDeviceInterfaces();
VerifierIoGetDeviceNumaNode();
VerifierIoGetDeviceObjectPointer();
VerifierIoGetDeviceProperty();
VerifierIoGetDevicePropertyData();
VerifierIoGetDeviceToVerify();
VerifierIoGetFileObjectGenericMapping();
VerifierIoGetInitialStack();
VerifierIoInitializeIrp();
VerifierIoInitializeRemoveLockEx();
VerifierIoInitializeWorkItem();
VerifierIoInvalidateDeviceRelations();
VerifierIoIsWdmVersionAvailable();
VerifierIoOpenDeviceInterfaceRegistryKey();
VerifierIoOpenDeviceRegistryKey();
VerifierIoRaiseHardError();
VerifierIoRaiseInformationalHardError();
VerifierIoReadPartitionTable();
VerifierIoReadPartitionTableEx();
VerifierIoRegisterBootDriverReinitialization();
VerifierIoRegisterDeviceInterface();
VerifierIoRegisterDriverReinitialization();
VerifierIoRegisterLastChanceShutdownNotification();
VerifierIoRegisterPlugPlayNotification();
VerifierIoRegisterShutdownNotification();
VerifierIoReleaseCancelSpinLock();
VerifierIoReleaseRemoveLockAndWaitEx();
VerifierIoReleaseRemoveLockEx();
VerifierIoReleaseVpbSpinLock();
VerifierIoRemoveShareAccess();
VerifierIoReplacePartitionUnit();
VerifierIoReportDetectedDevice();
VerifierIoReportTargetDeviceChange();
VerifierIoReportTargetDeviceChangeAsynchronous();
VerifierIoReuseIrp();
VerifierIoSetCompletionRoutineEx();
VerifierIoSetDeviceInterfaceState();
VerifierIoSetDevicePropertyData();
VerifierIoSetDeviceToVerify();
VerifierIoSetPartitionInformation();
VerifierIoSetPartitionInformationEx();
VerifierIoSetShareAccess();
VerifierIoSetStartIoAttributes();
VerifierIoStartNextPacket();
VerifierIoUnregisterPlugPlayNotification();
VerifierIoUnregisterPlugPlayNotificationEx();
VerifierIoUnregisterShutdownNotification();
VerifierIoUpdateShareAccess();
VerifierIoVolumeDeviceToDosName();
VerifierIoWMIAllocateInstanceIds();
VerifierIoWMIRegistrationControl();
VerifierIoWMIWriteEvent();
VerifierIoWritePartitionTable();
VerifierIoWritePartitionTableEx();
VerifierIofCallDriver();
VerifierIofCompleteRequest();
VerifierKeAcquireGuardedMutex();
VerifierKeAcquireGuardedMutexUnsafe();
VerifierKeAcquireInStackQueuedSpinLock();
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel();
VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelNoReboot();
VerifierKeAcquireInStackQueuedSpinLockForDpc();
VerifierKeAcquireInStackQueuedSpinLockForDpcNoReboot();
VerifierKeAcquireInStackQueuedSpinLockNoReboot();
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch();
VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchNoReboot();
VerifierKeAcquireInterruptSpinLock();
VerifierKeAcquireQueuedSpinLock();
VerifierKeAcquireQueuedSpinLockRaiseToSynch();
VerifierKeAcquireSpinLockAtDpcLevel();
VerifierKeAcquireSpinLockAtDpcLevelNoReboot();
VerifierKeAcquireSpinLockForDpc();
VerifierKeAreAllApcsDisabled();
VerifierKeAreApcsDisabled();
VerifierKeCancelTimer();
VerifierKeClearEvent();
VerifierKeDelayExecutionThread();
VerifierKeDeregisterNmiCallback();
VerifierKeEnterCriticalRegion();
VerifierKeEnterGuardedRegion();
VerifierKeFlushQueuedDpcs();
VerifierKeInitializeDeviceQueue();
VerifierKeInitializeEvent();
VerifierKeInitializeGuardedMutex();
VerifierKeInitializeMutant();
VerifierKeInitializeMutantNoReboot();
VerifierKeInitializeMutex();
VerifierKeInitializeMutexNoReboot();
VerifierKeInitializeSemaphore();
VerifierKeInitializeSpinLock();
VerifierKeInitializeSpinLockNoReboot();
VerifierKeInitializeTimer();
VerifierKeInitializeTimerEx();
VerifierKeInsertByKeyDeviceQueue();
VerifierKeInsertDeviceQueue();
VerifierKeInsertHeadQueue();
VerifierKeInsertQueue();
VerifierKeIsApcRunningThread();
VerifierKeIsExecutingLegacyDpc();
VerifierKeLeaveCriticalRegion();
VerifierKeLeaveGuardedRegion();
VerifierKeLowerIrql();
VerifierKePulseEvent();
VerifierKeQueryActiveProcessors();
VerifierKeQueryPriorityThread();
VerifierKeQueryRuntimeThread();
VerifierKeRaiseIrql();
VerifierKeRaiseIrqlToDpcLevel();
VerifierKeReadStateEvent();
VerifierKeReadStateMutex();
VerifierKeReadStateSemaphore();
VerifierKeReadStateTimer();
VerifierKeRegisterNmiCallback();
VerifierKeReleaseGuardedMutex();
VerifierKeReleaseGuardedMutexUnsafe();
VerifierKeReleaseInStackQueuedSpinLock();
VerifierKeReleaseInStackQueuedSpinLockForDpc();
VerifierKeReleaseInStackQueuedSpinLockForDpcNoReboot();
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel();
VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelNoReboot();
VerifierKeReleaseInStackQueuedSpinLockNoReboot();
VerifierKeReleaseInterruptSpinLock();
VerifierKeReleaseMutant();
VerifierKeReleaseMutantNoReboot();
VerifierKeReleaseMutex();
VerifierKeReleaseMutexNoReboot();
VerifierKeReleaseQueuedSpinLock();
VerifierKeReleaseSemaphore();
VerifierKeReleaseSpinLockForDpc();
VerifierKeReleaseSpinLockFromDpcLevel();
VerifierKeReleaseSpinLockFromDpcLevelNoReboot();
VerifierKeRemoveByKeyDeviceQueue();
VerifierKeRemoveDeviceQueue();
VerifierKeRemoveEntryDeviceQueue();
VerifierKeRemoveQueue();
VerifierKeResetEvent();
VerifierKeRevertToUserAffinityThreadEx();
VerifierKeSaveFloatingPointState();
VerifierKeSetEvent();
VerifierKeSetSystemAffinityThread();
VerifierKeSetSystemGroupAffinityThread();
VerifierKeSetTimer();
VerifierKeSetTimerEx();
VerifierKeSynchronizeExecution();
VerifierKeTestSpinLock();
VerifierKeTryToAcquireGuardedMutex();
VerifierKeTryToAcquireQueuedSpinLock();
VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch();
VerifierKeTryToAcquireSpinLockAtDpcLevel();
VerifierKeTryToAcquireSpinLockAtDpcLevelNoReboot();
VerifierKeWaitForMultipleObjects();
VerifierKeWaitForMultipleObjectsNoReboot();
VerifierKeWaitForSingleObject();
VerifierKeWaitForSingleObjectNoReboot();
VerifierKfAcquireSpinLock();
VerifierKfAcquireSpinLockNoReboot();
VerifierKfLowerIrql();
VerifierKfRaiseIrql();
VerifierKfReleaseSpinLock();
VerifierKfReleaseSpinLockNoReboot();
VerifierMmAddPhysicalMemory();
VerifierMmAllocateContiguousMemory();
VerifierMmAllocateContiguousMemorySpecifyCache();
VerifierMmAllocateContiguousMemorySpecifyCacheNode();
VerifierMmAllocateContiguousNodeMemory();
VerifierMmAllocateNonCachedMemory();
VerifierMmAllocatePagesForMdl();
VerifierMmAllocatePagesForMdlEx();
VerifierMmCreateMdl();
VerifierMmCreateMirror();
VerifierMmDoesFileHaveUserWritableReferences();
VerifierMmFreeContiguousMemory();
VerifierMmFreeContiguousMemorySpecifyCache();
VerifierMmFreeNonCachedMemory();
VerifierMmFreePagesFromMdl();
VerifierMmGetPhysicalMemoryRanges();
VerifierMmGetSystemRoutineAddress();
VerifierMmLockPagableDataSection();
VerifierMmLockPagableSectionByHandle();
VerifierMmMapIoSpace();
VerifierMmMapLockedPages();
VerifierMmMapLockedPagesSpecifyCache();
VerifierMmMapLockedPagesWithReservedMapping();
VerifierMmPageEntireDriver();
VerifierMmPrefetchPages();
VerifierMmProbeAndLockPages();
VerifierMmProbeAndLockProcessPages();
VerifierMmRemovePhysicalMemory();
VerifierMmResetDriverPaging();
VerifierMmSecureVirtualMemory();
VerifierMmUnlockPagableImageSection();
VerifierMmUnlockPages();
VerifierMmUnmapIoSpace();
VerifierMmUnmapLockedPages();
VerifierMmUnsecureVirtualMemory();
VerifierNdisAllocateVerifierContext();
VerifierNdisFreeVerifierContext();
VerifierNdisMIndicateStatusEx();
VerifierNdisMOidRequestComplete();
VerifierNdisMSendNetBufferListsComplete();
VerifierNdisMiniportDevicePnPEventNotify();
VerifierNdisMiniportHaltEx();
VerifierNdisMiniportOidRequest();
VerifierNdisMiniportSendNetBufferLists();
VerifierNtCreateFile();
VerifierNtLockFile();
VerifierNtReadFile();
VerifierNtUnlockFile();
VerifierNtWriteFile();
VerifierObGetObjectSecurity();
VerifierObReferenceObjectByHandle();
VerifierObReferenceObjectByHandleWithTag();
VerifierObReferenceObjectByPointer();
VerifierObReferenceObjectByPointerWithTag();
VerifierObReleaseObjectSecurity();
VerifierObfDereferenceObject();
VerifierObfDereferenceObjectWithTag();
VerifierObfReferenceObject();
VerifierObfReferenceObjectWithTag();
VerifierPoCallDriver();
VerifierPoFxActivateComponent();
VerifierPoFxCompleteDevicePowerNotRequired();
VerifierPoFxCompleteIdleCondition();
VerifierPoFxCompleteIdleState();
VerifierPoFxIdleComponent();
VerifierPoFxNotifySurprisePowerOn();
VerifierPoFxPowerControl();
VerifierPoFxRegisterDevice();
VerifierPoFxReportDevicePoweredOn();
VerifierPoFxSetComponentLatency();
VerifierPoFxSetComponentResidency();
VerifierPoFxSetComponentWake();
VerifierPoFxSetDeviceIdleTimeout();
VerifierPoFxStartDevicePowerManagement();
VerifierPoFxUnregisterDevice();
VerifierPoRequestPowerIrp();
VerifierPortExAllocatePoolWithQuotaTag();
VerifierPortExAllocatePoolWithTagPriority();
VerifierPortIoAllocateIrp();
VerifierPortIoAllocateMdl();
VerifierPortIoAllocateWorkItem();
VerifierPortKeAcquireSpinLock();
VerifierPortKeAcquireSpinLockNoXdv();
VerifierPortKeReleaseSpinLock();
VerifierPortKeReleaseSpinLockNoXdv();
VerifierProbeForRead();
VerifierProbeForWrite();
VerifierPsAssignImpersonationToken();
VerifierPsCreateSystemThread();
VerifierPsDereferenceImpersonationToken();
VerifierPsDereferencePrimaryToken();
VerifierPsDisableImpersonation();
VerifierPsGetVersion();
VerifierPsImpersonateClient();
VerifierPsReferenceImpersonationToken();
VerifierPsReferencePrimaryToken();
VerifierPsRemoveLoadImageNotifyRoutine();
VerifierPsRestoreImpersonation();
VerifierPsRevertToSelf();
VerifierPsSetCreateProcessNotifyRoutine();
VerifierPsSetCreateProcessNotifyRoutineEx();
VerifierPsSetCreateThreadNotifyRoutine();
VerifierPsSetLoadImageNotifyRoutine();
VerifierPsTerminateSystemThread();
VerifierRtlAnsiStringToUnicodeString();
VerifierRtlCompareUnicodeString();
VerifierRtlCreateUnicodeString();
VerifierRtlDeleteRegistryValue();
VerifierRtlDowncaseUnicodeChar();
VerifierRtlDowncaseUnicodeString();
VerifierRtlDuplicateUnicodeString();
VerifierRtlEqualUnicodeString();
VerifierRtlFreeUnicodeString();
VerifierRtlGUIDFromString();
VerifierRtlGenerateClass5Guid();
VerifierRtlHashUnicodeString();
VerifierRtlOemStringToCountedUnicodeString();
VerifierRtlOemStringToUnicodeString();
VerifierRtlStringFromGUID();
VerifierRtlUTF8ToUnicodeN();
VerifierRtlUnicodeStringToAnsiString();
VerifierRtlUnicodeStringToCountedOemString();
VerifierRtlUnicodeStringToOemString();
VerifierRtlUnicodeToUTF8N();
VerifierRtlUpcaseUnicodeChar();
VerifierRtlUpcaseUnicodeString();
VerifierRtlUpcaseUnicodeStringToAnsiString();
VerifierRtlUpcaseUnicodeStringToCountedOemString();
VerifierRtlUpcaseUnicodeStringToOemString();
VerifierRtlxAnsiStringToUnicodeSize();
VerifierRtlxUnicodeStringToAnsiSize();
VerifierSeAccessCheck();
VerifierSeAssignSecurity();
VerifierSeAssignSecurityEx();
VerifierSeDeassignSecurity();
VerifierSeLockSubjectContext();
VerifierSeReleaseSubjectContext();
VerifierSeSinglePrivilegeCheck();
VerifierSeUnlockSubjectContext();
VerifierSeValidSecurityDescriptor();
VerifierZwAllocateLocallyUniqueId();
VerifierZwClose();
VerifierZwCommitComplete();
VerifierZwCommitTransaction();
VerifierZwCreateKeyTransacted();
VerifierZwCreateResourceManager();
VerifierZwDeleteKey();
VerifierZwEnumerateTransactionObject();
VerifierZwFlushBuffersFile();
VerifierZwFlushKey();
VerifierZwGetNotificationResourceManager();
VerifierZwLockFile();
VerifierZwMakeTemporaryObject();
VerifierZwOpenKeyEx();
VerifierZwOpenKeyTransacted();
VerifierZwOpenKeyTransactedEx();
VerifierZwOpenResourceManager();
VerifierZwPrePrepareComplete();
VerifierZwQueryInformationResourceManager();
VerifierZwQueryQuotaInformationFile();
VerifierZwReadOnlyEnlistment();
VerifierZwRecoverEnlistment();
VerifierZwRecoverTransactionManager();
VerifierZwRenameKey();
VerifierZwRollbackComplete();
VerifierZwRollbackTransaction();
VerifierZwSetInformationResourceManager();
VerifierZwSetInformationToken();
VerifierZwSetQuotaInformationFile();
VerifierZwSetTimerEx();
VerifierZwTerminateProcess();
VerifierZwUnlockFile();
VerifierZwUnmapViewOfSection();
Verifiermemcpy();
VfAddVerifierEntry();
VfAfterCallDriver();
VfAllocateAdapterChannel();
VfAllocateAdapterChannelEx();
VfAllocateCommonBuffer();
VfAllocateCommonBufferEx();
VfAllocateCrashDumpRegisters();
VfAvlCleanupLockContext();
VfAvlDeleteTreeNode();
VfAvlEnumerateNodes();
VfAvlInitializeLockContext();
VfAvlInitializeTree();
VfAvlInsertReservedTreeNode();
VfAvlLookupTreeNode();
VfAvlReserveNode();
VfBeforeCallDriver();
VfBugCheckNoStackUsage();
VfBugcheckLogWorkaround();
VfBuildMdlFromScatterGatherList();
VfBuildScatterGatherList();
VfBuildScatterGatherListEx();
VfCalculateScatterGatherListSize();
VfCancelAdapterChannel();
VfCancelMappedTransfer();
VfCheckForLookaside();
VfCheckForResource();
VfCheckUserHandle();
VfConfigureAdapterChannel();
VfCtxHookAndConnectInterruptEx();
VfCtxInit();
VfCtxUnhookAndDisconnectInterruptEx();
VfDdiExposeWmiObjects();
VfDeadlockAcquireResource();
VfDeadlockAfterCallDriver();
VfDeadlockBeforeCallDriver();
VfDeadlockDeleteMemoryRange();
VfDeadlockInitialize();
VfDeadlockInitializeResource();
VfDeadlockReleaseResource();
VfDevObjAdjustFdoForVerifierFilters();
VfDevObjIsDeviceRemoved();
VfDevObjMarkDeviceRemoved();
VfDevObjPostAddDevice();
VfDevObjPreAddDevice();
VfDevObjWMIRegistrationControl();
VfDisableHalVerifier();
VfDriverEnableVerifier();
VfDriverEnableVerifierForAll();
VfDriverInitStarting();
VfDriverInitSuccess();
VfDriverLoadBootDrivers();
VfDriverLoadImage();
VfDriverLock();
VfDriverUnloadImage();
VfDriverUnlock();
VfErrorReleaseTriageInformation();
VfErrorReport1();
VfErrorReport10();
VfErrorReport11();
VfErrorReport2();
VfErrorReport3();
VfErrorReport4();
VfErrorReport5();
VfErrorReport6();
VfErrorReport7();
VfErrorReport8();
VfErrorReport9();
VfErrorStoreTriageInformation();
VfFailDeviceNode();
VfFailDriver();
VfFailSystemBIOS();
VfFastIoCheckState();
VfFastIoSnapState();
VfFaultsInitPhase0();
VfFaultsInjectPoolAllocationFailure();
VfFaultsInjectResourceFailure();
VfFaultsIsSystemSufficientlyBooted();
VfFaultsSetParameters();
VfFillAllocatePagesForMdl();
VfFillAllocatedMemory();
VfFilterAttach();
VfFlushAdapterBuffers();
VfFlushAdapterBuffersEx();
VfFreeAdapterChannel();
VfFreeAdapterObject();
VfFreeCapturedUnicodeString();
VfFreeCommonBuffer();
VfFreeMapRegisters();
VfFreeMemoryNotification();
VfFreePoolNotification();
VfGenericInit();
VfGetDmaAdapter();
VfGetDmaAdapterInfo();
VfGetDmaAlignment();
VfGetDmaTransferInfo();
VfGetHookAddressForOriginal();
VfGetScatterGatherList();
VfGetScatterGatherListEx();
VfGetVerifierInformation();
VfGetVerifierInformationEx();
VfHalAllocateMapRegisters();
VfHalDeleteDevice();
VfHalVerifierInitialize();
VfInitBootDriversLoaded();
VfInitPickCurrentRandomTarget();
VfInitSetVerifyDriverTargets();
VfInitSystemNoRebootNeeded();
VfInitVerifierComponents();
VfInitializeBranchTracing();
VfInitializeDmaTransferContext();
VfInsertContext();
VfIoAllocateIrp1();
VfIoAllocateIrp2();
VfIoCompletionCheckState();
VfIoDeleteDevice();
VfIoDetachDevice();
VfIoFreeIrp();
VfIoInitializeIrp();
VfIrpAllocateCallDriverData();
VfIrpDatabaseCheckExFreePool();
VfIrpDatabaseEntryDereference();
VfIrpDatabaseEntryFindAndLock();
VfIrpDatabaseEntryInsertAndLock();
VfIrpDatabaseEntryReleaseLock();
VfIrpDatabaseInit();
VfIrpLogDeleteDeviceLogs();
VfIrpLogInit();
VfIrpLogLockDatabase();
VfIrpLogRecordEvent();
VfIrpLogRetrieveWmiData();
VfIrpLogUnlockDatabase();
VfIrpSendSynchronousIrp();
VfIrpWatermark();
VfIsPCIBus();
VfIsVerificationEnabled();
VfIsVerificationEnabledForImage();
VfIsVerifierEnabled();
VfIsVerifierExtensionEnabled();
VfKeCheckForChanges();
VfKeInsertQueueDpc();
VfKeIrqlLogLower();
VfKeIrqlTransitionReserveLogEntry();
VfKeRemoveQueueDpc();
VfLegacyGetAdapter();
VfLookasideInitializeInternalNPagedList();
VfMajorAdvanceIrpStatus();
VfMajorBuildIrpLogEntry();
VfMajorIsNewRequest();
VfMajorIsValidIrpStatus();
VfMajorRegisterHandlers();
VfMajorTestStartedPdoStack();
VfMajorVerifyFinalIrpStack();
VfMajorVerifyIrpStackDownward();
VfMajorVerifyIrpStackUpward();
VfMajorVerifyNewIrp();
VfMajorVerifyNewRequest();
VfMapTransfer();
VfMapTransferEx();
VfMarkHiberPhase();
VfNotifyOfHibernate();
VfNotifyVerifierExtensions();
VfNotifyVerifierOfEvent();
VfPacketAcquireLock();
VfPacketCreateAndLock();
VfPacketFindAndLock();
VfPacketReference();
VfPacketReleaseLock();
VfPendingCheckForChanges();
VfPendingFinishLogging();
VfPendingInitPhase1();
VfPendingMoreProcessingRequired();
VfPendingStartLogging();
VfPnpAdvanceIrpStatus();
VfPnpDumpIrpStack();
VfPnpInit();
VfPnpIsSystemRestrictedIrp();
VfPnpTestStartedPdoStack();
VfPnpVerifyIrpStackDownward();
VfPnpVerifyIrpStackUpward();
VfPnpVerifyNewRequest();
VfPoolCheckForLeaks();
VfPoolDelayFreeIfPossible();
VfPoolInitPhase0();
VfPoolInitPhase1();
VfPowerDumpIrpStack();
VfPowerInit();
VfPowerIsSystemRestrictedIrp();
VfPowerTestStartedPdoStack();
VfPowerVerifyIrpStackDownward();
VfPowerVerifyIrpStackUpward();
VfPowerVerifyNewRequest();
VfProbeAndCaptureUnicodeString();
VfProbeAndCaptureUnicodeStringBuffer();
VfPutDmaAdapter();
VfPutScatterGatherList();
VfQueryDeviceContext();
VfQueryDispatchTable();
VfQueryDriverContext();
VfQueryIrpContext();
VfQueryThreadContext();
VfRandomGetNumber();
VfReadDmaCounter();
VfRemLockDeleteMemoryRange();
VfRemLockReportBadReleaseAndWaitTag();
VfRemLockReportBadReleaseTag();
VfRemoveContext();
VfRemoveVerifierEntry();
VfReportIssueWithOptions();
VfSetIoBuildRequest();
VfSetVerifierInformation();
VfSetVerifierInformationEx();
VfSetVerifierRunningMode();
VfSettingsApplyMiscellaneousChecks();
VfSettingsCheckForChanges();
VfSettingsMiscellaneousChecksInitPhase1();
VfShutdownScheduleWatchdog();
VfStartBranchTracing();
VfStopBranchTracing();
VfSuspectDriversAdd();
VfSuspectDriversAllocateEntry();
VfSuspectDriversGetVerifierInformation();
VfSuspectDriversInsert();
VfSuspectDriversIsLoaded();
VfSuspectDriversLoadCallback();
VfSuspectDriversParseRegistryString();
VfSuspectDriversRemove();
VfSuspectDriversUnloadCallback();
VfSuspectExcludedDriversAllocateEntry();
VfTargetDriversAdd();
VfTargetDriversEnableVerifier();
VfTargetDriversGetCounters();
VfTargetDriversGetNode();
VfTargetDriversGetVerifierData();
VfTargetDriversGetZeroCounters();
VfTargetDriversInit();
VfTargetDriversIsEnabled();
VfTargetDriversRemove();
VfTargetEtwRegister();
VfTargetEtwUnregister();
VfTargetWMIRegistrationControl();
VfThunkAddDriverThunks();
VfThunkAddTargetNotify();
VfThunkAdjustExportAddressIfHooked();
VfThunkApplyDriverAddedThunks();
VfThunkApplyMandatoryThunks();
VfThunkApplyThunks();
VfThunkEnableKernelVerifier();
VfThunkFindExportAddressAllTables();
VfThunkInit();
VfThunkRemoveTargetNotify();
VfTriageActionTaken();
VfTriageAddDrivers();
VfTriageSystem();
VfUtilAddressRangeAdd();
VfUtilAddressRangeFit();
VfUtilAddressRangeRemove();
VfUtilAddressRangeRemoveCheckEmpty();
VfUtilClearOneBootSettings();
VfUtilDbgPrint();
VfUtilFreePoolCheckIRQL();
VfUtilFreePoolDispatchLevel();
VfUtilIsLocalSystem();
VfUtilPrintCheckinString();
VfUtilSeedStack();
VfUtilSynchronizationObjectSanityChecks();
VfUtilTimeSinceBootInMsecs();
VfWdCheckForSettingsChange();
VfWdInit();
VfWdSetCancelTimeout();
VfWmiDumpIrpStack();
VfWmiTestStartedPdoStack();
VfWmiVerifyIrpStackDownward();
VfWmiVerifyIrpStackUpward();
VfWmiVerifyNewRequest();
VfXdvDriverCaptureIoCallbacks();
VfXdvExcludeParseRegistryString();
VfZwAccessCheckAndAuditAlarm();
VfZwAddBootEntry();
VfZwAddDriverEntry();
VfZwAdjustPrivilegesToken();
VfZwAllocateVirtualMemory();
VfZwAlpcAcceptConnectPort();
VfZwAlpcConnectPort();
VfZwAlpcCreatePort();
VfZwAlpcCreatePortSection();
VfZwAlpcCreateResourceReserve();
VfZwAlpcCreateSectionView();
VfZwAlpcCreateSecurityContext();
VfZwAlpcQueryInformation();
VfZwAlpcSendWaitReceivePort();
VfZwAlpcSetInformation();
VfZwCancelIoFile();
VfZwCancelTimer();
VfZwCloseObjectAuditAlarm();
VfZwCommitEnlistment();
VfZwConnectPort();
VfZwCreateDirectoryObject();
VfZwCreateEnlistment();
VfZwCreateEvent();
VfZwCreateFile();
VfZwCreateJobObject();
VfZwCreateKey();
VfZwCreateSection();
VfZwCreateSymbolicLinkObject();
VfZwCreateTimer();
VfZwCreateTransaction();
VfZwCreateTransactionManager();
VfZwDeleteBootEntry();
VfZwDeleteFile();
VfZwDeleteValueKey();
VfZwDeviceIoControlFile();
VfZwDisplayString();
VfZwDuplicateObject();
VfZwDuplicateToken();
VfZwEnumerateBootEntries();
VfZwEnumerateDriverEntries();
VfZwEnumerateKey();
VfZwEnumerateValueKey();
VfZwFlushInstructionCache();
VfZwFlushVirtualMemory();
VfZwFreeVirtualMemory();
VfZwFsControlFile();
VfZwLoadDriver();
VfZwLoadKey();
VfZwMapViewOfSection();
VfZwModifyBootEntry();
VfZwModifyDriverEntry();
VfZwNotifyChangeKey();
VfZwOpenDirectoryObject();
VfZwOpenEnlistment();
VfZwOpenEvent();
VfZwOpenFile();
VfZwOpenJobObject();
VfZwOpenKey();
VfZwOpenProcess();
VfZwOpenProcessToken();
VfZwOpenProcessTokenEx();
VfZwOpenSection();
VfZwOpenSymbolicLinkObject();
VfZwOpenThread();
VfZwOpenThreadToken();
VfZwOpenThreadTokenEx();
VfZwOpenTimer();
VfZwOpenTransaction();
VfZwOpenTransactionManager();
VfZwPowerInformation();
VfZwPrePrepareEnlistment();
VfZwPrepareComplete();
VfZwPrepareEnlistment();
VfZwPulseEvent();
VfZwQueryBootEntryOrder();
VfZwQueryBootOptions();
VfZwQueryDefaultLocale();
VfZwQueryDefaultUILanguage();
VfZwQueryDirectoryFile();
VfZwQueryDirectoryObject();
VfZwQueryDriverEntryOrder();
VfZwQueryEaFile();
VfZwQueryFullAttributesFile();
VfZwQueryInformationEnlistment();
VfZwQueryInformationFile();
VfZwQueryInformationJobObject();
VfZwQueryInformationProcess();
VfZwQueryInformationThread();
VfZwQueryInformationToken();
VfZwQueryInformationTransaction();
VfZwQueryInformationTransactionManager();
VfZwQueryInstallUILanguage();
VfZwQueryKey();
VfZwQueryLicenseValue();
VfZwQueryObject();
VfZwQuerySection();
VfZwQuerySecurityObject();
VfZwQuerySymbolicLinkObject();
VfZwQuerySystemInformation();
VfZwQueryValueKey();
VfZwQueryVolumeInformationFile();
VfZwReadFile();
VfZwRemoveIoCompletionEx();
VfZwReplaceKey();
VfZwRequestWaitReplyPort();
VfZwResetEvent();
VfZwRestoreKey();
VfZwRollbackEnlistment();
VfZwSetBootEntryOrder();
VfZwSetBootOptions();
VfZwSetDriverEntryOrder();
VfZwSetEaFile();
VfZwSetEvent();
VfZwSetInformationEnlistment();
VfZwSetInformationFile();
VfZwSetInformationJobObject();
VfZwSetInformationObject();
VfZwSetInformationProcess();
VfZwSetInformationThread();
VfZwSetInformationTransaction();
VfZwSetSecurityObject();
VfZwSetSystemInformation();
VfZwSetSystemTime();
VfZwSetTimer();
VfZwSetValueKey();
VfZwSetVolumeInformationFile();
VfZwTranslateFilePath();
VfZwUnloadDriver();
VfZwUnloadKey();
VfZwWaitForMultipleObjects();
VfZwWaitForSingleObject();
VfZwWriteFile();
VhdiGetDiskParameters();
VhdiGetPartitionNumber();
VhdiGetVolumeNumber();
VhdiInitializeBootDisk();
VhdiMountVhdFile();
VhdiQueryVolumeVhdFilePath();
VhdiVerifyBootDisk();
ViAdapterCallback();
ViAllocateContiguousMemory();
ViAllocateFromContiguousMemory();
ViAllocateMapRegisterFile();
ViAllocateMapRegistersFromFile();
ViAvlAcquireTableLockAtDpcLevel();
ViAvlAcquireTableLockAtDpcLevelSafe();
ViAvlAllocateNode();
ViAvlCompareNode();
ViAvlReleaseTableLockFromDpcLevel();
ViAvlTableIndex();
ViCheckAdapterBuffers();
ViCheckMdlLength();
ViCheckPadding();
ViCheckTag();
ViCommonBufferCalculatePadding();
ViCopyBackModifiedBuffer();
ViCopyDeviceDescription();
ViCreateProcessCallback();
ViCreateProcessCallbackInternal();
ViCtxAllocateIsrContext();
ViCtxAllocateXStateContexts();
ViCtxCaptureInitialIsrState();
ViCtxCheckAndReleaseIsrState();
ViCtxEqualExtendedState();
ViCtxIsr();
ViCtxIsrMessageBased();
ViCtxSetPrivateConnectParameters();
ViDdiBuildWmiRegInfoData();
ViDdiDispatchWmi();
ViDdiDispatchWmiQueryAllData();
ViDdiDispatchWmiRegInfoEx();
ViDdiDriverEntry();
ViDeadlockAddParticipant();
ViDeadlockAddResource();
ViDeadlockAddThread();
ViDeadlockAllocate();
ViDeadlockAnalyze();
ViDeadlockCanProceed();
ViDeadlockCertify();
ViDeadlockCheckDuplicatesAmongChildren();
ViDeadlockCheckDuplicatesAmongRoots();
ViDeadlockCheckStackLimits();
ViDeadlockDatabaseHashIndex();
ViDeadlockDetectionApplySettings();
ViDeadlockDetectionLock();
ViDeadlockDetectionUnlock();
ViDeadlockEmptyDatabase();
ViDeadlockForgetResourceHistory();
ViDeadlockFree();
ViDeadlockKernelVerifierLookasideAllocate();
ViDeadlockMergeNodes();
ViDeadlockPopulateLookasideCache();
ViDeadlockPreprocessOptions();
ViDeadlockRemoveNode();
ViDeadlockRemoveResource();
ViDeadlockRemoveThread();
ViDeadlockSearchResource();
ViDeadlockSearchThread();
ViDeadlockSimilarNode();
ViDeadlockSimilarNodes();
ViDeadlockTrimResources();
ViDeadlockUpdateChildrenCount();
ViDevObjAdd();
ViDevObjDelayFreeAvlNode();
ViDevObjRemove();
ViDriverReApplyVerifierForAll();
ViErrorDisableBreak();
ViErrorDisplayDescription();
ViErrorFinishReport();
ViErrorIsBreakDisabled();
ViExAcquireFastMutexCommon();
ViExCheckAPCLevelOrBelow();
ViExCheckAPCsDisabled();
ViExReleaseFastMutexCommon();
ViExTryToAcquireFastMutexCommon();
ViFaultsAddAllApps();
ViFaultsAddAllTags();
ViFaultsAddAppNoDuplicates();
ViFaultsAddTagNoDuplicates();
ViFaultsGetBaseImageName();
ViFaultsInitializeAppsList();
ViFaultsInitializeTagsList();
ViFaultsInjectionNotification();
ViFaultsIsAppTarget();
ViFaultsIsCurrentAppTarget();
ViFaultsIsTagPresentInList();
ViFaultsIsTagTarget();
ViFaultsRemoveAllApps();
ViFaultsRemoveAllTags();
ViFaultsTracesInitialize();
ViFaultsTracesLog();
ViFilterAddDevice();
ViFilterDeviceUsageNotificationCompletion();
ViFilterDispatchGeneric();
ViFilterDispatchPnp();
ViFilterDispatchPower();
ViFilterDriverEntry();
ViFilterGenericCompletionRoutine();
ViFilterIsDeviceExcluded();
ViFilterRemoveNotificationCompletion();
ViFilterStartCompletionRoutine();
ViFindMappedRegisterInFile();
ViFindTriageDriverTargets();
ViFindTriageRule();
ViFlushDoubleBuffer();
ViFlushZeroMapRegisterBaseWcbs();
ViFreeMapRegisterFile();
ViFreeMapRegistersToFile();
ViFreeToContiguousMemory();
ViFreeTrackedPool();
ViGenericAddDevice();
ViGenericBuildIrpLogEntry();
ViGenericCleanup();
ViGenericClose();
ViGenericCreate();
ViGenericCreateMailslot();
ViGenericCreateNamedPipe();
ViGenericDeviceChange();
ViGenericDeviceControl();
ViGenericDirectoryControl();
ViGenericDispatchHandler();
ViGenericDriverEntry();
ViGenericDriverStartIo();
ViGenericDriverUnload();
ViGenericDumpIrpStack();
ViGenericFileSystemControl();
ViGenericFlushBuffers();
ViGenericInternalDeviceControl();
ViGenericIsNewRequest();
ViGenericIsValidIrpStatus();
ViGenericLockControl();
ViGenericPnp();
ViGenericPower();
ViGenericQueryEa();
ViGenericQueryInformation();
ViGenericQueryQuota();
ViGenericQuerySecurity();
ViGenericQueryVolumeInformation();
ViGenericRead();
ViGenericSetEa();
ViGenericSetInformation();
ViGenericSetQuota();
ViGenericSetSecurity();
ViGenericSetVolumeInformation();
ViGenericShutdown();
ViGenericSystemControl();
ViGenericVerifyFinalIrpStack();
ViGenericVerifyIrpStackDownward();
ViGenericVerifyIrpStackUpward();
ViGenericVerifyNewIrp();
ViGenericVerifyNewRequest();
ViGenericWrite();
ViGetAdapterInformation();
ViGetContextPointer();
ViGetMapRegisterFile();
ViGetMdlBufferSa();
ViGetRealDmaOperation();
ViGrowPoolAllocation();
ViHalApplySettings();
ViHalPreprocessOptions();
ViHasBufferBeenTouched();
ViHookDmaAdapter();
ViInitSystemPhase0();
ViInitSystemPhase1();
ViInitializeLocalSystemDescriptor();
ViInitializePadding();
ViIoCallbackSnapState();
ViIrpAllocateLockedPacket();
ViIrpCheckKernelAddressForIrp();
ViIrpDatabaseAcquireLockExclusive();
ViIrpDatabaseAcquireLockShared();
ViIrpDatabaseFindPointer();
ViIrpDatabaseReleaseLockExclusive();
ViIrpDatabaseReleaseLockShared();
ViIrpLogDatabaseFindPointer();
ViIrpLogExposeWmiCallback();
ViIrpSynchronousCompletionRoutine();
ViIsActiveChannelWcb();
ViIsBTSSupported();
ViIsDriverSuspectForVerifier();
ViIsThreadInsidePagingCodePaths();
ViKeInjectStatusAlerted();
ViKeLowerIrqlSanityChecks();
ViKeObjectAcquired();
ViKeRaiseIrqlSanityChecks();
ViLockContextPointer();
ViLookasideAdd();
ViLookasideDelayFreeAvlNode();
ViLookasideDelete();
ViLookasideTrackList();
ViLookasideTrackListEx();
ViLookupThunkArray();
ViMakeVerifierSettings();
ViMapDoubleBuffer();
ViMmMapLockedPagesSanityChecks();
ViMmValidateIrql();
ViPacketFree();
ViPacketNotificationCallback();
ViPendingCompleteAfterWait();
ViPendingCompleteAtDPC();
ViPendingDelayCompletion();
ViPendingQueuePassiveLevelCompletion();
ViPendingWorkerThread();
ViPnpVerifyMinorWasProcessedProperly();
ViPoolDelayFreeTrimThreadRoutine();
ViPoolLogStackCallout();
ViPoolLogStackTrace();
ViPostPoolAllocation();
ViQueryObjectContext();
ViRandomEx();
ViReleaseDmaAdapter();
ViRemLockDelayFreeAvlNode();
ViRemLockDeleteFirstTreeNode();
ViRemLockFindSurrogate();
ViRemoveChannelWcb();
ViResourceAcquireSanityChecks();
ViResourceDelayFreeNode();
ViResourceReleaseSanityChecks();
ViRtlReplaceStringBuffer();
ViScatterGatherCallback();
ViSettingsEnableKernelHandleChecking();
ViSettingsIoCheckForChanges();
ViSetupBTSPerProcNoEnable();
ViShutdownScheduleWatchdog();
ViShutdownWatchdogExecuteDpc();
ViSpecialAllocateCommonBuffer();
ViSpecialFreeCommonBuffer();
ViSuspectDriversLookupEntry();
ViSwap();
ViTagBuffer();
ViTargetAddCountersCallback();
ViTargetAddToCounter();
ViTargetDelayFreeAvlNode();
ViTargetDriversAllocateVerifiedData();
ViTargetFreeContiguousMemory();
ViTargetFreeContiguousMemoryCallback();
ViTargetFreeContiguousMemoryFromNode();
ViTargetIncrementCounter();
ViTargetRemovingCheckContiguousMemory();
ViTargetRemovingCheckEtwWmi();
ViTargetTrackContiguousMemory();
ViTargetUpdateTreeAllowed();
ViTargetWMIDeregister();
ViTargetWMIDeregisterCallback();
ViTargetWMIRegister();
ViThunkAdjustExportAddressIfHooked();
ViThunkApplyMandatoryThunksCurrentSession();
ViThunkApplyThunksCurrentSession();
ViThunkCreateSharedExportInformation();
ViThunkFindAllExportAddresses();
ViThunkFindExportAddress();
ViThunkFreeSharedThunksArray();
ViThunkIsExportAddressShared();
ViThunkReplaceAllSharedExports();
ViThunkReplaceAllThunkedImports();
ViThunkReplaceImportIfThunkedOrderDependent();
ViThunkReplaceImportIfThunkedRegular();
ViThunkReplaceSharedExports();
ViThunkSnapSharedExportByName();
ViThunkSnapSharedExports();
ViTriageSameDriversFromDump();
ViValidateTriageRules();
ViWdBeforeCallDriver();
ViWdBeforeCancelIrp();
ViWdFlushIrpList();
ViWdInsertSortIrp();
ViWdIrpBeforeCompletionRoutine();
ViWdIrpTimedOut();
ViWdIrpTimerDpcRoutine();
ViWdStartTimer();
ViXdvBindXdvDDIWrappers();
ViXdvBindXdvDriverEntryWrappers();
ViXdvDriverLoadImage();
ViXdvGetFuncAddress();
ViXdvSearchAllThunkArrays();
ViXdvSearchAndReplaceNdisThunkArray();
ViXdvSearchAndReplaceThunkArray();
ViXdvSearchAndReplaceThunkArrayOrderDependent();
ViZwCheckAddress();
ViZwCheckApcRequirement();
ViZwCheckObjectAttributes();
ViZwCheckUnicodeString();
ViZwShouldCheck();
WMIInitialize();
WRITE_REGISTER_BUFFER_UCHAR();
WRITE_REGISTER_BUFFER_ULONG();
WRITE_REGISTER_BUFFER_USHORT();
WRITE_REGISTER_UCHAR();
WRITE_REGISTER_ULONG();
WRITE_REGISTER_USHORT();
WRMSR();
WdiDispatchControl();
WdiUpdateSem();
WdipAccessCheck();
WdipSemActivateInstance();
WdipSemAddContextEventToScenario();
WdipSemAddEndEventToScenario();
WdipSemAddScenarioToTable();
WdipSemAllocatePool();
WdipSemBuildScenarioInstance();
WdipSemCaptureState();
WdipSemCleanStart();
WdipSemCleanupGroupPolicy();
WdipSemClearFrequentScenarioTable();
WdipSemClearProviderTable();
WdipSemDeleteTransitionalInstance();
WdipSemDeleteValueFromRegistry();
WdipSemDisableAllProviders();
WdipSemDisableContextProvider();
WdipSemDisableContextProviders();
WdipSemDisableScenario();
WdipSemEnableAllProviders();
WdipSemEnableContextProvider();
WdipSemEnableContextProviders();
WdipSemEnableDisableTrace();
WdipSemEnableScenario();
WdipSemEnableSemProvider();
WdipSemEndScenario();
WdipSemFastAllocate();
WdipSemFastFree();
WdipSemFreeInflightScenarioTable();
WdipSemFreePool();
WdipSemFreeScenario();
WdipSemGetGuidKey();
WdipSemGetLoggerDroppedEventCount();
WdipSemGetLoggerIds();
WdipSemInitialize();
WdipSemInitializeGlobalState();
WdipSemInitializePool();
WdipSemLoadConfigInfo();
WdipSemLoadGroupPolicy();
WdipSemLoadLocalGroupPolicy();
WdipSemLoadNextContextProvider();
WdipSemLoadNextEndEvent();
WdipSemLoadNextScenario();
WdipSemLoadScenarioTable();
WdipSemLogInflightLimitExceededInformation();
WdipSemLogTimeoutInformation();
WdipSemMarkInstanceForDeletion();
WdipSemMarkNextTimedOutInstanceForDeletion();
WdipSemMergeEvents();
WdipSemMergeScenarios();
WdipSemOpenRegistryKey();
WdipSemQueryEnabledInstanceTable();
WdipSemQueryInflightScenarioTable();
WdipSemQueryProviderTable();
WdipSemQueryScenarioTable();
WdipSemQueryValueFromRegistry();
WdipSemReserveInstanceTableEntry();
WdipSemRollBackProviderTable();
WdipSemShutdown();
WdipSemSqmAddToStream();
WdipSemSqmEnabled();
WdipSemSqmIncrementDword();
WdipSemSqmInit();
WdipSemSqmLogInflightLimitExceededDataPoints();
WdipSemSqmLogTimeoutDataPoints();
WdipSemStartScenario();
WdipSemStartTimeoutCheck();
WdipSemUpdate();
WdipSemUpdateFrequentScenarioTable();
WdipSemUpdateInflightScenarioTable();
WdipSemUpdateProviderEntriesForScenario();
WdipSemUpdateProviderEntryForEvent();
WdipSemUpdateProviderTableWithEvent();
WdipSemUpdateProviderTableWithScenario();
WdipSemValidateEndEvent();
WdipSemWriteEvent();
WdipSemWriteInflightLimitExceededEvent();
WdipSemWriteMisconfigEvent();
WdipSemWriteProviderLimitExceededEvent();
WdipSemWriteScenarioLimitExceededEvent();
WdipSemWriteSemActionsEvent();
WdipSemWriteSemFailureEvent();
WdipSemWriteTimeoutEvent();
WdipStartEndScenario();
WdipTimeoutCheckRoutine();
WdipTimeoutDpcRoutine();
WerLiveKernelCancelReport();
WerLiveKernelCloseHandle();
WerLiveKernelCreateReport();
WerLiveKernelInitSystem();
WerLiveKernelOpenDumpFile();
WerLiveKernelSubmitReport();
WheaAddErrorSource();
WheaAttemptPhysicalPageOffline();
WheaConfigureErrorSource();
WheaCrashDumpInitializationComplete();
WheaGetErrPacketFromErrRecord();
WheaGetErrorSource();
WheaInitialize();
WheaInitializeProcessor();
WheaInitializeRecordHeader();
WheaPersistOfflinedPage();
WheaReportHwError();
WheaWmiDispatch();
WheapAddErrorSource();
WheapAddSectionFromGenericErrorData();
WheapAddToDumpFile();
WheapAllocErrorRecord();
WheapApplyPolicyChanges();
WheapApplyThresholdChecks();
WheapAttemptArchitecturalErrorRecovery();
WheapAttemptErrorRecovery();
WheapAttemptPhysicalPageOffline();
WheapAttemptPhysicalPageOfflineWorker();
WheapCheckForAndReportErrorsFromPreviousSession();
WheapCommitPolicy();
WheapCompressErrorRecord();
WheapCountBadPageExtents();
WheapCreateLiveTriageDump();
WheapCreatePerProcessorInfo();
WheapCreateRecordFromGenericErrorData();
WheapCreateTriageDumpFromPreviousSession();
WheapDefaultErrSrcCorrect();
WheapDefaultErrSrcCreateRecord();
WheapDefaultErrSrcInitialize();
WheapDefaultErrSrcRecover();
WheapEtwEnableCallback();
WheapFillOutErrorRecord();
WheapFreeErrorRecord();
WheapGenerateETWEvents();
WheapGetAllPolicyBufferSize();
WheapGetAllPolicyValues();
WheapGetErrorSource();
WheapGetErrorThresholdInformation();
WheapGetPolicyValue();
WheapGetPreallocatedErrorRecord();
WheapGetTimestamp();
WheapInitializeDeferredErrorSources();
WheapInitializeErrorRecordWrapper();
WheapInitializeErrorSource();
WheapInitializeErrorSourceTable();
WheapInitializeEventing();
WheapInitializeWorkQueue();
WheapInsertTriageDataBlock();
WheapIsPageInList();
WheapIsSqmLoggerRegistered();
WheapIsSqmLoggerRunning();
WheapLoadPolicy();
WheapLogInitEvent();
WheapLogPageOfflineAttemptEvent();
WheapPfaCollectSqmData();
WheapPfaMemoryCheck();
WheapPfaReset();
WheapPfaRetireExpiredMemoryEntries();
WheapPlatformDirectedMemoryOffline();
WheapPredictiveFailureAnalysis();
WheapProcessWorkQueueItem();
WheapQueryPshedForErrorSources();
WheapReportBootError();
WheapReportPersistedErrorRecord();
WheapSetDefaultErrorSourceConfiguration();
WheapSetPolicyValue();
WheapSortBadPages();
WheapSqmAddToMemoryOfflineStream();
WheapSqmAddToStream();
WheapSqmCollectPshedPluginTelemetry();
WheapSqmCollectWheaOscTelemetry();
WheapSqmCollectWheaPolicyTelemetry();
WheapSqmDwordCommon();
WheapSqmIncrementDword();
WheapSqmSetDword();
WheapSqmWaitDpcRoutine();
WheapSqmWaitWorkerRoutine();
WheapWmiExecuteErrorInjectionMethod();
WheapWmiExecuteErrorSourceMethod();
WheapWmiExecuteMethod();
WheapWmiExecutePolicyManagementMethod();
WheapWorkQueueAddItem();
WheapWorkQueueDpcRoutine();
WheapWorkQueueWorkerRoutine();
WheapWriteTriageDump();
Win7PsGetVersion();
Win7RtlGetVersion();
Win8PsGetVersion();
Win8RtlGetVersion();
WmiGetClock();
WmiQueryTraceInformation();
WmiQueryTraceProviderCount();
WmiSetNetworkNotify();
WmiTraceMessage();
WmiTraceMessageVa();
WmiTraceRundownNotify();
WmiVerifierCopyEvent();
WmiVerifierTakeEventOwnership();
WmipAddDataSource();
WmipAddMofResource();
WmipAddProviderIdToPIList();
WmipAllocDataSource();
WmipAllocEntry();
WmipAllocGuidEntry();
WmipAllocInstanceSet();
WmipAllocRegEntry();
WmipAllocateSingleInstanceWnode();
WmipBuildInstanceSet();
WmipBuildTraceDeviceList();
WmipCachePtrs();
WmipClearIrpObjectList();
WmipCompleteGuidIrpWithError();
WmipCopyFromEventQueues();
WmipCountedToSz();
WmipCreateAdminSD();
WmipCreateGuidObject();
WmipDSCleanup();
WmipDeleteMethod();
WmipDeliverWnodeToDS();
WmipDereferenceEvent();
WmipDeregisterDevice();
WmipDeregisterRegEntry();
WmipDetermineInstanceBaseIndex();
WmipDisableCollectOrEvent();
WmipDisableCollectionForRemovedGuid();
WmipDoDisableRequest();
WmipDoFindRegEntryByDevice();
WmipDriverEntry();
WmipEnableCollectOrEvent();
WmipEnableCollectionForNewGuid();
WmipEnumerateGuids();
WmipEnumerateMofResources();
WmipEventNotification();
WmipFindDSByProviderId();
WmipFindGEByGuid();
WmipFindGuid();
WmipFindISInDSByGuid();
WmipFindISinGEbyName();
WmipFindMRByNames();
WmipFindRegEntryByDevice();
WmipFindSMBiosStructure();
WmipFindSysIdTable();
WmipFirmwareTableHandler();
WmipForwardWmiIrp();
WmipFreeTraceDeviceList();
WmipGECleanup();
WmipGenerateBinaryMofNotification();
WmipGenerateMofResourceNotification();
WmipGenerateRegistrationNotification();
WmipGetFilePDO();
WmipGetGuidObjectInstanceInfo();
WmipGetGuidPropertiesFromGuidEntry();
WmipGetGuidSecurityDescriptor();
WmipGetSMBiosEventlog();
WmipGetSMBiosFromLoaderBlock();
WmipGetSMBiosTableData();
WmipGetSysIds();
WmipHexStringToDword();
WmipISCleanup();
WmipIncludeStaticNames();
WmipInitializeAllocs();
WmipInitializeDataStructs();
WmipInitializeRegistration();
WmipInitializeSecurity();
WmipInsertMofResource();
WmipInsertStaticNames();
WmipIoControl();
WmipIsEqualInstanceSets();
WmipIsNumber();
WmipIsQuerySetGuid();
WmipLegacyEtwCallback();
WmipLegacyEtwWorker();
WmipLinkDataSourceToList();
WmipLinkInstanceSetToGuidEntry();
WmipMRCleanup();
WmipMangleInstanceName();
WmipNotificationIrpCancel();
WmipOpenBlock();
WmipOpenCloseCleanup();
WmipOpenGuidObject();
WmipParseSysIdTable();
WmipPrepareForWnodeAD();
WmipPrepareWnodeSI();
WmipProbeAndCaptureGuidObjectAttributes();
WmipProbeWmiOpenGuidBlock();
WmipProbeWnodeAllData();
WmipProbeWnodeMethodItem();
WmipProbeWnodeSingleInstance();
WmipProbeWnodeSingleItem();
WmipProbeWnodeWorker();
WmipProcessEvent();
WmipProcessLegacyEtwCallback();
WmipProcessLegacyEtwRegister();
WmipProcessLegacyEtwUnregister();
WmipProcessWmiRegInfo();
WmipQueryAllData();
WmipQueryAllDataMultiple();
WmipQueryGuidInfo();
WmipQuerySetExecuteSI();
WmipQuerySingleMultiple();
WmipQueryWmiDataBlock();
WmipQueryWmiRegInfo();
WmipQueueLegacyEtwWork();
WmipQueueNotification();
WmipQueueRegWork();
WmipRawSMBiosTableHandler();
WmipReceiveNotifications();
WmipReferenceEntry();
WmipRegisterDevice();
WmipRegisterEtwProvider();
WmipRegisterFirmwareProviders();
WmipRegisterOrUpdateDS();
WmipRegistrationWorker();
WmipReleaseCollectionEnabled();
WmipRemoveDS();
WmipSDRegistryQueryRoutine();
WmipSecurityMethod();
WmipSendDisableRequest();
WmipSendEnableDisableRequest();
WmipSendEnableRequest();
WmipSendGuidUpdateNotifications();
WmipSendWmiIrp();
WmipSendWmiIrpToTraceDeviceList();
WmipSetTraceNotify();
WmipStaticInstanceNameSize();
WmipSystemControl();
WmipTranslateFileHandle();
WmipTranslatePDOInstanceNames();
WmipUnlinkInstanceSetFromGuidEntry();
WmipUnreferenceEntry();
WmipUnreferenceRegEntry();
WmipUnregisterEtwProvider();
WmipUpdateAddGuid();
WmipUpdateDataSource();
WmipUpdateDeviceStackSize();
WmipUpdateModifyGuid();
WmipUpdateRegistration();
WmipUuidFromString();
WmipValidateWmiRegInfoString();
WmipWaitForCollectionEnabled();
WmipWmiIrpCompletion();
WmipWriteWnodeToObject();
WriteAMDMsr();
XIPDispatch();
XdvExAllocatePoolInternal();
XdvExInitializeLookasideListExInternal();
XdvExInitializeNPagedLookasideListInternal();
XdvExInitializePagedLookasideListInternal();
XdvIoAllocateIrp();
XdvIoAllocateMdl();
XdvIoAllocateWorkItem();
XdvIoBuildDeviceIoControlRequest();
XdvIoBuildSynchronousFsdRequest();
XdvIopBuildAsynchronousFsdRequest();
XpressBuildHuffmanDecodingTable();
XpressBuildHuffmanEncodings();
XpressDecode();
XpressDecodeClose();
XpressDecodeCreate();
XpressDoHuffmanPass();
ZwAcceptConnectPort();
ZwAccessCheck();
ZwAccessCheckAndAuditAlarm();
ZwAccessCheckByType();
ZwAccessCheckByTypeAndAuditAlarm();
ZwAccessCheckByTypeResultList();
ZwAccessCheckByTypeResultListAndAuditAlarm();
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle();
ZwAddAtom();
ZwAddAtomEx();
ZwAddBootEntry();
ZwAddDriverEntry();
ZwAdjustGroupsToken();
ZwAdjustPrivilegesToken();
ZwAdjustTokenClaimsAndDeviceGroups();
ZwAlertResumeThread();
ZwAlertThread();
ZwAlertThreadByThreadId();
ZwAllocateLocallyUniqueId();
ZwAllocateReserveObject();
ZwAllocateUserPhysicalPages();
ZwAllocateUuids();
ZwAllocateVirtualMemory();
ZwAlpcAcceptConnectPort();
ZwAlpcCancelMessage();
ZwAlpcConnectPort();
ZwAlpcConnectPortEx();
ZwAlpcCreatePort();
ZwAlpcCreatePortSection();
ZwAlpcCreateResourceReserve();
ZwAlpcCreateSectionView();
ZwAlpcCreateSecurityContext();
ZwAlpcDeletePortSection();
ZwAlpcDeleteResourceReserve();
ZwAlpcDeleteSectionView();
ZwAlpcDeleteSecurityContext();
ZwAlpcDisconnectPort();
ZwAlpcImpersonateClientOfPort();
ZwAlpcOpenSenderProcess();
ZwAlpcOpenSenderThread();
ZwAlpcQueryInformation();
ZwAlpcQueryInformationMessage();
ZwAlpcRevokeSecurityContext();
ZwAlpcSendWaitReceivePort();
ZwAlpcSetInformation();
ZwApphelpCacheControl();
ZwAreMappedFilesTheSame();
ZwAssignProcessToJobObject();
ZwAssociateWaitCompletionPacket();
ZwCallbackReturn();
ZwCancelIoFile();
ZwCancelIoFileEx();
ZwCancelSynchronousIoFile();
ZwCancelTimer();
ZwCancelTimer2();
ZwCancelWaitCompletionPacket();
ZwClearEvent();
ZwClose();
ZwCloseObjectAuditAlarm();
ZwCommitComplete();
ZwCommitEnlistment();
ZwCommitTransaction();
ZwCompactKeys();
ZwCompareTokens();
ZwCompleteConnectPort();
ZwCompressKey();
ZwConnectPort();
ZwContinue();
ZwCreateDebugObject();
ZwCreateDirectoryObject();
ZwCreateDirectoryObjectEx();
ZwCreateEnlistment();
ZwCreateEvent();
ZwCreateEventPair();
ZwCreateFile();
ZwCreateIRTimer();
ZwCreateIoCompletion();
ZwCreateJobObject();
ZwCreateJobSet();
ZwCreateKey();
ZwCreateKeyTransacted();
ZwCreateKeyedEvent();
ZwCreateLowBoxToken();
ZwCreateMailslotFile();
ZwCreateMutant();
ZwCreateNamedPipeFile();
ZwCreatePagingFile();
ZwCreatePort();
ZwCreatePrivateNamespace();
ZwCreateProcess();
ZwCreateProcessEx();
ZwCreateProfile();
ZwCreateProfileEx();
ZwCreateResourceManager();
ZwCreateSection();
ZwCreateSemaphore();
ZwCreateSymbolicLinkObject();
ZwCreateThread();
ZwCreateThreadEx();
ZwCreateTimer();
ZwCreateTimer2();
ZwCreateToken();
ZwCreateTokenEx();
ZwCreateTransaction();
ZwCreateTransactionManager();
ZwCreateUserProcess();
ZwCreateWaitCompletionPacket();
ZwCreateWaitablePort();
ZwCreateWnfStateName();
ZwCreateWorkerFactory();
ZwDebugActiveProcess();
ZwDebugContinue();
ZwDelayExecution();
ZwDeleteAtom();
ZwDeleteBootEntry();
ZwDeleteDriverEntry();
ZwDeleteFile();
ZwDeleteKey();
ZwDeleteObjectAuditAlarm();
ZwDeletePrivateNamespace();
ZwDeleteValueKey();
ZwDeleteWnfStateData();
ZwDeleteWnfStateName();
ZwDeviceIoControlFile();
ZwDisableLastKnownGood();
ZwDisplayString();
ZwDrawText();
ZwDuplicateObject();
ZwDuplicateToken();
ZwEnableLastKnownGood();
ZwEnumerateBootEntries();
ZwEnumerateDriverEntries();
ZwEnumerateKey();
ZwEnumerateSystemEnvironmentValuesEx();
ZwEnumerateTransactionObject();
ZwEnumerateValueKey();
ZwExtendSection();
ZwFilterBootOption();
ZwFilterToken();
ZwFilterTokenEx();
ZwFindAtom();
ZwFlushBuffersFile();
ZwFlushBuffersFileEx();
ZwFlushInstallUILanguage();
ZwFlushInstructionCache();
ZwFlushKey();
ZwFlushProcessWriteBuffers();
ZwFlushVirtualMemory();
ZwFlushWriteBuffer();
ZwFreeUserPhysicalPages();
ZwFreeVirtualMemory();
ZwFreezeRegistry();
ZwFreezeTransactions();
ZwFsControlFile();
ZwGetCachedSigningLevel();
ZwGetCompleteWnfStateSubscription();
ZwGetContextThread();
ZwGetCurrentProcessorNumber();
ZwGetDevicePowerState();
ZwGetMUIRegistryInfo();
ZwGetNextProcess();
ZwGetNextThread();
ZwGetNlsSectionPtr();
ZwGetNotificationResourceManager();
ZwGetWriteWatch();
ZwImpersonateAnonymousToken();
ZwImpersonateClientOfPort();
ZwImpersonateThread();
ZwInitializeNlsFiles();
ZwInitializeRegistry();
ZwInitiatePowerAction();
ZwIsProcessInJob();
ZwIsSystemResumeAutomatic();
ZwIsUILanguageComitted();
ZwListenPort();
ZwLoadDriver();
ZwLoadKey();
ZwLoadKey2();
ZwLoadKeyEx();
ZwLockFile();
ZwLockProductActivationKeys();
ZwLockRegistryKey();
ZwLockVirtualMemory();
ZwMakePermanentObject();
ZwMakeTemporaryObject();
ZwMapCMFModule();
ZwMapUserPhysicalPages();
ZwMapUserPhysicalPagesScatter();
ZwMapViewOfSection();
ZwModifyBootEntry();
ZwModifyDriverEntry();
ZwNotifyChangeDirectoryFile();
ZwNotifyChangeKey();
ZwNotifyChangeMultipleKeys();
ZwNotifyChangeSession();
ZwOpenDirectoryObject();
ZwOpenEnlistment();
ZwOpenEvent();
ZwOpenEventPair();
ZwOpenFile();
ZwOpenIoCompletion();
ZwOpenJobObject();
ZwOpenKey();
ZwOpenKeyEx();
ZwOpenKeyTransacted();
ZwOpenKeyTransactedEx();
ZwOpenKeyedEvent();
ZwOpenMutant();
ZwOpenObjectAuditAlarm();
ZwOpenPrivateNamespace();
ZwOpenProcess();
ZwOpenProcessToken();
ZwOpenProcessTokenEx();
ZwOpenResourceManager();
ZwOpenSection();
ZwOpenSemaphore();
ZwOpenSession();
ZwOpenSymbolicLinkObject();
ZwOpenThread();
ZwOpenThreadToken();
ZwOpenThreadTokenEx();
ZwOpenTimer();
ZwOpenTransaction();
ZwOpenTransactionManager();
ZwPlugPlayControl();
ZwPowerInformation();
ZwPrePrepareComplete();
ZwPrePrepareEnlistment();
ZwPrepareComplete();
ZwPrepareEnlistment();
ZwPrivilegeCheck();
ZwPrivilegeObjectAuditAlarm();
ZwPrivilegedServiceAuditAlarm();
ZwPropagationComplete();
ZwPropagationFailed();
ZwProtectVirtualMemory();
ZwPulseEvent();
ZwQueryAttributesFile();
ZwQueryBootEntryOrder();
ZwQueryBootOptions();
ZwQueryDebugFilterState();
ZwQueryDefaultLocale();
ZwQueryDefaultUILanguage();
ZwQueryDirectoryFile();
ZwQueryDirectoryObject();
ZwQueryDriverEntryOrder();
ZwQueryEaFile();
ZwQueryEvent();
ZwQueryFullAttributesFile();
ZwQueryInformationAtom();
ZwQueryInformationEnlistment();
ZwQueryInformationFile();
ZwQueryInformationJobObject();
ZwQueryInformationPort();
ZwQueryInformationProcess();
ZwQueryInformationResourceManager();
ZwQueryInformationThread();
ZwQueryInformationToken();
ZwQueryInformationTransaction();
ZwQueryInformationTransactionManager();
ZwQueryInformationWorkerFactory();
ZwQueryInstallUILanguage();
ZwQueryIntervalProfile();
ZwQueryIoCompletion();
ZwQueryKey();
ZwQueryLicenseValue();
ZwQueryMultipleValueKey();
ZwQueryMutant();
ZwQueryObject();
ZwQueryOpenSubKeys();
ZwQueryOpenSubKeysEx();
ZwQueryPerformanceCounter();
ZwQueryPortInformationProcess();
ZwQueryQuotaInformationFile();
ZwQuerySection();
ZwQuerySecurityAttributesToken();
ZwQuerySecurityObject();
ZwQuerySemaphore();
ZwQuerySymbolicLinkObject();
ZwQuerySystemEnvironmentValue();
ZwQuerySystemEnvironmentValueEx();
ZwQuerySystemInformation();
ZwQuerySystemInformationEx();
ZwQuerySystemTime();
ZwQueryTimer();
ZwQueryTimerResolution();
ZwQueryValueKey();
ZwQueryVirtualMemory();
ZwQueryVolumeInformationFile();
ZwQueryWnfStateData();
ZwQueryWnfStateNameInformation();
ZwQueueApcThread();
ZwQueueApcThreadEx();
ZwRaiseException();
ZwRaiseHardError();
ZwReadFile();
ZwReadFileScatter();
ZwReadOnlyEnlistment();
ZwReadRequestData();
ZwReadVirtualMemory();
ZwRecoverEnlistment();
ZwRecoverResourceManager();
ZwRecoverTransactionManager();
ZwRegisterProtocolAddressInformation();
ZwRegisterThreadTerminatePort();
ZwReleaseKeyedEvent();
ZwReleaseMutant();
ZwReleaseSemaphore();
ZwReleaseWorkerFactoryWorker();
ZwRemoveIoCompletion();
ZwRemoveIoCompletionEx();
ZwRemoveProcessDebug();
ZwRenameKey();
ZwRenameTransactionManager();
ZwReplaceKey();
ZwReplacePartitionUnit();
ZwReplyPort();
ZwReplyWaitReceivePort();
ZwReplyWaitReceivePortEx();
ZwReplyWaitReplyPort();
ZwRequestPort();
ZwRequestWaitReplyPort();
ZwResetEvent();
ZwResetWriteWatch();
ZwRestoreKey();
ZwResumeProcess();
ZwResumeThread();
ZwRollbackComplete();
ZwRollbackEnlistment();
ZwRollbackTransaction();
ZwRollforwardTransactionManager();
ZwSaveKey();
ZwSaveKeyEx();
ZwSaveMergedKeys();
ZwSecureConnectPort();
ZwSerializeBoot();
ZwSetBootEntryOrder();
ZwSetBootOptions();
ZwSetCachedSigningLevel();
ZwSetContextThread();
ZwSetDebugFilterState();
ZwSetDefaultHardErrorPort();
ZwSetDefaultLocale();
ZwSetDefaultUILanguage();
ZwSetDriverEntryOrder();
ZwSetEaFile();
ZwSetEvent();
ZwSetEventBoostPriority();
ZwSetHighEventPair();
ZwSetHighWaitLowEventPair();
ZwSetIRTimer();
ZwSetInformationDebugObject();
ZwSetInformationEnlistment();
ZwSetInformationFile();
ZwSetInformationJobObject();
ZwSetInformationKey();
ZwSetInformationObject();
ZwSetInformationProcess();
ZwSetInformationResourceManager();
ZwSetInformationThread();
ZwSetInformationToken();
ZwSetInformationTransaction();
ZwSetInformationTransactionManager();
ZwSetInformationVirtualMemory();
ZwSetInformationWorkerFactory();
ZwSetIntervalProfile();
ZwSetIoCompletion();
ZwSetIoCompletionEx();
ZwSetLdtEntries();
ZwSetLowEventPair();
ZwSetLowWaitHighEventPair();
ZwSetQuotaInformationFile();
ZwSetSecurityObject();
ZwSetSystemEnvironmentValue();
ZwSetSystemEnvironmentValueEx();
ZwSetSystemInformation();
ZwSetSystemPowerState();
ZwSetSystemTime();
ZwSetThreadExecutionState();
ZwSetTimer();
ZwSetTimer2();
ZwSetTimerEx();
ZwSetTimerResolution();
ZwSetUuidSeed();
ZwSetValueKey();
ZwSetVolumeInformationFile();
ZwSetWnfProcessNotificationEvent();
ZwShutdownSystem();
ZwShutdownWorkerFactory();
ZwSignalAndWaitForSingleObject();
ZwSinglePhaseReject();
ZwStartProfile();
ZwStopProfile();
ZwSubscribeWnfStateChange();
ZwSuspendProcess();
ZwSuspendThread();
ZwSystemDebugControl();
ZwTerminateJobObject();
ZwTerminateProcess();
ZwTerminateThread();
ZwTestAlert();
ZwThawRegistry();
ZwThawTransactions();
ZwTraceControl();
ZwTraceEvent();
ZwTranslateFilePath();
ZwUmsThreadYield();
ZwUnloadDriver();
ZwUnloadKey();
ZwUnloadKey2();
ZwUnloadKeyEx();
ZwUnlockFile();
ZwUnlockVirtualMemory();
ZwUnmapViewOfSection();
ZwUnmapViewOfSectionEx();
ZwUnsubscribeWnfStateChange();
ZwUpdateWnfStateData();
ZwVdmControl();
ZwWaitForAlertByThreadId();
ZwWaitForDebugEvent();
ZwWaitForKeyedEvent();
ZwWaitForMultipleObjects();
ZwWaitForMultipleObjects32();
ZwWaitForSingleObject();
ZwWaitForWorkViaWorkerFactory();
ZwWaitHighEventPair();
ZwWaitLowEventPair();
ZwWorkerFactoryWorkerReady();
ZwWriteFile();
ZwWriteFileGather();
ZwWriteRequestData();
ZwWriteVirtualMemory();
ZwYieldExecution();
_87except();
_CIcos();
_CIcos_default();
_CIsin();
_CIsin_default();
_CIsqrt();
_CmAddDeviceToContainer();
_CmAddDeviceToContainerWorker();
_CmClassFilterCallback();
_CmClassSubkeyCallback();
_CmContainerListGenericObjectCallback();
_CmCreateDevice();
_CmCreateDeviceContainer();
_CmCreateDeviceContainerWorker();
_CmCreateDeviceInterface();
_CmCreateDeviceInterfaceWorker();
_CmCreateDeviceWorker();
_CmCreateInstallerClass();
_CmCreateInstallerClassWorker();
_CmCreateInterfaceClass();
_CmCreateInterfaceClassWorker();
_CmCreateOrdinalInstanceKey();
_CmDeleteCommonClassRegKey();
_CmDeleteCommonClassRegKeyWorker();
_CmDeleteDevice();
_CmDeleteDeviceContainer();
_CmDeleteDeviceContainerRegKey();
_CmDeleteDeviceContainerRegKeyWorker();
_CmDeleteDeviceContainerWorker();
_CmDeleteDeviceInterface();
_CmDeleteDeviceInterfaceMappedPropertyFromRegValue();
_CmDeleteDeviceInterfaceRegKey();
_CmDeleteDeviceInterfaceRegKeyWorker();
_CmDeleteDeviceInterfaceWorker();
_CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues();
_CmDeleteDeviceMappedPropertyFromDriverKeyRegValue();
_CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue();
_CmDeleteDeviceRegKey();
_CmDeleteDeviceRegKeyWorker();
_CmDeleteDeviceWorker();
_CmDeleteInstallerClass();
_CmDeleteInstallerClassMappedPropertyFromCoInstallers();
_CmDeleteInstallerClassMappedPropertyFromRegValue();
_CmDeleteInstallerClassRegKey();
_CmDeleteInstallerClassWorker();
_CmDeleteInterfaceClass();
_CmDeleteInterfaceClassMappedPropertyFromRegValue();
_CmDeleteInterfaceClassRegKey();
_CmDeleteInterfaceClassWorker();
_CmDeviceClassesSubkeyCallback();
_CmEnumDevicesInContainerWithCallback();
_CmEnumDevicesInContainerWithCallbackWorker();
_CmEnumSubkeyCallback();
_CmGetAdminAccessSecurityDescriptor();
_CmGetCommonClassRegKeyPath();
_CmGetContainerBooleanProperty();
_CmGetContainerBooleanPropertyCallback();
_CmGetDeviceChildren();
_CmGetDeviceContainerIdFromBase();
_CmGetDeviceContainerMappedProperty();
_CmGetDeviceContainerMappedPropertyKeys();
_CmGetDeviceContainerMappedPropertyLocales();
_CmGetDeviceContainerRegKeyPath();
_CmGetDeviceControlKeyPath();
_CmGetDeviceHardwareKeyPath();
_CmGetDeviceInstanceKeyPath();
_CmGetDeviceInterfaceClassGuid();
_CmGetDeviceInterfaceClassGuidString();
_CmGetDeviceInterfaceMappedProperty();
_CmGetDeviceInterfaceMappedPropertyFromComposite();
_CmGetDeviceInterfaceMappedPropertyFromRegValue();
_CmGetDeviceInterfaceMappedPropertyKeys();
_CmGetDeviceInterfaceMappedPropertyLocales();
_CmGetDeviceInterfaceName();
_CmGetDeviceInterfacePathFormat();
_CmGetDeviceInterfaceReferenceString();
_CmGetDeviceInterfaceRegKeyPath();
_CmGetDeviceInterfaceSubkeyPath();
_CmGetDeviceInterfaceSymbolicLinkName();
_CmGetDeviceLogConfKeyPath();
_CmGetDeviceMappedProperty();
_CmGetDeviceMappedPropertyFromComposite();
_CmGetDeviceMappedPropertyFromInstanceKeyRegValue();
_CmGetDeviceMappedPropertyFromRegProp();
_CmGetDeviceMappedPropertyKeys();
_CmGetDeviceMappedPropertyLocales();
_CmGetDeviceParent();
_CmGetDeviceRegKeyPath();
_CmGetDeviceRegProp();
_CmGetDeviceRegPropWorker();
_CmGetDeviceRelationsList();
_CmGetDeviceSiblings();
_CmGetDeviceSoftwareKey();
_CmGetDeviceSoftwareKeyPath();
_CmGetDeviceStatus();
_CmGetDevicesInBaseContainerList();
_CmGetInstallerClassMappedProperty();
_CmGetInstallerClassMappedPropertyFromCoInstallers();
_CmGetInstallerClassMappedPropertyFromComposite();
_CmGetInstallerClassMappedPropertyFromRegProp();
_CmGetInstallerClassMappedPropertyFromRegValue();
_CmGetInstallerClassMappedPropertyKeys();
_CmGetInstallerClassMappedPropertyLocales();
_CmGetInstallerClassRegProp();
_CmGetInstallerClassRegPropWorker();
_CmGetInterfaceClassMappedProperty();
_CmGetInterfaceClassMappedPropertyFromComposite();
_CmGetInterfaceClassMappedPropertyFromRegValue();
_CmGetInterfaceClassMappedPropertyKeys();
_CmGetInterfaceClassMappedPropertyLocales();
_CmGetMatchingCommonClassList();
_CmGetMatchingCommonClassListWorker();
_CmGetMatchingDeviceContainerList();
_CmGetMatchingDeviceContainerListWorker();
_CmGetMatchingDeviceInterfaceList();
_CmGetMatchingDeviceInterfaceListWorker();
_CmGetMatchingDeviceList();
_CmGetMatchingDeviceListForSubkey();
_CmGetMatchingDeviceListWorker();
_CmGetMatchingFilteredDeviceInterfaceList();
_CmGetMatchingFilteredDeviceInterfaceListWorker();
_CmGetMatchingFilteredDeviceList();
_CmGetMatchingFilteredDeviceListWorker();
_CmGetMatchingInstallerClassList();
_CmGetMatchingInterfaceClassList();
_CmIsDeviceInContainer();
_CmIsDeviceInterfaceEnabled();
_CmIsDevicePresent();
_CmIsDeviceRegPropWritable();
_CmIsDeviceSafeRemovalRequired();
_CmIsInstallerClassRegPropWritable();
_CmIsLocalMachineContainer();
_CmIsRootDevice();
_CmIsRootEnumeratedDevice();
_CmMapCmObjectTypeToPnpObjectType();
_CmMapPropertyKeyToRegProp();
_CmMapRegPropToPropertyKey();
_CmMatchLastKnownParentCallback();
_CmMoveBaseContainer();
_CmOpenCommonClassRegKey();
_CmOpenCommonClassRegKeyWorker();
_CmOpenDeviceContainerRegKey();
_CmOpenDeviceContainerRegKeyWorker();
_CmOpenDeviceInterfaceRegKey();
_CmOpenDeviceInterfaceRegKeyWorker();
_CmOpenDeviceRegKey();
_CmOpenDeviceRegKeyWorker();
_CmOpenInstallerClassRegKey();
_CmOpenInterfaceClassRegKey();
_CmRaiseCreateEvent();
_CmRaiseDeleteEvent();
_CmRaisePropertyChangeEvent();
_CmRemoveDeviceFromContainer();
_CmRemoveDeviceFromContainerWorker();
_CmServiceFilterCallback();
_CmSetDeviceContainerMappedProperty();
_CmSetDeviceInterfaceMappedProperty();
_CmSetDeviceInterfaceMappedPropertyFromRegValue();
_CmSetDeviceInterfacePathFormat();
_CmSetDeviceMappedProperty();
_CmSetDeviceMappedPropertyFromDriverKeyRegValue();
_CmSetDeviceMappedPropertyFromInstanceKeyRegValue();
_CmSetDeviceMappedPropertyFromRegProp();
_CmSetDeviceRegProp();
_CmSetDeviceRegPropWorker();
_CmSetInstallerClassMappedProperty();
_CmSetInstallerClassMappedPropertyFromCoInstallers();
_CmSetInstallerClassMappedPropertyFromRegProp();
_CmSetInstallerClassMappedPropertyFromRegValue();
_CmSetInstallerClassRegProp();
_CmSetInstallerClassRegPropWorker();
_CmSetInterfaceClassMappedProperty();
_CmSetInterfaceClassMappedPropertyFromRegValue();
_CmValidateDeviceContainerName();
_CmValidateDeviceInterfaceName();
_CmValidateDeviceName();
_CmValidateInstallerClassName();
_CmValidateInterfaceClassName();
_EH4_CallFilterFunc();
_EH4_GlobalUnwind();
_EH4_LocalUnwind();
_EH4_TransferToHandler();
_FinalExceptionHandler();
_GetBaseTypeSize();
_IsFixedSizeType();
_IsNeutralLocale();
_MapCmClassPropertyToRegType();
_MapCmClassPropertyToRegValue();
_MapCmDevicePropertyToNtProperty();
_MapCmDevicePropertyToRegType();
_MapCmDevicePropertyToRegValue();
_MapCmRelationTypeToNtRelationType();
_NLG_Call();
_NLG_Dispatch();
_NLG_Dispatch2();
_NLG_Notify();
_NLG_Notify1();
_NLG_Return2();
_NtPlugPlayGetDeviceInterfaceEnabled();
_NtPlugPlayGetDeviceProperty();
_NtPlugPlayGetDeviceRelatedDevice();
_NtPlugPlayGetDeviceRelationsList();
_NtPlugPlayGetDeviceStatus();
_ObReferenceObjectByHandle();
_PnpCmMatchCallbackRoutine();
_PnpContainerRaiseDevicesChangedEvent();
_PnpCreateObject();
_PnpCreateObjectDispatch();
_PnpCtxGetCachedContextBaseKey();
_PnpCtxGetNtPlugPlayRoutine();
_PnpCtxGetObjectContext();
_PnpCtxGetObjectDispatchCallback();
_PnpCtxOpenContextBaseKey();
_PnpCtxOpenEffectiveToken();
_PnpCtxOpenMachine();
_PnpCtxRegCloseKey();
_PnpCtxRegCopyTree();
_PnpCtxRegCreateKey();
_PnpCtxRegCreateTree();
_PnpCtxRegDeleteKey();
_PnpCtxRegDeleteTree();
_PnpCtxRegDeleteValue();
_PnpCtxRegEnumKey();
_PnpCtxRegEnumKeyWithCallback();
_PnpCtxRegOpenCurrentUserKey();
_PnpCtxRegOpenKey();
_PnpCtxRegQueryValue();
_PnpCtxRegQueryValueIndirect();
_PnpCtxRegSetValue();
_PnpCtxSetNtPlugPlayRoutine();
_PnpDeleteObject();
_PnpDeleteObjectDispatch();
_PnpDeletePropertyWorker();
_PnpDeviceRaisePropertyChangeEventWorker();
_PnpDispatchDevice();
_PnpDispatchDeviceContainer();
_PnpDispatchDeviceInterface();
_PnpDispatchInstallerClass();
_PnpDispatchInterfaceClass();
_PnpGetEnumSecurityDescriptor();
_PnpGetGenericObjectList();
_PnpGetGenericStoreProperty();
_PnpGetGenericStorePropertyKeys();
_PnpGetGenericStorePropertyLocales();
_PnpGetMappedPropertyDispatch();
_PnpGetMappedPropertyKeysDispatch();
_PnpGetMappedPropertyLocalesDispatch();
_PnpGetObjectList();
_PnpGetObjectListDispatch();
_PnpGetObjectProperty();
_PnpGetObjectPropertyKeys();
_PnpGetObjectPropertyKeysWorker();
_PnpGetObjectPropertyLocales();
_PnpGetObjectPropertyLocalesWorker();
_PnpGetObjectPropertyWorker();
_PnpGetPropertiesSecurityDescriptor();
_PnpHasDerivedKeys();
_PnpInstallerClassRaisePropertyChangeEventWorker();
_PnpInterfaceClassRaisePropertyChangeEventWorker();
_PnpInterfaceRaisePropertyChangeEventWorker();
_PnpIsIndirectInfString();
_PnpIsIndirectResourceString();
_PnpIsNullGuidString();
_PnpIsValidGuidString();
_PnpMapCmStatusToDispatchStatus();
_PnpMultiSzAppend();
_PnpMultiSzDeleteString();
_PnpMultiSzGetLen();
_PnpNotifyDerivedKeys();
_PnpObjectListCallback();
_PnpObjectRaiseCreateEvent();
_PnpObjectRaiseDeleteEvent();
_PnpObjectRaisePropertyChangeEvent();
_PnpOpenObjectRegKey();
_PnpOpenObjectRegKeyDispatch();
_PnpOpenPropertiesKey();
_PnpParseIndirectInfString();
_PnpParseIndirectResourceString();
_PnpRaiseNtPlugPlayDevicePropertyChangeEvent();
_PnpRaiseNtPlugPlayInterfacePropertyChangeEvent();
_PnpRegQueryValueIndirect();
_PnpSetGenericStoreProperty();
_PnpSetMappedPropertyDispatch();
_PnpSetObjectProperty();
_PnpSetObjectPropertyWorker();
_PnpSetPropertyWorker();
_PnpStringFromGuid();
_PnpUpdateInterfacesCallback();
_PnpValidateObjectName();
_PnpValidateObjectNameDispatch();
_PnpValidatePropertyData();
_PopInternalError();
_RegRtlCloseKey();
_RegRtlCopyTreeInternal();
_RegRtlCreateKeyTransacted();
_RegRtlCreateTreeTransacted();
_RegRtlDeleteKeyTransacted();
_RegRtlDeleteTreeInternal();
_RegRtlEnumKey();
_RegRtlEnumValue();
_RegRtlIsPredefinedKey();
_RegRtlOpenKeyTransacted();
_RegRtlOpenPredefinedKey();
_RegRtlQueryInfoKey();
_RegRtlQueryValue();
_RegRtlSetValue();
_RtlEnlargedIntegerMultiply();
_RtlEnlargedUnsignedDivide();
_RtlEnlargedUnsignedMultiply();
_RtlMuiRegAddLIPParent();
_RtlpMuiRegAddBaseLanguage();
_RtlpMuiRegAddNeutralLanguage();
_RtlpMuiRegInitAnyLanguage();
_RtlpMuiRegInitLIPLanguage();
_RtlpMuiRegInitPartialLanguage();
_RtlpMuiRegPopulateBaseLanguages();
_RtlpMuiRegSerializeRegistryInfo();
_RtlpMuiRegValidateAndGetInstallFallbackBase();
_RtlpRemovePendingDeleteLanguages();
_SEH_epilog4();
_SEH_epilog4_GS();
_SEH_prolog4();
_SEH_prolog4_GS();
_SysCtxCloseMachine();
_SysCtxGetCachedContextBaseKey();
_SysCtxOpenControlSet();
_SysCtxOpenMachine();
_SysCtxRegCreateKey();
_SysCtxRegCreateTree();
_SysCtxRegOpenCurrentUserKey();
_SysCtxRegOpenKey();
_ValidateEH3RN();
__InterlockedCompareExchange();
__InterlockedDecrement();
__InterlockedExchangeAdd();
__InterlockedIncrement();
__RtlConvertLongToLargeInteger();
__RtlConvertUlongToLargeInteger();
__ascii_memicmp();
__ascii_stricmp();
__ascii_strnicmp();
__from_strstr_to_strchr();
__isascii();
__pctype_func();
__report_gsfailure();
__report_rangecheckfailure();
__security_check_cookie();
_abnormal_termination();
_alldiv();
_alldvrm();
_allmul();
_alloca_probe();
_alloca_probe_16();
_alloca_probe_8();
_allrem();
_allshl();
_allshr();
_atoi64();
_aulldiv();
_aulldvrm();
_aullrem();
_aullshr();
_checkTOS_withFB();
_check_overflow_exit();
_check_range_exit();
_chkstk();
_clrfp();
_convertTOStoQNaN();
_cos_default();
_ctrlfp();
_decomp();
_except_handler2();
_except_handler3();
_except_handler4();
_fast_exit();
_fgetwc_nolock();
_filbuf_s();
_filwbuf_s();
_fload_withFB();
_flsbuf();
_flsbuf_s();
_flswbuf();
_fputwc_nolock();
_get_printf_count_output();
_global_unwind2();
_guard_check_icall_nop();
_handle_exc();
_i64toa_s();
_i64tow_s();
_input_s();
_invalid_parameter();
_iswctype_l();
_itoa();
_itoa_s();
_itow();
_itow_s();
_load_CW();
_local_unwind2();
_local_unwind4();
_ltoa_s();
_ltow_s();
_makepath_s();
_math_exit();
_matherr();
_mbstrlen();
_memicmp();
_nan2();
_nosnan2();
_output_l();
_output_s();
_purecall();
_raise_exc();
_raise_exc_ex();
_rtchsifneg();
_rtindfnpop();
_rtindfpop();
_rtnospop();
_rtnospopde();
_rtonenpop();
_rtonepop();
_rttosnpop();
_rttosnpopde();
_rttospop();
_rttospopde();
_rtzeronpop();
_rtzeropop();
_safecrt_mbtowc();
_safecrt_wctomb_s();
_seh_longjmp_unwind();
_seh_longjmp_unwind4();
_set_errno_from_matherr();
_set_exp();
_set_statfp();
_sin_default();
_sinput_s();
_snprintf();
_snprintf_s();
_snscanf_s();
_snwprintf();
_snwprintf_s();
_snwscanf_s();
_soutput_s();
_splitpath_s();
_startOneArgErrorHandling();
_startTwoArgErrorHandling();
_statfp();
_stricmp();
_strlwr();
_strnicmp();
_strnset();
_strnset_s();
_strrev();
_strset();
_strset_s();
_strtoi64();
_strtoui64();
_strupr();
_swinput_s();
_swoutput_s();
_swprintf();
_tosnan1();
_tosnan2();
_trandisp1();
_trandisp2();
_twoToTOS();
_ui64toa_s();
_ui64tow_s();
_ultoa_s();
_ultow();
_ultow_s();
_ungetc_nolock();
_ungetwc_nolock();
_vsnprintf();
_vsnprintf_l();
_vsnprintf_s();
_vsnwprintf();
_vsnwprintf_l();
_vsnwprintf_s();
_vsprintf_l();
_vswprintf();
_vswprintf_l();
_wchartodigit();
_wcsicmp();
_wcsistr();
_wcslwr();
_wcsnicmp();
_wcsnset();
_wcsnset_s();
_wcsrev();
_wcsset_s();
_wcstoi64();
_wcsupr();
_wctomb_s_l();
_winput_s();
_wmakepath_s();
_woutput_l();
_woutput_s();
_wsplitpath_s();
_wtoi();
_wtol();
adapt();
atoi();
atol();
bsearch();
bsearch_s();
cos();
decode_digit();
ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer();
ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject();
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile();
ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer();
ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn();
ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid();
ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy();
ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord();
ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea();
ext_ms_win_fs_clfs_l1_1_0_ClfsRemoveLogContainer();
ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog();
ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog();
ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea();
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig();
ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig();
ext_ms_win_ntos_ksecurity_l1_1_1_AppContainerPrivilegesEnabledExt();
ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt();
ext_ms_win_ntos_ksigningpolicy_l1_1_0_SeQuerySigningPolicyExt();
ext_ms_win_ntos_ksr_l1_1_0_KsrCleanupPageDatabase();
ext_ms_win_ntos_ksr_l1_1_0_KsrInitPageDatabase();
ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete();
ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject();
ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions();
ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete();
ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation();
ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction();
ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject();
ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions();
ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest();
ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete();
ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey();
ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks();
ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest();
ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions();
ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId();
ext_ms_win_ntos_tm_l1_1_0_TmInitSystem();
ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2();
ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator();
ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive();
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete();
ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed();
ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager();
ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey();
ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager();
ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment();
ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction();
ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem();
ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject();
ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCancelReport();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCloseHandle();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelCreateReport();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelInitSystem();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelOpenDumpFile();
ext_ms_win_ntos_werkernel_l1_1_0_WerLiveKernelSubmitReport();
isdigit();
islower();
isprint();
isspace();
isupper();
iswctype();
iswdigit();
isxdigit();
mbstowcs();
mbtowc();
memchr();
memcmp();
memcpy();
memcpy_s();
memmove();
memmove_s();
memset();
pIoQueryBusDescription();
pIoQueryDeviceDescription();
punycode_decode();
punycode_encode();
qsort();
rand();
regValue();
sin();
sprintf();
sprintf_s();
sqrt();
srand();
sscanf_s();
strcat();
strcat_s();
strchr();
strcmp();
strcpy();
strcpy_s();
strlen();
strncat();
strncat_s();
strncmp();
strncpy();
strncpy_s();
strnlen();
strrchr();
strspn();
strstr();
strtok_s();
strtol();
strtolX();
strtoul();
swprintf();
swprintf_s();
swscanf_s();
tcpxsum();
tolower();
toupper();
towlower();
towupper();
vDbgPrintEx();
vDbgPrintExWithPrefix();
vDbgPrintExWithPrefixInternal();
vdmDebugPoint();
vsprintf();
vsprintf_s();
vswprintf_s();
wcscat();
wcscat_s();
wcschr();
wcscmp();
wcscpy();
wcscpy_s();
wcscspn();
wcslen();
wcsncat();
wcsncat_s();
wcsncmp();
wcsncpy();
wcsncpy_s();
wcsnlen();
wcspbrk();
wcsrchr();
wcsspn();
wcsstr();
wcstol();
wcstolX();
wcstombs();
wcstoul();
wctomb();
wctomb_s();
xHalAcpiAoacCapable();
xHalAcpiGetMultiNode();
xHalAddInterruptRemapping();
xHalAllocateGsivForSecondaryInterrupt();
xHalAllocateMapRegisters();
xHalAllocateMessageTarget();
xHalAllocatePmcCounterSet();
xHalAssignSlotResources();
xHalClockTimerActivate();
xHalClockTimerArm();
xHalClockTimerInitialize();
xHalClockTimerStop();
xHalCollectPmcCounters();
xHalDmaFreeCrashDumpRegisters();
xHalDpGetInterruptReplayState();
xHalDpMaskLevelTriggeredInterrupts();
xHalDpReplaceBegin();
xHalDpReplaceControl();
xHalDpReplaceEnd();
xHalDpReplaceTarget();
xHalDpReplayInterrupts();
xHalDpUnmaskLevelTriggeredInterrupts();
xHalEndMirroring();
xHalEndOfBoot();
xHalEnumerateUnmaskedInterrupts();
xHalFlushAndInvalidatePageExternalCache();
xHalFlushExternalCache();
xHalFlushIoBuffersExternalCache();
xHalFlushIoRectangleExternalCache();
xHalFreeMessageTarget();
xHalFreePmcCounterSet();
xHalGetClockConfiguration();
xHalGetInterruptTranslator();
xHalGetInterruptVector();
xHalGetPartialGeometry();
xHalGetProcessorId();
xHalGetVectorInput();
xHalHaltSystem();
xHalHandlerForBus();
xHalInitPnpDriver();
xHalInitPowerManagement();
xHalInterruptSetDestination();
xHalIommuAccessFault();
xHalIommuDismissPageFault();
xHalIommuEnableDevice();
xHalIommuFlushTb();
xHalIommuFreeAsid();
xHalIommuGetConfiguration();
xHalIommuGetPageFault();
xHalIommuInitialize();
xHalIommuLocateFromDevice();
xHalIommuMapDevice();
xHalIommuRegisterDispatchTable();
xHalIommuSupportEnabled();
xHalLoadMicrocode();
xHalLocateHiberRanges();
xHalMaskInterrupt();
xHalMirrorPhysicalMemory();
xHalMirrorVerify();
xHalNotifyProcessorFreeze();
xHalPciEarlyRestore();
xHalPciMarkHiberPhase();
xHalPciMultiStageResumeCapable();
xHalPostMicrocodeUpdate();
xHalPowerEarlyRestore();
xHalPowerSetRebootHandler();
xHalPrepareForBugcheck();
xHalPrepareProcessorForIdle();
xHalProcessorHalt();
xHalQueryBusSlots();
xHalQueryCapsuleCapabilities();
xHalQueryIoPortAccessSupported();
xHalQueryProcessorRestartEntryPoint();
xHalQuerySystemInformation();
xHalQueryWakeTime();
xHalReadWheaPhysicalMemory();
xHalReferenceHandler();
xHalRegisterBusHandler();
xHalRegisterLogRoutine();
xHalRemoveInterruptRemapping();
xHalReportIdleStateUsage();
xHalRequestInterrupt();
xHalRestoreHvEnlightenment();
xHalResumeProcessorFromIdle();
xHalSaveAndDisableHvEnlightenment();
xHalSecondaryInterruptQueryPrimaryInformation();
xHalSetSystemInformation();
xHalSetWakeAlarm();
xHalStartMirroring();
xHalStopLegacyUsbInterrupts();
xHalTimerOnlyClockInterruptPending();
xHalTimerQueryCycleCounter();
xHalTimerWatchdogGeneratedLastReset();
xHalTimerWatchdogResetCountdown();
xHalTimerWatchdogStart();
xHalTimerWatchdogStop();
xHalTimerWatchdogTriggerSystemReset();
xHalTranslateBusAddress();
xHalTscSynchronization();
xHalUnloadMicrocode();
xHalUnmaskInterrupt();
xHalUpdateCapsule();
xHalVectorToIDTEntry();
xHalVectorToIDTEntryEx();
xHalWheaInitProcessorGenericSection();
xHalWriteWheaPhysicalMemory();
xHalpIsInterruptTypeSecondary();
xKdCheckPowerButton();
xKdEnumerateDebuggingDevices();
xKdGetAcpiTablePhase0();
xKdMapPhysicalMemory64();
xKdReleaseIntegratedDeviceForDebugging();
xKdReleasePciDeviceForDebugging();
xKdSetupIntegratedDeviceForDebugging();
xKdSetupPciDeviceForDebugging();
xKdUnmapVirtualAddress();
