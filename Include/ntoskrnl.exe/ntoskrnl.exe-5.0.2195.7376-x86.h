struct BATTERY_NOTIFY;
struct CMP_OFFSET_ARRAY;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct PCI_CONFIGURATOR;
struct PCI_FUNCTION_RESOURCES;
struct PCI_POWER_STATE;
struct PCI_SECONDARY_EXTENSION;
struct PROCESSOR_IDLE_TIMES;
struct ROUTING_TOKEN;
struct _ACCESS_STATE;
struct _ACL;
struct _ALPHA_LOADER_BLOCK;
struct _ARBITER_ALLOCATION_STATE;
struct _ARBITER_ALTERNATIVE;
struct _ARBITER_CONFLICT_INFO;
struct _ARBITER_INSTANCE;
struct _ARBITER_INTERFACE;
struct _ARBITER_LIST_ENTRY;
struct _ARBITER_ORDERING;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_PARAMETERS;
struct _ARC_DISK_INFORMATION;
struct _BATTERY_STATUS;
struct _BITMAP_RANGE;
struct _BUS_EXTENSION_LIST;
struct _BUS_HANDLER;
struct _CACHED_CHILD_LIST;
struct _CACHE_MANAGER_CALLBACKS;
struct _CACHE_UNINITIALIZE_EVENT;
struct _CALL_HASH_ENTRY;
struct _CALL_PERFORMANCE_DATA;
struct _CELL_DATA;
struct _CHILD_LIST;
struct _CLIENT_ID;
struct _CMHIVE;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_HARDWARE_PROFILE;
struct _CM_HARDWARE_PROFILE_LIST;
struct _CM_INDEX_HINT_BLOCK;
struct _CM_KEY_BODY;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_KEY_HASH;
struct _CM_KEY_INDEX;
struct _CM_KEY_NODE;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_VALUE;
struct _CM_NAME_CONTROL_BLOCK;
struct _CM_NAME_HASH;
struct _CM_NOTIFY_BLOCK;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _COMPRESSED_DATA_INFO;
struct _CONFIGURATION_COMPONENT;
struct _CONFIGURATION_COMPONENT_DATA;
struct _CONTEXT;
struct _CONTROL_AREA;
struct _CURDIR;
struct _DEFERRED_WRITE;
struct _DESCRIPTOR;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_CONTROL_CONTEXT;
struct _DEVICE_FLAGS;
struct _DEVICE_HANDLER_OBJECT;
struct _DEVICE_MAP;
struct _DEVICE_NODE;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_RELATIONS;
struct _DEVOBJ_EXTENSION;
struct _DISPATCHER_HEADER;
struct _DMA_ADAPTER;
struct _DMA_OPERATIONS;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _DRIVE_LAYOUT_INFORMATION;
struct _DUAL;
struct _EJOB;
struct _EPROCESS;
struct _EPROCESS_QUOTA_BLOCK;
struct _ERESOURCE;
struct _ETHREAD;
struct _ETIMER;
struct _EVENT_COUNTER;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
struct _FDO_EXTENSION;
struct _FILE_BASIC_INFORMATION;
struct _FILE_GET_QUOTA_INFORMATION;
struct _FILE_LOCK_INFO;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FLOATING_SAVE_AREA;
struct _FNSAVE_FORMAT;
struct _FS_FILTER_CALLBACKS;
struct _FS_FILTER_CALLBACK_DATA;
struct _FXSAVE_FORMAT;
struct _FX_SAVE_AREA;
struct _GENERAL_LOOKASIDE;
struct _GENERIC_MAPPING;
struct _GUID;
struct _HANDLE_TABLE;
struct _HANDLE_TABLE_ENTRY;
struct _HARDWARE_PTE_X86;
struct _HBASE_BLOCK;
struct _HHIVE;
struct _HIVE_LIST_ENTRY;
struct _HMAP_DIRECTORY;
struct _HMAP_ENTRY;
struct _HMAP_TABLE;
struct _I386_LOADER_BLOCK;
struct _IA64_LOADER_BLOCK;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_INFO;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_SECTION_HEADER;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
struct _IO_CLIENT_EXTENSION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_COUNTERS;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IRP;
struct _KAPC;
struct _KAPC_STATE;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KEVENT;
struct _KEY_VALUE_FULL_INFORMATION;
struct _KGDTENTRY;
struct _KIDTENTRY;
struct _KINTERRUPT;
struct _KMUTANT;
struct _KPCR;
struct _KPRCB;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KQUEUE;
struct _KSEMAPHORE;
struct _KSPECIAL_REGISTERS;
struct _KSPIN_LOCK_QUEUE;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTIMER;
struct _KTRAP_FRAME;
struct _KTSS;
struct _KUSER_SHARED_DATA;
struct _KWAIT_BLOCK;
struct _KiIoAccessMap;
struct _LDR_DATA_TABLE_ENTRY;
struct _LIST_ENTRY;
struct _LOADER_PARAMETER_BLOCK;
struct _LOADER_PARAMETER_EXTENSION;
struct _LPCP_MESSAGE;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
struct _LPCP_PORT_QUEUE;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MBCB;
struct _MCA_EXCEPTION;
struct _MDL;
struct _MI_VERIFIER_DRIVER_ENTRY;
struct _MI_VERIFIER_POOL_HEADER;
struct _MMEXTEND_INFO;
struct _MMMOD_WRITER_LISTHEAD;
struct _MMMOD_WRITER_MDL_ENTRY;
struct _MMPAGING_FILE;
struct _MMPFN;
struct _MMPFNENTRY;
struct _MMPTE;
struct _MMPTE_HARDWARE;
struct _MMPTE_LIST;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_SUBSECTION;
struct _MMPTE_TRANSITION;
struct _MMSECTION_FLAGS;
struct _MMSUPPORT;
struct _MMSUPPORT_FLAGS;
struct _MMWSL;
struct _MMWSLE;
struct _MMWSLENTRY;
struct _MMWSLE_HASH;
struct _MM_PAGED_POOL_INFO;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NLS_DATA_BLOCK;
struct _NPAGED_LOOKASIDE_LIST;
struct _NT_TIB;
struct _OBJECT_ATTRIBUTES;
struct _OBJECT_CREATE_INFORMATION;
struct _OBJECT_DIRECTORY;
struct _OBJECT_DIRECTORY_ENTRY;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HEADER;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_SYMBOLIC_LINK;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
struct _OWNER_ENTRY;
struct _PAGEFAULT_HISTORY;
struct _PCI_ARBITER_INSTANCE;
struct _PCI_BUS_INTERFACE_STANDARD;
struct _PCI_COMMON_CONFIG;
struct _PCI_COMMON_EXTENSION;
struct _PCI_CONFIGURABLE_OBJECT;
struct _PCI_HEADER_TYPE_0;
struct _PCI_HEADER_TYPE_1;
struct _PCI_HEADER_TYPE_2;
struct _PCI_INTERFACE;
struct _PCI_LOCK;
struct _PCI_MJ_DISPATCH_TABLE;
struct _PCI_MN_DISPATCH_TABLE;
struct _PCI_PMC;
struct _PCI_SLOT_NUMBER;
struct _PDO_EXTENSION;
struct _PEB;
struct _PEB_FREE_BLOCK;
struct _PEB_LDR_DATA;
struct _PI_BUS_EXTENSION;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PM_DISPATCH_TABLE;
struct _PM_SUPPORT;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _PNP_DEVICE_EVENT_LIST;
struct _POOL_BLOCK_HEAD;
struct _POOL_DESCRIPTOR;
struct _POOL_HACKER;
struct _POOL_HEADER;
struct _POOL_TRACKER_BIG_PAGES;
struct _POOL_TRACKER_TABLE;
struct _PORT_MESSAGE;
struct _POWER_CHANNEL_SUMMARY;
struct _POWER_SEQUENCE;
struct _PO_DEVICE_NOTIFY;
struct _PP_LOOKASIDE_LIST;
struct _PRIVATE_CACHE_MAP;
struct _PRIVILEGE_SET;
struct _PROCESSOR_POWER_STATE;
struct _PROCESS_WS_WATCH_INFORMATION;
struct _PROFILE_PARAMETER_BLOCK;
struct _PS_IMPERSONATION_INFORMATION;
struct _PS_JOB_TOKEN_FILTER;
struct _QUAD;
struct _RELATION_LIST;
struct _RELATION_LIST_ENTRY;
struct _RTLP_RANGE_LIST_ENTRY;
struct _RTL_BITMAP;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_GENERIC_TABLE;
struct _RTL_RANGE;
struct _RTL_RANGE_LIST;
struct _RTL_SPLAY_LINKS;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_OBJECT;
struct _SECTION_OBJECT_POINTERS;
struct _SECURITY_CLIENT_CONTEXT;
struct _SECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SEGMENT;
struct _SEGMENT_OBJECT;
struct _SETUP_LOADER_BLOCK;
struct _SHARED_CACHE_MAP;
struct _SID;
struct _SID_AND_ATTRIBUTES;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
struct _STRING;
struct _SUPPORTED_RANGE;
struct _SUPPORTED_RANGES;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO;
struct _TIME_FIELDS;
struct _TOKEN_CONTROL;
struct _TOKEN_SOURCE;
struct _TRANSLATOR_INTERFACE;
struct _UNICODE_STRING;
struct _VACB;
struct _VACB_LEVEL_REFERENCE;
struct _VI_POOL_ENTRY;
struct _VI_POOL_ENTRY_INUSE;
struct _VPB;
struct _WAIT_CONTEXT_BLOCK;
struct _WIN32_JOBCALLOUT_PARAMETERS;
struct _WIN32_POWEREVENT_PARAMETERS;
struct _WIN32_POWERSTATE_PARAMETERS;
struct _WOW64_PROCESS;

union PCI_HEADER_TYPE_DEPENDENT;
union _FS_FILTER_PARAMETERS;
union _LARGE_INTEGER;
union _MCI_ADDR;
union _MCI_STATS;
union _POWER_STATE;
union _SLIST_HEADER;
union _ULARGE_INTEGER;
union _u;

typedef struct BATTERY_NOTIFY {
    ULONG PowerState;
    ULONG LowCapacity;
    ULONG HighCapacity;
};

typedef struct CMP_OFFSET_ARRAY {
    ULONG FileOffset;
    PVOID DataBuffer;
    ULONG DataLength;
};

typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
};

typedef struct LIST_ENTRY64 {
    ULONG64 Flink;
    ULONG64 Blink;
};

typedef struct PCI_CONFIGURATOR {
    PVOID MassageHeaderForLimitsDetermination;
    PVOID RestoreCurrent;
    PVOID SaveLimits;
    PVOID SaveCurrentSettings;
    PVOID ChangeResourceSettings;
    PVOID GetAdditionalResourceDescriptors;
    PLONG ResetDevice;
};

typedef struct PCI_FUNCTION_RESOURCES {
    struct _IO_RESOURCE_DESCRIPTOR Limit[7];
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR Current[7];
};

typedef struct PCI_POWER_STATE {
    LONG CurrentSystemState;
    LONG CurrentDeviceState;
    LONG SystemWakeLevel;
    LONG DeviceWakeLevel;
    LONG SystemStateMapping[7];
    struct _IRP *WaitWakeIrp;
    PVOID SavedCancelRoutine;
    LONG Paging;
    LONG Hibernate;
    LONG CrashDump;
};

typedef struct PCI_SECONDARY_EXTENSION {
    struct _SINGLE_LIST_ENTRY List;
    LONG ExtensionType;
    PVOID Destructor;
};

typedef struct PROCESSOR_IDLE_TIMES {
    ULONG64 StartTime;
    ULONG64 EndTime;
    ULONG IdleHandlerReserved[4];
};

typedef struct ROUTING_TOKEN {
    PVOID LinkNode;
    ULONG StaticVector;
    UCHAR Flags;
};

typedef struct _ACCESS_STATE {
    struct _LUID OperationID;
    UCHAR SecurityEvaluated;
    UCHAR GenerateAudit;
    UCHAR GenerateOnClose;
    UCHAR PrivilegesAllocated;
    ULONG Flags;
    ULONG RemainingDesiredAccess;
    ULONG PreviouslyGrantedAccess;
    ULONG OriginalDesiredAccess;
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
    PVOID SecurityDescriptor;
    PVOID AuxData;
    union {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
        struct _PRIVILEGE_SET PrivilegeSet;
    } Privileges;
    UCHAR AuditPrivileges;
    struct _UNICODE_STRING ObjectName;
    struct _UNICODE_STRING ObjectTypeName;
};

typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
};

typedef struct _ALPHA_LOADER_BLOCK {
    ULONG PlaceHolder;
};

typedef struct _ARBITER_ALLOCATION_STATE {
    ULONG64 Start;
    ULONG64 End;
    ULONG64 CurrentMinimum;
    ULONG64 CurrentMaximum;
    struct _ARBITER_LIST_ENTRY *Entry;
    struct _ARBITER_ALTERNATIVE *CurrentAlternative;
    ULONG AlternativeCount;
    struct _ARBITER_ALTERNATIVE *Alternatives;
    USHORT Flags;
    UCHAR RangeAttributes;
    UCHAR RangeAvailableAttributes;
    ULONG WorkSpace;
};

typedef struct _ARBITER_ALTERNATIVE {
    ULONG64 Minimum;
    ULONG64 Maximum;
    ULONG Length;
    ULONG Alignment;
    LONG Priority;
    ULONG Flags;
    struct _IO_RESOURCE_DESCRIPTOR *Descriptor;
    ULONG Reserved[3];
};

typedef struct _ARBITER_CONFLICT_INFO {
    struct _DEVICE_OBJECT *OwningObject;
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_INSTANCE {
    ULONG Signature;
    struct _KEVENT *MutexEvent;
    PUSHORT Name;
    LONG ResourceType;
    struct _RTL_RANGE_LIST *Allocation;
    struct _RTL_RANGE_LIST *PossibleAllocation;
    struct _ARBITER_ORDERING_LIST OrderingList;
    struct _ARBITER_ORDERING_LIST ReservedList;
    LONG ReferenceCount;
    struct _ARBITER_INTERFACE *Interface;
    ULONG AllocationStackMaxSize;
    struct _ARBITER_ALLOCATION_STATE *AllocationStack;
    PLONG UnpackRequirement;
    PLONG PackResource;
    PLONG UnpackResource;
    PLONG ScoreRequirement;
    PLONG TestAllocation;
    PLONG RetestAllocation;
    PLONG CommitAllocation;
    PLONG RollbackAllocation;
    PLONG BootAllocation;
    PLONG QueryArbitrate;
    PLONG QueryConflict;
    PLONG AddReserved;
    PLONG StartArbiter;
    PLONG PreprocessEntry;
    PLONG AllocateEntry;
    PUCHAR GetNextAllocationRange;
    PUCHAR FindSuitableRange;
    PVOID AddAllocation;
    PVOID BacktrackAllocation;
    PUCHAR OverrideConflict;
    UCHAR TransactionInProgress;
    PVOID Extension;
    struct _DEVICE_OBJECT *BusDeviceObject;
    PVOID ConflictCallbackContext;
    PUCHAR ConflictCallback;
};

typedef struct _ARBITER_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG ArbiterHandler;
    ULONG Flags;
};

typedef struct _ARBITER_LIST_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG AlternativeCount;
    struct _IO_RESOURCE_DESCRIPTOR *Alternatives;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    LONG RequestSource;
    ULONG Flags;
    LONG WorkSpace;
    LONG InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *Assignment;
    struct _IO_RESOURCE_DESCRIPTOR *SelectedAlternative;
    LONG Result;
};

typedef struct _ARBITER_ORDERING {
    ULONG64 Start;
    ULONG64 End;
};

typedef struct _ARBITER_ORDERING_LIST {
    USHORT Count;
    USHORT Maximum;
    struct _ARBITER_ORDERING *Orderings;
};

typedef struct _ARBITER_PARAMETERS {
    union {
        struct {
            struct _LIST_ENTRY *ArbitrationList;
            ULONG AllocateFromCount;
            struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
        } TestAllocation;
        struct {
            struct _LIST_ENTRY *ArbitrationList;
            ULONG AllocateFromCount;
            struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *AllocateFrom;
        } RetestAllocation;
        struct {
            struct _LIST_ENTRY *ArbitrationList;
        } BootAllocation;
        struct {
            struct _CM_PARTIAL_RESOURCE_LIST **AllocatedResources;
        } QueryAllocatedResources;
        struct {
            struct _DEVICE_OBJECT *PhysicalDeviceObject;
            struct _IO_RESOURCE_DESCRIPTOR *ConflictingResource;
            PULONG ConflictCount;
            struct _ARBITER_CONFLICT_INFO **Conflicts;
        } QueryConflict;
        struct {
            struct _LIST_ENTRY *ArbitrationList;
        } QueryArbitrate;
        struct {
            struct _DEVICE_OBJECT *ReserveDevice;
        } AddReserved;
    } Parameters;
};

typedef struct _ARC_DISK_INFORMATION {
    struct _LIST_ENTRY DiskSignatures;
};

typedef struct _BATTERY_STATUS {
    ULONG PowerState;
    ULONG Capacity;
    ULONG Voltage;
    LONG Current;
};

typedef struct _BITMAP_RANGE {
    struct _LIST_ENTRY Links;
    LONG64 BasePage;
    ULONG FirstDirtyPage;
    ULONG LastDirtyPage;
    ULONG DirtyPages;
    PULONG Bitmap;
};

typedef struct _BUS_EXTENSION_LIST {
    PVOID Next;
    struct _PI_BUS_EXTENSION *BusExtension;
};

typedef struct _BUS_HANDLER {
    ULONG Version;
    LONG InterfaceType;
    LONG ConfigurationType;
    ULONG BusNumber;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _BUS_HANDLER *ParentHandler;
    PVOID BusData;
    ULONG DeviceControlExtensionSize;
    struct _SUPPORTED_RANGES *BusAddresses;
    ULONG Reserved[4];
    PULONG GetBusData;
    PULONG SetBusData;
    PLONG AdjustResourceList;
    PLONG AssignSlotResources;
    PULONG GetInterruptVector;
    PUCHAR TranslateBusAddress;
    PVOID Spare1;
    PVOID Spare2;
    PVOID Spare3;
    PVOID Spare4;
    PVOID Spare5;
    PVOID Spare6;
    PVOID Spare7;
    PVOID Spare8;
};

typedef struct _CACHED_CHILD_LIST {
    ULONG Count;
    ULONG ValueList;
    struct _CM_KEY_CONTROL_BLOCK *RealKcb;
};

typedef struct _CACHE_MANAGER_CALLBACKS {
    PUCHAR AcquireForLazyWrite;
    PVOID ReleaseFromLazyWrite;
    PUCHAR AcquireForReadAhead;
    PVOID ReleaseFromReadAhead;
};

typedef struct _CACHE_UNINITIALIZE_EVENT {
    struct _CACHE_UNINITIALIZE_EVENT *Next;
    struct _KEVENT Event;
};

typedef struct _CALL_HASH_ENTRY {
    struct _LIST_ENTRY ListEntry;
    PVOID CallersAddress;
    PVOID CallersCaller;
    ULONG CallCount;
};

typedef struct _CALL_PERFORMANCE_DATA {
    ULONG SpinLock;
    struct _LIST_ENTRY HashTable[64];
};

typedef struct _CELL_DATA {
    union _u u;
};

typedef struct _CHILD_LIST {
    ULONG Count;
    ULONG List;
};

typedef struct _CLIENT_ID {
    PVOID UniqueProcess;
    PVOID UniqueThread;
};

typedef struct _CMHIVE {
    struct _HHIVE Hive;
    PVOID FileHandles[4];
    struct _LIST_ENTRY NotifyList;
    struct _LIST_ENTRY HiveList;
    struct _FAST_MUTEX *HiveLock;
    ULONG Flags;
};

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    LONG InterfaceType;
    ULONG BusNumber;
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

typedef struct _CM_HARDWARE_PROFILE {
    ULONG NameLength;
    PUSHORT FriendlyName;
    ULONG PreferenceOrder;
    ULONG Id;
    ULONG Flags;
};

typedef struct _CM_HARDWARE_PROFILE_LIST {
    ULONG MaxProfileCount;
    ULONG CurrentProfileCount;
    struct _CM_HARDWARE_PROFILE Profile[1];
};

typedef struct _CM_INDEX_HINT_BLOCK {
    ULONG Count;
    UCHAR NameHint[1];
};

typedef struct _CM_KEY_BODY {
    ULONG Type;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_NOTIFY_BLOCK *NotifyBlock;
    struct _EPROCESS *Process;
    struct _LIST_ENTRY KeyBodyList;
};

typedef struct _CM_KEY_CONTROL_BLOCK {
    UCHAR Delete;
    USHORT RefCount;
    struct _CM_KEY_HASH KeyHash;
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
    USHORT ExtFlags;
    USHORT Flags;
    struct _CM_KEY_CONTROL_BLOCK *ParentKcb;
    struct _CM_NAME_CONTROL_BLOCK *NameBlock;
    ULONG Security;
    struct _CACHED_CHILD_LIST ValueCache;
    struct _CM_INDEX_HINT_BLOCK *IndexHint;
    UCHAR NameHint[4];
    USHORT DelayedCloseIndex;
    USHORT TotalLevels;
    struct _CM_KEY_NODE *KeyNode;
    struct _LIST_ENTRY KeyBodyListHead;
};

typedef struct _CM_KEY_HASH {
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    struct _HHIVE *KeyHive;
    ULONG KeyCell;
};

typedef struct _CM_KEY_INDEX {
    USHORT Signature;
    USHORT Count;
    ULONG List[1];
};

typedef struct _CM_KEY_NODE {
    USHORT Signature;
    USHORT Flags;
    union _LARGE_INTEGER LastWriteTime;
    ULONG Spare;
    ULONG Parent;
    ULONG SubKeyCounts[2];
    ULONG SubKeyLists[2];
    struct _CHILD_LIST ValueList;
    struct _CM_KEY_REFERENCE ChildHiveReference;
    ULONG Security;
    ULONG Class;
    ULONG MaxNameLen;
    ULONG MaxClassLen;
    ULONG MaxValueNameLen;
    ULONG MaxValueDataLen;
    ULONG WorkVar;
    USHORT NameLength;
    USHORT ClassLength;
    USHORT Name[1];
};

typedef struct _CM_KEY_REFERENCE {
    ULONG KeyCell;
    struct _HHIVE *KeyHive;
};

typedef struct _CM_KEY_SECURITY {
    USHORT Signature;
    USHORT Reserved;
    ULONG Flink;
    ULONG Blink;
    ULONG ReferenceCount;
    ULONG DescriptorLength;
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
};

typedef struct _CM_KEY_VALUE {
    USHORT Signature;
    USHORT NameLength;
    ULONG DataLength;
    ULONG Data;
    ULONG Type;
    USHORT Flags;
    USHORT Spare;
    USHORT Name[1];
};

typedef struct _CM_NAME_CONTROL_BLOCK {
    UCHAR Compressed;
    USHORT RefCount;
    struct _CM_NAME_HASH NameHash;
    ULONG ConvKey;
    struct _CM_KEY_HASH *NextHash;
    USHORT NameLength;
    USHORT Name[1];
};

typedef struct _CM_NAME_HASH {
    ULONG ConvKey;
    struct _CM_NAME_HASH *NextHash;
    USHORT NameLength;
    USHORT Name[1];
};

typedef struct _CM_NOTIFY_BLOCK {
    struct _LIST_ENTRY HiveList;
    struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;
    struct _CM_KEY_BODY *KeyBody;
    ULONG Filter;
    struct _LIST_ENTRY PostList;
    struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
    UCHAR WatchTree;
    UCHAR NotifyPending;
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Generic;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Port;
        struct {
            ULONG Level;
            ULONG Vector;
            ULONG Affinity;
        } Interrupt;
        struct {
            union _LARGE_INTEGER Start;
            ULONG Length;
        } Memory;
        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;
        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;
    } u;
};

typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

typedef struct _COMPRESSED_DATA_INFO {
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};

typedef struct _CONFIGURATION_COMPONENT {
    LONG Class;
    LONG Type;
    struct _DEVICE_FLAGS Flags;
    USHORT Version;
    USHORT Revision;
    ULONG Key;
    ULONG AffinityMask;
    ULONG ConfigurationDataLength;
    ULONG IdentifierLength;
    PCHAR Identifier;
};

typedef struct _CONFIGURATION_COMPONENT_DATA {
    struct _CONFIGURATION_COMPONENT_DATA *Parent;
    struct _CONFIGURATION_COMPONENT_DATA *Child;
    struct _CONFIGURATION_COMPONENT_DATA *Sibling;
    struct _CONFIGURATION_COMPONENT ComponentEntry;
    PVOID ConfigurationData;
};

typedef struct _CONTEXT {
    ULONG ContextFlags;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    struct _FLOATING_SAVE_AREA FloatSave;
    ULONG SegGs;
    ULONG SegFs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    ULONG Ebp;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG Esp;
    ULONG SegSs;
    UCHAR ExtendedRegisters[512];
};

typedef struct _CONTROL_AREA {
    struct _SEGMENT *Segment;
    struct _LIST_ENTRY DereferenceList;
    ULONG NumberOfSectionReferences;
    ULONG NumberOfPfnReferences;
    ULONG NumberOfMappedViews;
    USHORT NumberOfSubsections;
    USHORT FlushInProgressCount;
    ULONG NumberOfUserReferences;
    union {
        ULONG LongFlags;
        struct _MMSECTION_FLAGS Flags;
    } u;
    struct _FILE_OBJECT *FilePointer;
    struct _EVENT_COUNTER *WaitingForDeletion;
    USHORT ModifiedWriteCount;
    USHORT NumberOfSystemCacheViews;
    ULONG PagedPoolUsage;
    ULONG NonPagedPoolUsage;
};

typedef struct _CURDIR {
    struct _UNICODE_STRING DosPath;
    PVOID Handle;
};

typedef struct _DEFERRED_WRITE {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    struct _FILE_OBJECT *FileObject;
    ULONG BytesToWrite;
    struct _LIST_ENTRY DeferredWriteLinks;
    struct _KEVENT *Event;
    PVOID PostRoutine;
    PVOID Context1;
    PVOID Context2;
    UCHAR LimitModifiedPages;
};

typedef struct _DESCRIPTOR {
    USHORT Pad;
    USHORT Limit;
    ULONG Base;
};

typedef struct _DEVICE_CAPABILITIES {
    USHORT Size;
    USHORT Version;
    ULONG DeviceD1 : 1;
    ULONG DeviceD2 : 1;
    ULONG LockSupported : 1;
    ULONG EjectSupported : 1;
    ULONG Removable : 1;
    ULONG DockDevice : 1;
    ULONG UniqueID : 1;
    ULONG SilentInstall : 1;
    ULONG RawDeviceOK : 1;
    ULONG SurpriseRemovalOK : 1;
    ULONG WakeFromD0 : 1;
    ULONG WakeFromD1 : 1;
    ULONG WakeFromD2 : 1;
    ULONG WakeFromD3 : 1;
    ULONG HardwareDisabled : 1;
    ULONG NonDynamic : 1;
    ULONG WarmEjectSupported : 1;
    ULONG NoDisplayInUI : 1;
    ULONG Reserved : 14;
    ULONG Address;
    ULONG UINumber;
    LONG DeviceState[7];
    LONG SystemWake;
    LONG DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
};

typedef struct _DEVICE_CONTROL_CONTEXT {
    LONG Status;
    struct _DEVICE_HANDLER_OBJECT *DeviceHandler;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG ControlCode;
    PVOID Buffer;
    PULONG BufferLength;
    PVOID Context;
};

typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
};

typedef struct _DEVICE_HANDLER_OBJECT {
    SHORT Type;
    USHORT Size;
    struct _BUS_HANDLER *BusHandler;
    ULONG SlotNumber;
    struct _UNICODE_STRING ServiceKeyName;
    ULONG InstanceOrdinal;
};

typedef struct _DEVICE_MAP {
    ULONG ReferenceCount;
    struct _OBJECT_DIRECTORY *DosDevicesDirectory;
    ULONG DriveMap;
    UCHAR DriveType[32];
};

typedef struct _DEVICE_NODE {
    struct _DEVICE_NODE *Sibling;
    struct _DEVICE_NODE *Child;
    struct _DEVICE_NODE *Parent;
    struct _DEVICE_NODE *LastChild;
    ULONG Level;
    struct _PO_DEVICE_NOTIFY *Notify;
    ULONG Flags;
    ULONG UserFlags;
    ULONG Problem;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _CM_RESOURCE_LIST *ResourceList;
    struct _CM_RESOURCE_LIST *ResourceListTranslated;
    struct _KEVENT EnumerationMutex;
    struct _UNICODE_STRING InstancePath;
    struct _UNICODE_STRING ServiceName;
    struct _DEVICE_OBJECT *DuplicatePDO;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *ResourceRequirements;
    LONG InterfaceType;
    ULONG BusNumber;
    LONG ChildInterfaceType;
    ULONG ChildBusNumber;
    USHORT ChildBusTypeIndex;
    USHORT Reserved;
    struct _LIST_ENTRY TargetDeviceNotify;
    struct _LIST_ENTRY DeviceArbiterList;
    struct _LIST_ENTRY DeviceTranslatorList;
    USHORT NoTranslatorMask;
    USHORT QueryTranslatorMask;
    USHORT NoArbiterMask;
    USHORT QueryArbiterMask;
    union {
        struct _DEVICE_NODE *LegacyDeviceNode;
        struct _DEVICE_RELATIONS *PendingDeviceRelations;
    } OverUsed1;
    union {
        struct _DEVICE_NODE *NextResourceDeviceNode;
    } OverUsed2;
    struct _CM_RESOURCE_LIST *BootResources;
    ULONG LockCount;
    struct _RELATION_LIST *RelationList;
    ULONG CapabilityFlags;
    struct {
        LONG DockStatus;
        struct _LIST_ENTRY ListEntry;
        PUSHORT SerialNumber;
    } DockInfo;
    ULONG DisableableDepends;
    struct _LIST_ENTRY PendedSetInterfaceState;
    ULONG DriverUnloadRetryCount;
    ULONG FailureStatus;
    struct _CM_RESOURCE_LIST *PreviousResourceList;
    struct _IO_RESOURCE_REQUIREMENTS_LIST *PreviousResourceRequirements;
};

typedef struct _DEVICE_OBJECT {
    SHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    struct _IO_TIMER *Timer;
    ULONG Flags;
    ULONG Characteristics;
    struct _VPB *Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CHAR StackSize;
    union {
        struct _LIST_ENTRY ListEntry;
        struct _WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    struct _KDEVICE_QUEUE DeviceQueue;
    struct _KDPC Dpc;
    ULONG ActiveThreadCount;
    PVOID SecurityDescriptor;
    struct _KEVENT DeviceLock;
    USHORT SectorSize;
    USHORT Spare1;
    struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
    PVOID Reserved;
};

typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
    ULONG IdleCount;
    ULONG ConservationIdleTime;
    ULONG PerformanceIdleTime;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _LIST_ENTRY IdleList;
    UCHAR DeviceType;
    LONG State;
    struct _LIST_ENTRY NotifySourceList;
    struct _LIST_ENTRY NotifyTargetList;
    struct _POWER_CHANNEL_SUMMARY PowerChannelSummary;
    struct _LIST_ENTRY Volume;
};

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    struct _DEVICE_OBJECT *Objects[1];
};

typedef struct _DEVOBJ_EXTENSION {
    SHORT Type;
    USHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG PowerFlags;
    struct _DEVICE_OBJECT_POWER_EXTENSION *Dope;
    ULONG ExtensionFlags;
    PVOID DeviceNode;
    struct _DEVICE_OBJECT *AttachedTo;
    struct _VPB *Vpb;
};

typedef struct _DISPATCHER_HEADER {
    UCHAR Type;
    UCHAR Absolute;
    UCHAR Size;
    UCHAR Inserted;
    LONG SignalState;
    struct _LIST_ENTRY WaitListHead;
};

typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    struct _DMA_OPERATIONS *DmaOperations;
};

typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PVOID PutDmaAdapter;
    PVOID *AllocateCommonBuffer;
    PVOID FreeCommonBuffer;
    PLONG AllocateAdapterChannel;
    PUCHAR FlushAdapterBuffers;
    PVOID FreeAdapterChannel;
    PVOID FreeMapRegisters;
    union _LARGE_INTEGER *MapTransfer;
    PULONG GetDmaAlignment;
    PULONG ReadDmaCounter;
    PLONG GetScatterGatherList;
    PVOID PutScatterGatherList;
};

typedef struct _DRIVER_EXTENSION {
    struct _DRIVER_OBJECT *DriverObject;
    PLONG AddDevice;
    ULONG Count;
    struct _UNICODE_STRING ServiceKeyName;
    struct _IO_CLIENT_EXTENSION *ClientDriverExtension;
    struct _FS_FILTER_CALLBACKS *FsFilterCallbacks;
};

typedef struct _DRIVER_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    ULONG Flags;
    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    struct _DRIVER_EXTENSION *DriverExtension;
    struct _UNICODE_STRING DriverName;
    struct _UNICODE_STRING *HardwareDatabase;
    struct _FAST_IO_DISPATCH *FastIoDispatch;
    PLONG DriverInit;
    PVOID DriverStartIo;
    PVOID DriverUnload;
    PLONG MajorFunction[28];
};

typedef struct _DRIVE_LAYOUT_INFORMATION {
};

typedef struct _DUAL {
    ULONG Length;
    struct _HMAP_DIRECTORY *Map;
    struct _HMAP_TABLE *SmallDir;
    ULONG Guard;
    ULONG FreeDisplay[24];
    ULONG FreeSummary;
    struct _LIST_ENTRY FreeBins;
};

typedef struct _EJOB {
    struct _KEVENT Event;
    struct _LIST_ENTRY JobLinks;
    struct _LIST_ENTRY ProcessListHead;
    struct _ERESOURCE JobLock;
    union _LARGE_INTEGER TotalUserTime;
    union _LARGE_INTEGER TotalKernelTime;
    union _LARGE_INTEGER ThisPeriodTotalUserTime;
    union _LARGE_INTEGER ThisPeriodTotalKernelTime;
    ULONG TotalPageFaultCount;
    ULONG TotalProcesses;
    ULONG ActiveProcesses;
    ULONG TotalTerminatedProcesses;
    union _LARGE_INTEGER PerProcessUserTimeLimit;
    union _LARGE_INTEGER PerJobUserTimeLimit;
    ULONG LimitFlags;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    ULONG ActiveProcessLimit;
    ULONG Affinity;
    UCHAR PriorityClass;
    ULONG UIRestrictionsClass;
    ULONG SecurityLimitFlags;
    PVOID Token;
    struct _PS_JOB_TOKEN_FILTER *Filter;
    ULONG EndOfJobTimeAction;
    PVOID CompletionPort;
    PVOID CompletionKey;
    ULONG SessionId;
    ULONG SchedulingClass;
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
    struct _IO_COUNTERS IoInfo;
    ULONG ProcessMemoryLimit;
    ULONG JobMemoryLimit;
    ULONG PeakProcessMemoryUsed;
    ULONG PeakJobMemoryUsed;
    ULONG CurrentJobMemoryUsed;
    struct _FAST_MUTEX MemoryLimitsLock;
};

typedef struct _EPROCESS {
    struct _KPROCESS Pcb;
    LONG ExitStatus;
    struct _KEVENT LockEvent;
    ULONG LockCount;
    union _LARGE_INTEGER CreateTime;
    union _LARGE_INTEGER ExitTime;
    struct _KTHREAD *LockOwner;
    PVOID UniqueProcessId;
    struct _LIST_ENTRY ActiveProcessLinks;
    ULONG QuotaPeakPoolUsage[2];
    ULONG QuotaPoolUsage[2];
    ULONG PagefileUsage;
    ULONG CommitCharge;
    ULONG PeakPagefileUsage;
    ULONG PeakVirtualSize;
    ULONG VirtualSize;
    struct _MMSUPPORT Vm;
    struct _LIST_ENTRY SessionProcessLinks;
    PVOID DebugPort;
    PVOID ExceptionPort;
    struct _HANDLE_TABLE *ObjectTable;
    PVOID Token;
    struct _FAST_MUTEX WorkingSetLock;
    ULONG WorkingSetPage;
    UCHAR ProcessOutswapEnabled;
    UCHAR ProcessOutswapped;
    UCHAR AddressSpaceInitialized;
    UCHAR AddressSpaceDeleted;
    struct _FAST_MUTEX AddressCreationLock;
    ULONG HyperSpaceLock;
    struct _ETHREAD *ForkInProgress;
    USHORT VmOperation;
    UCHAR ForkWasSuccessful;
    UCHAR MmAgressiveWsTrimMask;
    struct _KEVENT *VmOperationEvent;
    PVOID PaeTop;
    ULONG LastFaultCount;
    ULONG ModifiedPageCount;
    PVOID VadRoot;
    PVOID VadHint;
    PVOID CloneRoot;
    ULONG NumberOfPrivatePages;
    ULONG NumberOfLockedPages;
    USHORT NextPageColor;
    UCHAR ExitProcessCalled;
    UCHAR CreateProcessReported;
    PVOID SectionHandle;
    struct _PEB *Peb;
    PVOID SectionBaseAddress;
    struct _EPROCESS_QUOTA_BLOCK *QuotaBlock;
    LONG LastThreadExitStatus;
    struct _PAGEFAULT_HISTORY *WorkingSetWatch;
    PVOID Win32WindowStation;
    PVOID InheritedFromUniqueProcessId;
    ULONG GrantedAccess;
    ULONG DefaultHardErrorProcessing;
    PVOID LdtInformation;
    PVOID VadFreeHint;
    PVOID VdmObjects;
    PVOID DeviceMap;
    ULONG SessionId;
    struct _LIST_ENTRY PhysicalVadList;
    struct _HARDWARE_PTE_X86 PageDirectoryPte;
    ULONG64 Filler;
    ULONG PaePageDirectoryPage;
    UCHAR ImageFileName[16];
    ULONG VmTrimFaultValue;
    UCHAR SetTimerResolution;
    UCHAR PriorityClass;
    UCHAR SubSystemMinorVersion;
    UCHAR SubSystemMajorVersion;
    USHORT SubSystemVersion;
    PVOID Win32Process;
    struct _EJOB *Job;
    ULONG JobStatus;
    struct _LIST_ENTRY JobLinks;
    PVOID LockedPagesList;
    PVOID SecurityPort;
    struct _WOW64_PROCESS *Wow64Process;
    union _LARGE_INTEGER ReadOperationCount;
    union _LARGE_INTEGER WriteOperationCount;
    union _LARGE_INTEGER OtherOperationCount;
    union _LARGE_INTEGER ReadTransferCount;
    union _LARGE_INTEGER WriteTransferCount;
    union _LARGE_INTEGER OtherTransferCount;
    ULONG CommitChargeLimit;
    ULONG CommitChargePeak;
    struct _LIST_ENTRY ThreadListHead;
    struct _RTL_BITMAP *VadPhysicalPagesBitMap;
    ULONG VadPhysicalPages;
    ULONG AweLock;
    struct _UNICODE_STRING *pImageFileName;
    PVOID Session;
    ULONG Flags;
};

typedef struct _EPROCESS_QUOTA_BLOCK {
    ULONG QuotaLock;
    ULONG ReferenceCount;
    ULONG QuotaPeakPoolUsage[2];
    ULONG QuotaPoolUsage[2];
    ULONG QuotaPoolLimit[2];
    ULONG PeakPagefileUsage;
    ULONG PagefileUsage;
    ULONG PagefileLimit;
};

typedef struct _ERESOURCE {
    struct _LIST_ENTRY SystemResourcesList;
    struct _OWNER_ENTRY *OwnerTable;
    SHORT ActiveCount;
    USHORT Flag;
    struct _KSEMAPHORE *SharedWaiters;
    struct _KEVENT *ExclusiveWaiters;
    struct _OWNER_ENTRY OwnerThreads[2];
    ULONG ContentionCount;
    USHORT NumberOfSharedWaiters;
    USHORT NumberOfExclusiveWaiters;
    PVOID Address;
    ULONG CreatorBackTraceIndex;
    ULONG SpinLock;
};

typedef struct _ETHREAD {
    struct _KTHREAD Tcb;
    union _LARGE_INTEGER CreateTime;
    ULONG NestedFaultCount : 2;
    ULONG ApcNeeded : 1;
    union _LARGE_INTEGER ExitTime;
    struct _LIST_ENTRY LpcReplyChain;
    LONG ExitStatus;
    PVOID OfsChain;
    struct _LIST_ENTRY PostBlockList;
    struct _LIST_ENTRY TerminationPortList;
    ULONG ActiveTimerListLock;
    struct _LIST_ENTRY ActiveTimerListHead;
    struct _CLIENT_ID Cid;
    struct _KSEMAPHORE LpcReplySemaphore;
    PVOID LpcReplyMessage;
    PVOID LpcWaitingOnPort;
    ULONG LpcReplyMessageId;
    ULONG PerformanceCountLow;
    struct _PS_IMPERSONATION_INFORMATION *ImpersonationInfo;
    struct _LIST_ENTRY IrpList;
    ULONG TopLevelIrp;
    struct _DEVICE_OBJECT *DeviceToVerify;
    ULONG ReadClusterSize;
    UCHAR ForwardClusterOnly;
    UCHAR DisablePageFaultClustering;
    UCHAR DeadThread;
    UCHAR HideFromDebugger;
    ULONG HasTerminated;
    ULONG GrantedAccess;
    struct _EPROCESS *ThreadsProcess;
    PVOID StartAddress;
    PVOID Win32StartAddress;
    ULONG LpcReceivedMessageId;
    UCHAR LpcExitThreadCalled;
    UCHAR HardErrorsAreDisabled;
    UCHAR LpcReceivedMsgIdValid;
    UCHAR ActiveImpersonationInfo;
    LONG PerformanceCountHigh;
    struct _LIST_ENTRY ThreadListEntry;
};

typedef struct _ETIMER {
    struct _KTIMER KeTimer;
    struct _KAPC TimerApc;
    struct _KDPC TimerDpc;
    struct _LIST_ENTRY ActiveTimerListEntry;
    ULONG Lock;
    LONG Period;
    UCHAR ApcAssociated;
    UCHAR WakeTimer;
    struct _LIST_ENTRY WakeTimerListEntry;
};

typedef struct _EVENT_COUNTER {
    ULONG RefCount;
    struct _KEVENT Event;
    struct _LIST_ENTRY ListEntry;
};

typedef struct _EXCEPTION_RECORD {
    LONG ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
};

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PLONG Handler;
};

typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PUCHAR FastIoCheckIfPossible;
    PUCHAR FastIoRead;
    PUCHAR FastIoWrite;
    PUCHAR FastIoQueryBasicInfo;
    PUCHAR FastIoQueryStandardInfo;
    PUCHAR FastIoLock;
    PUCHAR FastIoUnlockSingle;
    PUCHAR FastIoUnlockAll;
    PUCHAR FastIoUnlockAllByKey;
    PUCHAR FastIoDeviceControl;
    PVOID AcquireFileForNtCreateSection;
    PVOID ReleaseFileForNtCreateSection;
    PVOID FastIoDetachDevice;
    PUCHAR FastIoQueryNetworkOpenInfo;
    PLONG AcquireForModWrite;
    PUCHAR MdlRead;
    PUCHAR MdlReadComplete;
    PUCHAR PrepareMdlWrite;
    PUCHAR MdlWriteComplete;
    PUCHAR FastIoReadCompressed;
    PUCHAR FastIoWriteCompressed;
    PUCHAR MdlReadCompleteCompressed;
    PUCHAR MdlWriteCompleteCompressed;
    PUCHAR FastIoQueryOpen;
    PLONG ReleaseForModWrite;
    PLONG AcquireForCcFlush;
    PLONG ReleaseForCcFlush;
};

typedef struct _FAST_MUTEX {
    LONG Count;
    struct _KTHREAD *Owner;
    ULONG Contention;
    struct _KEVENT Event;
    ULONG OldIrql;
};

typedef struct _FDO_EXTENSION {
    struct _SINGLE_LIST_ENTRY List;
    LONG ExtensionType;
    struct _PCI_MJ_DISPATCH_TABLE *IrpDispatchTable;
    UCHAR DeviceState;
    UCHAR TentativeNextState;
    struct _FAST_MUTEX StateMutex;
    struct _KEVENT SecondaryExtLock;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _DEVICE_OBJECT *FunctionalDeviceObject;
    struct _DEVICE_OBJECT *AttachedDeviceObject;
    struct _KEVENT ChildListLock;
    struct _PDO_EXTENSION *ChildPdoList;
    struct _FDO_EXTENSION *BusRootFdoExtension;
    struct _FDO_EXTENSION *ParentFdoExtension;
    struct _PDO_EXTENSION *ChildBridgePdoList;
    struct _PCI_BUS_INTERFACE_STANDARD *PciBusInterface;
    UCHAR MaxSubordinateBus;
    struct _BUS_HANDLER *BusHandler;
    UCHAR BaseBus;
    UCHAR Fake : 1;
    UCHAR Scanned : 1;
    UCHAR ArbitersInitialized : 1;
    UCHAR BrokenVideoHackApplied : 1;
    UCHAR Hibernated : 1;
    struct PCI_POWER_STATE PowerState;
    struct _SINGLE_LIST_ENTRY SecondaryExtension;
    ULONG ChildWaitWakeCount;
    struct _PCI_COMMON_CONFIG *IchHackConfig;
    struct _PCI_LOCK Lock;
};

typedef struct _FILE_BASIC_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};

typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    struct _SID Sid;
};

typedef struct _FILE_LOCK_INFO {
    union _LARGE_INTEGER StartingByte;
    union _LARGE_INTEGER Length;
    UCHAR ExclusiveLock;
    ULONG Key;
    struct _FILE_OBJECT *FileObject;
    PVOID ProcessId;
    union _LARGE_INTEGER EndingByte;
};

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    union _LARGE_INTEGER CreationTime;
    union _LARGE_INTEGER LastAccessTime;
    union _LARGE_INTEGER LastWriteTime;
    union _LARGE_INTEGER ChangeTime;
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};

typedef struct _FILE_OBJECT {
    SHORT Type;
    SHORT Size;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _VPB *Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    struct _SECTION_OBJECT_POINTERS *SectionObjectPointer;
    PVOID PrivateCacheMap;
    LONG FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    UCHAR LockOperation;
    UCHAR DeletePending;
    UCHAR ReadAccess;
    UCHAR WriteAccess;
    UCHAR DeleteAccess;
    UCHAR SharedRead;
    UCHAR SharedWrite;
    UCHAR SharedDelete;
    ULONG Flags;
    struct _UNICODE_STRING FileName;
    union _LARGE_INTEGER CurrentByteOffset;
    ULONG Waiters;
    ULONG Busy;
    PVOID LastLock;
    struct _KEVENT Lock;
    struct _KEVENT Event;
    struct _IO_COMPLETION_CONTEXT *CompletionContext;
};

typedef struct _FILE_STANDARD_INFORMATION {
    union _LARGE_INTEGER AllocationSize;
    union _LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    UCHAR DeletePending;
    UCHAR Directory;
};

typedef struct _FLOATING_SAVE_AREA {
    ULONG ControlWord;
    ULONG StatusWord;
    ULONG TagWord;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    UCHAR RegisterArea[80];
    ULONG Cr0NpxState;
};

typedef struct _FNSAVE_FORMAT {
    ULONG ControlWord;
    ULONG StatusWord;
    ULONG TagWord;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    UCHAR RegisterArea[80];
};

typedef struct _FS_FILTER_CALLBACKS {
    ULONG SizeOfFsFilterCallbacks;
    ULONG Reserved;
    PLONG PreAcquireForSectionSynchronization;
    PVOID PostAcquireForSectionSynchronization;
    PLONG PreReleaseForSectionSynchronization;
    PVOID PostReleaseForSectionSynchronization;
    PLONG PreAcquireForCcFlush;
    PVOID PostAcquireForCcFlush;
    PLONG PreReleaseForCcFlush;
    PVOID PostReleaseForCcFlush;
    PLONG PreAcquireForModifiedPageWriter;
    PVOID PostAcquireForModifiedPageWriter;
    PLONG PreReleaseForModifiedPageWriter;
    PVOID PostReleaseForModifiedPageWriter;
    PLONG PreStreamFileObjectCreate;
    PVOID PostStreamFileObjectCreate;
};

typedef struct _FS_FILTER_CALLBACK_DATA {
    ULONG SizeOfFsFilterCallbackData;
    UCHAR Operation;
    UCHAR Reserved;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    union _FS_FILTER_PARAMETERS Parameters;
};

typedef struct _FXSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    USHORT TagWord;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    ULONG ErrorSelector;
    ULONG DataOffset;
    ULONG DataSelector;
    ULONG MXCsr;
    ULONG Reserved2;
    UCHAR RegisterArea[128];
    UCHAR Reserved3[128];
    UCHAR Reserved4[224];
    UCHAR Align16Byte[8];
};

typedef struct _FX_SAVE_AREA {
    union {
        struct _FNSAVE_FORMAT FnArea;
        struct _FXSAVE_FORMAT FxArea;
    } U;
    ULONG NpxSavedCpu;
    ULONG Cr0NpxState;
};

typedef struct _GENERAL_LOOKASIDE {
    union _SLIST_HEADER ListHead;
    USHORT Depth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG AllocateHits;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG FreeHits;
    LONG Type;
    ULONG Tag;
    ULONG Size;
    PVOID *Allocate;
    PVOID Free;
    struct _LIST_ENTRY ListEntry;
    ULONG LastTotalAllocates;
    ULONG LastAllocateMisses;
    ULONG LastAllocateHits;
    ULONG Future[2];
};

typedef struct _GENERIC_MAPPING {
    ULONG GenericRead;
    ULONG GenericWrite;
    ULONG GenericExecute;
    ULONG GenericAll;
};

typedef struct _GUID {
    ULONG Data1;
    USHORT Data2;
    USHORT Data3;
    UCHAR Data4[8];
};

typedef struct _HANDLE_TABLE {
    ULONG Flags;
    LONG HandleCount;
    struct _HANDLE_TABLE_ENTRY ***Table;
    struct _EPROCESS *QuotaProcess;
    PVOID UniqueProcessId;
    LONG FirstFreeTableEntry;
    LONG NextIndexNeedingPool;
    struct _ERESOURCE HandleTableLock;
    struct _LIST_ENTRY HandleTableList;
    struct _KEVENT HandleContentionEvent;
};

typedef struct _HANDLE_TABLE_ENTRY {
    PVOID Object;
    ULONG ObAttributes;
    ULONG GrantedAccess;
    USHORT GrantedAccessIndex;
    USHORT CreatorBackTraceIndex;
    LONG NextFreeTableEntry;
};

typedef struct _HARDWARE_PTE_X86 {
    ULONG Valid : 1;
    ULONG Write : 1;
    ULONG Owner : 1;
    ULONG WriteThrough : 1;
    ULONG CacheDisable : 1;
    ULONG Accessed : 1;
    ULONG Dirty : 1;
    ULONG LargePage : 1;
    ULONG Global : 1;
    ULONG CopyOnWrite : 1;
    ULONG Prototype : 1;
    ULONG reserved : 1;
    ULONG PageFrameNumber : 20;
};

typedef struct _HBASE_BLOCK {
    ULONG Signature;
    ULONG Sequence1;
    ULONG Sequence2;
    union _LARGE_INTEGER TimeStamp;
    ULONG Major;
    ULONG Minor;
    ULONG Type;
    ULONG Format;
    ULONG RootCell;
    ULONG Length;
    ULONG Cluster;
    UCHAR FileName[64];
    ULONG Reserved1[99];
    ULONG CheckSum;
    ULONG Reserved2[896];
};

typedef struct _HHIVE {
    ULONG Signature;
    struct _CELL_DATA **GetCellRoutine;
    PVOID *Allocate;
    PVOID Free;
    PUCHAR FileSetSize;
    PUCHAR FileWrite;
    PUCHAR FileRead;
    PUCHAR FileFlush;
    struct _HBASE_BLOCK *BaseBlock;
    struct _RTL_BITMAP DirtyVector;
    ULONG DirtyCount;
    ULONG DirtyAlloc;
    ULONG Cluster;
    UCHAR Flat;
    UCHAR ReadOnly;
    UCHAR Log;
    UCHAR Alternate;
    ULONG HiveFlags;
    ULONG LogSize;
    ULONG RefreshCount;
    ULONG StorageTypeCount;
    ULONG Version;
    struct _DUAL Storage[2];
};

typedef struct _HIVE_LIST_ENTRY {
    PUSHORT Name;
    PUSHORT BaseName;
    struct _CMHIVE *CmHive;
    ULONG HHiveFlags;
    ULONG CmHiveFlags;
};

typedef struct _HMAP_DIRECTORY {
    struct _HMAP_TABLE *Directory[1024];
};

typedef struct _HMAP_ENTRY {
    ULONG BlockAddress;
    ULONG BinAddress;
};

typedef struct _HMAP_TABLE {
    struct _HMAP_ENTRY Table[512];
};

typedef struct _I386_LOADER_BLOCK {
    PVOID CommonDataArea;
    ULONG MachineType;
    ULONG VirtualBias;
};

typedef struct _IA64_LOADER_BLOCK {
    ULONG PlaceHolder;
};

typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG VirtualAddress;
    ULONG Size;
};

typedef struct _IMAGE_DOS_HEADER {
    USHORT e_magic;
    USHORT e_cblp;
    USHORT e_cp;
    USHORT e_crlc;
    USHORT e_cparhdr;
    USHORT e_minalloc;
    USHORT e_maxalloc;
    USHORT e_ss;
    USHORT e_sp;
    USHORT e_csum;
    USHORT e_ip;
    USHORT e_cs;
    USHORT e_lfarlc;
    USHORT e_ovno;
    USHORT e_res[4];
    USHORT e_oemid;
    USHORT e_oeminfo;
    USHORT e_res2[10];
    LONG e_lfanew;
};

typedef struct _IMAGE_FILE_HEADER {
    USHORT Machine;
    USHORT NumberOfSections;
    ULONG TimeDateStamp;
    ULONG PointerToSymbolTable;
    ULONG NumberOfSymbols;
    USHORT SizeOfOptionalHeader;
    USHORT Characteristics;
};

typedef struct _IMAGE_INFO {
    ULONG Properties;
    ULONG ImageAddressingMode : 8;
    ULONG SystemModeImage : 1;
    ULONG ImageMappedToAllPids : 1;
    ULONG Reserved : 22;
    PVOID ImageBase;
    ULONG ImageSelector;
    ULONG ImageSize;
    ULONG ImageSectionNumber;
};

typedef struct _IMAGE_NT_HEADERS {
    ULONG Signature;
    struct _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

typedef struct _IMAGE_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR MajorLinkerVersion;
    UCHAR MinorLinkerVersion;
    ULONG SizeOfCode;
    ULONG SizeOfInitializedData;
    ULONG SizeOfUninitializedData;
    ULONG AddressOfEntryPoint;
    ULONG BaseOfCode;
    ULONG BaseOfData;
    ULONG ImageBase;
    ULONG SectionAlignment;
    ULONG FileAlignment;
    USHORT MajorOperatingSystemVersion;
    USHORT MinorOperatingSystemVersion;
    USHORT MajorImageVersion;
    USHORT MinorImageVersion;
    USHORT MajorSubsystemVersion;
    USHORT MinorSubsystemVersion;
    ULONG Win32VersionValue;
    ULONG SizeOfImage;
    ULONG SizeOfHeaders;
    ULONG CheckSum;
    USHORT Subsystem;
    USHORT DllCharacteristics;
    ULONG SizeOfStackReserve;
    ULONG SizeOfStackCommit;
    ULONG SizeOfHeapReserve;
    ULONG SizeOfHeapCommit;
    ULONG LoaderFlags;
    ULONG NumberOfRvaAndSizes;
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct _IMAGE_SECTION_HEADER {
    UCHAR Name[8];
    union {
        ULONG PhysicalAddress;
        ULONG VirtualSize;
    } Misc;
    ULONG VirtualAddress;
    ULONG SizeOfRawData;
    ULONG PointerToRawData;
    ULONG PointerToRelocations;
    ULONG PointerToLinenumbers;
    USHORT NumberOfRelocations;
    USHORT NumberOfLinenumbers;
    ULONG Characteristics;
};

typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[3];
};

typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
};

typedef struct _IO_CLIENT_EXTENSION {
    struct _IO_CLIENT_EXTENSION *NextExtension;
    PVOID ClientIdentificationAddress;
};

typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
};

typedef struct _IO_COUNTERS {
    ULONG64 ReadOperationCount;
    ULONG64 WriteOperationCount;
    ULONG64 OtherOperationCount;
    ULONG64 ReadTransferCount;
    ULONG64 WriteTransferCount;
    ULONG64 OtherTransferCount;
};

typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;
    UCHAR ShareDisposition;
    UCHAR Spare1;
    USHORT Flags;
    USHORT Spare2;
    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Port;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Memory;
        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;
        } Interrupt;
        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;
        struct {
            ULONG Length;
            ULONG Alignment;
            union _LARGE_INTEGER MinimumAddress;
            union _LARGE_INTEGER MaximumAddress;
        } Generic;
        struct {
            ULONG Data[3];
        } DevicePrivate;
        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;
        struct {
            PVOID AssignedResource;
        } AssignedResource;
        struct {
            UCHAR Type;
            UCHAR Reserved[3];
            PVOID AssignedResource;
            union _LARGE_INTEGER Transformation;
        } SubAllocateFrom;
        struct {
            ULONG Priority;
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;
    } u;
};

typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    LONG InterfaceType;
    ULONG BusNumber;
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    struct _IO_RESOURCE_LIST List[1];
};

typedef struct _IO_SECURITY_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _ACCESS_STATE *AccessState;
    ULONG DesiredAccess;
    ULONG FullCreateOptions;
};

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;
    union {
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT FileAttributes;
            USHORT ShareAccess;
            ULONG EaLength;
        } Create;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters;
        } CreatePipe;
        struct {
            struct _IO_SECURITY_CONTEXT *SecurityContext;
            ULONG Options;
            USHORT Reserved;
            USHORT ShareAccess;
            struct _MAILSLOT_CREATE_PARAMETERS *Parameters;
        } CreateMailslot;
        struct {
            ULONG Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } Read;
        struct {
            ULONG Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } Write;
        struct {
            ULONG Length;
            struct _STRING *FileName;
            LONG FileInformationClass;
            ULONG FileIndex;
        } QueryDirectory;
        struct {
            ULONG Length;
            ULONG CompletionFilter;
        } NotifyDirectory;
        struct {
            ULONG Length;
            LONG FileInformationClass;
        } QueryFile;
        struct {
            ULONG Length;
            LONG FileInformationClass;
            struct _FILE_OBJECT *FileObject;
            UCHAR ReplaceIfExists;
            UCHAR AdvanceOnly;
            ULONG ClusterCount;
            PVOID DeleteHandle;
        } SetFile;
        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG EaIndex;
        } QueryEa;
        struct {
            ULONG Length;
        } SetEa;
        struct {
            ULONG Length;
            LONG FsInformationClass;
        } QueryVolume;
        struct {
            ULONG Length;
            LONG FsInformationClass;
        } SetVolume;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
        struct {
            union _LARGE_INTEGER *Length;
            ULONG Key;
            union _LARGE_INTEGER ByteOffset;
        } LockControl;
        struct {
            ULONG OutputBufferLength;
            ULONG InputBufferLength;
            ULONG IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
        struct {
            ULONG SecurityInformation;
            ULONG Length;
        } QuerySecurity;
        struct {
            ULONG SecurityInformation;
            PVOID SecurityDescriptor;
        } SetSecurity;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } MountVolume;
        struct {
            struct _VPB *Vpb;
            struct _DEVICE_OBJECT *DeviceObject;
        } VerifyVolume;
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
        struct {
            ULONG Length;
            PVOID StartSid;
            struct _FILE_GET_QUOTA_INFORMATION *SidList;
            ULONG SidListLength;
        } QueryQuota;
        struct {
            ULONG Length;
        } SetQuota;
        struct {
            LONG Type;
        } QueryDeviceRelations;
        struct {
            struct _GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            struct _INTERFACE *Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
        struct {
            struct _DEVICE_CAPABILITIES *Capabilities;
        } DeviceCapabilities;
        struct {
            struct _IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
        } FilterResourceRequirements;
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG Length;
        } ReadWriteConfig;
        struct {
            UCHAR Lock;
        } SetLock;
        struct {
            LONG IdType;
        } QueryId;
        struct {
            LONG DeviceTextType;
            ULONG LocaleId;
        } QueryDeviceText;
        struct {
            UCHAR InPath;
            UCHAR Reserved[3];
            LONG Type;
        } UsageNotification;
        struct {
            LONG PowerState;
        } WaitWake;
        struct {
            struct _POWER_SEQUENCE *PowerSequence;
        } PowerSequence;
        struct {
            ULONG SystemContext;
            LONG Type;
            union _POWER_STATE State;
            LONG ShutdownType;
        } Power;
        struct {
            struct _CM_RESOURCE_LIST *AllocatedResources;
            struct _CM_RESOURCE_LIST *AllocatedResourcesTranslated;
        } StartDevice;
        struct {
            ULONG ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;
    PLONG CompletionRoutine;
    PVOID Context;
};

typedef struct _IO_STATUS_BLOCK {
    LONG Status;
    PVOID Pointer;
    ULONG Information;
};

typedef struct _IO_TIMER {
    SHORT Type;
    SHORT TimerFlag;
    struct _LIST_ENTRY TimerList;
    PVOID TimerRoutine;
    PVOID Context;
    struct _DEVICE_OBJECT *DeviceObject;
};

typedef struct _IRP {
    SHORT Type;
    USHORT Size;
    struct _MDL *MdlAddress;
    ULONG Flags;
    union {
        struct _IRP *MasterIrp;
        LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;
    struct _LIST_ENTRY ThreadListEntry;
    struct _IO_STATUS_BLOCK IoStatus;
    CHAR RequestorMode;
    UCHAR PendingReturned;
    CHAR StackCount;
    CHAR CurrentLocation;
    UCHAR Cancel;
    UCHAR CancelIrql;
    CHAR ApcEnvironment;
    UCHAR AllocationFlags;
    struct _IO_STATUS_BLOCK *UserIosb;
    struct _KEVENT *UserEvent;
    union {
        struct {
            PVOID UserApcRoutine;
            PVOID UserApcContext;
        } AsynchronousParameters;
        union _LARGE_INTEGER AllocationSize;
    } Overlay;
    PVOID CancelRoutine;
    PVOID UserBuffer;
    union {
        struct {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
            PVOID DriverContext[4];
            struct _ETHREAD *Thread;
            PCHAR AuxiliaryBuffer;
            struct _LIST_ENTRY ListEntry;
            struct _IO_STACK_LOCATION *CurrentStackLocation;
            ULONG PacketType;
            struct _FILE_OBJECT *OriginalFileObject;
        } Overlay;
        struct _KAPC Apc;
        PVOID CompletionKey;
    } Tail;
};

typedef struct _KAPC {
    SHORT Type;
    SHORT Size;
    ULONG Spare0;
    struct _KTHREAD *Thread;
    struct _LIST_ENTRY ApcListEntry;
    PVOID KernelRoutine;
    PVOID RundownRoutine;
    PVOID NormalRoutine;
    PVOID NormalContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    CHAR ApcStateIndex;
    CHAR ApcMode;
    UCHAR Inserted;
};

typedef struct _KAPC_STATE {
    struct _LIST_ENTRY ApcListHead[2];
    struct _KPROCESS *Process;
    UCHAR KernelApcInProgress;
    UCHAR KernelApcPending;
    UCHAR UserApcPending;
};

typedef struct _KDEVICE_QUEUE {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY DeviceListHead;
    ULONG Lock;
    UCHAR Busy;
};

typedef struct _KDEVICE_QUEUE_ENTRY {
    struct _LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    UCHAR Inserted;
};

typedef struct _KDPC {
    SHORT Type;
    UCHAR Number;
    UCHAR Importance;
    struct _LIST_ENTRY DpcListEntry;
    PVOID DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
    PULONG Lock;
};

typedef struct _KEVENT {
    struct _DISPATCHER_HEADER Header;
};

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG NameLength;
    USHORT Name[1];
};

typedef struct _KGDTENTRY {
    USHORT LimitLow;
    USHORT BaseLow;
    union {
        struct {
            UCHAR BaseMid;
            UCHAR Flags1;
            UCHAR Flags2;
            UCHAR BaseHi;
        } Bytes;
        struct {
            ULONG BaseMid : 8;
            ULONG Type : 5;
            ULONG Dpl : 2;
            ULONG Pres : 1;
            ULONG LimitHi : 4;
            ULONG Sys : 1;
            ULONG Reserved_0 : 1;
            ULONG Default_Big : 1;
            ULONG Granularity : 1;
            ULONG BaseHi : 8;
        } Bits;
    } HighWord;
};

typedef struct _KIDTENTRY {
    USHORT Offset;
    USHORT Selector;
    USHORT Access;
    USHORT ExtendedOffset;
};

typedef struct _KINTERRUPT {
    SHORT Type;
    SHORT Size;
    struct _LIST_ENTRY InterruptListEntry;
    PUCHAR ServiceRoutine;
    PVOID ServiceContext;
    ULONG SpinLock;
    ULONG Spare1;
    PULONG ActualLock;
    PVOID DispatchAddress;
    ULONG Vector;
    UCHAR Irql;
    UCHAR SynchronizeIrql;
    UCHAR FloatingSave;
    UCHAR Connected;
    CHAR Number;
    UCHAR ShareVector;
    LONG Mode;
    ULONG ServiceCount;
    ULONG Spare3;
    ULONG DispatchCode[106];
};

typedef struct _KMUTANT {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    UCHAR Abandoned;
    UCHAR ApcDisable;
};

typedef struct _KPCR {
    struct _NT_TIB NtTib;
    struct _KPCR *SelfPcr;
    struct _KPRCB *Prcb;
    UCHAR Irql;
    ULONG IRR;
    ULONG IrrActive;
    ULONG IDR;
    ULONG Reserved2;
    struct _KIDTENTRY *IDT;
    struct _KGDTENTRY *GDT;
    struct _KTSS *TSS;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG SetMember;
    ULONG StallScaleFactor;
    UCHAR DebugActive;
    UCHAR Number;
    UCHAR Spare0;
    UCHAR Reserved[1];
    ULONG VdmAlert;
    ULONG KernelReserved[14];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG InterruptMode;
    UCHAR Spare1;
    ULONG KernelReserved2[17];
    struct _KPRCB PrcbData;
};

typedef struct _KPRCB {
    USHORT MinorVersion;
    USHORT MajorVersion;
    struct _KTHREAD *CurrentThread;
    struct _KTHREAD *NextThread;
    struct _KTHREAD *IdleThread;
    CHAR Number;
    CHAR Reserved;
    USHORT BuildType;
    ULONG SetMember;
    CHAR CpuType;
    CHAR CpuID;
    USHORT CpuStep;
    struct _KPROCESSOR_STATE ProcessorState;
    ULONG KernelReserved[16];
    ULONG HalReserved[16];
    struct _KSPIN_LOCK_QUEUE LockQueue[16];
    struct _KTHREAD *NpxThread;
    ULONG InterruptCount;
    ULONG KernelTime;
    ULONG UserTime;
    ULONG DpcTime;
    ULONG InterruptTime;
    ULONG ApcBypassCount;
    ULONG DpcBypassCount;
    ULONG AdjustDpcThreshold;
    ULONG DebugDpcTime;
    ULONG Spare2[4];
    ULONG ThreadStartCount[2];
    PVOID SpareHotData[2];
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadNotPossible;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    ULONG KeAlignmentFixupCount;
    ULONG KeContextSwitches;
    ULONG KeDcacheFlushCount;
    ULONG KeExceptionDispatchCount;
    ULONG KeFirstLevelTbFills;
    ULONG KeFloatingEmulationCount;
    ULONG KeIcacheFlushCount;
    ULONG KeSecondLevelTbFills;
    ULONG KeSystemCalls;
    ULONG ReservedCounter[8];
    PVOID SmallIrpFreeEntry;
    PVOID LargeIrpFreeEntry;
    PVOID MdlFreeEntry;
    PVOID CreateInfoFreeEntry;
    PVOID NameBufferFreeEntry;
    PVOID SharedCacheMapEntry;
    ULONG CachePad0[2];
    struct _PP_LOOKASIDE_LIST PPLookasideList[16];
    struct _PP_LOOKASIDE_LIST PPNPagedLookasideList[8];
    struct _PP_LOOKASIDE_LIST PPPagedLookasideList[8];
    UCHAR ReservedPad[128];
    PVOID CurrentPacket[3];
    ULONG TargetSet;
    PVOID WorkerRoutine;
    ULONG IpiFrozen;
    ULONG CachePad1[2];
    ULONG RequestSummary;
    struct _KPRCB *SignalDone;
    ULONG ReverseStall;
    PVOID IpiFrame;
    ULONG CachePad2[4];
    ULONG DpcInterruptRequested;
    PVOID ChainedInterruptList;
    ULONG CachePad3[2];
    ULONG MaximumDpcQueueDepth;
    ULONG MinimumDpcRate;
    ULONG CachePad4[2];
    struct _LIST_ENTRY DpcListHead;
    ULONG DpcQueueDepth;
    ULONG DpcRoutineActive;
    ULONG DpcCount;
    ULONG DpcLastCount;
    ULONG DpcRequestRate;
    PVOID DpcStack;
    ULONG KernelReserved2[10];
    ULONG DpcLock;
    UCHAR SkipTick;
    UCHAR VendorString[13];
    ULONG MHz;
    ULONG FeatureBits;
    union _LARGE_INTEGER UpdateSignature;
    ULONG QuantumEnd;
    struct _PROCESSOR_POWER_STATE PowerState;
    struct _FX_SAVE_AREA NpxSaveArea;
};

typedef struct _KPROCESS {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY ProfileListHead;
    ULONG DirectoryTableBase[2];
    struct _KGDTENTRY LdtDescriptor;
    struct _KIDTENTRY Int21Descriptor;
    USHORT IopmOffset;
    UCHAR Iopl;
    UCHAR VdmFlag;
    ULONG ActiveProcessors;
    ULONG KernelTime;
    ULONG UserTime;
    struct _LIST_ENTRY ReadyListHead;
    struct _LIST_ENTRY SwapListEntry;
    struct _LIST_ENTRY ThreadListHead;
    ULONG ProcessLock;
    ULONG Affinity;
    USHORT StackCount;
    CHAR BasePriority;
    CHAR ThreadQuantum;
    UCHAR AutoAlignment;
    UCHAR State;
    UCHAR ThreadSeed;
    UCHAR DisableBoost;
    UCHAR PowerState;
    UCHAR DisableQuantum;
    UCHAR Spare[2];
};

typedef struct _KPROCESSOR_STATE {
    struct _CONTEXT ContextFrame;
    struct _KSPECIAL_REGISTERS SpecialRegisters;
};

typedef struct _KQUEUE {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY EntryListHead;
    ULONG CurrentCount;
    ULONG MaximumCount;
    struct _LIST_ENTRY ThreadListHead;
};

typedef struct _KSEMAPHORE {
    struct _DISPATCHER_HEADER Header;
    LONG Limit;
};

typedef struct _KSPECIAL_REGISTERS {
    ULONG Cr0;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONG KernelDr0;
    ULONG KernelDr1;
    ULONG KernelDr2;
    ULONG KernelDr3;
    ULONG KernelDr6;
    ULONG KernelDr7;
    struct _DESCRIPTOR Gdtr;
    struct _DESCRIPTOR Idtr;
    USHORT Tr;
    USHORT Ldtr;
    ULONG Reserved[6];
};

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE *Next;
    PULONG Lock;
};

typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};

typedef struct _KTHREAD {
    struct _DISPATCHER_HEADER Header;
    struct _LIST_ENTRY MutantListHead;
    PVOID InitialStack;
    PVOID StackLimit;
    PVOID Teb;
    PVOID TlsArray;
    PVOID KernelStack;
    UCHAR DebugActive;
    UCHAR State;
    UCHAR Alerted[2];
    UCHAR Iopl;
    UCHAR NpxState;
    CHAR Saturation;
    CHAR Priority;
    struct _KAPC_STATE ApcState;
    ULONG ContextSwitches;
    LONG WaitStatus;
    UCHAR WaitIrql;
    CHAR WaitMode;
    UCHAR WaitNext;
    UCHAR WaitReason;
    struct _KWAIT_BLOCK *WaitBlockList;
    struct _LIST_ENTRY WaitListEntry;
    ULONG WaitTime;
    CHAR BasePriority;
    UCHAR DecrementCount;
    CHAR PriorityDecrement;
    CHAR Quantum;
    struct _KWAIT_BLOCK WaitBlock[4];
    PVOID LegoData;
    ULONG KernelApcDisable;
    ULONG UserAffinity;
    UCHAR SystemAffinityActive;
    UCHAR PowerState;
    UCHAR NpxIrql;
    UCHAR VdmSafe;
    PVOID ServiceTable;
    struct _KQUEUE *Queue;
    ULONG ApcQueueLock;
    struct _KTIMER Timer;
    struct _LIST_ENTRY QueueListEntry;
    ULONG Affinity;
    UCHAR Preempted;
    UCHAR ProcessReadyQueue;
    UCHAR KernelStackResident;
    UCHAR NextProcessor;
    PVOID CallbackStack;
    PVOID Win32Thread;
    struct _KTRAP_FRAME *TrapFrame;
    struct _KAPC_STATE *ApcStatePointer[2];
    CHAR PreviousMode;
    UCHAR EnableStackSwap;
    UCHAR LargeStack;
    UCHAR ResourceIndex;
    ULONG KernelTime;
    ULONG UserTime;
    struct _KAPC_STATE SavedApcState;
    UCHAR Alertable;
    UCHAR ApcStateIndex;
    UCHAR ApcQueueable;
    UCHAR AutoAlignment;
    PVOID StackBase;
    struct _KAPC SuspendApc;
    struct _KSEMAPHORE SuspendSemaphore;
    struct _LIST_ENTRY ThreadListEntry;
    CHAR FreezeCount;
    CHAR SuspendCount;
    UCHAR IdealProcessor;
    UCHAR DisableBoost;
};

typedef struct _KTIMER {
    struct _DISPATCHER_HEADER Header;
    union _ULARGE_INTEGER DueTime;
    struct _LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;
    LONG Period;
};

typedef struct _KTRAP_FRAME {
    ULONG DbgEbp;
    ULONG DbgEip;
    ULONG DbgArgMark;
    ULONG DbgArgPointer;
    ULONG TempSegCs;
    ULONG TempEsp;
    ULONG Dr0;
    ULONG Dr1;
    ULONG Dr2;
    ULONG Dr3;
    ULONG Dr6;
    ULONG Dr7;
    ULONG SegGs;
    ULONG SegEs;
    ULONG SegDs;
    ULONG Edx;
    ULONG Ecx;
    ULONG Eax;
    ULONG PreviousPreviousMode;
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    ULONG SegFs;
    ULONG Edi;
    ULONG Esi;
    ULONG Ebx;
    ULONG Ebp;
    ULONG ErrCode;
    ULONG Eip;
    ULONG SegCs;
    ULONG EFlags;
    ULONG HardwareEsp;
    ULONG HardwareSegSs;
    ULONG V86Es;
    ULONG V86Ds;
    ULONG V86Fs;
    ULONG V86Gs;
};

typedef struct _KTSS {
    USHORT Backlink;
    USHORT Reserved0;
    ULONG Esp0;
    USHORT Ss0;
    USHORT Reserved1;
    ULONG NotUsed1[4];
    ULONG CR3;
    ULONG Eip;
    ULONG NotUsed2[9];
    USHORT Es;
    USHORT Reserved2;
    USHORT Cs;
    USHORT Reserved3;
    USHORT Ss;
    USHORT Reserved4;
    USHORT Ds;
    USHORT Reserved5;
    USHORT Fs;
    USHORT Reserved6;
    USHORT Gs;
    USHORT Reserved7;
    USHORT LDT;
    USHORT Reserved8;
    USHORT Flags;
    USHORT IoMapBase;
    struct _KiIoAccessMap IoMaps[1];
    UCHAR IntDirectionMap[32];
};

typedef struct _KUSER_SHARED_DATA {
    ULONG TickCountLow;
    ULONG TickCountMultiplier;
    struct _KSYSTEM_TIME InterruptTime;
    struct _KSYSTEM_TIME SystemTime;
    struct _KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    USHORT NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG Reserved2[8];
    LONG NtProductType;
    UCHAR ProductTypeIsValid;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    UCHAR ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    ULONG TimeSlip;
    LONG AlternativeArchitecture;
    union _LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    UCHAR KdDebuggerEnabled;
};

typedef struct _KWAIT_BLOCK {
    struct _LIST_ENTRY WaitListEntry;
    struct _KTHREAD *Thread;
    PVOID Object;
    struct _KWAIT_BLOCK *NextWaitBlock;
    USHORT WaitKey;
    USHORT WaitType;
};

typedef struct _KiIoAccessMap {
    UCHAR DirectionMap[32];
    UCHAR IoMap[8196];
};

typedef struct _LDR_DATA_TABLE_ENTRY {
    struct _LIST_ENTRY InLoadOrderLinks;
    struct _LIST_ENTRY InMemoryOrderLinks;
    struct _LIST_ENTRY InInitializationOrderLinks;
    PVOID DllBase;
    PVOID EntryPoint;
    ULONG SizeOfImage;
    struct _UNICODE_STRING FullDllName;
    struct _UNICODE_STRING BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT TlsIndex;
    struct _LIST_ENTRY HashLinks;
    PVOID SectionPointer;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    PVOID LoadedImports;
};

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
};

typedef struct _LOADER_PARAMETER_BLOCK {
    struct _LIST_ENTRY LoadOrderListHead;
    struct _LIST_ENTRY MemoryDescriptorListHead;
    struct _LIST_ENTRY BootDriverListHead;
    ULONG KernelStack;
    ULONG Prcb;
    ULONG Process;
    ULONG Thread;
    ULONG RegistryLength;
    PVOID RegistryBase;
    struct _CONFIGURATION_COMPONENT_DATA *ConfigurationRoot;
    PCHAR ArcBootDeviceName;
    PCHAR ArcHalDeviceName;
    PCHAR NtBootPathName;
    PCHAR NtHalPathName;
    PCHAR LoadOptions;
    struct _NLS_DATA_BLOCK *NlsData;
    struct _ARC_DISK_INFORMATION *ArcDiskInformation;
    PVOID OemFontFile;
    struct _SETUP_LOADER_BLOCK *SetupLoaderBlock;
    struct _LOADER_PARAMETER_EXTENSION *Extension;
    union {
        struct _I386_LOADER_BLOCK I386;
        struct _ALPHA_LOADER_BLOCK Alpha;
        struct _IA64_LOADER_BLOCK Ia64;
    } u;
};

typedef struct _LOADER_PARAMETER_EXTENSION {
    ULONG Size;
    struct _PROFILE_PARAMETER_BLOCK Profile;
    ULONG MajorVersion;
    ULONG MinorVersion;
    PVOID InfFileImage;
    ULONG InfFileSize;
    PVOID TriageDumpBlock;
};

typedef struct _LPCP_MESSAGE {
    struct _LIST_ENTRY Entry;
    struct _SINGLE_LIST_ENTRY FreeEntry;
    ULONG Reserved0;
    USHORT Reserved1;
    USHORT ZoneIndex;
    PVOID SenderPort;
    struct _ETHREAD *RepliedToThread;
    PVOID PortContext;
    struct _PORT_MESSAGE Request;
};

typedef struct _LPCP_NONPAGED_PORT_QUEUE {
    struct _KSEMAPHORE Semaphore;
    struct _LPCP_PORT_OBJECT *BackPointer;
};

typedef struct _LPCP_PORT_OBJECT {
    ULONG Length;
    ULONG Flags;
    struct _LPCP_PORT_OBJECT *ConnectionPort;
    struct _LPCP_PORT_OBJECT *ConnectedPort;
    struct _LPCP_PORT_QUEUE MsgQueue;
    struct _CLIENT_ID Creator;
    PVOID ClientSectionBase;
    PVOID ServerSectionBase;
    PVOID PortContext;
    ULONG MaxMessageLength;
    ULONG MaxConnectionInfoLength;
    struct _ETHREAD *ClientThread;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
    struct _LIST_ENTRY LpcReplyChainHead;
    struct _LIST_ENTRY LpcDataInfoChainHead;
    struct _EPROCESS *ServerProcess;
    struct _EPROCESS *MappingProcess;
    ULONG Reserved;
    struct _KEVENT WaitEvent;
};

typedef struct _LPCP_PORT_QUEUE {
    struct _LPCP_NONPAGED_PORT_QUEUE *NonPagedPortQueue;
    struct _KSEMAPHORE *Semaphore;
    struct _LIST_ENTRY ReceiveHead;
};

typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
};

typedef struct _LUID_AND_ATTRIBUTES {
    struct _LUID Luid;
    ULONG Attributes;
};

typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    union _LARGE_INTEGER ReadTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _MBCB {
    SHORT NodeTypeCode;
    SHORT NodeIsInZone;
    ULONG PagesToWrite;
    ULONG DirtyPages;
    ULONG Reserved;
    struct _LIST_ENTRY BitmapRanges;
    LONG64 ResumeWritePage;
    struct _BITMAP_RANGE BitmapRange1;
    struct _BITMAP_RANGE BitmapRange2;
    struct _BITMAP_RANGE BitmapRange3;
};

typedef struct _MCA_EXCEPTION {
    ULONG VersionNumber;
    LONG ExceptionType;
    union _LARGE_INTEGER TimeStamp;
    ULONG ProcessorNumber;
    union {
        struct {
            UCHAR BankNumber;
            union _MCI_STATS Status;
            union _MCI_ADDR Address;
            ULONG64 Misc;
        } Mca;
        struct {
            ULONG64 Address;
            ULONG64 Type;
        } Mce;
    } u;
};

typedef struct _MDL {
    struct _MDL *Next;
    SHORT Size;
    SHORT MdlFlags;
    struct _EPROCESS *Process;
    PVOID MappedSystemVa;
    PVOID StartVa;
    ULONG ByteCount;
    ULONG ByteOffset;
};

typedef struct _MI_VERIFIER_DRIVER_ENTRY {
    struct _LIST_ENTRY Links;
    ULONG Loads;
    ULONG Unloads;
    struct _UNICODE_STRING BaseName;
    PVOID StartAddress;
    PVOID EndAddress;
    ULONG Flags;
    ULONG Signature;
    ULONG Reserved;
    ULONG VerifierPoolLock;
    struct _VI_POOL_ENTRY *PoolHash;
    ULONG PoolHashSize;
    ULONG PoolHashFree;
    ULONG PoolHashReserved;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    ULONG PagedBytes;
    ULONG NonPagedBytes;
    ULONG PeakPagedBytes;
    ULONG PeakNonPagedBytes;
};

typedef struct _MI_VERIFIER_POOL_HEADER {
    ULONG ListIndex;
    struct _MI_VERIFIER_DRIVER_ENTRY *Verifier;
};

typedef struct _MMEXTEND_INFO {
    ULONG64 CommittedSize;
    ULONG ReferenceCount;
};

typedef struct _MMMOD_WRITER_LISTHEAD {
    struct _LIST_ENTRY ListHead;
    struct _KEVENT Event;
};

typedef struct _MMMOD_WRITER_MDL_ENTRY {
    struct _LIST_ENTRY Links;
    union _LARGE_INTEGER WriteOffset;
    union {
        struct _IO_STATUS_BLOCK IoStatus;
        union _LARGE_INTEGER LastByte;
    } u;
    struct _IRP *Irp;
    ULONG LastPageToWrite;
    struct _MMMOD_WRITER_LISTHEAD *PagingListHead;
    struct _LIST_ENTRY *CurrentList;
    struct _MMPAGING_FILE *PagingFile;
    struct _FILE_OBJECT *File;
    struct _CONTROL_AREA *ControlArea;
    struct _ERESOURCE *FileResource;
    struct _MDL Mdl;
    ULONG Page[1];
};

typedef struct _MMPAGING_FILE {
    ULONG Size;
    ULONG MaximumSize;
    ULONG MinimumSize;
    ULONG FreeSpace;
    ULONG CurrentUsage;
    ULONG PeakUsage;
    ULONG Hint;
    ULONG HighestPage;
    struct _MMMOD_WRITER_MDL_ENTRY *Entry[2];
    struct _RTL_BITMAP *Bitmap;
    struct _FILE_OBJECT *File;
    struct _UNICODE_STRING PageFileName;
    ULONG PageFileNumber;
    UCHAR Extended;
    UCHAR HintSetToZero;
};

typedef struct _MMPFN {
    union {
        ULONG Flink;
        ULONG WsIndex;
        struct _KEVENT *Event;
        LONG ReadStatus;
        struct _MMPFN *NextStackPfn;
    } u1;
    struct _MMPTE *PteAddress;
    union {
        ULONG Blink;
        ULONG ShareCount;
        ULONG SecondaryColorFlink;
    } u2;
    union {
        struct _MMPFNENTRY e1;
        struct {
            USHORT ShortFlags;
            USHORT ReferenceCount;
        } e2;
    } u3;
    struct _MMPTE OriginalPte;
    ULONG PteFrame;
};

typedef struct _MMPFNENTRY {
    ULONG Modified : 1;
    ULONG ReadInProgress : 1;
    ULONG WriteInProgress : 1;
    ULONG PrototypePte : 1;
    ULONG PageColor : 3;
    ULONG ParityError : 1;
    ULONG PageLocation : 3;
    ULONG InPageError : 1;
    ULONG VerifierAllocation : 1;
    ULONG RemovalRequested : 1;
    ULONG Reserved : 1;
    ULONG LockCharged : 1;
    ULONG DontUse : 16;
};

typedef struct _MMPTE {
    union {
        ULONG Long;
        struct _MMPTE_HARDWARE Hard;
        struct _HARDWARE_PTE_X86 Flush;
        struct _MMPTE_PROTOTYPE Proto;
        struct _MMPTE_SOFTWARE Soft;
        struct _MMPTE_TRANSITION Trans;
        struct _MMPTE_SUBSECTION Subsect;
        struct _MMPTE_LIST List;
    } u;
};

typedef struct _MMPTE_HARDWARE {
    ULONG Valid : 1;
    ULONG Write : 1;
    ULONG Owner : 1;
    ULONG WriteThrough : 1;
    ULONG CacheDisable : 1;
    ULONG Accessed : 1;
    ULONG Dirty : 1;
    ULONG LargePage : 1;
    ULONG Global : 1;
    ULONG CopyOnWrite : 1;
    ULONG Prototype : 1;
    ULONG reserved : 1;
    ULONG PageFrameNumber : 20;
};

typedef struct _MMPTE_LIST {
    ULONG Valid : 1;
    ULONG OneEntry : 1;
    ULONG filler10 : 10;
    ULONG NextEntry : 20;
};

typedef struct _MMPTE_PROTOTYPE {
    ULONG Valid : 1;
    ULONG ProtoAddressLow : 7;
    ULONG ReadOnly : 1;
    ULONG WhichPool : 1;
    ULONG Prototype : 1;
    ULONG ProtoAddressHigh : 21;
};

typedef struct _MMPTE_SOFTWARE {
    ULONG Valid : 1;
    ULONG PageFileLow : 4;
    ULONG Protection : 5;
    ULONG Prototype : 1;
    ULONG Transition : 1;
    ULONG PageFileHigh : 20;
};

typedef struct _MMPTE_SUBSECTION {
    ULONG Valid : 1;
    ULONG SubsectionAddressLow : 4;
    ULONG Protection : 5;
    ULONG Prototype : 1;
    ULONG SubsectionAddressHigh : 20;
    ULONG WhichPool : 1;
};

typedef struct _MMPTE_TRANSITION {
    ULONG Valid : 1;
    ULONG Write : 1;
    ULONG Owner : 1;
    ULONG WriteThrough : 1;
    ULONG CacheDisable : 1;
    ULONG Protection : 5;
    ULONG Prototype : 1;
    ULONG Transition : 1;
    ULONG PageFrameNumber : 20;
};

typedef struct _MMSECTION_FLAGS {
    ULONG BeingDeleted : 1;
    ULONG BeingCreated : 1;
    ULONG BeingPurged : 1;
    ULONG NoModifiedWriting : 1;
    ULONG FailAllIo : 1;
    ULONG Image : 1;
    ULONG Based : 1;
    ULONG File : 1;
    ULONG Networked : 1;
    ULONG NoCache : 1;
    ULONG PhysicalMemory : 1;
    ULONG CopyOnWrite : 1;
    ULONG Reserve : 1;
    ULONG Commit : 1;
    ULONG FloppyMedia : 1;
    ULONG WasPurged : 1;
    ULONG UserReference : 1;
    ULONG GlobalMemory : 1;
    ULONG DeleteOnClose : 1;
    ULONG FilePointerNull : 1;
    ULONG DebugSymbolsLoaded : 1;
    ULONG SetMappedFileIoComplete : 1;
    ULONG CollidedFlush : 1;
    ULONG NoChange : 1;
    ULONG HadUserReference : 1;
    ULONG ImageMappedInSystemSpace : 1;
    ULONG filler0 : 1;
    ULONG Accessed : 1;
    ULONG GlobalOnlyPerSession : 1;
    ULONG filler : 3;
};

typedef struct _MMSUPPORT {
    union _LARGE_INTEGER LastTrimTime;
    ULONG LastTrimFaultCount;
    ULONG PageFaultCount;
    ULONG PeakWorkingSetSize;
    ULONG WorkingSetSize;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    struct _MMWSL *VmWorkingSetList;
    struct _LIST_ENTRY WorkingSetExpansionLinks;
    UCHAR AllowWorkingSetAdjustment;
    UCHAR AddressSpaceBeingDeleted;
    UCHAR ForegroundSwitchCount;
    UCHAR MemoryPriority;
    union {
        ULONG LongFlags;
        struct _MMSUPPORT_FLAGS Flags;
    } u;
    ULONG Claim;
    ULONG NextEstimationSlot;
    ULONG NextAgingSlot;
    ULONG EstimatedAvailable;
    ULONG GrowthSinceLastEstimate;
};

typedef struct _MMSUPPORT_FLAGS {
    ULONG SessionSpace : 1;
    ULONG BeingTrimmed : 1;
    ULONG ProcessInSession : 1;
    ULONG SessionLeader : 1;
    ULONG TrimHard : 1;
    ULONG WorkingSetHard : 1;
    ULONG WriteWatch : 1;
    ULONG Filler : 25;
};

typedef struct _MMWSL {
    ULONG Quota;
    ULONG FirstFree;
    ULONG FirstDynamic;
    ULONG LastEntry;
    ULONG NextSlot;
    struct _MMWSLE *Wsle;
    ULONG NumberOfCommittedPageTables;
    ULONG LastInitializedWsle;
    ULONG NonDirectCount;
    struct _MMWSLE_HASH *HashTable;
    ULONG HashTableSize;
    PVOID HashTableStart;
    PVOID HighestPermittedHashAddress;
    USHORT UsedPageTableEntries[768];
    ULONG CommittedPageTables[24];
};

typedef struct _MMWSLE {
    union {
        PVOID VirtualAddress;
        ULONG Long;
        struct _MMWSLENTRY e1;
    } u1;
};

typedef struct _MMWSLENTRY {
    ULONG Valid : 1;
    ULONG LockedInWs : 1;
    ULONG LockedInMemory : 1;
    ULONG Protection : 5;
    ULONG SameProtectAsProto : 1;
    ULONG Direct : 1;
    ULONG Age : 2;
    ULONG VirtualPageNumber : 20;
};

typedef struct _MMWSLE_HASH {
    ULONG Key;
    ULONG Index;
};

typedef struct _MM_PAGED_POOL_INFO {
    struct _RTL_BITMAP *PagedPoolAllocationMap;
    struct _RTL_BITMAP *EndOfPagedPoolBitmap;
    struct _RTL_BITMAP *PagedPoolLargeSessionAllocationMap;
    struct _MMPTE *FirstPteForPagedPool;
    struct _MMPTE *LastPteForPagedPool;
    struct _MMPTE *NextPdeForPagedPoolExpansion;
    ULONG PagedPoolHint;
    ULONG PagedPoolCommit;
    ULONG AllocatedPagedPool;
};

typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    union _LARGE_INTEGER DefaultTimeout;
    UCHAR TimeoutSpecified;
};

typedef struct _NLS_DATA_BLOCK {
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
};

typedef struct _NPAGED_LOOKASIDE_LIST {
    struct _GENERAL_LOOKASIDE L;
    ULONG Lock;
};

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    ULONG Version;
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
};

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    PVOID RootDirectory;
    struct _UNICODE_STRING *ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};

typedef struct _OBJECT_CREATE_INFORMATION {
    ULONG Attributes;
    PVOID RootDirectory;
    PVOID ParseContext;
    CHAR ProbeMode;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG SecurityDescriptorCharge;
    PVOID SecurityDescriptor;
    struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos;
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
};

typedef struct _OBJECT_DIRECTORY {
    struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[37];
    struct _OBJECT_DIRECTORY_ENTRY **LookupBucket;
    UCHAR LookupFound;
    USHORT SymbolicLinkUsageCount;
    struct _DEVICE_MAP *DeviceMap;
    ULONG SessionId;
};

typedef struct _OBJECT_DIRECTORY_ENTRY {
    struct _OBJECT_DIRECTORY_ENTRY *ChainLink;
    PVOID Object;
};

typedef struct _OBJECT_DUMP_CONTROL {
    PVOID Stream;
    ULONG Detail;
};

typedef struct _OBJECT_HEADER {
    LONG PointerCount;
    LONG HandleCount;
    struct _SINGLE_LIST_ENTRY *SEntry;
    struct _OBJECT_TYPE *Type;
    UCHAR NameInfoOffset;
    UCHAR HandleInfoOffset;
    UCHAR QuotaInfoOffset;
    UCHAR Flags;
    struct _OBJECT_CREATE_INFORMATION *ObjectCreateInfo;
    PVOID QuotaBlockCharged;
    PVOID SecurityDescriptor;
    struct _QUAD Body;
};

typedef struct _OBJECT_HEADER_CREATOR_INFO {
    struct _LIST_ENTRY TypeList;
    PVOID CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Reserved;
};

typedef struct _OBJECT_HEADER_NAME_INFO {
    struct _OBJECT_DIRECTORY *Directory;
    struct _UNICODE_STRING Name;
    ULONG QueryReferences;
};

typedef struct _OBJECT_NAME_INFORMATION {
    struct _UNICODE_STRING Name;
};

typedef struct _OBJECT_SYMBOLIC_LINK {
    union _LARGE_INTEGER CreationTime;
    struct _UNICODE_STRING LinkTarget;
    struct _UNICODE_STRING LinkTargetRemaining;
    PVOID LinkTargetObject;
    ULONG DosDeviceDriveIndex;
};

typedef struct _OBJECT_TYPE {
    struct _ERESOURCE Mutex;
    struct _LIST_ENTRY TypeList;
    struct _UNICODE_STRING Name;
    PVOID DefaultObject;
    ULONG Index;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;
    ULONG Key;
};

typedef struct _OBJECT_TYPE_INITIALIZER {
    USHORT Length;
    UCHAR UseDefaultObject;
    UCHAR Reserved;
    ULONG InvalidAttributes;
    struct _GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    UCHAR SecurityRequired;
    UCHAR MaintainHandleCount;
    UCHAR MaintainTypeList;
    LONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
    PVOID DumpProcedure;
    PVOID OpenProcedure;
    PVOID CloseProcedure;
    PVOID DeleteProcedure;
    PLONG ParseProcedure;
    PLONG SecurityProcedure;
    PLONG QueryNameProcedure;
    PUCHAR OkayToCloseProcedure;
};

typedef struct _OWNER_ENTRY {
    ULONG OwnerThread;
    LONG OwnerCount;
    ULONG TableSize;
};

typedef struct _PAGEFAULT_HISTORY {
    ULONG CurrentIndex;
    ULONG MaxIndex;
    ULONG SpinLock;
    PVOID Reserved;
    struct _PROCESS_WS_WATCH_INFORMATION WatchInfo[1];
};

typedef struct _PCI_ARBITER_INSTANCE {
    struct PCI_SECONDARY_EXTENSION Header;
    struct _PCI_INTERFACE *Interface;
    struct _FDO_EXTENSION *BusFdoExtension;
    USHORT InstanceName[24];
    struct _ARBITER_INSTANCE CommonInstance;
};

typedef struct _PCI_BUS_INTERFACE_STANDARD {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PULONG ReadConfig;
    PULONG WriteConfig;
    PVOID PinToLine;
    PVOID LineToPin;
};

typedef struct _PCI_COMMON_CONFIG {
    USHORT VendorID;
    USHORT DeviceID;
    USHORT Command;
    USHORT Status;
    UCHAR RevisionID;
    UCHAR ProgIf;
    UCHAR SubClass;
    UCHAR BaseClass;
    UCHAR CacheLineSize;
    UCHAR LatencyTimer;
    UCHAR HeaderType;
    UCHAR BIST;
    union {
        struct _PCI_HEADER_TYPE_0 type0;
        struct _PCI_HEADER_TYPE_1 type1;
        struct _PCI_HEADER_TYPE_2 type2;
    } u;
    UCHAR DeviceSpecific[192];
};

typedef struct _PCI_COMMON_EXTENSION {
    PVOID Next;
    LONG ExtensionType;
    struct _PCI_MJ_DISPATCH_TABLE *IrpDispatchTable;
    UCHAR DeviceState;
    UCHAR TentativeNextState;
    struct _FAST_MUTEX StateMutex;
    struct _KEVENT SecondaryExtLock;
};

typedef struct _PCI_CONFIGURABLE_OBJECT {
    struct _PDO_EXTENSION *PdoExtension;
    struct _PCI_COMMON_CONFIG *Current;
    struct _PCI_COMMON_CONFIG *Working;
    struct PCI_CONFIGURATOR *Configurator;
    ULONG PrivateData;
    USHORT Status;
    USHORT Command;
};

typedef struct _PCI_HEADER_TYPE_0 {
    ULONG BaseAddresses[6];
    ULONG CIS;
    USHORT SubVendorID;
    USHORT SubSystemID;
    ULONG ROMBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG Reserved2;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    UCHAR MinimumGrant;
    UCHAR MaximumLatency;
};

typedef struct _PCI_HEADER_TYPE_1 {
    ULONG BaseAddresses[2];
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
    UCHAR IOBase;
    UCHAR IOLimit;
    USHORT SecondaryStatus;
    USHORT MemoryBase;
    USHORT MemoryLimit;
    USHORT PrefetchBase;
    USHORT PrefetchLimit;
    ULONG PrefetchBaseUpper32;
    ULONG PrefetchLimitUpper32;
    USHORT IOBaseUpper16;
    USHORT IOLimitUpper16;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved1[3];
    ULONG ROMBaseAddress;
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_HEADER_TYPE_2 {
    ULONG SocketRegistersBaseAddress;
    UCHAR CapabilitiesPtr;
    UCHAR Reserved;
    USHORT SecondaryStatus;
    UCHAR PrimaryBus;
    UCHAR SecondaryBus;
    UCHAR SubordinateBus;
    UCHAR SecondaryLatency;
    struct {
        ULONG Base;
        ULONG Limit;
    } Range[4];
    UCHAR InterruptLine;
    UCHAR InterruptPin;
    USHORT BridgeControl;
};

typedef struct _PCI_INTERFACE {
    struct _GUID *InterfaceType;
    USHORT MinSize;
    USHORT MinVersion;
    USHORT MaxVersion;
    USHORT Flags;
    LONG ReferenceCount;
    LONG Signature;
    PLONG Constructor;
    PLONG Initializer;
};

typedef struct _PCI_LOCK {
    ULONG Atom;
    UCHAR OldIrql;
};

typedef struct _PCI_MJ_DISPATCH_TABLE {
    ULONG PnpIrpMaximumMinorFunction;
    struct _PCI_MN_DISPATCH_TABLE *PnpIrpDispatchTable;
    ULONG PowerIrpMaximumMinorFunction;
    struct _PCI_MN_DISPATCH_TABLE *PowerIrpDispatchTable;
    LONG OtherIrpDispatchStyle;
    PLONG OtherIrpDispatchFunction;
};

typedef struct _PCI_MN_DISPATCH_TABLE {
    LONG DispatchStyle;
    PLONG DispatchFunction;
};

typedef struct _PCI_PMC {
    UCHAR Version : 3;
    UCHAR PMEClock : 1;
    UCHAR Rsvd1 : 1;
    UCHAR DeviceSpecificInitialization : 1;
    UCHAR Rsvd2 : 2;
    struct _PM_SUPPORT Support;
};

typedef struct _PCI_SLOT_NUMBER {
    union {
        struct {
            ULONG DeviceNumber : 5;
            ULONG FunctionNumber : 3;
            ULONG Reserved : 24;
        } bits;
        ULONG AsULONG;
    } u;
};

typedef struct _PDO_EXTENSION {
    struct _PDO_EXTENSION *Next;
    LONG ExtensionType;
    struct _PCI_MJ_DISPATCH_TABLE *IrpDispatchTable;
    UCHAR DeviceState;
    UCHAR TentativeNextState;
    struct _FAST_MUTEX StateMutex;
    struct _KEVENT SecondaryExtLock;
    struct _PCI_SLOT_NUMBER Slot;
    struct _DEVICE_OBJECT *PhysicalDeviceObject;
    struct _FDO_EXTENSION *ParentFdoExtension;
    struct _SINGLE_LIST_ENTRY SecondaryExtension;
    ULONG BusInterfaceReferenceCount;
    USHORT VendorId;
    USHORT DeviceId;
    USHORT SubsystemVendorId;
    USHORT SubsystemId;
    UCHAR RevisionId;
    UCHAR ProgIf;
    UCHAR SubClass;
    UCHAR BaseClass;
    UCHAR AdditionalResourceCount;
    UCHAR AdjustedInterruptLine;
    UCHAR InterruptPin;
    UCHAR RawInterruptLine;
    UCHAR CapabilitiesPtr;
    UCHAR SavedLatencyTimer;
    UCHAR SavedCacheLineSize;
    UCHAR HeaderType;
    UCHAR NotPresent : 1;
    UCHAR ReportedMissing : 1;
    UCHAR ExpectedWritebackFailure : 1;
    UCHAR NoTouchPmeEnable : 1;
    UCHAR LegacyDriver : 1;
    UCHAR UpdateHardware : 1;
    UCHAR MovedDevice : 1;
    struct {
        UCHAR Io : 1;
        UCHAR Memory : 1;
        UCHAR BusMastering : 1;
        UCHAR PowerDown : 1;
        UCHAR WeDisabledIo : 1;
        UCHAR WeDisabledMemory : 1;
    } Enabled;
    struct PCI_POWER_STATE PowerState;
    union PCI_HEADER_TYPE_DEPENDENT Dependent;
    ULONG ControlFlags;
    struct PCI_FUNCTION_RESOURCES *Resources;
    struct _FDO_EXTENSION *BridgeFdoExtension;
    struct _PDO_EXTENSION *NextBridge;
    struct _PDO_EXTENSION *NextHashEntry;
    struct _PCI_LOCK Lock;
    struct _PCI_PMC PowerCapabilities;
};

typedef struct _PEB {
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR SpareBool;
    PVOID Mutant;
    PVOID ImageBaseAddress;
    struct _PEB_LDR_DATA *Ldr;
    struct _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    PVOID FastPebLock;
    PVOID FastPebLockRoutine;
    PVOID FastPebUnlockRoutine;
    ULONG EnvironmentUpdateCount;
    PVOID KernelCallbackTable;
    ULONG SystemReserved[2];
    struct _PEB_FREE_BLOCK *FreeList;
    ULONG TlsExpansionCounter;
    PVOID TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PVOID ReadOnlySharedMemoryHeap;
    PVOID *ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    union _LARGE_INTEGER CriticalSectionTimeout;
    ULONG HeapSegmentReserve;
    ULONG HeapSegmentCommit;
    ULONG HeapDeCommitTotalFreeThreshold;
    ULONG HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID *ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    PVOID LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    ULONG ImageProcessAffinityMask;
    ULONG GdiHandleBuffer[34];
    PVOID PostProcessInitRoutine;
    PVOID TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    PVOID AppCompatInfo;
    struct _UNICODE_STRING CSDVersion;
};

typedef struct _PEB_FREE_BLOCK {
    struct _PEB_FREE_BLOCK *Next;
    ULONG Size;
};

typedef struct _PEB_LDR_DATA {
    ULONG Length;
    UCHAR Initialized;
    PVOID SsHandle;
    struct _LIST_ENTRY InLoadOrderModuleList;
    struct _LIST_ENTRY InMemoryOrderModuleList;
    struct _LIST_ENTRY InInitializationOrderModuleList;
};

typedef struct _PI_BUS_EXTENSION {
    ULONG Flags;
    ULONG NumberCSNs;
    PUCHAR ReadDataPort;
    UCHAR DataPortMapped;
    PUCHAR AddressPort;
    UCHAR AddrPortMapped;
    PUCHAR CommandPort;
    UCHAR CmdPortMapped;
    ULONG NextSlotNumber;
    struct _SINGLE_LIST_ENTRY DeviceList;
    struct _SINGLE_LIST_ENTRY CardList;
    struct _DEVICE_OBJECT *PhysicalBusDevice;
    struct _DEVICE_OBJECT *FunctionalBusDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    ULONG BusNumber;
    LONG SystemPowerState;
    LONG DevicePowerState;
};

typedef struct _PI_RESOURCE_ARBITER_ENTRY {
    struct _LIST_ENTRY DeviceArbiterList;
    UCHAR ResourceType;
    struct _ARBITER_INTERFACE *ArbiterInterface;
    struct _LIST_ENTRY ResourceList;
    struct _LIST_ENTRY BestResourceList;
    struct _LIST_ENTRY BestConfig;
    struct _LIST_ENTRY ActiveArbiterList;
    UCHAR State;
    UCHAR ResourcesChanged;
};

typedef struct _PLUGPLAY_EVENT_BLOCK {
    struct _GUID EventGuid;
    LONG EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;
    union {
        struct {
            struct _GUID ClassGuid;
            USHORT SymbolicLinkName[1];
        } DeviceClass;
        struct {
            USHORT DeviceIds[1];
        } TargetDevice;
        struct {
            USHORT DeviceId[1];
        } InstallDevice;
        struct {
            PVOID NotificationStructure;
            USHORT DeviceIds[1];
        } CustomNotification;
        struct {
            PVOID Notification;
        } ProfileNotification;
        struct {
            ULONG NotificationCode;
        } PowerNotification;
        struct {
            LONG VetoType;
            USHORT DeviceIdVetoNameBuffer[1];
        } VetoNotification;
    } u;
};

typedef struct _PM_DISPATCH_TABLE {
    ULONG Signature;
    ULONG Version;
    PVOID Function[1];
};

typedef struct _PM_SUPPORT {
    UCHAR Rsvd2 : 1;
    UCHAR D1 : 1;
    UCHAR D2 : 1;
    UCHAR PMED0 : 1;
    UCHAR PMED1 : 1;
    UCHAR PMED2 : 1;
    UCHAR PMED3Hot : 1;
    UCHAR PMED3Cold : 1;
};

typedef struct _PNP_DEVICE_EVENT_ENTRY {
    struct _LIST_ENTRY ListEntry;
    ULONG Argument;
    struct _KEVENT *CallerEvent;
    PVOID Callback;
    PVOID Context;
    PLONG VetoType;
    struct _UNICODE_STRING *VetoName;
    struct _PLUGPLAY_EVENT_BLOCK Data;
};

typedef struct _PNP_DEVICE_EVENT_LIST {
    LONG Status;
    struct _KMUTANT EventQueueMutex;
    struct _FAST_MUTEX Lock;
    struct _LIST_ENTRY List;
};

typedef struct _POOL_BLOCK_HEAD {
    struct _POOL_HEADER Header;
    struct _LIST_ENTRY List;
};

typedef struct _POOL_DESCRIPTOR {
    LONG PoolType;
    ULONG PoolIndex;
    ULONG RunningAllocs;
    ULONG RunningDeAllocs;
    ULONG TotalPages;
    ULONG TotalBigPages;
    ULONG Threshold;
    PVOID LockAddress;
    struct _LIST_ENTRY ListHeads[128];
};

typedef struct _POOL_HACKER {
    struct _POOL_HEADER Header;
    ULONG Contents[8];
};

typedef struct _POOL_HEADER {
    UCHAR PreviousSize;
    UCHAR PoolIndex;
    UCHAR PoolType;
    UCHAR BlockSize;
    ULONG Ulong1;
    struct _EPROCESS *ProcessBilled;
    ULONG PoolTag;
    USHORT AllocatorBackTraceIndex;
    USHORT PoolTagHash;
};

typedef struct _POOL_TRACKER_BIG_PAGES {
    PVOID Va;
    ULONG Key;
    ULONG NumberOfPages;
};

typedef struct _POOL_TRACKER_TABLE {
    ULONG Key;
    ULONG NonPagedAllocs;
    ULONG NonPagedFrees;
    ULONG NonPagedBytes;
    ULONG PagedAllocs;
    ULONG PagedFrees;
    ULONG PagedBytes;
};

typedef struct _PORT_MESSAGE {
    union {
        struct {
            SHORT DataLength;
            SHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union {
        struct {
            SHORT Type;
            SHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    struct _CLIENT_ID ClientId;
    DOUBLE DoNotUseThisField;
    ULONG MessageId;
    ULONG ClientViewSize;
    ULONG CallbackId;
};

typedef struct _POWER_CHANNEL_SUMMARY {
    ULONG Signature;
    struct _DEVICE_OBJECT *Owner;
    ULONG TotalCount;
    ULONG D0Count;
    struct _LIST_ENTRY NotifyList;
};

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
};

typedef struct _PO_DEVICE_NOTIFY {
    struct _LIST_ENTRY Link;
    struct _DEVICE_OBJECT *TargetDevice;
    UCHAR WakeNeeded;
    UCHAR OrderLevel;
    struct _DEVICE_OBJECT *DeviceObject;
    PVOID Node;
    PUSHORT DeviceName;
    PUSHORT DriverName;
    LONG NodeLevel;
};

typedef struct _PP_LOOKASIDE_LIST {
    struct _NPAGED_LOOKASIDE_LIST *P;
    struct _NPAGED_LOOKASIDE_LIST *L;
};

typedef struct _PRIVATE_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    struct _FILE_OBJECT *FileObject;
    union _LARGE_INTEGER FileOffset1;
    union _LARGE_INTEGER BeyondLastByte1;
    union _LARGE_INTEGER FileOffset2;
    union _LARGE_INTEGER BeyondLastByte2;
    union _LARGE_INTEGER ReadAheadOffset[2];
    ULONG ReadAheadLength[2];
    ULONG ReadAheadSpinLock;
    ULONG ReadAheadMask;
    struct _LIST_ENTRY PrivateLinks;
    UCHAR ReadAheadActive;
    UCHAR ReadAheadEnabled;
};

typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    struct _LUID_AND_ATTRIBUTES Privilege[1];
};

typedef struct _PROCESSOR_POWER_STATE {
    PVOID IdleFunction;
    ULONG Idle0KernelTimeLimit;
    ULONG Idle0LastTime;
    PVOID IdleState;
    ULONG64 LastCheck;
    struct PROCESSOR_IDLE_TIMES IdleTimes;
    ULONG IdleTime1;
    ULONG PromotionCheck;
    ULONG IdleTime2;
    UCHAR CurrentThrottle;
    UCHAR ThrottleLimit;
    UCHAR Spare1[2];
    ULONG SetMember;
    PVOID AbortThrottle;
    ULONG64 DebugDelta;
    ULONG DebugCount;
    ULONG LastSysTime;
    ULONG Spare2[10];
};

typedef struct _PROCESS_WS_WATCH_INFORMATION {
    PVOID FaultingPc;
    PVOID FaultingVa;
};

typedef struct _PROFILE_PARAMETER_BLOCK {
    USHORT Status;
    USHORT Reserved;
    USHORT DockingState;
    USHORT Capabilities;
    ULONG DockID;
    ULONG SerialNumber;
};

typedef struct _PS_IMPERSONATION_INFORMATION {
    PVOID Token;
    UCHAR CopyOnOpen;
    UCHAR EffectiveOnly;
    LONG ImpersonationLevel;
};

typedef struct _PS_JOB_TOKEN_FILTER {
    ULONG CapturedSidCount;
    struct _SID_AND_ATTRIBUTES *CapturedSids;
    ULONG CapturedSidsLength;
    ULONG CapturedGroupCount;
    struct _SID_AND_ATTRIBUTES *CapturedGroups;
    ULONG CapturedGroupsLength;
    ULONG CapturedPrivilegeCount;
    struct _LUID_AND_ATTRIBUTES *CapturedPrivileges;
    ULONG CapturedPrivilegesLength;
};

typedef struct _QUAD {
    DOUBLE DoNotUseThisField;
};

typedef struct _RELATION_LIST {
    ULONG Count;
    ULONG TagCount;
    ULONG FirstLevel;
    ULONG MaxLevel;
    struct _RELATION_LIST_ENTRY *Entries[1];
};

typedef struct _RELATION_LIST_ENTRY {
    ULONG Count;
    ULONG MaxCount;
    struct _DEVICE_OBJECT *Devices[1];
};

typedef struct _RTLP_RANGE_LIST_ENTRY {
    ULONG64 Start;
    ULONG64 End;
    struct {
        PVOID UserData;
        PVOID Owner;
    } Allocated;
    struct {
        struct _LIST_ENTRY ListHead;
    } Merged;
    UCHAR Attributes;
    UCHAR PublicFlags;
    USHORT PrivateFlags;
    struct _LIST_ENTRY ListEntry;
};

typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;
    PULONG Buffer;
};

typedef struct _RTL_DRIVE_LETTER_CURDIR {
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    struct _STRING DosPath;
};

typedef struct _RTL_GENERIC_TABLE {
    struct _RTL_SPLAY_LINKS *TableRoot;
    struct _LIST_ENTRY InsertOrderList;
    struct _LIST_ENTRY *OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    PLONG CompareRoutine;
    PVOID *AllocateRoutine;
    PVOID FreeRoutine;
    PVOID TableContext;
};

typedef struct _RTL_RANGE {
    ULONG64 Start;
    ULONG64 End;
    PVOID UserData;
    PVOID Owner;
    UCHAR Attributes;
    UCHAR Flags;
};

typedef struct _RTL_RANGE_LIST {
    struct _LIST_ENTRY ListHead;
    ULONG Flags;
    ULONG Count;
    ULONG Stamp;
};

typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
};

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    PVOID ConsoleHandle;
    ULONG ConsoleFlags;
    PVOID StandardInput;
    PVOID StandardOutput;
    PVOID StandardError;
    struct _CURDIR CurrentDirectory;
    struct _UNICODE_STRING DllPath;
    struct _UNICODE_STRING ImagePathName;
    struct _UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    struct _UNICODE_STRING WindowTitle;
    struct _UNICODE_STRING DesktopInfo;
    struct _UNICODE_STRING ShellInfo;
    struct _UNICODE_STRING RuntimeData;
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
};

typedef struct _SCATTER_GATHER_ELEMENT {
    union _LARGE_INTEGER Address;
    ULONG Length;
    ULONG Reserved;
};

typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG Reserved;
    struct _SCATTER_GATHER_ELEMENT Elements[0];
};

typedef struct _SCSI_REQUEST_BLOCK {
};

typedef struct _SECTION_IMAGE_INFORMATION {
    PVOID TransferAddress;
    ULONG ZeroBits;
    ULONG MaximumStackSize;
    ULONG CommittedStackSize;
    ULONG SubSystemType;
    USHORT SubSystemMinorVersion;
    USHORT SubSystemMajorVersion;
    ULONG SubSystemVersion;
    ULONG GpValue;
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    UCHAR ImageContainsCode;
    UCHAR Spare1;
    ULONG LoaderFlags;
    ULONG Reserved[2];
};

typedef struct _SECTION_OBJECT {
    PVOID StartingVa;
    PVOID EndingVa;
    PVOID Parent;
    PVOID LeftChild;
    PVOID RightChild;
    struct _SEGMENT_OBJECT *Segment;
};

typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
};

typedef struct _SECURITY_CLIENT_CONTEXT {
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PVOID ClientToken;
    UCHAR DirectlyAccessClientToken;
    UCHAR DirectAccessEffectiveOnly;
    UCHAR ServerIsRemote;
    struct _TOKEN_CONTROL ClientTokenControl;
};

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PVOID Owner;
    PVOID Group;
    struct _ACL *Sacl;
    struct _ACL *Dacl;
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
};

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    LONG ImpersonationLevel;
    UCHAR ContextTrackingMode;
    UCHAR EffectiveOnly;
};

typedef struct _SECURITY_SUBJECT_CONTEXT {
    PVOID ClientToken;
    LONG ImpersonationLevel;
    PVOID PrimaryToken;
    PVOID ProcessAuditId;
};

typedef struct _SEGMENT {
    struct _CONTROL_AREA *ControlArea;
    ULONG TotalNumberOfPtes;
    ULONG NonExtendedPtes;
    ULONG WritableUserReferences;
    ULONG64 SizeOfSegment;
    struct _MMPTE SegmentPteTemplate;
    ULONG NumberOfCommittedPages;
    struct _MMEXTEND_INFO *ExtendInfo;
    PVOID SystemImageBase;
    PVOID BasedAddress;
    union {
        ULONG ImageCommitment;
        struct _EPROCESS *CreatingProcess;
    } u1;
    union {
        struct _SECTION_IMAGE_INFORMATION *ImageInformation;
        PVOID FirstMappedVa;
    } u2;
    struct _MMPTE *PrototypePte;
    struct _MMPTE ThePtes[1];
};

typedef struct _SEGMENT_OBJECT {
    PVOID BaseAddress;
    ULONG TotalNumberOfPtes;
    union _LARGE_INTEGER SizeOfSegment;
    ULONG NonExtendedPtes;
    ULONG ImageCommitment;
    struct _CONTROL_AREA *ControlArea;
};

typedef struct _SETUP_LOADER_BLOCK {
};

typedef struct _SHARED_CACHE_MAP {
    SHORT NodeTypeCode;
    SHORT NodeByteSize;
    ULONG OpenCount;
    union _LARGE_INTEGER FileSize;
    struct _LIST_ENTRY BcbList;
    union _LARGE_INTEGER SectionSize;
    union _LARGE_INTEGER ValidDataLength;
    union _LARGE_INTEGER ValidDataGoal;
    struct _VACB *InitialVacbs[4];
    struct _VACB **Vacbs;
    struct _FILE_OBJECT *FileObject;
    struct _VACB *ActiveVacb;
    ULONG ActivePage;
    PVOID NeedToZero;
    ULONG NeedToZeroPage;
    ULONG ActiveVacbSpinLock;
    ULONG VacbActiveCount;
    struct _LIST_ENTRY SharedCacheMapLinks;
    ULONG Flags;
    struct _MBCB *Mbcb;
    ULONG DirtyPages;
    PVOID Section;
    LONG Status;
    struct _KEVENT *CreateEvent;
    struct _KEVENT *WaitOnActiveCount;
    ULONG PagesToWrite;
    LONG64 BeyondLastFlush;
    struct _CACHE_MANAGER_CALLBACKS *Callbacks;
    PVOID LazyWriteContext;
    struct _LIST_ENTRY PrivateList;
    PVOID LogHandle;
    PVOID FlushToLsnRoutine;
    ULONG DirtyPageThreshold;
    ULONG LazyWritePassCount;
    struct _CACHE_UNINITIALIZE_EVENT *UninitializeEvent;
    struct _VACB *NeedToZeroVacb;
    ULONG BcbSpinLock;
    struct _KEVENT *LocalEvent;
    struct _KEVENT Event;
    struct _PRIVATE_CACHE_MAP PrivateCacheMap;
};

typedef struct _SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    ULONG SubAuthority[1];
};

typedef struct _SID_AND_ATTRIBUTES {
    PVOID Sid;
    ULONG Attributes;
};

typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
};

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
};

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};

typedef struct _SUPPORTED_RANGE {
    struct _SUPPORTED_RANGE *Next;
    ULONG SystemAddressSpace;
    LONG64 SystemBase;
    LONG64 Base;
    LONG64 Limit;
};

typedef struct _SUPPORTED_RANGES {
    USHORT Version;
    UCHAR Sorted;
    UCHAR Reserved;
    ULONG NoIO;
    struct _SUPPORTED_RANGE IO;
    ULONG NoMemory;
    struct _SUPPORTED_RANGE Memory;
    ULONG NoPrefetchMemory;
    struct _SUPPORTED_RANGE PrefetchMemory;
    ULONG NoDma;
    struct _SUPPORTED_RANGE Dma;
};

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ULONG GrantedAccess;
};

typedef struct _TIME_FIELDS {
    SHORT Year;
    SHORT Month;
    SHORT Day;
    SHORT Hour;
    SHORT Minute;
    SHORT Second;
    SHORT Milliseconds;
    SHORT Weekday;
};

typedef struct _TOKEN_CONTROL {
    struct _LUID TokenId;
    struct _LUID AuthenticationId;
    struct _LUID ModifiedId;
    struct _TOKEN_SOURCE TokenSource;
};

typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    struct _LUID SourceIdentifier;
};

typedef struct _TRANSLATOR_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PVOID InterfaceReference;
    PVOID InterfaceDereference;
    PLONG TranslateResources;
    PLONG TranslateResourceRequirements;
};

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PUSHORT Buffer;
};

typedef struct _VACB {
    PVOID BaseAddress;
    struct _SHARED_CACHE_MAP *SharedCacheMap;
    union {
        union _LARGE_INTEGER FileOffset;
        USHORT ActiveCount;
    } Overlay;
    struct _LIST_ENTRY LruList;
};

typedef struct _VACB_LEVEL_REFERENCE {
    LONG Reference;
    LONG SpecialReference;
};

typedef struct _VI_POOL_ENTRY {
    struct _VI_POOL_ENTRY_INUSE InUse;
    ULONG FreeListNext;
};

typedef struct _VI_POOL_ENTRY_INUSE {
    PVOID VirtualAddress;
    PVOID CallingAddress;
    ULONG NumberOfBytes;
    ULONG Tag;
};

typedef struct _VPB {
    SHORT Type;
    SHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength;
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    USHORT VolumeLabel[32];
};

typedef struct _WAIT_CONTEXT_BLOCK {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    PLONG DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    struct _KDPC *BufferChainingDpc;
};

typedef struct _WIN32_JOBCALLOUT_PARAMETERS {
    PVOID Job;
    LONG CalloutType;
    PVOID Data;
};

typedef struct _WIN32_POWEREVENT_PARAMETERS {
    LONG EventNumber;
    ULONG Code;
};

typedef struct _WIN32_POWERSTATE_PARAMETERS {
    UCHAR Promotion;
    LONG SystemAction;
    LONG MinSystemState;
    ULONG Flags;
};

typedef struct _WOW64_PROCESS {
    PVOID Wow64;
};

typedef union PCI_HEADER_TYPE_DEPENDENT {
    struct {
        UCHAR Spare[4];
    } type0;
    struct {
        UCHAR PrimaryBus;
        UCHAR SecondaryBus;
        UCHAR SubordinateBus;
        UCHAR SubtractiveDecode : 1;
        UCHAR IsaBitSet : 1;
        UCHAR VgaBitSet : 1;
        UCHAR WeChangedBusNumbers : 1;
        UCHAR IsaBitRequired : 1;
    } type1;
    struct {
        UCHAR PrimaryBus;
        UCHAR SecondaryBus;
        UCHAR SubordinateBus;
        UCHAR SubtractiveDecode : 1;
        UCHAR IsaBitSet : 1;
        UCHAR VgaBitSet : 1;
        UCHAR WeChangedBusNumbers : 1;
        UCHAR IsaBitRequired : 1;
    } type2;
};

typedef union _FS_FILTER_PARAMETERS {
    struct {
        union _LARGE_INTEGER *EndingOffset;
        struct _ERESOURCE **ResourceToRelease;
    } AcquireForModifiedPageWriter;
    struct {
        struct _ERESOURCE *ResourceToRelease;
    } ReleaseForModifiedPageWriter;
    struct {
        LONG SyncType;
        ULONG PageProtection;
    } AcquireForSectionSynchronization;
    struct {
        PVOID Argument1;
        PVOID Argument2;
        PVOID Argument3;
        PVOID Argument4;
        PVOID Argument5;
    } Others;
};

typedef union _LARGE_INTEGER {
    ULONG LowPart;
    LONG HighPart;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONG64 QuadPart;
};

typedef union _MCI_ADDR {
    ULONG Address;
    ULONG Reserved;
    ULONG64 QuadPart;
};

typedef union _MCI_STATS {
    struct {
        USHORT McaCod;
        USHORT MsCod;
        ULONG OtherInfo : 25;
        ULONG Damage : 1;
        ULONG AddressValid : 1;
        ULONG MiscValid : 1;
        ULONG Enabled : 1;
        ULONG UnCorrected : 1;
        ULONG OverFlow : 1;
        ULONG Valid : 1;
    } MciStats;
    ULONG64 QuadPart;
};

typedef union _POWER_STATE {
    LONG SystemState;
    LONG DeviceState;
};

typedef union _SLIST_HEADER {
    ULONG64 Alignment;
    struct _SINGLE_LIST_ENTRY Next;
    USHORT Depth;
    USHORT Sequence;
};

typedef union _ULARGE_INTEGER {
    ULONG LowPart;
    ULONG HighPart;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONG64 QuadPart;
};

typedef union _u {
    struct _CM_KEY_NODE KeyNode;
    struct _CM_KEY_VALUE KeyValue;
    struct _CM_KEY_SECURITY KeySecurity;
    struct _CM_KEY_INDEX KeyIndex;
    ULONG KeyList[1];
    USHORT KeyString[1];
};

ATAId;
AcquireOpsEvent;
AcquireOpsReservePool;
AmdK6RegionCount;
AmdK6Regions;
AmdMtrrHwUsageCount;
ArbDebugLevel;
ArbReplayOnError;
ArbStopOnError;
ArbpActionStrings;
BBTBuffer;
BBTMemoryDescriptor;
BBTPagesToReserve;
BiosBegin;
BiosInitialized;
BootDriverLock;
BreakpointsSuspended;
CallLevelChange;
CcAggressiveZeroCount;
CcAggressiveZeroThreshold;
CcAvailablePagesThreshold;
CcBcbSpinLock;
CcBeyondVacbs;
CcCapturedSystemSize;
CcCleanSharedCacheMapList;
CcCollisionDelay;
CcCopyReadNoWait;
CcCopyReadNoWaitMiss;
CcCopyReadWait;
CcCopyReadWaitMiss;
CcDataFlushes;
CcDataPages;
CcDebugTraceLock;
CcDeferredWriteSpinLock;
CcDeferredWrites;
CcDirtyPageTarget;
CcDirtyPageThreshold;
CcDirtyPagesLastScan;
CcDirtySharedCacheMapList;
CcExpressWorkQueue;
CcFastMdlReadNoWait;
CcFastMdlReadNotPossible;
CcFastMdlReadResourceMiss;
CcFastMdlReadWait;
CcFastReadNoWait;
CcFastReadNotPossible;
CcFastReadResourceMiss;
CcFastReadWait;
CcFirstDelay;
CcIdleDelay;
CcIdleDelayTick;
CcIdleWorkerThreadList;
CcLazyWriteHotSpots;
CcLazyWriteIos;
CcLazyWritePages;
CcLazyWriterCursor;
CcMapDataNoWait;
CcMapDataNoWaitMiss;
CcMapDataWait;
CcMapDataWaitMiss;
CcMasterSpinLock;
CcMaxDirtyWrite;
CcMaxVacbLevelsSeen;
CcMdlReadNoWait;
CcMdlReadNoWaitMiss;
CcMdlReadWait;
CcMdlReadWaitMiss;
CcMissCounter;
CcNoDelay;
CcNumberActiveWorkerThreads;
CcNumberVacbs;
CcNumberWorkerThreads;
CcPagesWrittenLastTime;
CcPagesYetToWrite;
CcPinMappedDataCount;
CcPinReadNoWait;
CcPinReadNoWaitMiss;
CcPinReadWait;
CcPinReadWaitMiss;
CcPostTickWorkQueue;
CcQueueThrottle;
CcReadAheadIos;
CcRegularWorkQueue;
CcTargetCleanDelay;
CcThrowAway;
CcTotalDirtyPages;
CcTune;
CcTwilightLookasideList;
CcUnmapLock;
CcVacbLevelEntries;
CcVacbLevelFreeList;
CcVacbLevelWithBcbsEntries;
CcVacbLevelWithBcbsFreeList;
CcVacbLru;
CcVacbSpinLock;
CcVacbs;
CcWorkQueueSpinlock;
CdChangerClassGuid;
CdRomClassGuid;
CheckHeapFillPattern;
Class10Descriptions;
Class11Descriptions;
Class12Descriptions;
Class1Descriptions;
Class2Descriptions;
Class3Descriptions;
Class4Descriptions;
Class5Descriptions;
Class6Descriptions;
Class7Descriptions;
Class8Descriptions;
Class9Descriptions;
ClassDescriptionsList;
CmBootAcceptFirstTime;
CmCSDVersionString;
CmCheckRegistryDebug;
CmClassName;
CmClassString;
CmControlVector;
CmDefaultLanguageId;
CmDefaultLanguageIdLength;
CmDefaultLanguageIdType;
CmDisabledFloatingPointProcessor;
CmFirstTime;
CmInstallUILanguageId;
CmInstallUILanguageIdLength;
CmInstallUILanguageIdType;
CmNtCSDReleaseType;
CmNtCSDVersion;
CmNtGlobalFlag;
CmPhysicalAddressExtension;
CmProcessorMismatch;
CmRegistryIODebug;
CmRegistryMachineHardwareDescriptionName;
CmRegistryMachineHardwareDescriptionSystemName;
CmRegistryMachineHardwareDeviceMapName;
CmRegistryMachineHardwareName;
CmRegistryMachineHardwareOwnerMapName;
CmRegistryMachineHardwareResourceMapName;
CmRegistryMachineName;
CmRegistryMachineSystemCurrentControlSet;
CmRegistryMachineSystemCurrentControlSetControlBiosInfo;
CmRegistryMachineSystemCurrentControlSetControlBootLog;
CmRegistryMachineSystemCurrentControlSetControlClass;
CmRegistryMachineSystemCurrentControlSetControlSafeBoot;
CmRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagement;
CmRegistryMachineSystemCurrentControlSetEnumName;
CmRegistryMachineSystemCurrentControlSetEnumRootName;
CmRegistryMachineSystemCurrentControlSetHardwareProfilesCurrent;
CmRegistryMachineSystemCurrentControlSetServices;
CmRegistryMachineSystemCurrentControlSetServicesEventLog;
CmRegistryMachineSystemName;
CmRegistryRootName;
CmRegistrySizeLimit;
CmRegistrySizeLimitLength;
CmRegistrySizeLimitType;
CmRegistrySystemCloneName;
CmRegistryUserName;
CmSuiteBuffer;
CmSuiteBufferLength;
CmSuiteBufferType;
CmSymbolicLinkValueName;
CmTypeName;
CmTypeString;
CmVersionString;
CmpAmdID;
CmpCacheOnFlag;
CmpCacheTable;
CmpCaller;
CmpCallerCaller;
CmpCannotWriteConfiguration;
CmpCheckClean;
CmpCheckHive;
CmpCheckKeyDebug;
CmpCheckRegistry2Debug;
CmpCheckValueListDebug;
CmpConfigurationAreaSize;
CmpConfigurationData;
CmpControlSessionManager;
CmpCyrixID;
CmpDelayedCloseCurrent;
CmpDelayedCloseSize;
CmpDelayedCloseTable;
CmpDelayedFreeIndex;
CmpDiskFullWorkerPopupDisplayed;
CmpFeatureBits;
CmpGlobalQuota;
CmpGlobalQuotaAllowed;
CmpGlobalQuotaUsed;
CmpGlobalQuotaWarning;
CmpHashTableSize;
CmpHintHits;
CmpHintMisses;
CmpHiveListHead;
CmpID1;
CmpID2;
CmpIntelID;
CmpKcbLock;
CmpKeyControlBlockRoot;
CmpKeyObjectType;
CmpLazyFlushDpc;
CmpLazyFlushIntervalInSeconds;
CmpLazyFlushPending;
CmpLazyFlushTimer;
CmpLazyWorkItem;
CmpLoadOptions;
CmpMHz;
CmpMachineHiveList;
CmpMasterHive;
CmpMultifunctionTypes;
CmpNameCacheTable;
CmpNoMasterCreates;
CmpNoWrite;
CmpOpenSubKeys;
CmpPostLock;
CmpProcessorControl;
CmpProcessorNameString;
CmpProfileLoaded;
CmpQuotaWarningPopupDisplayed;
CmpRegistryLock;
CmpRegistryMachineHardwareDescriptionString;
CmpRegistryMachineHardwareDescriptionSystemString;
CmpRegistryMachineHardwareDeviceMapString;
CmpRegistryMachineHardwareOwnerMapString;
CmpRegistryMachineHardwareResourceMapString;
CmpRegistryMachineHardwareString;
CmpRegistryMachineString;
CmpRegistryMachineSystemCurrentControlSetControlBiosInfoString;
CmpRegistryMachineSystemCurrentControlSetControlBootLogString;
CmpRegistryMachineSystemCurrentControlSetControlClassString;
CmpRegistryMachineSystemCurrentControlSetControlSafeBootString;
CmpRegistryMachineSystemCurrentControlSetControlSessionManagerMemoryManagementString;
CmpRegistryMachineSystemCurrentControlSetEnumRootString;
CmpRegistryMachineSystemCurrentControlSetEnumString;
CmpRegistryMachineSystemCurrentControlSetHardwareProfilesCurrentString;
CmpRegistryMachineSystemCurrentControlSetServicesEventLogString;
CmpRegistryMachineSystemCurrentControlSetServicesString;
CmpRegistryMachineSystemCurrentControlSetString;
CmpRegistryMachineSystemString;
CmpRegistryPerflibString;
CmpRegistryRootString;
CmpRegistrySystemCloneString;
CmpRegistrySystemFileNameString;
CmpRegistryUserString;
CmpStashBuffer;
CmpStashBufferSize;
CmpSymbolicLinkValueName;
CmpSystemFileName;
CmpSystemProcess;
CmpTraceRoutine;
CmpTypeCount;
CmpUnknownBusCount;
CmpUpdateSignature;
CmpUsedStorage;
CmpVendorID;
CmpWasSetupBoot;
DblSpaceSection;
DcParamTable;
DemandZeroPde;
DemandZeroPte;
DesiredAccessForFunction;
DiskClassGuid;
DiskIoGuid;
DiskPerfGuid;
DrivesupBreakIn;
DrivesupDebug;
EmptyValue;
End;
ErrorLogPort;
ErrorLogPortConnected;
EvPrSetHigh;
EvPrSetLow;
EventTraceGuid;
Ex10Milliseconds;
ExCallbackObjectType;
ExCbPowerState;
ExCbSetSystemState;
ExCbSetSystemTime;
ExCriticalWorkerThreads;
ExDelayedWorkerThreads;
ExDesktopObjectType;
ExEventObjectType;
ExEventPairObjectType;
ExGlobalAtomTableCallout;
ExMutantObjectType;
ExNPagedLookasideListHead;
ExNPagedLookasideLock;
ExPageLockHandle;
ExPagedLookasideListHead;
ExPagedLookasideLock;
ExPoolCodeEnd;
ExPoolCodeStart;
ExPoolLookasideListHead;
ExProfileObjectType;
ExReadyForErrors;
ExSemaphoreObjectType;
ExThreadSetManagerEvent;
ExTimerObjectType;
ExVdmOpcodeDispatchCounts;
ExVdmSegmentNotPresent;
ExWindowStationObjectType;
ExWorkerQueue;
ExcludeIfDisabled;
ExcludedDevices;
ExpAdditionalCriticalWorkerThreads;
ExpAdditionalDelayedWorkerThreads;
ExpAdjustScanPeriod;
ExpAltTimeZoneBias;
ExpCallbackEvent;
ExpCallbackMapping;
ExpCenturyDpc;
ExpCenturyTimer;
ExpCenturyWorkItem;
ExpControlKey;
ExpCurrentProfileUsage;
ExpCurrentScanPeriod;
ExpCurrentTimeZoneId;
ExpDefaultErrorPort;
ExpDefaultErrorPortProcess;
ExpDesktopMapping;
ExpEnvironmentLock;
ExpEventBoost;
ExpEventMapping;
ExpEventPairMapping;
ExpExpirationDataChangeBuffer;
ExpExpirationDataIoSb;
ExpExpirationDataKey;
ExpHydraEnabled;
ExpInTextModeSetup;
ExpInitializeCallback;
ExpKernelResolutionCount;
ExpLastShutDown;
ExpLastTimeZoneBias;
ExpLicenseInfo;
ExpLicenseInfoCount;
ExpLuid;
ExpLuidIncrement;
ExpLuidLock;
ExpMaxTimeSeperationBeforeCorrect;
ExpMultiUserTS;
ExpMutantMapping;
ExpNextCenturyTime;
ExpNextCenturyTimeFields;
ExpNextExpirationIsFatal;
ExpNextSystemCutover;
ExpNtExpirationData;
ExpNtExpirationDataLength;
ExpNtExpirationDate;
ExpNtInstallationDate;
ExpNumberOfPagedPools;
ExpOkToTimeRefresh;
ExpOkToTimeZoneRefresh;
ExpPagedPoolDescriptor;
ExpPoolIndex;
ExpProductTypeChangeBuffer;
ExpProductTypeIoSb;
ExpProductTypeKey;
ExpProductTypeValueInfo;
ExpProfileMapping;
ExpProfileStateMutex;
ExpRealTimeIsUniversal;
ExpRefreshCount;
ExpRefreshFailures;
ExpResourceSpinLock;
ExpResourceTimeoutCount;
ExpSemaphoreBoost;
ExpSemaphoreMapping;
ExpSessionPoolDescriptor;
ExpSetupKey;
ExpSetupModeDetected;
ExpSetupSystemPrefix;
ExpShuttingDown;
ExpSmallNPagedPoolLookasideLists;
ExpSmallPagedPoolLookasideLists;
ExpSystemIsInCmosMode;
ExpSystemPrefixChangeBuffer;
ExpSystemPrefixIoSb;
ExpSystemPrefixValid;
ExpSystemResourcesList;
ExpTaggedPoolLock;
ExpTickCountAdjustment;
ExpTickCountAdjustmentCount;
ExpTickCountMultiplier;
ExpTimeRefreshDpc;
ExpTimeRefreshInterval;
ExpTimeRefreshLock;
ExpTimeRefreshTimer;
ExpTimeRefreshWorkItem;
ExpTimeZoneBias;
ExpTimeZoneDpc;
ExpTimeZoneInformation;
ExpTimeZoneTimer;
ExpTimeZoneWorkItem;
ExpTimeout;
ExpTimerMapping;
ExpTimerResolutionCount;
ExpTooLateForErrors;
ExpUuidCacheValid;
ExpUuidCachedValues;
ExpUuidLastTimeAllocated;
ExpUuidLock;
ExpUuidSequenceNumber;
ExpUuidSequenceNumberNotSaved;
ExpUuidSequenceNumberValid;
ExpWakeTimerList;
ExpWakeTimerListLock;
ExpWatchExpirationDataWorkItem;
ExpWatchProductTypeWorkItem;
ExpWatchSystemPrefixWorkItem;
ExpWindowStationMapping;
ExpWstrCallback;
FileIoGuid;
FirstPrint;
FlagState;
FloppyClassGuid;
FloppyId;
FormatMaxDisplacement;
FormatMaxLength;
FsRtlCreateLockInfo;
FsRtlExclusiveLockLookasideList;
FsRtlFastMutexLookasideList;
FsRtlFileLockLookasideList;
FsRtlFirstMappingLookasideList;
FsRtlHalfSecond;
FsRtlLegalAnsiCharacterArray;
FsRtlLockInfoLookasideList;
FsRtlLockTreeNodeLookasideList;
FsRtlPagingIoResourceSelector;
FsRtlPagingIoResources;
FsRtlSafeExtensions;
FsRtlSharedLockLookasideList;
FsRtlStrucSupSpinLock;
FsRtlWaitingLockLookasideList;
FsRtlWorkerQueues;
FsRtlpDRD;
FsRtlpRedirs;
FsRtlpUncSemaphore;
GUID_ACPI_INTERFACE_STANDARD;
GUID_ACPI_REGS_INTERFACE_STANDARD;
GUID_ARBITER_INTERFACE_STANDARD;
GUID_BOGUS_INTERFACE;
GUID_BUS_INTERFACE_STANDARD;
GUID_BUS_TYPE_EISA;
GUID_BUS_TYPE_INTERNAL;
GUID_BUS_TYPE_ISAPNP;
GUID_BUS_TYPE_MCA;
GUID_BUS_TYPE_PCI;
GUID_BUS_TYPE_PCMCIA;
GUID_BUS_TYPE_SERENUM;
GUID_BUS_TYPE_USB;
GUID_CLASS_INPUT;
GUID_DEVICE_ARRIVAL;
GUID_DEVICE_BATTERY;
GUID_DEVICE_EJECT;
GUID_DEVICE_EJECT_VETOED;
GUID_DEVICE_ENUMERATED;
GUID_DEVICE_ENUMERATE_REQUEST;
GUID_DEVICE_EVENT_RBC;
GUID_DEVICE_HIBERNATE_VETOED;
GUID_DEVICE_INTERFACE_ARRIVAL;
GUID_DEVICE_INTERFACE_REMOVAL;
GUID_DEVICE_KERNEL_INITIATED_EJECT;
GUID_DEVICE_NOOP;
GUID_DEVICE_QUERY_AND_REMOVE;
GUID_DEVICE_REMOVAL_VETOED;
GUID_DEVICE_REMOVE_PENDING;
GUID_DEVICE_SAFE_REMOVAL;
GUID_DEVICE_STANDBY_VETOED;
GUID_DEVICE_START_REQUEST;
GUID_DEVICE_SURPRISE_REMOVAL;
GUID_DEVICE_SYS_BUTTON;
GUID_DEVICE_THERMAL_ZONE;
GUID_DEVICE_WARM_EJECT_VETOED;
GUID_DOCK_INTERFACE;
GUID_HWPROFILE_CHANGE_CANCELLED;
GUID_HWPROFILE_CHANGE_COMPLETE;
GUID_HWPROFILE_QUERY_CHANGE;
GUID_INT_ROUTE_INTERFACE_STANDARD;
GUID_IO_MEDIA_ARRIVAL;
GUID_IO_MEDIA_REMOVAL;
GUID_IO_VOLUME_CHANGE;
GUID_IO_VOLUME_DEVICE_INTERFACE;
GUID_IO_VOLUME_DISMOUNT;
GUID_IO_VOLUME_DISMOUNT_FAILED;
GUID_IO_VOLUME_LOCK;
GUID_IO_VOLUME_LOCK_FAILED;
GUID_IO_VOLUME_MOUNT;
GUID_IO_VOLUME_NAME_CHANGE;
GUID_IO_VOLUME_PHYSICAL_CONFIGURATION_CHANGE;
GUID_IO_VOLUME_UNLOCK;
GUID_LEGACY_DEVICE_DETECTION_STANDARD;
GUID_MF_ENUMERATION_INTERFACE;
GUID_PCI_BUS_INTERFACE_STANDARD;
GUID_PCI_DEVICE_PRESENT_INTERFACE;
GUID_PCMCIA_BUS_INTERFACE_STANDARD;
GUID_PNP_CUSTOM_NOTIFICATION;
GUID_PNP_POWER_NOTIFICATION;
GUID_POWER_DEVICE_ENABLE;
GUID_POWER_DEVICE_TIMEOUTS;
GUID_POWER_DEVICE_WAKE_ENABLE;
GUID_SETUP_DEVICE_ARRIVAL;
GUID_TARGET_DEVICE_QUERY_REMOVE;
GUID_TARGET_DEVICE_REMOVE_CANCELLED;
GUID_TARGET_DEVICE_REMOVE_COMPLETE;
GUID_TRANSLATOR_INTERFACE_STANDARD;
GenericMessageGuid;
GlobalLoggerGuid;
GuiDpc;
GuiTimer;
GuidFormat;
HalDispatchTable;
HalPrivateDispatchTable;
HandleTableListHead;
HandleTableListLock;
HardFaultGuid;
HvCheckBinDebug;
HvCheckHiveDebug;
HvShutdownComplete;
IcaLockTimeout;
ImageLoadGuid;
InbvBootDriverInstalled;
InbvDisplayDebugStrings;
InbvDisplayFilter;
InbvDisplayState;
InbvOldIrql;
InbvProgressIndicator;
InbvProgressState;
InbvResetDisplayParameters;
InitAnsiCodePageDataOffset;
InitNlsSectionPointer;
InitNlsTableBase;
InitNlsTableSize;
InitOemCodePageDataOffset;
InitSafeBootMode;
InitTableInfo;
InitUnicodeCaseTableDataOffset;
InitialSP;
InitializationPhase;
InstrCountInternal;
InstructionsTraced;
IntBPsSkipping;
InternalBreakpointCheckDpc;
InternalBreakpointTimer;
IoAdapterObjectType;
IoArcBootDeviceName;
IoArcHalDeviceName;
IoCompletionObjectType;
IoControllerObjectType;
IoCountOperations;
IoDeviceHandlerObjectSize;
IoDeviceHandlerObjectType;
IoDeviceNodeTreeSequence;
IoDeviceObjectType;
IoDriverObjectType;
IoFileObjectType;
IoLoaderArcBootDeviceName;
IoOtherOperationCount;
IoOtherTransferCount;
IoPnpDriverObject;
IoReadOperationCount;
IoReadTransferCount;
IoRemoteBootClient;
IoStatisticsLock;
IoVerifierOnByDefault;
IoWriteOperationCount;
IoWriteTransferCount;
IopBootConfigsReserved;
IopBootDriverReinitializeQueueHead;
IopBusTypeGuidList;
IopCacheHitIncrement;
IopCancelSpinLock;
IopCdRomFileSystemQueueHead;
IopCompletionLock;
IopCompletionLookasideList;
IopCompletionMapping;
IopCrashDumpStateChange;
IopCurrentHardError;
IopDatabaseLock;
IopDatabaseResource;
IopDcControlCurrent;
IopDcControlInitial;
IopDcControlIrql;
IopDcControlLock;
IopDcControlOverride;
IopDcCurrentFrameSkips;
IopDcMessageTable;
IopDcOverrideTable;
IopDcWdmCoreError;
IopDcWdmDriverErrorFatal;
IopDcWdmDriverErrorNonFatal;
IopDcWdmDriverPostponed;
IopDcWdmDriverWarning;
IopDeadIrp;
IopDeferredRegistrationList;
IopDeferredRegistrationLock;
IopDeviceClassNotifyList;
IopDeviceClassNotifyLock;
IopDeviceEnumerationWorkItem;
IopDeviceTreeLock;
IopDiskFileSystemQueueHead;
IopDockDeviceCount;
IopDockDeviceListHead;
IopDockDeviceListLock;
IopDocksInTransition;
IopDriverReinitializeQueueHead;
IopDumpControlBlock;
IopDumpControlBlockChecksum;
IopDumpFileContainsNewDump;
IopEnumerationInProgress;
IopErrorLogAllocation;
IopErrorLogAllocationLock;
IopErrorLogDisabledThisBoot;
IopErrorLogListHead;
IopErrorLogLock;
IopErrorLogObject;
IopErrorLogPortPending;
IopErrorLogWorkItem;
IopFastLockSpinLock;
IopFileMapping;
IopFinalCrashDumpStatus;
IopFsNotifyChangeQueueHead;
IopGroupIndex;
IopGroupListHead;
IopGroupTable;
IopHardError;
IopHwProfileNotifyLock;
IopInitHalDeviceNode;
IopInitHalResources;
IopInitReservedResourceList;
IopLargeIrpLookasideList;
IopLargeIrpStackLocations;
IopLegacyDeviceNode;
IopLinkTrackingPacket;
IopLinkTrackingPortObject;
IopLinkTrackingServiceEvent;
IopLinkTrackingServiceObject;
IopLoaderBlock;
IopLookasideIrpFloat;
IopLookasideIrpLimit;
IopMaxDeviceNodeLevel;
IopMdlLookasideList;
IopNetworkFileSystemQueueHead;
IopNotifyLastChanceShutdownQueueHead;
IopNotifyShutdownQueueHead;
IopNumberDeviceNodes;
IopPendingEjects;
IopPendingSurpriseRemovals;
IopPnPSpinLock;
IopPnpEnumerationRequestList;
IopPnpScratchBuffer1;
IopPnpScratchBuffer2;
IopPostPadding;
IopPrePadding;
IopProfileChangeCancelRequired;
IopProfileChangeSemaphore;
IopProfileNotifyList;
IopQueryFsOperationAccess;
IopQueryFsOperationLength;
IopQueryOperationAccess;
IopQueryOperationLength;
IopQuerySetAlignmentRequirement;
IopQuerySetFsAlignmentRequirement;
IopRegistrySemaphore;
IopRemoteBootCardInitialized;
IopReserveResourcesRoutine;
IopResourcesReleased;
IopRootBusNumberArbiter;
IopRootDeviceNode;
IopRootDmaArbiter;
IopRootIrqArbiter;
IopRootMemArbiter;
IopRootPortArbiter;
IopSecurityResource;
IopSetFsOperationAccess;
IopSetFsOperationLength;
IopSetOperationAccess;
IopSetOperationLength;
IopSetupNotifyData;
IopSmallIrpLookasideList;
IopTapeFileSystemQueueHead;
IopTargetDeviceNotifyLock;
IopTimer;
IopTimerCount;
IopTimerDpc;
IopTimerLock;
IopTimerQueueHead;
IopUniqueDeviceObjectNumber;
IopVerifierOn;
IopVpbSpinLock;
IopWarmEjectLock;
IopWarmEjectPdo;
IopWstrAssignedResources;
IopWstrAssignmentOrdering;
IopWstrBusRaw;
IopWstrBusTranslated;
IopWstrBusValues;
IopWstrHal;
IopWstrOtherDrivers;
IopWstrPhysicalMemory;
IopWstrRaw;
IopWstrRequestedResources;
IopWstrReservedResources;
IopWstrSpecialMemory;
IopWstrSystem;
IopWstrSystemResources;
IopWstrTranslated;
IovpCancelCount;
IovpEnforcementLevel;
IovpHackFlags;
IovpInitCalled;
IovpInitFlags;
IovpIrpDeferralTime;
IovpIrpHashLock;
IovpIrpTrackingEnabled;
IovpIrpTrackingSpewLevel;
IovpIrpTrackingTable;
IovpMaxSupportedVerifierLevel;
IovpTrackingFlags;
IovpVerifierFlags;
IovpVerifierLevel;
IrpMajorNames;
IrpName;
KdDebugParameters;
KdDebuggerDataBlock;
KdDebuggerEnabled;
KdDebuggerNotPresent;
KdDisableCount;
KdDumpEnableOffset;
KdEnteredDebugger;
KdNumberOfSpecialCalls;
KdPerformanceCounterRate;
KdPitchDebugger;
KdPreviouslyEnabled;
KdPrintCircularBuffer;
KdPrintRolloverCount;
KdPrintWritePointer;
KdSpecialCalls;
KdTimerDifference;
KdTimerStart;
KdTimerStop;
KdpBreakpointInstruction;
KdpBreakpointTable;
KdpControlCPending;
KdpControlCPressed;
KdpCurrentSymbolEnd;
KdpCurrentSymbolStart;
KdpDataSpinLock;
KdpDebuggerDataListHead;
KdpDebuggerLock;
KdpDebuggerStructuresInitialized;
KdpDefaultRetries;
KdpInternalBPs;
KdpMessageBuffer;
KdpNextCallLevelChange;
KdpNextPacketIdToSend;
KdpNtosImageBase;
KdpNumInternalBreakpoints;
KdpNumberRetries;
KdpOweBreakpoint;
KdpPacketIdExpected;
KdpPathBuffer;
KdpPortLocked;
KdpPrintSpinLock;
KdpRetryCount;
KdpSearchAddressRangeEnd;
KdpSearchAddressRangeStart;
KdpSearchCheckPoint;
KdpSearchEndPageFrame;
KdpSearchInProgress;
KdpSearchPageHitIndex;
KdpSearchPageHitOffsets;
KdpSearchPageHits;
KdpSearchStartPageFrame;
KdpTimeSlipDpc;
KdpTimeSlipEvent;
KdpTimeSlipEventLock;
KdpTimeSlipPending;
KdpTimeSlipTimer;
KdpTimeSlipWorkItem;
KeActiveProcessors;
KeBootTime;
KeBootTimeBias;
KeBugCheckCallbackListHead;
KeBugCheckCallbackLock;
KeBugCheckCount;
KeDcacheFlushCount;
KeFeatureBits;
KeGdiFlushUserBatch;
KeI386CpuStep;
KeI386CpuType;
KeI386EFlagsAndMaskV86;
KeI386EFlagsOrMaskV86;
KeI386ForceNpxEmulation;
KeI386FxsrPresent;
KeI386MachineType;
KeI386NpxPresent;
KeI386VdmIoplAllowed;
KeI386VirtualIntExtensions;
KeI386XMMIPresent;
KeIcacheFlushCount;
KeInterruptTimeBias;
KeLoaderBlock;
KeMaximumIncrement;
KeMinimumIncrement;
KeNumberProcessors;
KePrefetchNTAGranularity;
KeProcessorArchitecture;
KeProcessorLevel;
KeProcessorRevision;
KeRaiseUserExceptionDispatcher;
KeServiceDescriptorTable;
KeServiceDescriptorTableShadow;
KeThreadSwitchCounters;
KeTickCount;
KeTimeAdjustment;
KeTimeIncrement;
KeTimeSynchronization;
KeUserApcDispatcher;
KeUserCallbackDispatcher;
KeUserExceptionDispatcher;
KeZeroPage;
KeZeroPageFromIdleThread;
KernelDemandZeroPte;
KernelVerifier;
KernelVerifierTickPage;
KeyboardMap;
Ki386IopmSaveArea;
Ki387RoundModeTable;
Ki486CompatibilityLock;
KiAbiosGdt;
KiAbiosGdtLock;
KiAbiosLidTableLock;
KiAbiosPresent;
KiAdjustDpcThreshold;
KiAmdK6Mtrr;
KiArgumentTable;
KiBiosFrame;
KiBootFeatureBits;
KiBugCheckData;
KiBugCheckDriver;
KiBugCodeMessages;
KiChannelMapping;
KiCommonDataArea;
KiContextSwapLock;
KiDebugRegisterContextOffsets;
KiDebugRegisterTrapOffsets;
KiDebugRoutine;
KiDebugSwitchRoutine;
KiDispatcherLock;
KiDispatcherReadyListHead;
KiDmaIoCoherency;
KiDoubleFaultStack;
KiDoubleFaultTSS;
KiEnableTimerWatchdog;
KiFindFirstSetLeft;
KiFindFirstSetRight;
KiFindLeftNibbleBitTable;
KiFreezeExecutionLock;
KiFreezeFlag;
KiFreezeLockBackup;
KiHardwareTrigger;
KiI386PentiumLockErrataPresent;
KiIdealDpcRate;
KiIdleProcess;
KiIdleSummary;
KiIgnoreUnexpectedTrap07;
KiInBiosCall;
KiLogicalIdTable;
KiMaximumDpcQueueDepth;
KiMaximumSearchCount;
KiMinimumDpcRate;
KiNMITSS;
KiProcessInSwapListHead;
KiProcessOutSwapListHead;
KiProcessorBlock;
KiProfileAlignmentFixup;
KiProfileAlignmentFixupInterval;
KiProfileInterval;
KiProfileIrql;
KiProfileListHead;
KiProfileLock;
KiProfileSourceListHead;
KiRangeInfo;
KiRangeLock;
KiReadyQueueIndex;
KiReadySummary;
KiServiceLimit;
KiServiceTable;
KiStack16GdtEntry;
KiStackInSwapListHead;
KiStackOutSwapRequest;
KiStackProtectTime;
KiSwapContextNotifyRoutine;
KiSwapEvent;
KiSynchPacket;
KiThreadSelectNotifyRoutine;
KiTickOffset;
KiTimeIncrementReciprocal;
KiTimeIncrementShiftCount;
KiTimeUpdateNotifyRoutine;
KiTimerExpireDpc;
KiTimerTableListHead;
KiUnexpectedEntrySize;
KiWaitInListHead;
KiWaitOutListHead;
KiXMMIZeroingEnable;
LazyWriter;
LdtMutex;
LeapYearDayToMonth;
LeapYearDaysPrecedingMonth;
LpcPortObjectType;
LpcWaitablePortObjectType;
LpcpLock;
LpcpMaxMessageSize;
LpcpMessagesLookaside;
LpcpNextCallbackId;
LpcpNextMessageId;
LpcpPortMapping;
LpcpSpmPortName;
LpcpSpmUnicodeString;
Lznt1Break;
MMCONTROL;
MMDB;
MMPPTE_NAME;
MMSECT;
MMTEMPORARY;
MMVADKEY;
Magic10000;
Magic10000000;
Magic86400000;
MapperDeviceExtension;
MapperKeySeed;
MapperValueSeed;
MediumChangerClassGuid;
MiActiveVerifierThunks;
MiActiveVerifies;
MiActiveWriteWatch;
MiAgingShift;
MiClaimAdjustmentThreshold;
MiCommitExtensionActive;
MiDeadPteTrackerListHead;
MiDelayPageFaults;
MiEndOfInitialPoolFrame;
MiEstimationShift;
MiExpansionPoolPagesInUse;
MiExpansionPoolPagesInitialCharge;
MiExtendedSubsectionsConvertedToDynamic;
MiExtraSystemSpace;
MiFaultRetries;
MiFirstDriverLoadEver;
MiFirstPageFileCreatedAndReady;
MiHighestUserPde;
MiHighestUserPte;
MiHydra;
MiInterlockedLock;
MiIoRetryLevel;
MiKernelResourceEndPte;
MiKernelResourceStartPte;
MiKernelVerifierOriginalCalls;
MiKernelVerifierThunks;
MiLastAdjustmentOfClaimParams;
MiLastCallColor;
MiLastCallHighPage;
MiLastCallLowPage;
MiLastUnloadedDriver;
MiMapCacheFailures;
MiMappedPagesTooOldEvent;
MiMaximumSystemCacheSizeExtra;
MiMaximumWorkingSet;
MiModifiedPageLife;
MiModifiedPageWriterTimer;
MiModifiedPageWriterTimerDpc;
MiNoPageOnRaiseIrql;
MiNumberOfExtraSystemPdes;
MiOverCommitCallCount;
MiPageFileFullCharge;
MiProbeRaises;
MiPteHeader;
MiPteStr;
MiPteTrackerLock;
MiReplacing;
MiRequestedSystemPtes;
MiSectionMapping;
MiSessionBasePte;
MiSessionCount;
MiSessionIdBitmap;
MiSessionIdMutex;
MiSessionLastPte;
MiSessionPoolEnd;
MiSessionPoolStart;
MiSessionSpaceEnd;
MiSessionSpacePageTables;
MiSessionWsList;
MiSpecialPagesInUsePeak;
MiSpecialPagesNonPaged;
MiSpecialPagesNonPagedMaximum;
MiSpecialPagesNonPagedPeak;
MiSpecialPagesPagable;
MiSpecialPagesPagablePeak;
MiSpecialPoolEnabled;
MiSpecialPoolFirstPte;
MiSpecialPoolLastPte;
MiSpecialPoolPtes;
MiSubsectionActions;
MiSubsectionsConvertedToDynamic;
MiSubsectionsProcessed;
MiSuspectDriverList;
MiSystemCacheEndExtra;
MiSystemCacheStartExtra;
MiSystemViewStart;
MiTimerPending;
MiTotalUnloads;
MiTrackPtesAborted;
MiTrackingAborted;
MiTriageActionStrings;
MiTriageActionTaken;
MiTrimAllPageFaultCount;
MiTrimInProgressCount;
MiTrimRemovalPagesOnly;
MiUnloadedDrivers;
MiUnloadsSkipped;
MiUnusedSegmentNonPagedPoolUsage;
MiUnusedSegmentPagedPoolUsage;
MiUnusedSubsectionPagedPool;
MiUnusedSubsectionPagedPoolPeak;
MiUserFaultRetries;
MiUserIoRetryLevel;
MiVerifierDriverAddedThunkListHead;
MiVerifierStackProtectTime;
MiVerifierThunks;
MiVerifierThunksAdded;
MiVerifyAllDrivers;
MiVerifyRandomDrivers;
MiWaitForEmptyEvent;
MiWaitingForWorkingSetEmpty;
MiWriteCombiningPtes;
MiZeroingDisabled;
Mm30Milliseconds;
Mm64BitPhysicalAddress;
MmAllocatedNonPagedPool;
MmAllocationFragment;
MmAmpleFreePages;
MmAttemptForCantExtend;
MmAvailablePages;
MmAvailablePagesEvent;
MmAvailablePagesEventHigh;
MmBadPageListHead;
MmChargeCommitmentLock;
MmClaimParameterAdjustDownTime;
MmClaimParameterAdjustUpTime;
MmCodeClusterSize;
MmCollidedFlushEvent;
MmCollidedLockEvent;
MmCollidedLockWait;
MmCompatibleProtectionMask;
MmConsumedPoolPercentage;
MmCrashDumpPte;
MmCrashDumpSection;
MmCriticalSectionTimeout;
MmCritsectTimeoutSeconds;
MmDataClusterSize;
MmDebugPte;
MmDecommittedPte;
MmDefaultMaximumNonPagedPool;
MmDereferenceSegmentHeader;
MmDisablePagingExecutive;
MmDontVerifyRandomDrivers;
MmDriverCommit;
MmDynamicMemoryMutex;
MmDynamicPfn;
MmEnforceWriteProtection;
MmEventCountList;
MmExpandedNonPagedPoolInBytes;
MmExpandedPoolBitPosition;
MmExpansionLock;
MmExtendedCommit;
MmExtendedCommitLimit;
MmFaultsTakenToGoAboveMaxWs;
MmFaultsTakenToGoAboveMinWs;
MmFirstDeadKernelStack;
MmFirstFreeSystemCache;
MmFirstFreeSystemPte;
MmFirstReservedMappingPte;
MmFlushCounter;
MmFlushPte1;
MmFlushSystemCache;
MmFreeGoal;
MmFreePageListHead;
MmFreePagesByColor;
MmFreePagingSpaceLow;
MmFreeSysPteListBySize;
MmFrontOfList;
MmHalfSecond;
MmHardFaultNotifyRoutine;
MmHeapDeCommitFreeBlockThreshold;
MmHeapDeCommitTotalFreeThreshold;
MmHeapSegmentCommit;
MmHeapSegmentReserve;
MmHiberPages;
MmHighSectionBase;
MmHighestPhysicalPage;
MmHighestPossiblePhysicalPage;
MmHighestUserAddress;
MmImageProtectionArray;
MmInPageSupportList;
MmInfoCounters;
MmKernelStackPages;
MmKernelStackResident;
MmKseg2Frame;
MmLargePageMinimum;
MmLargeStacks;
MmLargeSystemCache;
MmLastFreeSystemCache;
MmLastReservedMappingPte;
MmLastSysPteListBySize;
MmLoadedUserImageList;
MmLockConflictList;
MmLockedCode;
MmLockedPagesHead;
MmLowestPhysicalPage;
MmMakeFileAccess;
MmMakeLowMemory;
MmMakeProtectNotWriteCopy;
MmMakeSectionAccess;
MmMappedFileHeader;
MmMappedFileIoComplete;
MmMappedPageWriterEvent;
MmMappedPageWriterList;
MmMaxAdditionNonPagedPoolPerMb;
MmMaximumDeadKernelStacks;
MmMaximumNonPagedPoolInBytes;
MmMaximumNonPagedPoolPercent;
MmMaximumWorkingSetSize;
MmMdlPagesAllocated;
MmMinAdditionNonPagedPoolPerMb;
MmMinimumFreeDiskSpace;
MmMinimumFreePages;
MmMinimumFreePagesToZero;
MmMinimumNonPagedPoolSize;
MmMinimumPageFileReduction;
MmMinimumWorkingSetSize;
MmModifiedNoWritePageListHead;
MmModifiedPageLifeInSeconds;
MmModifiedPageListByColor;
MmModifiedPageListHead;
MmModifiedPageMaximum;
MmModifiedPageMinimum;
MmModifiedPageWriterEvent;
MmModifiedWriteClusterSize;
MmMoreThanEnoughFreePages;
MmMustSucceedPoolBitPosition;
MmNonPagedMustSucceed;
MmNonPagedPoolEnd;
MmNonPagedPoolExpansionStart;
MmNonPagedPoolFreeListHead;
MmNonPagedPoolStart;
MmNonPagedSystemStart;
MmNumberDeadKernelStacks;
MmNumberOfActiveMdlEntries;
MmNumberOfFreeNonPagedPool;
MmNumberOfMappedMdls;
MmNumberOfPagingFiles;
MmNumberOfPhysicalPages;
MmNumberOfSystemPtes;
MmOneSecond;
MmOverCommit;
MmOverCommit2;
MmPageAlignedPoolBase;
MmPageFaultNotifyRoutine;
MmPageFileCreationLock;
MmPageFileExtension;
MmPageFileFullExtendCount;
MmPageFileFullExtendPages;
MmPageFileFullPopupShown;
MmPageLocationList;
MmPagedPoolBasePde;
MmPagedPoolCommit;
MmPagedPoolEnd;
MmPagedPoolInfo;
MmPagedPoolMaximumDesired;
MmPagedPoolPage;
MmPagedPoolStart;
MmPagesAboveWsMinimum;
MmPagesAboveWsThreshold;
MmPagingFile;
MmPagingFileHeader;
MmPeakCommitment;
MmPfnDatabase;
MmPfnLock;
MmPhysicalMemoryBlock;
MmPlentyFreePages;
MmPoolCodeEnd;
MmPoolCodeStart;
MmPoolFailureReasons;
MmPoolFailures;
MmPreemptiveTrims;
MmProcessColorSeed;
MmProcessCommit;
MmProductType;
MmProtectFreedNonPagedPool;
MmProtectToPteMask;
MmProtectToValue;
MmPteCodeEnd;
MmPteCodeStart;
MmPteGlobal;
MmReadClusterSize;
MmReadWrite;
MmReferenceCountCheck;
MmResTrack;
MmResidentAvailableAtInit;
MmResidentAvailablePages;
MmRotatingUniprocessorNumber;
MmSecondaryColorMask;
MmSecondaryColors;
MmSectionBasedMutex;
MmSectionBasedRoot;
MmSectionCommitMutex;
MmSectionExtendResource;
MmSectionExtendSetResource;
MmSectionObjectType;
MmSession;
MmSessionBase;
MmSessionFailureCauses;
MmSessionPoolSize;
MmSessionSize;
MmSessionSpace;
MmSessionViewSize;
MmSessionWideAddressList;
MmSevenMinutes;
MmSharedCommit;
MmSharedUserDataPte;
MmShortTime;
MmSizeOfNonPagedMustSucceed;
MmSizeOfNonPagedPoolInBytes;
MmSizeOfPagedPoolInBytes;
MmSizeOfSystemCacheInPages;
MmSmallStacks;
MmSnapUnloads;
MmSpecialPagesInUse;
MmSpecialPoolCatchOverruns;
MmSpecialPoolEnd;
MmSpecialPoolRejected;
MmSpecialPoolStart;
MmSpecialPoolTag;
MmStandbyPageListHead;
MmSubsectionBase;
MmSubsectionTopPage;
MmSupportWriteWatch;
MmSysPteIndex;
MmSysPteListBySizeCount;
MmSysPteMinimumFree;
MmSysPteTables;
MmSystemCacheEnd;
MmSystemCachePage;
MmSystemCachePteBase;
MmSystemCacheStart;
MmSystemCacheWorkingSetList;
MmSystemCacheWs;
MmSystemCacheWsMaximum;
MmSystemCacheWsMinimum;
MmSystemCacheWsle;
MmSystemCodePage;
MmSystemDriverPage;
MmSystemLoadLock;
MmSystemLockOwner;
MmSystemLockPagesCount;
MmSystemPageColor;
MmSystemPageDirectory;
MmSystemPageFileLocated;
MmSystemPagePtes;
MmSystemProcessWorkingSetMax;
MmSystemProcessWorkingSetMin;
MmSystemPteBase;
MmSystemPtesEnd;
MmSystemPtesStart;
MmSystemRangeStart;
MmSystemShutdown;
MmSystemSize;
MmSystemSpaceLock;
MmSystemWsLock;
MmThrottleBottom;
MmThrottleTop;
MmTotalClaim;
MmTotalCommitLimit;
MmTotalCommitLimitMaximum;
MmTotalCommittedPages;
MmTotalEstimatedAvailable;
MmTotalFreeSystemPtes;
MmTotalNonPagedPoolQuota;
MmTotalPagedPoolQuota;
MmTotalPagesForPagingFile;
MmTotalSystemCodePages;
MmTotalSystemDriverPages;
MmTrackLockedPages;
MmTrackPtes;
MmTransitionPrivatePages;
MmTransitionSharedPages;
MmTransitionSharedPagesPeak;
MmTwentySeconds;
MmUnusedSegmentCleanup;
MmUnusedSegmentCount;
MmUnusedSegmentForceFree;
MmUnusedSegmentForceFreeDefault;
MmUnusedSegmentList;
MmUnusedSegmentNonPagedPoolUsage;
MmUnusedSegmentPagedPoolUsage;
MmUnusedSubsectionCount;
MmUnusedSubsectionCountPeak;
MmUnusedSubsectionList;
MmUserProbeAddress;
MmUserProtectionToMask1;
MmUserProtectionToMask2;
MmVadPhysicalPages;
MmVerifierData;
MmVerifyDriverBuffer;
MmVerifyDriverBufferLength;
MmVerifyDriverBufferType;
MmVerifyDriverLevel;
MmVirtualBias;
MmWorkingSetExpansionHead;
MmWorkingSetList;
MmWorkingSetManagerEvent;
MmWorkingSetProtectionTime;
MmWorkingSetReductionHuge;
MmWorkingSetReductionMax;
MmWorkingSetReductionMaxCacheWs;
MmWorkingSetReductionMin;
MmWorkingSetReductionMinCacheWs;
MmWorkingSetSizeExpansion;
MmWorkingSetSizeIncrement;
MmWorkingSetSwapReduction;
MmWorkingSetSwapReductionHuge;
MmWorkingSetVolReductionHuge;
MmWorkingSetVolReductionMax;
MmWorkingSetVolReductionMaxCacheWs;
MmWorkingSetVolReductionMin;
MmWriteAllModifiedPages;
MmWsAdjustThreshold;
MmWsExpandThreshold;
MmWsTrimReductionGoal;
MmWsle;
MmZeroPageFile;
MmZeroedPageListHead;
MmZeroingPageEvent;
MmZeroingPageThreadActive;
NextTraceDataSym;
Nls844UnicodeLowercaseTable;
Nls844UnicodeUpcaseTable;
NlsAnsiCodePage;
NlsAnsiToUnicodeData;
NlsLeadByteInfo;
NlsLeadByteInfoTable;
NlsMbAnsiCodePageTables;
NlsMbCodePageTag;
NlsMbOemCodePageTables;
NlsMbOemCodePageTag;
NlsOemCodePage;
NlsOemLeadByteInfo;
NlsOemLeadByteInfoTable;
NlsOemToUnicodeData;
NlsUnicodeToAnsiData;
NlsUnicodeToMbAnsiData;
NlsUnicodeToMbOemData;
NlsUnicodeToOemData;
NoAccessPte;
NonPagedPoolDescriptor;
NonPagedPoolDescriptorMS;
NonPagedPoolLock;
NormalYearDayToMonth;
NormalYearDaysPrecedingMonth;
NtBuildNumber;
NtGlobalFlag;
NtMajorVersion;
NtMinorVersion;
NtSystemRoot;
NumTraceDataSyms;
ObSystemDeviceMap;
ObpAuditBaseDirectories;
ObpAuditBaseObjects;
ObpCreateInfoLookasideList;
ObpDefaultObject;
ObpDeviceMapLock;
ObpDirectoryMapping;
ObpDirectoryObjectType;
ObpDosDevicesShortName;
ObpDosDevicesShortNamePrefix;
ObpDosDevicesShortNameRoot;
ObpInitKillMutant;
ObpKernelHandleTable;
ObpLock;
ObpNameBufferLookasideList;
ObpObjectSecurityMode;
ObpObjectTypes;
ObpObjectsCreated;
ObpObjectsWithCreatorInfo;
ObpObjectsWithHandleDB;
ObpObjectsWithName;
ObpObjectsWithPoolQuota;
ObpProtectionMode;
ObpRemoveObjectQueue;
ObpRemoveObjectWorkItem;
ObpRemoveQueueActive;
ObpRootDirectoryMutex;
ObpRootDirectoryObject;
ObpSymbolicLinkMapping;
ObpSymbolicLinkObjectType;
ObpTypeDirectoryObject;
ObpTypeMapping;
ObpTypeObjectType;
ObpUnsecureGlobalNamesBuffer;
ObpUnsecureGlobalNamesLength;
ObsSecurityDescriptorCache;
ObsSecurityDescriptorCacheLock;
OemDefaultChar;
OemTransUniDefaultChar;
OpcodeDispatch;
OpcodeDispatchV86;
OpcodeIndex;
P0BootStack;
P0BootThread;
PageFaultGuid;
ParallelId;
ParallelIdNEC;
PartitionClassGuid;
PbBiosCodeSelector;
PbBiosDataSelector;
PbBiosEntryPoint;
PbBiosInitialized;
PbBiosSpinlock;
PbSelectors;
PiActiveArbiterList;
PiAssignTable;
PiAssignTableCount;
PiBestArbiterList;
PiBestPriority;
PiEnumerationLock;
PiEventQueueEmpty;
PiNoRetest;
PiNotificationInProgress;
PiNotificationInProgressLock;
PiScratchBuffer;
PiShutdownContext;
PiUseTimeout;
PnPBootDriversInitialized;
PnPBootDriversLoaded;
PnPDetectionEnabled;
PnPInitialized;
PnPIrpNames;
PnpAsyncOk;
PnpDefaultInterfaceType;
PnpEnumDebugLevel;
PnpIrpMask;
PnpResDebugLevel;
PnpResDebugTranslationFailure;
PnpResDebugTranslationFailureArray;
PnpResDebugTranslationFailureCount;
PoHiberInProgress;
PoPowerSequence;
PoSleepingSummary;
PoSystemIdleTimer;
PoWakeCheck;
PoWakeState;
PointerMap;
PoolBigPageTable;
PoolBigPageTableHash;
PoolBigPageTableSize;
PoolHitTag;
PoolTrackTable;
PoolTrackTableMask;
PoolTrackTableSize;
PoolVector;
PopAcPolicy;
PopAcRegName;
PopAction;
PopActionWaiters;
PopAdminPolicy;
PopAdminRegName;
PopApmActiveFlag;
PopApmFlag;
PopAttributes;
PopCB;
PopCallSystemState;
PopCapabilities;
PopCompositeBatteryName;
PopCoolingMode;
PopDcPolicy;
PopDcRegName;
PopDebugHiberFileName;
PopDispatchPolicyIrps;
PopDopeGlobalLock;
PopDumbyEvent;
PopDumpStackPrefix;
PopEventCallout;
PopEventCode;
PopFullWake;
PopHeuristics;
PopHeuristicsRegName;
PopHiberFile;
PopHiberFileDebug;
PopHiberFileName;
PopIdle;
PopIdle0PromoteLimit;
PopIdle0PromoteTicks;
PopIdleDetectList;
PopIdleDetectionMode;
PopIdleScanDpc;
PopIdleScanTime;
PopIdleScanTimer;
PopInrushIrpPointer;
PopInrushIrpReferenceCount;
PopInrushPending;
PopInvalidNotifyBlockCount;
PopIrpSerialList;
PopIrpSerialListLength;
PopIrpSerialLock;
PopNotifyEvents;
PopNotifyLock;
PopNotifyWork;
PopPolicy;
PopPolicyIrpQueue;
PopPolicyLock;
PopPolicyLockThread;
PopPolicyWorker;
PopPowerStateHandlers;
PopRegKey;
PopRequestedIrps;
PopSIdle;
PopSetThrottle;
PopSimulate;
PopSimulateRegKey;
PopSimulateRegName;
PopStateCallout;
PopSwitches;
PopThermal;
PopThermalLock;
PopThrottleTimeout;
PopUndockPolicyRegName;
PopVolumeDevices;
PopVolumeLock;
PopWorkerLock;
PopWorkerPending;
PopWorkerSpinLock;
PopWorkerStatus;
PopWorkerTypes;
PowerIrpNames;
PpDeviceEventList;
PpDisableFirmwareMapper;
PpRegistryDeviceResource;
PpUserBlock;
ProcessGuid;
ProfileCount;
ProgressBarLeft;
ProgressBarTop;
PrototypePte;
PsActiveProcessHead;
PsDefaultSystemLocaleId;
PsDefaultThreadLocaleId;
PsDefaultUILanguageId;
PsIdleProcess;
PsImageNotifyEnabled;
PsInitialSystemProcess;
PsInstallUILanguageId;
PsJobType;
PsLoadedModuleList;
PsLoadedModuleResource;
PsLoadedModuleSpinLock;
PsMaximumWorkingSet;
PsMinimumWorkingSet;
PsNewKSecDD;
PsNtDllPathName;
PsNtosImageBase;
PsPrioritySeperation;
PsProcessSecurityLock;
PsProcessType;
PsRawPrioritySeparation;
PsReaperActive;
PsReaperListHead;
PsReaperWorkItem;
PsSystemDllBase;
PsSystemDllDllBase;
PsThreadType;
PsWatchEnabled;
PspActiveProcessMutex;
PspBootAccessToken;
PspCidTable;
PspCreateProcessNotifyRoutine;
PspCreateProcessNotifyRoutineCount;
PspCreateThreadNotifyRoutine;
PspCreateThreadNotifyRoutineCount;
PspDefaultNonPagedLimit;
PspDefaultPagedLimit;
PspDefaultPagefileLimit;
PspDefaultQuotaBlock;
PspDoingGiveBacks;
PspEventPairLock;
PspFixedQuantums;
PspForegroundQuantum;
PspInitialSystemProcessHandle;
PspJobInfoAlign;
PspJobInfoLengths;
PspJobList;
PspJobListLock;
PspJobMapping;
PspJobSchedulingClasses;
PspLegoNotifyRoutine;
PspLoadImageNotifyRoutine;
PspLoadImageNotifyRoutineCount;
PspPriorityTable;
PspProcessLockMutex;
PspProcessMapping;
PspSystemDll;
PspThreadMapping;
PspUseJobSchedulingClasses;
PspVariableQuantums;
PspW32JobCallout;
PspW32ProcessCallout;
PspW32ThreadCallout;
PspWorkingSetChangeHead;
QStringTerminators;
RawDeviceCdRomObject;
RawDeviceDiskObject;
RawDeviceTapeObject;
RegTab;
RegistryGuid;
ReleaseOpsEvent;
ReleaseOpsReservePool;
ResourceCount;
ResourceList;
RtlAllocateStringRoutine;
RtlBaseAceType;
RtlCompressBufferProcs;
RtlDecompressBufferProcs;
RtlDecompressFragmentProcs;
RtlDescribeChunkProcs;
RtlFatIllegalTable;
RtlFreeStringRoutine;
RtlIsSystemAceType;
RtlReserveChunkProcs;
RtlWorkSpaceProcs;
RtlpAtomAllocateTag;
RtlpBitsClearAnywhere;
RtlpBitsClearHigh;
RtlpBitsClearLow;
RtlpBitsClearTotal;
RtlpEnvironCacheName;
RtlpEnvironCacheValid;
RtlpEnvironCacheValue;
RtlpExceptionLog;
RtlpExceptionLogCount;
RtlpExceptionLogSize;
RtlpIntegerChars;
RtlpIntegerWChars;
RtlpRandomConstantVector;
RtlpRangeListEntryLookasideList;
RtlpRegistryPaths;
RtlpRegistryQueryInitialBuffersize;
RtlpRunTable;
RtlpStatusTable;
RtlpVerboseConvert;
ScrollBuffer;
ScrollRegion;
SeAliasAccountOpsSid;
SeAliasAdminsSid;
SeAliasBackupOpsSid;
SeAliasGuestsSid;
SeAliasPowerUsersSid;
SeAliasPrintOpsSid;
SeAliasSystemOpsSid;
SeAliasUsersSid;
SeAnonymousAuthenticationId;
SeAnonymousLogonSid;
SeAnonymousLogonToken;
SeAssignPrimaryTokenPrivilege;
SeAuditPrivilege;
SeAuditingState;
SeAuthenticatedUsersSid;
SeBackupPrivilege;
SeBatchSid;
SeChangeNotifyPrivilege;
SeCreateGlobalPrivilege;
SeCreatePagefilePrivilege;
SeCreatePermanentPrivilege;
SeCreateTokenPrivilege;
SeCreatorGroupServerSid;
SeCreatorGroupSid;
SeCreatorOwnerServerSid;
SeCreatorOwnerSid;
SeDebugPrivilege;
SeDetailedAuditing;
SeDialupSid;
SeEnableDelegationPrivilege;
SeExports;
SeFileSystemNotifyRoutinesHead;
SeImpersonatePrivilege;
SeIncreaseBasePriorityPrivilege;
SeIncreaseQuotaPrivilege;
SeInteractiveSid;
SeLoadDriverPrivilege;
SeLocalSid;
SeLocalSystemSid;
SeLockMemoryPrivilege;
SeManageVolumePrivilege;
SeNetworkSid;
SeNtAuthoritySid;
SeNullSid;
SePrincipalSelfSid;
SeProfileSingleProcessPrivilege;
SePublicDefaultDacl;
SePublicDefaultSd;
SePublicDefaultUnrestrictedDacl;
SePublicDefaultUnrestrictedSd;
SePublicOpenDacl;
SePublicOpenSd;
SePublicOpenUnrestrictedDacl;
SePublicOpenUnrestrictedSd;
SeRemoteShutdownPrivilege;
SeRestorePrivilege;
SeRestrictedSid;
SeSecurityPrivilege;
SeServiceSid;
SeShutdownPrivilege;
SeSubsystemName;
SeSyncAgentPrivilege;
SeSystemAuthenticationId;
SeSystemDefaultDacl;
SeSystemDefaultSd;
SeSystemEnvironmentPrivilege;
SeSystemProfilePrivilege;
SeSystemTokenSource;
SeSystemtimePrivilege;
SeTakeOwnershipPrivilege;
SeTcbPrivilege;
SeUndockPrivilege;
SeUnrestrictedDacl;
SeUnrestrictedSd;
SeUnsolicitedInputPrivilege;
SeWorldSid;
SearchStrings;
SecondsToStartOf1970;
SecondsToStartOf1980;
SepAdtAuditingEnabled;
SepAdtCountEventsDiscarded;
SepAdtCurrentListLength;
SepAdtDiscardingAudits;
SepAdtMaxListLength;
SepAdtMinListLength;
SepAuditOptions;
SepAuditShutdownEvents;
SepCrashOnAuditFail;
SepExWorkItem;
SepExports;
SepFilterPrivileges;
SepFilterPrivilegesLong;
SepFilterPrivilegesShort;
SepLogonSessions;
SepLsaHandle;
SepLsaQueue;
SepLsaQueueLength;
SepLsaQueueLock;
SepPublicDefaultSd;
SepPublicDefaultUnrestrictedSd;
SepPublicOpenSd;
SepPublicOpenUnrestrictedSd;
SepRmCommandDispatch;
SepRmDbLock;
SepRmLsaCallProcess;
SepRmNotifyMutex;
SepRmState;
SepSystemDefaultSd;
SepTokenLock;
SepTokenMapping;
SepTokenObjectType;
SepUnrestrictedSd;
SerialId;
SerialIdNEC;
SrvRevVersioningNums;
Start;
StoragePortClassGuid;
StringTerminators;
SymbolRecorded;
SystemTraceControlGuid;
THERMAL_ZONE_GUID;
TapeClassGuid;
TcpIpGuid;
ThreadGuid;
TraceDataBuffer;
TraceDataBufferFilled;
TraceDataBufferPosition;
TraceDataSyms;
TraceErrorGuid;
TransitionPde;
TriageImagePageSize;
TunnelLookasideList;
TunnelMaxAge;
TunnelMaxEntries;
UdpIpGuid;
UnicodeDefaultChar;
UnicodeNull;
UserModeRunning;
ValidKernelPde;
ValidKernelPdeLocal;
ValidKernelPte;
ValidKernelPteLocal;
ValidPdePde;
ValidPtePte;
ValidUserPte;
VdmBopCount;
VdmFixedStateLinear;
VdmIoListCreationResource;
VdmSecurityCheckEnabled;
VdmStringIoBuffer;
VdmStringIoMutex;
VdmUserCr0MapIn;
VdmUserCr0MapOut;
VerifierIrqlData;
VerifierIsTrackingPool;
VerifierLargePagedPoolMap;
VerifierListLock;
VerifierModifyableOptions;
VerifierOptionChanges;
VerifierPoolLock;
VerifierPoolMutex;
VerifierRequiredTimeSinceBoot;
VerifierSystemSufficientlyBooted;
ViBadDriver;
ViBadMapperLock;
ViBadMappers;
VolumeClassGuid;
WSOEsp;
WSOThread;
WatchStepOver;
WatchStepOverBreakAddr;
WatchStepOverHandle;
WatchStepOverSuspended;
WmiIrpNames;
WmiTraceAlignment;
WmiUsePerfClock;
WmiWriteFailureLimit;
WmipAnyoneAccessSd;
WmipAnyoneAccessSecurityDescriptor;
WmipDataProviderPnPIdInstanceNamesGuid;
WmipDataProviderPnpidGuid;
WmipDockUndockNotificationEntry;
WmipGenericMapping;
WmipGuidList;
WmipGuidObjectType;
WmipHardFaultOnly;
WmipInUseRegEntryCount;
WmipInUseRegEntryHead;
WmipKernelLoggerStartedOnce;
WmipLoggerCount;
WmipMaxKmWnodeEventSize;
WmipNPAllocMax;
WmipNPEvent;
WmipNPNotificationSpinlock;
WmipNSAllocCount;
WmipNSAllocMax;
WmipNSHead;
WmipNSLookaside;
WmipNotificationMutex;
WmipNotificationsWaiting;
WmipPageLockHandle;
WmipRefCount;
WmipRegLookaside;
WmipRegistrationMutex;
WmipRegistryPath;
WmipSMBiosChecked;
WmipSMBiosTableLength;
WmipSMBiosTablePhysicalAddress;
WmipSMBiosTableVirtualAddress;
WmipSMBiosVersionInfo;
WmipServiceDeviceObject;
WmipSystemSubjectContext;
WmipTraceFastMutex;
WmipTraceFileFlag;
WmipTraceFlags;
WmipWmiLibInfo;
WriteOnceDiskClassGuid;
ZeroKernelPte;
ZeroPte;
_IMPORT_DESCRIPTOR_BOOTVID;
_IMPORT_DESCRIPTOR_HAL;
_NLG_Destination;
_NULL_IMPORT_DESCRIPTOR;
___PchSym_;
__decimal_point;
__decimal_point_length;
__fastflag;
__lc_codepage;
__lc_handle;
__lookuptable;
__mb_cur_max;
__nullstring;
__wnullstring;
_cfltcvt_tab;
_ctype;
_fltused;
_imp_ExAcquireFastMutex;
_imp_ExReleaseFastMutex;
_imp_ExTryToAcquireFastMutex;
_imp_HalClearSoftwareInterrupt;
_imp_HalRequestSoftwareInterrupt;
_imp_HalSystemVectorDispatchEntry;
_imp_KfAcquireSpinLock;
_imp_KfLowerIrql;
_imp_KfRaiseIrql;
_imp_KfReleaseSpinLock;
_imp__HalAllProcessorsStarted;
_imp__HalAllocateAdapterChannel;
_imp__HalBeginSystemInterrupt;
_imp__HalCalibratePerformanceCounter;
_imp__HalDisableSystemInterrupt;
_imp__HalEnableSystemInterrupt;
_imp__HalEndSystemInterrupt;
_imp__HalGetEnvironmentVariable;
_imp__HalGetInterruptVector;
_imp__HalHandleNMI;
_imp__HalInitSystem;
_imp__HalInitializeProcessor;
_imp__HalProcessorIdle;
_imp__HalQueryRealTimeClock;
_imp__HalReportResourceUsage;
_imp__HalReturnToFirmware;
_imp__HalSetEnvironmentVariable;
_imp__HalSetProfileInterval;
_imp__HalSetRealTimeClock;
_imp__HalSetTimeIncrement;
_imp__HalStartProfileInterrupt;
_imp__HalStopProfileInterrupt;
_imp__HalTranslateBusAddress;
_imp__IoAssignDriveLetters;
_imp__IoReadPartitionTable;
_imp__KdPortGetByte;
_imp__KdPortInitialize;
_imp__KdPortPollByte;
_imp__KdPortPutByte;
_imp__KdPortRestore;
_imp__KdPortSave;
_imp__KeAcquireSpinLock;
_imp__KeFlushWriteBuffer;
_imp__KeGetCurrentIrql;
_imp__KeLowerIrql;
_imp__KeQueryPerformanceCounter;
_imp__KeRaiseIrql;
_imp__KeRaiseIrqlToDpcLevel;
_imp__KeRaiseIrqlToSynchLevel;
_imp__KeReleaseSpinLock;
_imp__KeStallExecutionProcessor;
_imp__READ_PORT_UCHAR;
_imp__READ_PORT_ULONG;
_imp__READ_PORT_USHORT;
_imp__VidBitBlt;
_imp__VidBufferToScreenBlt;
_imp__VidCleanUp;
_imp__VidDisplayString;
_imp__VidInitialize;
_imp__VidResetDisplay;
_imp__VidScreenToBufferBlt;
_imp__VidSetScrollRegion;
_imp__VidSetTextColor;
_imp__VidSolidColorFill;
_imp__WRITE_PORT_UCHAR;
_imp__WRITE_PORT_ULONG;
_imp__WRITE_PORT_USHORT;
_ldused;
_pctype;
_pwctype;
driverObject;
errno;
gHeight;
gInfRuleTable;
gLeft;
gRuleTable;
gSearchAddress;
gTop;
gWidth;
g_IsImpersonatePrivilegeEffective;
nullclass;
oldpc;
pIoAllocateIrp;
pIoFreeIrp;
pIofCallDriver;
pIofCompleteRequest;
perftouchbuffer;
pos;
shutdownlength;
szBias;
szDaylightBias;
szDaylightName;
szDaylightStart;
szStandardBias;
szStandardName;
szStandardStart;
BOOTVID_NULL_THUNK_DATA;
HAL_NULL_THUNK_DATA;

Abios_kit_a();
Abios_kui_a();
ArbAddAllocation();
ArbAddOrdering();
ArbAddReserved();
ArbAllocateEntry();
ArbArbiterHandler();
ArbBacktrackAllocation();
ArbBootAllocation();
ArbBuildAssignmentOrdering();
ArbCommitAllocation();
ArbFindSuitableRange();
ArbFreeOrderingList();
ArbGetNextAllocationRange();
ArbInitializeArbiterInstance();
ArbInitializeOrderingList();
ArbOverrideConflict();
ArbPruneOrdering();
ArbQueryConflict();
ArbRetestAllocation();
ArbRollbackAllocation();
ArbSortArbitrationList();
ArbStartArbiter();
ArbTestAllocation();
ArbpBuildAllocationStack();
ArbpBuildAlternative();
ArbpGetRegistryValue();
ArbpIndent();
ArbpQueryConflictCallback();
ArbpUpdatePriority();
BBT_Exclude_Selector_Code_Begin();
BBT_Exclude_Selector_Code_End();
BBT_Exclude_Trap_Code_Begin();
BBT_Exclude_Trap_Code_End();
BuildQueryDirectoryIrp();
CPUID();
CacheImageSymbols();
CcAcquireByteRangeForWrite();
CcAdjustVacbLevelLockCount();
CcAllocateInitializeBcb();
CcAllocateObcb();
CcAllocateVacbLevel();
CcCalculateVacbLevelLockCount();
CcCanIWrite();
CcCancelMmWaitForUninitializeCacheMap();
CcCopyRead();
CcCopyReadExceptionFilter();
CcCopyWrite();
CcCreateVacbArray();
CcDeallocateBcb();
CcDeferWrite();
CcDeleteMbcb();
CcDeleteSharedCacheMap();
CcDereferenceFileOffset();
CcDrainVacbLevelZone();
CcExceptionFilter();
CcExtendVacbArray();
CcFastCopyRead();
CcFastCopyWrite();
CcFindBcb();
CcFindBitmapRangeToClean();
CcFindBitmapRangeToDirty();
CcFlushCache();
CcFreeActiveVacb();
CcFreeVirtualAddress();
CcGetBcbListHeadLargeOffset();
CcGetDirtyPages();
CcGetFileObjectFromBcb();
CcGetFileObjectFromSectionPtrs();
CcGetFlushedValidData();
CcGetLsnForFileObject();
CcGetVacbLargeOffset();
CcGetVacbMiss();
CcGetVirtualAddress();
CcGetVirtualAddressIfMapped();
CcInitializeCacheManager();
CcInitializeCacheMap();
CcInitializeVacbs();
CcIsThereDirtyData();
CcLazyWriteScan();
CcLogError();
CcMapAndCopy();
CcMapAndRead();
CcMapData();
CcMdlRead();
CcMdlReadComplete();
CcMdlReadComplete2();
CcMdlWriteComplete();
CcMdlWriteComplete2();
CcPerformReadAhead();
CcPinFileData();
CcPinMappedData();
CcPinRead();
CcPostDeferredWrites();
CcPostWorkQueue();
CcPrefillVacbLevelZone();
CcPrepareMdlWrite();
CcPreparePinWrite();
CcPurgeAndClearCacheSection();
CcPurgeCacheSection();
CcReferenceFileOffset();
CcReleaseByteRangeFromWrite();
CcRemapBcb();
CcRepinBcb();
CcScanDpc();
CcScheduleLazyWriteScan();
CcScheduleReadAhead();
CcSetAdditionalCacheAttributes();
CcSetBcbOwnerPointer();
CcSetDirtyInMask();
CcSetDirtyPageThreshold();
CcSetDirtyPinnedData();
CcSetFileSizes();
CcSetLogHandleForFile();
CcSetReadAheadGranularity();
CcSetVacbLargeOffset();
CcSetValidData();
CcUninitializeCacheMap();
CcUnmapAndPurge();
CcUnmapInactiveViews();
CcUnmapVacb();
CcUnmapVacbArray();
CcUnpinData();
CcUnpinDataForThread();
CcUnpinFileData();
CcUnpinRepinnedBcb();
CcWaitForCurrentLazyWriterActivity();
CcWaitForUninitializeCacheMap();
CcWaitOnActiveCount();
CcWorkerThread();
CcWriteBehind();
CcZeroData();
CcZeroEndOfLastPage();
Check486AStepping();
Check486BStepping();
Check486CStepping();
CheckEip();
CheckEsp();
CheckVdmFlags();
ChkSum();
CmBootLastKnownGood();
CmCheckRegistry();
CmDeleteKey();
CmDeleteKeyRecursive();
CmDeleteValueKey();
CmEnumerateKey();
CmEnumerateValueKey();
CmFlushKey();
CmGetSystemControlValues();
CmGetSystemDriverList();
CmInitSystem1();
CmLoadKey();
CmNotifyRunDown();
CmQueryKey();
CmQueryMultipleValueKey();
CmQueryRegistryQuotaInformation();
CmQueryValueKey();
CmReplaceKey();
CmRestoreKey();
CmSaveKey();
CmSaveMergedKeys();
CmSetAcpiHwProfile();
CmSetLastWriteTimeKey();
CmSetRegistryQuotaInformation();
CmSetTraceNotifyRoutine();
CmSetValueKey();
CmShutdownSystem();
CmUnloadKey();
CmpAddAcpiAliasEntry();
CmpAddAliasEntry();
CmpAddDockingInfo();
CmpAddDriverToList();
CmpAddInfoAfterParseFailure();
CmpAddSubKey();
CmpAddToDelayedDeref();
CmpAddToHiveFileList();
CmpAddToLeaf();
CmpAllocate();
CmpAllocatePostBlock();
CmpAppendLine();
CmpAppendSection();
CmpAppendStringToMultiSz();
CmpAppendValue();
CmpAssignSecurityDescriptor();
CmpCacheLookup();
CmpCancelSlavePost();
CmpCheckCreateAccess();
CmpCheckKey();
CmpCheckLockExceptionFilter();
CmpCheckNotifyAccess();
CmpCheckOperator();
CmpCheckRegistry2();
CmpCheckValueList();
CmpClaimGlobalQuota();
CmpCleanUpKcbCacheWithLock();
CmpCleanUpKcbValueCache();
CmpCleanUpSubKeyInfo();
CmpCloneHwProfile();
CmpCloseInfFile();
CmpCloseKeyObject();
CmpCompareCompressedName();
CmpCompareInIndex();
CmpCompressedNameSize();
CmpComputeGlobalQuotaAllowed();
CmpComputeHashValue();
CmpConfigureProcessors();
CmpConstructName();
CmpConvertLangId();
CmpCopyCell();
CmpCopyCompressedName();
CmpCopyKeyPartial();
CmpCopyName();
CmpCopySyncTree();
CmpCopySyncTree2();
CmpCopyValue();
CmpCreateControlSet();
CmpCreateEvent();
CmpCreateHwProfileFriendlyName();
CmpCreateKeyControlBlock();
CmpCreateLinkNode();
CmpCreateObjectTypes();
CmpCreatePerfKeys();
CmpCreatePredefined();
CmpCreateRegistryRoot();
CmpCreateRootNode();
CmpCreateTemporaryHive();
CmpDelayedDerefKeys();
CmpDeleteKeyObject();
CmpDeleteTree();
CmpDereferenceKeyControlBlock();
CmpDereferenceKeyControlBlockWithLock();
CmpDereferenceNameControlBlockWithLock();
CmpDestroyHive();
CmpDestroyTemporaryHive();
CmpDiskFullWarning();
CmpDiskFullWarningWorker();
CmpDoCompareKeyName();
CmpDoCreate();
CmpDoCreateChild();
CmpDoFileSetSize();
CmpDoFindSubKeyByNumber();
CmpDoFlushAll();
CmpDoOpen();
CmpDoSort();
CmpDummyApc();
CmpDumpKeyBodyList();
CmpFileFlush();
CmpFileRead();
CmpFileSetSize();
CmpFileWrite();
CmpFilterAcpiDockingState();
CmpFindACPITable();
CmpFindControlSet();
CmpFindDrivers();
CmpFindMatchingDescriptorCell();
CmpFindNameInList();
CmpFindPattern();
CmpFindRSDTTable();
CmpFindSubKeyByName();
CmpFindSubKeyByNumber();
CmpFindSubKeyInLeaf();
CmpFindSubKeyInRoot();
CmpFindTagIndex();
CmpFindValueByNameFromCache();
CmpFlushNotifiesOnKeyBodyList();
CmpFlushNotify();
CmpFree();
CmpFreeDriverList();
CmpFreeKeyBody();
CmpFreeKeyByCell();
CmpFreeKeyValues();
CmpFreeLineList();
CmpFreePostBlock();
CmpFreeSectionList();
CmpFreeSecurityDescriptor();
CmpFreeSlavePost();
CmpFreeValue();
CmpFreeValueList();
CmpGenInstall();
CmpGetAcpiProfileInformation();
CmpGetAddRegInfData();
CmpGetBinaryField();
CmpGetBiosDate();
CmpGetBiosVersion();
CmpGetHiveName();
CmpGetInfData();
CmpGetIntField();
CmpGetKeyName();
CmpGetKeySecurity();
CmpGetNameControlBlock();
CmpGetNextName();
CmpGetPnPBIOSTableAddress();
CmpGetRegistryValue();
CmpGetSectionLineIndex();
CmpGetSectionLineIndexValueCount();
CmpGetSymbolicLink();
CmpGetToken();
CmpGetValueDataFromCache();
CmpGetValueKeyFromCache();
CmpGetValueListFromCache();
CmpHiveRootSecurityDescriptor();
CmpInitHiveFromFile();
CmpInitializeCache();
CmpInitializeHardwareConfiguration();
CmpInitializeHive();
CmpInitializeHiveList();
CmpInitializeKeyNameString();
CmpInitializeMachineDependentConfiguration();
CmpInitializeRegistryNames();
CmpInitializeRegistryNode();
CmpInitializeSystemHive();
CmpInitializeValueNameString();
CmpInsertKeyHash();
CmpInsertSecurityCellList();
CmpInterlockedFunction();
CmpIsLastKnownGoodBoot();
CmpIsLoadType();
CmpLazyFlush();
CmpLazyFlushDpcRoutine();
CmpLazyFlushWorker();
CmpLinkHiveToMaster();
CmpLinkKeyToHive();
CmpLoadHiveVolatile();
CmpLockRegistry();
CmpLockRegistryExclusive();
CmpMapPhysicalAddress();
CmpMarkIndexDirty();
CmpMarkKeyDirty();
CmpMarkKeyParentDirty();
CmpMarkKeyValuesDirty();
CmpMatchAcpiCreatorRevisionRule();
CmpMatchAcpiOemIdRule();
CmpMatchAcpiOemRevisionRule();
CmpMatchAcpiOemTableIdRule();
CmpMatchAcpiRevisionRule();
CmpMatchDateRule();
CmpMatchDescription();
CmpMatchInfList();
CmpMatchInstallRule();
CmpMatchMemoryRule();
CmpMatchNextMatchRule();
CmpMatchOemIdRule();
CmpMatchPModeRule();
CmpMatchPointerRule();
CmpMatchRmPmSameRule();
CmpMatchSearchRule();
CmpMergeKeyValues();
CmpMoveBiosAliasTable();
CmpNameFromAttributes();
CmpNameSize();
CmpNotifyChangeKey();
CmpNotifyTriggerCheck();
CmpOKToFollowLink();
CmpOpenFileWithExtremePrejudice();
CmpOpenHiveFiles();
CmpOpenInfFile();
CmpOpenRegKey();
CmpOrderGroup();
CmpParseInfBuffer();
CmpParseKey();
CmpPerformMachineIdentification();
CmpPostApc();
CmpPostApcRunDown();
CmpPostNotify();
CmpProcessAddRegLine();
CmpProcessBitRegLine();
CmpProcessDelRegLine();
CmpProcessForSimpleStringSub();
CmpProcessReg();
CmpQueryKeyData();
CmpQueryKeyName();
CmpQueryKeyValueData();
CmpQuerySecurityDescriptorInfo();
CmpQuotaWarningWorker();
CmpReferenceKeyControlBlock();
CmpRefreshHive();
CmpRefreshWorkerRoutine();
CmpReleaseGlobalQuota();
CmpRemoveFromDelayedClose();
CmpRemoveFromHiveFileList();
CmpRemoveKeyControlBlock();
CmpRemoveKeyHash();
CmpRemoveSecurityCellList();
CmpRemoveSubKey();
CmpReportNotify();
CmpReportNotifyHelper();
CmpResolveDriverDependencies();
CmpSaveBootControlSet();
CmpSaveKeyByFileCopy();
CmpSearchForOpenSubKeys();
CmpSearchInfLine();
CmpSearchInfSection();
CmpSearchKeyControlBlockTree();
CmpSearchLineInSectionByIndex();
CmpSearchSectionByName();
CmpSecurityExceptionFilter();
CmpSecurityMethod();
CmpSelectLeaf();
CmpSetGlobalQuotaAllowed();
CmpSetSecurityDescriptorInfo();
CmpSetValueKeyExisting();
CmpSetValueKeyNew();
CmpSetVersionData();
CmpSetupConfigurationTree();
CmpSortDriverList();
CmpSplitLeaf();
CmpSyncKeyValues();
CmpSyncSubKeysAfterDelete();
CmpUnlockRegistry();
CmpValidateAlternate();
CmpValidateHiveSecurityDescriptors();
CmpWalkPath();
CmpWorker();
ComPortDBAdd();
CommonDispatchException();
CompareNamesCaseSensitive();
CompareUnicodeStrings();
ComputeNameLength();
ComputeUnicodeNameLength();
CreateSystemRootLink();
CsToLinear();
DaysAndFractionToTime();
DbgBreakPoint();
DbgBreakPointWithStatus();
DbgLoadImageSymbols();
DbgPrint();
DbgPrintReturnControlC();
DbgPrompt();
DbgUnLoadImageSymbols();
DbgUserBreakPoint();
DbgkCreateThread();
DbgkExitProcess();
DbgkExitThread();
DbgkForwardException();
DbgkMapViewOfSection();
DbgkUnMapViewOfSection();
DbgkpResumeProcess();
DbgkpSectionHandleToFileHandle();
DbgkpSendApiMessage();
DbgkpSuspendProcess();
DebugLoadImageSymbols();
DebugPrint();
DebugPrompt();
DebugService();
DebugUnLoadImageSymbols();
DisplayBootBitmap();
DisplayFilter();
Dr_kfce_a();
Dr_kids_a();
Dr_kit0_a();
Dr_kit10_a();
Dr_kit11_a();
Dr_kit13_a();
Dr_kit1_a();
Dr_kit3_a();
Dr_kit4_a();
Dr_kit5_a();
Dr_kit6_a();
Dr_kit7_a();
Dr_kit9_a();
Dr_kit_a();
Dr_kita_a();
Dr_kitb_a();
Dr_kitc_a();
Dr_kitd_a();
Dr_kite_a();
Dr_kitf_a();
Dr_kitx_a();
Dr_kslwh_a();
Dr_kss_a();
Dr_kui_a();
DrivesupDebugPrint();
DumpTraceData();
EisaBuildEisaDeviceNode();
EisaBuildSlotsResources();
EisaGetEisaDevicesResources();
ElapsedDaysToYears();
ExAcquireFastMutex();
ExAcquireFastMutexUnsafe();
ExAcquireResourceExclusive();
ExAcquireResourceExclusiveLite();
ExAcquireResourceSharedLite();
ExAcquireSharedStarveExclusive();
ExAcquireSharedWaitForExclusive();
ExAcquireTimeRefreshLock();
ExAdjustLookasideDepth();
ExAllocateFromNPagedLookasideList();
ExAllocateFromPPNPagedLookasideList();
ExAllocateFromPagedLookasideList();
ExAllocatePool();
ExAllocatePoolSanityChecks();
ExAllocatePoolWithQuota();
ExAllocatePoolWithQuotaTag();
ExAllocatePoolWithTag();
ExAllocatePoolWithTagPriority();
ExBurnMemory();
ExChangeHandle();
ExComputeTickCountMultiplier();
ExConvertExclusiveToSharedLite();
ExCreateCallback();
ExCreateHandle();
ExCreateHandleTable();
ExDeleteNPagedLookasideList();
ExDeletePagedLookasideList();
ExDeleteResource();
ExDeleteResourceLite();
ExDestroyHandle();
ExDestroyHandleTable();
ExDisableResourceBoostLite();
ExDupHandleTable();
ExEnumHandleTable();
ExExtendZone();
ExFreeHandleTable();
ExFreePool();
ExFreePoolSanityChecks();
ExFreePoolWithTag();
ExFreeToNPagedLookasideList();
ExFreeToPPNPagedLookasideList();
ExFreeToPagedLookasideList();
ExGetExclusiveWaiterCount();
ExGetNextWakeTime();
ExGetPreviousMode();
ExGetSharedWaiterCount();
ExInitPoolLookasidePointers();
ExInitSystem();
ExInitSystemPhase2();
ExInitializeHandleTablePackage();
ExInitializeNPagedLookasideList();
ExInitializePagedLookasideList();
ExInitializeResource();
ExInitializeResourceLite();
ExInitializeTimeRefresh();
ExInitializeZone();
ExInsertPoolTag();
ExInterlockedAddLargeInteger();
ExInterlockedAddLargeStatistic();
ExInterlockedAddUlong();
ExInterlockedClearBits();
ExInterlockedCompareExchange64();
ExInterlockedDecrementLong();
ExInterlockedExchangeAddLargeInteger();
ExInterlockedExchangeUlong();
ExInterlockedExtendZone();
ExInterlockedFlushSList();
ExInterlockedIncrementLong();
ExInterlockedInsertHeadList();
ExInterlockedInsertTailList();
ExInterlockedPopEntryList();
ExInterlockedPopEntrySList();
ExInterlockedPushEntryList();
ExInterlockedPushEntrySList();
ExInterlockedRemoveHeadList();
ExInterlockedSetBits();
ExInterlockedSetClearBits();
ExIsProcessorFeaturePresent();
ExIsResourceAcquiredExclusiveLite();
ExIsResourceAcquiredSharedLite();
ExLocalTimeToSystemTime();
ExLockHandleTableEntry();
ExLockHandleTableExclusive();
ExLockHandleTableShared();
ExLockPool();
ExLockUserBuffer();
ExLuidInitialization();
ExMapHandleToPointer();
ExNotifyCallback();
ExQueryPoolBlockSize();
ExQueryPoolUsage();
ExQuerySystemLockInformation();
ExQueueWorkItem();
ExRaiseAccessViolation();
ExRaiseDatatypeMisalignment();
ExRaiseException();
ExRaiseHardError();
ExRaiseStatus();
ExRegisterCallback();
ExReinitializeResourceLite();
ExReleaseFastMutex();
ExReleaseFastMutexUnsafe();
ExReleaseResourceForThread();
ExReleaseResourceForThreadLite();
ExReleaseResourceLite();
ExReleaseTimeRefreshLock();
ExRemoveHandleTable();
ExReturnPoolQuota();
ExSetResourceOwnerPointer();
ExSetTimerResolution();
ExShutdownSystem();
ExSnapShotHandleTables();
ExSweepHandleTable();
ExSystemExceptionFilter();
ExSystemTimeToLocalTime();
ExTimerRundown();
ExTryToAcquireFastMutex();
ExTryToAcquireResourceExclusiveLite();
ExUnlockHandleTableEntry();
ExUnlockHandleTableShared();
ExUnlockPool();
ExUnlockUserBuffer();
ExUnregisterCallback();
ExUpdateSystemTimeFromCmos();
ExUuidCreate();
ExVerifySuite();
ExceptionRecord32To64();
ExecuteHandler();
ExfInterlockedAddUlong();
ExfInterlockedFlushSList();
ExfInterlockedInsertHeadList();
ExfInterlockedInsertTailList();
ExfInterlockedPopEntryList();
ExfInterlockedPopEntrySList();
ExfInterlockedPushEntryList();
ExfInterlockedPushEntrySList();
ExfInterlockedRemoveHeadList();
Exfi386InterlockedDecrementLong();
Exfi386InterlockedExchangeUlong();
Exfi386InterlockedIncrementLong();
Exi386InterlockedDecrementLong();
Exi386InterlockedExchangeUlong();
Exi386InterlockedIncrementLong();
ExpAcquireResourceExclusiveLite();
ExpAcquireResourceSharedLite();
ExpAcquireSharedStarveExclusive();
ExpAddTagForBigPages();
ExpAllocateHandleTable();
ExpAllocateHandleTableEntry();
ExpAllocatePoolWithQuotaHandler();
ExpAllocateStringRoutine();
ExpAllocateUuids();
ExpBoostOwnerThread();
ExpCenturyDpcRoutine();
ExpCheckDynamicThreadCount();
ExpCheckForResource();
ExpCheckForWorker();
ExpCheckSingleFilter();
ExpComputeLookasideDepth();
ExpCopyProcessInfo();
ExpCopyThreadInfo();
ExpCreateWorkerThread();
ExpDeleteCallback();
ExpDeleteMutant();
ExpDetectWorkerThreadDeadlock();
ExpDummyAllocate();
ExpEventInitialization();
ExpEventPairInitialization();
ExpExpirationThread();
ExpFindAndRemoveTagBigPages();
ExpFindCurrentThread();
ExpFreeHandleTableEntry();
ExpGetCurrentUserUILanguage();
ExpGetGlobalAtomTable();
ExpGetHandleInformation();
ExpGetInstemulInformation();
ExpGetLockInformation();
ExpGetLookasideInformation();
ExpGetObjectInformation();
ExpGetPoolInformation();
ExpGetPoolTagInfo();
ExpGetProcessInformation();
ExpGetUILanguagePolicy();
ExpInitSystemPhase0();
ExpInitSystemPhase1();
ExpInitializeCallbacks();
ExpInitializeExecutive();
ExpInitializePoolDescriptor();
ExpInitializePoolLookasideList();
ExpInsertPoolTracker();
ExpInterlockedCompareExchange64();
ExpInterlockedPopEntrySListFault();
ExpInterlockedPopEntrySListResume();
ExpLookupHandleTableEntry();
ExpMutantInitialization();
ExpNewThreadNecessary();
ExpPhase1DisplaySystemVersion();
ExpProfileDelete();
ExpProfileInitialization();
ExpQueryLegacyDriverInformation();
ExpQueryModuleInformation();
ExpRaiseHardError();
ExpRefreshTimeZoneInformation();
ExpReleaseResourceForThread();
ExpRemovePoolTracker();
ExpResourceInitialization();
ExpScanGeneralLookasideList();
ExpScanPoolLookasideList();
ExpSemaphoreInitialization();
ExpSetCurrentUserUILanguage();
ExpSetSystemTime();
ExpSystemErrorHandler();
ExpTimeRefreshDpcRoutine();
ExpTimeRefreshWork();
ExpTimeZoneDpcRoutine();
ExpTimeZoneWork();
ExpTimerApcRoutine();
ExpTimerDpcRoutine();
ExpTimerInitialization();
ExpUuidGetValues();
ExpUuidInitialization();
ExpUuidLoadSequenceNumber();
ExpUuidSaveSequenceNumber();
ExpUuidSaveSequenceNumberIf();
ExpValidateLocale();
ExpWaitForResource();
ExpWaitForResourceDdk();
ExpWin32Initialization();
ExpWorkerInitialization();
ExpWorkerThread();
ExpWorkerThreadBalanceManager();
FindBitmapResource();
FindPathForDevice();
FsFilterAllocateCompletionStack();
FsFilterCtrlFree();
FsFilterCtrlInit();
FsFilterFreeCompletionStack();
FsFilterGetCallbacks();
FsFilterInit();
FsFilterPerformCallbacks();
FsFilterPerformCompletionCallbacks();
FsRtlAcknowledgeOplockBreak();
FsRtlAcquireFileExclusive();
FsRtlAcquireFileExclusiveCommon();
FsRtlAcquireFileForCcFlush();
FsRtlAcquireFileForCcFlushEx();
FsRtlAcquireFileForModWrite();
FsRtlAcquireFileForModWriteEx();
FsRtlAcquireToCreateMappedSection();
FsRtlAddLargeEntry();
FsRtlAddLargeMcbEntry();
FsRtlAddMcbEntry();
FsRtlAddToTunnelCache();
FsRtlAllocateFileLock();
FsRtlAllocateOplock();
FsRtlAllocatePool();
FsRtlAllocatePoolWithQuota();
FsRtlAllocatePoolWithQuotaTag();
FsRtlAllocatePoolWithTag();
FsRtlAllocateResource();
FsRtlAreNamesEqual();
FsRtlBalanceReads();
FsRtlCancelExclusiveIrp();
FsRtlCancelNotify();
FsRtlCancelOplockIIIrp();
FsRtlCancelWaitIrp();
FsRtlCheckLockForReadAccess();
FsRtlCheckLockForWriteAccess();
FsRtlCheckNoExclusiveConflict();
FsRtlCheckNoSharedConflict();
FsRtlCheckNotifyForDelete();
FsRtlCheckOplock();
FsRtlCompareNodeAndKey();
FsRtlCompletionRoutinePriv();
FsRtlCopyRead();
FsRtlCopyWrite();
FsRtlCreateSectionForDataScan();
FsRtlCurrentBatchOplock();
FsRtlDeleteKeyFromTunnelCache();
FsRtlDeleteTunnelCache();
FsRtlDeregisterUncProvider();
FsRtlDissectDbcs();
FsRtlDissectName();
FsRtlDoesDbcsContainWildCards();
FsRtlDoesNameContainWildCards();
FsRtlEmptyFreePoolList();
FsRtlFastCheckLockForRead();
FsRtlFastCheckLockForWrite();
FsRtlFastUnlockAll();
FsRtlFastUnlockAllByKey();
FsRtlFastUnlockSingle();
FsRtlFastUnlockSingleExclusive();
FsRtlFastUnlockSingleShared();
FsRtlFindFirstOverlapInNode();
FsRtlFindFirstOverlappingExclusiveNode();
FsRtlFindFirstOverlappingSharedNode();
FsRtlFindInTunnelCache();
FsRtlFindLargeIndex();
FsRtlFreeFileLock();
FsRtlFreeTunnelNode();
FsRtlGetCompatibilityModeValue();
FsRtlGetFileSize();
FsRtlGetNextFileLock();
FsRtlGetNextLargeMcbEntry();
FsRtlGetNextMcbEntry();
FsRtlGetTunnelParameterValue();
FsRtlInitSystem();
FsRtlInitializeFileLock();
FsRtlInitializeFileLocks();
FsRtlInitializeLargeMcb();
FsRtlInitializeLargeMcbs();
FsRtlInitializeMcb();
FsRtlInitializeTunnelCache();
FsRtlInitializeTunnels();
FsRtlInitializeWorkerThread();
FsRtlInsertFilterContext();
FsRtlInsertPerFileObjectContext();
FsRtlInsertPerStreamContext();
FsRtlIsDbcsInExpression();
FsRtlIsFatDbcsLegal();
FsRtlIsHpfsDbcsLegal();
FsRtlIsNameInExpression();
FsRtlIsNameInExpressionPrivate();
FsRtlIsNotifyOnList();
FsRtlIsNtstatusExpected();
FsRtlIsPagingFile();
FsRtlIsTotalDeviceFailure();
FsRtlLookupFilterContextInternal();
FsRtlLookupLargeMcbEntry();
FsRtlLookupLastLargeMcbEntry();
FsRtlLookupLastLargeMcbEntryAndIndex();
FsRtlLookupLastMcbEntry();
FsRtlLookupMcbEntry();
FsRtlLookupPerFileObjectContext();
FsRtlLookupPerStreamContextInternal();
FsRtlMdlRead();
FsRtlMdlReadComplete();
FsRtlMdlReadCompleteDev();
FsRtlMdlReadDev();
FsRtlMdlWriteComplete();
FsRtlMdlWriteCompleteDev();
FsRtlNormalizeNtstatus();
FsRtlNotifyChangeDirectory();
FsRtlNotifyCleanup();
FsRtlNotifyCompleteIrp();
FsRtlNotifyCompleteIrpList();
FsRtlNotifyCompletion();
FsRtlNotifyFilterChangeDirectory();
FsRtlNotifyFilterReportChange();
FsRtlNotifyFullChangeDirectory();
FsRtlNotifyFullReportChange();
FsRtlNotifyInitializeSync();
FsRtlNotifyReportChange();
FsRtlNotifySetCancelRoutine();
FsRtlNotifyUninitializeSync();
FsRtlNotifyUpdateBuffer();
FsRtlNotifyVolumeEvent();
FsRtlNumberOfRunsInLargeMcb();
FsRtlNumberOfRunsInMcb();
FsRtlOpBatchBreakClosePending();
FsRtlOplockBreakNotify();
FsRtlOplockBreakToII();
FsRtlOplockBreakToNone();
FsRtlOplockCleanup();
FsRtlOplockFsctrl();
FsRtlOplockIsFastIoPossible();
FsRtlPTeardownPerFileObjectContexts();
FsRtlPostPagingFileStackOverflow();
FsRtlPostStackOverflow();
FsRtlPrepareMdlWrite();
FsRtlPrepareMdlWriteDev();
FsRtlPrivateCancelFileLockIrp();
FsRtlPrivateCheckForExclusiveLockAccess();
FsRtlPrivateCheckForSharedLockAccess();
FsRtlPrivateCheckWaitingLocks();
FsRtlPrivateFastUnlockAll();
FsRtlPrivateInitializeFileLock();
FsRtlPrivateInsertExclusiveLock();
FsRtlPrivateInsertLock();
FsRtlPrivateInsertSharedLock();
FsRtlPrivateLock();
FsRtlPrivateRemoveLock();
FsRtlPrivateResetLowestLockOffset();
FsRtlProcessFileLock();
FsRtlPruneTunnelCache();
FsRtlRegisterFileSystemFilterCallbacks();
FsRtlRegisterUncProvider();
FsRtlReleaseFile();
FsRtlReleaseFileForCcFlush();
FsRtlReleaseFileForModWrite();
FsRtlRemoveAndCompleteIrp();
FsRtlRemoveAndCompleteWaitIrp();
FsRtlRemoveFilterContext();
FsRtlRemoveLargeEntry();
FsRtlRemoveLargeMcbEntry();
FsRtlRemoveMcbEntry();
FsRtlRemoveMcbEntryPrivate();
FsRtlRemoveNodeFromTunnel();
FsRtlRemovePerFileObjectContext();
FsRtlRemovePerStreamContext();
FsRtlRequestExclusiveOplock();
FsRtlRequestOplockII();
FsRtlResetLargeMcb();
FsRtlSetFileSize();
FsRtlSplitLargeMcb();
FsRtlSplitLocks();
FsRtlStackOverflowRead();
FsRtlSyncVolumes();
FsRtlTeardownFilterContexts();
FsRtlTeardownPerStreamContexts();
FsRtlTruncateLargeMcb();
FsRtlTruncateMcb();
FsRtlUninitializeFileLock();
FsRtlUninitializeLargeMcb();
FsRtlUninitializeMcb();
FsRtlUninitializeOplock();
FsRtlWaitOnIrp();
FsRtlWorkerThread();
FsRtlpIsDfsEnabled();
FsRtlpOpenDev();
FsRtlpPostStackOverflow();
FsRtlpRegisterProviderWithMUP();
FsRtlpSetSymbolicLink();
FstubTranslateRequirement();
FstubTranslateResource();
Get386Stepping();
Get486Stepping();
GetHandlerAddress();
GetIretHookAddress();
GetMachineBootPointers();
GetNextReparseVolumePath();
GetNextWchar();
GetVirtualBits();
HalSystemVectorDispatchEntry();
HalpCalculateChsValues();
HalpEnableAutomaticDriveLetterAssignment();
HalpGetFullGeometry();
HalpIsOldStyleFloppy();
HalpIsValidPartitionEntry();
HalpNextDriveLetter();
HalpNextMountLetter();
HalpQueryDriveLayout();
HalpQueryPartitionType();
HalpSetMountLetter();
HvAllocateCell();
HvCheckBin();
HvCheckHive();
HvFreeCell();
HvFreeHive();
HvFreeHivePartial();
HvGetCellSize();
HvInitializeHive();
HvIsCellAllocated();
HvLoadHive();
HvMarkCellDirty();
HvMarkClean();
HvMarkDirty();
HvReallocateCell();
HvRefreshHive();
HvSyncHive();
HvWriteHive();
HvpAddBin();
HvpAllocateMap();
HvpBuildMap();
HvpBuildMapAndCopy();
HvpCleanMap();
HvpCoalesceDiscardedBins();
HvpDelistFreeCell();
HvpDiscardBins();
HvpDoAllocateCell();
HvpDoWriteHive();
HvpEnlistBinInMap();
HvpEnlistFreeCell();
HvpEnlistFreeCells();
HvpFillFileName();
HvpFindNextDirtyBlock();
HvpFreeAllocatedBins();
HvpFreeMap();
HvpGetCellFlat();
HvpGetCellMap();
HvpGetCellPaged();
HvpGetHiveHeader();
HvpGetLogHeader();
HvpGrowLog1();
HvpGrowLog2();
HvpHeaderCheckSum();
HvpInitMap();
HvpIsFreeNeighbor();
HvpReadFileImageAndBuildMap();
HvpRecoverData();
HvpTruncateBins();
HvpWriteLog();
IDT();
IDTEnd();
IcaAccept();
IcaScan();
InbvAcquireDisplayOwnership();
InbvAcquireLock();
InbvBitBlt();
InbvBufferToScreenBlt();
InbvCheckDisplayOwnership();
InbvDisplayString();
InbvDriverInitialize();
InbvEnableBootDriver();
InbvEnableDisplayString();
InbvGetResourceAddress();
InbvIndicateProgress();
InbvInstallDisplayStringFilter();
InbvIsBootDriverInstalled();
InbvNotifyDisplayOwnershipLost();
InbvReleaseLock();
InbvResetDisplay();
InbvRotateGuiBootDisplay();
InbvScreenToBufferBlt();
InbvSetDisplayOwnership();
InbvSetProgressBarCoordinates();
InbvSetProgressBarSubset();
InbvSetScrollRegion();
InbvSetTextColor();
InbvSolidColorFill();
InbvTestLock();
InbvUpdateProgressBar();
InitializePool();
InterlockedCompareExchange();
InterlockedDecrement();
InterlockedExchange();
InterlockedExchangeAdd();
InterlockedFlushSList();
InterlockedIncrement();
InternalBreakpointCheck();
IoAcquireRemoveLockEx();
IoAcquireVpbSpinLock();
IoAllocateAdapterChannel();
IoAllocateController();
IoAllocateDriverObjectExtension();
IoAllocateErrorLogEntry();
IoAllocateIrp();
IoAllocateMdl();
IoAllocateWorkItem();
IoAssignResources();
IoAsynchronousPageWrite();
IoAttachDevice();
IoAttachDeviceByPointer();
IoAttachDeviceToDeviceStack();
IoAttachDeviceToDeviceStackSafe();
IoBuildAsynchronousFsdRequest();
IoBuildDeviceIoControlRequest();
IoBuildPartialMdl();
IoBuildPoDeviceNotifyList();
IoBuildSynchronousFsdRequest();
IoCallDriver();
IoCancelFileOpen();
IoCancelIrp();
IoCancelThreadIo();
IoChangeFileObjectFilterContext();
IoCheckDesiredAccess();
IoCheckEaBufferValidity();
IoCheckFunctionAccess();
IoCheckQuerySetFileInformation();
IoCheckQuerySetVolumeInformation();
IoCheckQuotaBufferValidity();
IoCheckShareAccess();
IoCompleteRequest();
IoConnectInterrupt();
IoCreateController();
IoCreateDevice();
IoCreateDriver();
IoCreateFile();
IoCreateFileSpecifyDeviceObjectHint();
IoCreateNotificationEvent();
IoCreateStreamFileObject();
IoCreateStreamFileObjectLite();
IoCreateSymbolicLink();
IoCreateSynchronizationEvent();
IoCreateUnprotectedSymbolicLink();
IoDeleteDevice();
IoDeleteDriver();
IoDeleteSymbolicLink();
IoDetachDevice();
IoDisconnectInterrupt();
IoEnqueueIrp();
IoEnumerateDeviceObjectList();
IoEnumerateRegisteredFiltersList();
IoFastQueryNetworkAttributes();
IoFreeController();
IoFreeDumpRange();
IoFreeDumpStack();
IoFreeIrp();
IoFreeMdl();
IoFreePoDeviceNotifyList();
IoGetAttachedDevice();
IoGetAttachedDeviceReference();
IoGetBaseFileSystemDeviceObject();
IoGetBootDiskInformation();
IoGetConfigurationInformation();
IoGetCrashDumpInformation();
IoGetCrashDumpStateInformation();
IoGetCurrentProcess();
IoGetDeviceAttachmentBaseRef();
IoGetDeviceInterfaceAlias();
IoGetDeviceInterfaces();
IoGetDeviceObjectPointer();
IoGetDeviceProperty();
IoGetDeviceToVerify();
IoGetDiskDeviceObject();
IoGetDmaAdapter();
IoGetDriverObjectExtension();
IoGetDumpHiberRanges();
IoGetDumpStack();
IoGetFileObjectFilterContext();
IoGetFileObjectGenericMapping();
IoGetInitialStack();
IoGetLegacyVetoList();
IoGetLowerDeviceObject();
IoGetRelatedDeviceObject();
IoGetRelatedTargetDevice();
IoGetRequestorProcess();
IoGetRequestorProcessId();
IoGetRequestorSessionId();
IoGetTopLevelIrp();
IoInitSystem();
IoInitializeDumpStack();
IoInitializeIrp();
IoInitializeRemoveLockEx();
IoInitializeTimer();
IoInvalidateDeviceRelations();
IoInvalidateDeviceState();
IoIsFileOriginRemote();
IoIsOperationSynchronous();
IoIsSystemThread();
IoIsValidNameGraftingBuffer();
IoIsWdmVersionAvailable();
IoMakeAssociatedIrp();
IoNotifyPowerOperationVetoed();
IoOpenDeviceInterfaceRegistryKey();
IoOpenDeviceRegistryKey();
IoPageFileCreated();
IoPageRead();
IoPnPDeliverServicePowerNotification();
IoQueryDeviceDescription();
IoQueryFileInformation();
IoQueryVolumeInformation();
IoQueueThreadIrp();
IoQueueWorkItem();
IoRaiseHardError();
IoRaiseInformationalHardError();
IoRegisterBootDriverReinitialization();
IoRegisterDeviceInterface();
IoRegisterDriverReinitialization();
IoRegisterFileSystem();
IoRegisterFsRegistrationChange();
IoRegisterFsRegistrationChangeEx();
IoRegisterLastChanceShutdownNotification();
IoRegisterPlugPlayNotification();
IoRegisterShutdownNotification();
IoReleaseCancelSpinLock();
IoReleaseRemoveLockAndWaitEx();
IoReleaseRemoveLockEx();
IoRemoveShareAccess();
IoReportDetectedDevice();
IoReportHalResourceUsage();
IoReportResourceForDetection();
IoReportResourceUsage();
IoReportResourceUsageInternal();
IoReportTargetDeviceChange();
IoReportTargetDeviceChangeAsynchronous();
IoRequestDeviceEject();
IoRetryIrpCompletions();
IoReuseIrp();
IoSetCrashDumpState();
IoSetDeviceInterfaceState();
IoSetDeviceToVerify();
IoSetDumpRange();
IoSetFileOrigin();
IoSetHardErrorOrVerifyDevice();
IoSetInformation();
IoSetIoCompletion();
IoSetShareAccess();
IoSetThreadHardErrorMode();
IoSetTopLevelIrp();
IoShutdownSystem();
IoStartNextPacket();
IoStartNextPacketByKey();
IoStartPacket();
IoStartTimer();
IoStopTimer();
IoSynchronousInvalidateDeviceRelations();
IoSynchronousPageWrite();
IoThreadToProcess();
IoUnregisterFileSystem();
IoUnregisterFsRegistrationChange();
IoUnregisterPlugPlayNotification();
IoUnregisterShutdownNotification();
IoUpdateShareAccess();
IoVerifierInit();
IoVerifyVolume();
IoWMIAllocateInstanceIds();
IoWMICompleteRequest();
IoWMIRegistrationControl();
IoWMISuggestInstanceName();
IoWMISystemControl();
IoWMIWriteEvent();
IoWriteCrashDump();
IoWriteErrorLogEntry();
IofCallDriver();
IofCompleteRequest();
IopAbortRequest();
IopAcquireFileObjectLock();
IopAddDevicesToBootDriver();
IopAddDevicesToBootDriverWorker();
IopAddPageToPageMap();
IopAddRelationToList();
IopAddRemoteBootValuesToRegistry();
IopAddReqDescsToArbiters();
IopAllocateBootResources();
IopAllocateBuffer();
IopAllocateDeviceNode();
IopAllocateErrorLogEntry();
IopAllocateIrpCleanup();
IopAllocateIrpMustSucceed();
IopAllocateIrpPrivate();
IopAllocateRelationList();
IopAllocateResources();
IopAllocateUnicodeString();
IopApcHardError();
IopAppendBuffer();
IopAppendLegacyVeto();
IopApplyFunctionToServiceInstances();
IopApplyFunctionToSubKeys();
IopArbitrateDeviceResources();
IopAssign();
IopAssignInner();
IopAssignNetworkDriveLetter();
IopAssignResourcesToDevices();
IopAsynchronousCall();
IopAttachDeviceToDeviceStackSafe();
IopBootLog();
IopBootLogToFile();
IopBuildCmResourceList();
IopBuildCmResourceLists();
IopBuildSymbolicLinkStrings();
IopBusCheck();
IopBusNumberInitialize();
IopBusNumberPackResource();
IopBusNumberScoreRequirement();
IopBusNumberUnpackRequirement();
IopBusNumberUnpackResource();
IopCacheNetbiosNameForIpAddress();
IopCalculateRequiredDumpSpace();
IopCallArbiter();
IopCallDriverAddDevice();
IopCallDriverAddDeviceQueryRoutine();
IopCancelAlertedRequest();
IopCaptureObjectName();
IopChainDereferenceComplete();
IopChangeDeviceObjectFromRegistryProperties();
IopChangeInterfaceType();
IopCheckBackupRestorePrivilege();
IopCheckDataStructures();
IopCheckDataStructuresWorker();
IopCheckDependencies();
IopCheckDeviceAndDriver();
IopCheckGetQuotaBufferValidity();
IopCheckTopDeviceHint();
IopCheckUnloadDriver();
IopCheckVpbMounted();
IopChildToRootTranslation();
IopCleanupDeviceReferences();
IopCleanupDeviceRegistryValues();
IopClearProblemWorker();
IopCloseFile();
IopCmResourcesToIoResources();
IopCombineCmResourceList();
IopCombineLegacyResources();
IopCompareAlternativeCount();
IopComparePriority();
IopCompleteDumpInitialization();
IopCompletePageWrite();
IopCompleteRequest();
IopCompleteUnloadOrDelete();
IopCompressRelationList();
IopComputeHarddiskDerangements();
IopConcatenateUnicodeStrings();
IopConfigureCrashDump();
IopConnectLinkTrackingPort();
IopCopyBootLogRegistryToFile();
IopCreateArcNames();
IopCreateCmResourceList();
IopCreateDefaultDeviceSecurityDescriptor();
IopCreateEntry();
IopCreateFile();
IopCreateMadeupNode();
IopCreateObjectTypes();
IopCreateRegistryKeyEx();
IopCreateRootDirectories();
IopCreateSummaryDump();
IopCreateVpb();
IopDecDisableableDepends();
IopDecrementDeviceObjectHandleCount();
IopDecrementDeviceObjectRef();
IopDelayedRemoveWorker();
IopDeleteDevice();
IopDeleteDriver();
IopDeleteFile();
IopDeleteIoCompletion();
IopDeleteKeyRecursive();
IopDeleteKeyRecursiveCallback();
IopDeleteLegacyKey();
IopDeleteLockedDeviceNode();
IopDeleteLockedDeviceNodes();
IopDeleteNonExistentMemory();
IopDeleteSessionSymLinks();
IopDereferenceNotify();
IopDereferenceVpbAndFree();
IopDestroyDeviceNode();
IopDetermineDefaultInterfaceType();
IopDetermineResourceListSize();
IopDeviceActionWorker();
IopDeviceCapabilitiesToRegistry();
IopDeviceEjectComplete();
IopDeviceInterfaceKeysFromSymbolicLink();
IopDeviceNodeCapabilitiesToRegistry();
IopDeviceObjectFromDeviceInstance();
IopDeviceObjectToDeviceInstance();
IopDeviceRelationsComplete();
IopDeviceStartComplete();
IopDisableDevice();
IopDisassociateThreadIrp();
IopDmaInitialize();
IopDmaOverrideConflict();
IopDmaPackResource();
IopDmaScoreRequirement();
IopDmaUnpackResource();
IopDoDeferredSetInterfaceState();
IopDoNameTransmogrify();
IopDriverCorrectnessAddressToFileHeader();
IopDriverCorrectnessApplyControl();
IopDriverCorrectnessCheckUnderLock();
IopDriverCorrectnessPrintBuffer();
IopDriverCorrectnessPrintIrp();
IopDriverCorrectnessPrintIrpStack();
IopDriverCorrectnessPrintParamData();
IopDriverCorrectnessProcessMessageText();
IopDriverCorrectnessProcessParams();
IopDriverCorrectnessPrompt();
IopDriverCorrectnessReleaseLock();
IopDriverCorrectnessTakeLock();
IopDriverCorrectnessThrowBugCheck();
IopDriverLoadingFailed();
IopDriverObjectDereferenceComplete();
IopDropIrp();
IopDropReferenceString();
IopDumpCmResourceDescriptor();
IopDumpCmResourceList();
IopDumpResourceDescriptor();
IopDumpResourceRequirementsList();
IopDuplicateDetection();
IopEjectDevice();
IopEliminateBogusConflict();
IopEnumerateDevice();
IopEnumerateRelations();
IopErrorLogConnectPort();
IopErrorLogDpc();
IopErrorLogGetEntry();
IopErrorLogQueueRequest();
IopErrorLogRequeueEntry();
IopErrorLogThread();
IopExceptionCleanup();
IopExceptionFilter();
IopExecuteHardwareProfileChange();
IopExecuteHwpDefaultSelect();
IopFilterResourceRequirementsCall();
IopFilterResourceRequirementsList();
IopFindBusDeviceNode();
IopFindBusDeviceNodeInternal();
IopFindLegacyDeviceNode();
IopFindMountableDevice();
IopFindResourceHandlerInfo();
IopFindResourcesForArbiter();
IopFixupDeviceId();
IopFixupIds();
IopForAllChildDeviceNodes();
IopForAllDeviceNodes();
IopForAllDeviceNodesCallback();
IopFreeAllocatedUnicodeString();
IopFreeBuffer();
IopFreeDCB();
IopFreeGroupTree();
IopFreeIrp();
IopFreeIrpAndMdls();
IopFreeMiniPacket();
IopFreePoDeviceNotifyListHead();
IopFreeRelationList();
IopFreeReqAlternative();
IopFreeReqList();
IopFreeResourceRequirementsForAssignTable();
IopFreeUnicodeStringList();
IopGenericPackResource();
IopGenericScoreRequirement();
IopGenericTranslateOrdering();
IopGenericUnpackRequirement();
IopGenericUnpackResource();
IopGetBasicInformationFile();
IopGetBusTypeGuidIndex();
IopGetDeviceAttachmentBase();
IopGetDeviceInstanceCsConfigFlags();
IopGetDeviceInterfaces();
IopGetDevicePDO();
IopGetDeviceResourcesFromRegistry();
IopGetDriverDeviceList();
IopGetDriverDeviceListWorker();
IopGetDriverNameFromKeyNode();
IopGetDriverTagPriority();
IopGetDumpControlBlockCheck();
IopGetDumpStack();
IopGetFileInformation();
IopGetGroupOrderIndex();
IopGetLegacyVetoListDevice();
IopGetLegacyVetoListDeviceNode();
IopGetLegacyVetoListDrivers();
IopGetLoadedDriverInfo();
IopGetModeInformation();
IopGetMountFlag();
IopGetRegistryDwordWithFallback();
IopGetRegistryKeyInformation();
IopGetRegistrySecurityWithFallback();
IopGetRegistryValue();
IopGetRegistryValues();
IopGetRelatedTargetDevice();
IopGetRelationsCount();
IopGetRelationsTaggedCount();
IopGetResourceRequirementsForAssignTable();
IopGetRootDevices();
IopGetServiceInstanceCsConfigFlags();
IopGetServiceType();
IopGetSetObjectId();
IopGetSetSecurityObject();
IopGetVolumeId();
IopHardErrorThread();
IopHardwareProfileBeginTransition();
IopHardwareProfileCancelRemovedDock();
IopHardwareProfileCancelTransition();
IopHardwareProfileCommitRemovedDock();
IopHardwareProfileCommitStartedDock();
IopHardwareProfileMarkDock();
IopHardwareProfileQueryChange();
IopHardwareProfileSendCancel();
IopHardwareProfileSendCommit();
IopHardwareProfileSetMarkedDocksEjected();
IopIncDisableableDepends();
IopIncrementDeviceObjectHandleCount();
IopInitializeAttributesAndCreateObject();
IopInitializeBootDrivers();
IopInitializeBootLogging();
IopInitializeBuiltinDriver();
IopInitializeDCB();
IopInitializeDeviceInstanceKey();
IopInitializeDeviceKey();
IopInitializeDumpSpaceAndType();
IopInitializePlugPlayNotification();
IopInitializePlugPlayServices();
IopInitializeResourceMap();
IopInitializeSummaryDump();
IopInitializeSystemDrivers();
IopInsertDriverList();
IopInsertRemoveDevice();
IopInsertTreeDeviceNode();
IopInvalidDeviceRequest();
IopInvalidateDeviceStateWorker();
IopInvalidateRelationsInList();
IopInvalidateVolumesForDevice();
IopIrqInitialize();
IopIrqPackResource();
IopIrqScoreRequirement();
IopIrqTranslateOrdering();
IopIrqUnpackRequirement();
IopIrqUnpackResource();
IopIsAddressRangeValid();
IopIsAnyDeviceInstanceEnabled();
IopIsBestConfiguration();
IopIsDeviceInstanceEnabled();
IopIsDuplicatedDevices();
IopIsFirmwareDisabled();
IopIsFirmwareMapperDevicePresent();
IopIsLegacyDriver();
IopIsMemoryRangeReadable();
IopIsRelationInList();
IopIsRemoteBootCard();
IopIsReportedAlready();
IopIsSameMachine();
IopLegacyResourceAllocation();
IopLoadBootFilterDriver();
IopLoadDriver();
IopLoadDumpDriver();
IopLoadFileSystemDriver();
IopLoadUnloadDriver();
IopLockDeviceRemovalRelations();
IopLockMountedDeviceForRemove();
IopLogErrorEvent();
IopLookupGroupName();
IopMakeGloballyUniqueId();
IopMapPhysicalMemory();
IopMapVirtualToPhysicalMdl();
IopMarkBootPartition();
IopMarshalIds();
IopMemFindSuitableRange();
IopMemInitialize();
IopMergeCmResourceLists();
IopMergeFilteredResourceRequirementsList();
IopMergeRelationLists();
IopMountInitializeVpb();
IopMountVolume();
IopNeedToReleaseBootResources();
IopNewDevice();
IopNotifyAlreadyRegisteredFileSystems();
IopNotifyDeviceClassChange();
IopNotifyHwProfileChange();
IopNotifyPnpWhenChainDereferenced();
IopNotifySetupDeviceArrival();
IopNotifySetupDevices();
IopNotifyTargetDeviceChange();
IopOpenCurrentHwProfileDeviceInstanceKey();
IopOpenDeviceParametersSubkey();
IopOpenLinkOrRenameTarget();
IopOpenOrCreateDeviceInterfaceSubKeys();
IopOpenRegistryKey();
IopOpenRegistryKeyEx();
IopOpenServiceEnumKeys();
IopOrphanNotification();
IopParentToRawTranslation();
IopParseDevice();
IopParseFile();
IopParseSymbolicLinkName();
IopPlacement();
IopPlacementForRebalance();
IopPlacementForReservation();
IopPnPCompleteRequest();
IopPnPDispatch();
IopPnPDriverEntry();
IopPnPHydraCallback();
IopPortAddAllocation();
IopPortBacktrackAllocation();
IopPortFindSuitableRange();
IopPortGetNextAlias();
IopPortInitialize();
IopPortIsAliasedRangeAvailable();
IopPowerDispatch();
IopPrepareDriverLoading();
IopProcessAddDevices();
IopProcessAddDevicesWorker();
IopProcessAssignResources();
IopProcessAssignResourcesWorker();
IopProcessCompletedEject();
IopProcessCriticalDevice();
IopProcessCriticalDeviceRoutine();
IopProcessDeferredRegistrations();
IopProcessNewChildren();
IopProcessNewDeviceNode();
IopProcessNewProfile();
IopProcessNewProfileStateCallback();
IopProcessNewProfileWorker();
IopProcessRelation();
IopProcessSetInterfaceState();
IopProcessStartDevices();
IopProcessStartDevicesWorker();
IopProcessWorkItem();
IopProtectSystemPartition();
IopQueryCompatibleIds();
IopQueryConflictFillConflicts();
IopQueryConflictFillString();
IopQueryConflictList();
IopQueryConflictListInternal();
IopQueryDeviceCapabilities();
IopQueryDeviceId();
IopQueryDeviceRelations();
IopQueryDeviceResources();
IopQueryDeviceSerialNumber();
IopQueryDeviceState();
IopQueryDockRemovalInterface();
IopQueryLegacyBusInformation();
IopQueryName();
IopQueryPnpBusInformation();
IopQueryRebalance();
IopQueryRebalanceWorker();
IopQueryReconfiguration();
IopQueryResourceHandlerInterface();
IopQueryUniqueId();
IopQueryXxxInformation();
IopQueueDeviceWorkItem();
IopQueuePendingEject();
IopQueuePendingSurpriseRemoval();
IopRaiseHardError();
IopRaiseInformationalHardError();
IopReadDeviceConfiguration();
IopReadDumpRegistry();
IopReadyDeviceObjects();
IopReallocateResources();
IopRearrangeAssignTable();
IopRearrangeReqList();
IopReassignSystemRoot();
IopRebalance();
IopReferenceDriverObjectByName();
IopReferenceNotify();
IopRegMultiSzToUnicodeStrings();
IopRegisterDeviceInterface();
IopRegisterFsRegistrationChangeCommon();
IopReleaseDeviceResources();
IopReleaseFilteredBootResources();
IopReleaseResources();
IopReleaseResourcesInternal();
IopRemoveDevice();
IopRemoveDeviceInterfaces();
IopRemoveIndirectRelationsFromList();
IopRemoveLegacyDeviceNode();
IopRemovePageFromPageMap();
IopRemoveRelationFromList();
IopRemoveReqDescsFromArbiters();
IopRemoveTimerFromTimerList();
IopRemoveTreeDeviceNode();
IopReplaceSeperatorWithPound();
IopReportTargetDeviceChangeAsyncWorker();
IopRequestDeviceAction();
IopRequestDeviceEjectWorker();
IopRequestDeviceRemoval();
IopRequestHwProfileChangeNotification();
IopReserve();
IopReserveBootResources();
IopReserveBootResourcesInternal();
IopReserveLegacyBootResources();
IopResizeBuffer();
IopResourceRequirementsChanged();
IopResourceRequirementsListToReqList();
IopRestartDeviceNode();
IopRestoreBestConfiguration();
IopRestoreResourcesInternal();
IopResurrectDriver();
IopSafebootDriverLoad();
IopSaveCurrentConfiguration();
IopSendMessageToTrackService();
IopServiceInstanceToDeviceInstance();
IopSetAllRelationsTags();
IopSetDefaultGateway();
IopSetDeviceSecurityDescriptors();
IopSetEaOrQuotaInformationFile();
IopSetIoRoutines();
IopSetLegacyDeviceInstance();
IopSetRegistryStringValue();
IopSetRelationsTag();
IopSetRemoteLink();
IopSetupArbiterAndTranslators();
IopSetupRemoteBootCard();
IopStartAndEnumerateDevice();
IopStartApcHardError();
IopStartDevice();
IopStartDriverDevices();
IopStartNetworkForRemoteBoot();
IopStartSystemDevices();
IopStartTcpIpForRemoteBoot();
IopStoreSystemPartitionInformation();
IopSynchronousApiServiceTail();
IopSynchronousCall();
IopSynchronousServiceTail();
IopTCPQueryInformationEx();
IopTCPSetInformationEx();
IopTestForReconfiguration();
IopTimerDispatch();
IopTrackLink();
IopTranslateAndAdjustReqDesc();
IopTranslateBusAddress();
IopTranslatorHandlerCm();
IopTranslatorHandlerIo();
IopUnMarshalIds();
IopUncacheInterfaceInformation();
IopUnloadAttachedDriver();
IopUnlockDeviceRemovalRelations();
IopUnlockMountedDeviceForRemove();
IopUnregisterDeviceInterface();
IopUpdateHardwareProfile();
IopUpdateOtherOperationCount();
IopUpdateOtherTransferCount();
IopUpdateReadOperationCount();
IopUpdateReadTransferCount();
IopUpdateWriteOperationCount();
IopUpdateWriteTransferCount();
IopUserCompletion();
IopUserRundown();
IopVerifyDeviceObjectOnStack();
IopWaitForBootDevicesDeleted();
IopWaitForBootDevicesStarted();
IopWarmEjectDevice();
IopWriteAllocatedResourcesToRegistry();
IopWriteDriverList();
IopWriteIpAddressToRegistry();
IopWritePageToDisk();
IopWriteResourceList();
IopWriteSummaryDump();
IopWriteSummaryHeader();
IopWriteToDisk();
IopWriteTriageDump();
IopXxxControlFile();
IopfCallDriver();
IopfCompleteRequest();
IovAllocateIrp();
IovAttachDeviceToDeviceStack();
IovBuildAsynchronousFsdRequest();
IovBuildDeviceIoControlRequest();
IovCallDriver();
IovCancelIrp();
IovCompleteRequest();
IovDeleteDevice();
IovDetachDevice();
IovFreeIrp();
IovFreeIrpPrivate();
IovInitializeIrp();
IovInitializeTimer();
IovSpecialIrpCallDriver();
IovSpecialIrpCompleteRequest();
IovpAdvanceStackDownwards();
IovpAllocateIrp1();
IovpAllocateIrp2();
IovpAssertDoAdvanceStatus();
IovpAssertFinalIrpStack();
IovpAssertIrpStackDownward();
IovpAssertIrpStackUpward();
IovpAssertIsNewRequest();
IovpAssertIsValidIrpStatus();
IovpAssertNewIrps();
IovpAssertNewRequest();
IovpCallDriver1();
IovpCallDriver2();
IovpCancelIrp();
IovpCompleteRequest();
IovpCompleteRequest1();
IovpCompleteRequest2();
IovpCompleteRequest3();
IovpCompleteRequest4();
IovpCompleteRequest5();
IovpDeleteDevice();
IovpDetachDevice();
IovpDoAssertIrps();
IovpExamineDevObjForwarding();
IovpExamineIrpStackForwarding();
IovpFreeIrp();
IovpGetDeviceAttachedTo();
IovpGetLowestDevice();
IovpInitIrpTracking();
IovpInitializeIrp();
IovpInternalCompleteAfterWait();
IovpInternalCompleteAtDPC();
IovpInternalCompletionTrap();
IovpInternalDeferredCompletion();
IovpIsInFdoStack();
IovpIsInterestingDriver();
IovpIsInterestingStack();
IovpIsSystemRestrictedIrp();
IovpProtectedIrpAllocate();
IovpProtectedIrpFree();
IovpProtectedIrpMakeTouchable();
IovpProtectedIrpMakeUntouchable();
IovpSeedOnePage();
IovpSeedStack();
IovpSeedThreePages();
IovpSeedTwoPages();
IovpSessionDataAdvance();
IovpSessionDataAttachSurrogate();
IovpSessionDataClose();
IovpSessionDataCreate();
IovpSessionDataDereference();
IovpSessionDataDeterminePolicy();
IovpSessionDataFinalizeSurrogate();
IovpSessionDataReference();
IovpStartObRefMonitoring();
IovpStopObRefMonitoring();
IovpSwapSurrogateIrp();
IovpThrowBogusSynchronousIrp();
IovpThrowChaffAtStartedPdoStack();
IovpTrackingDataAcquireLock();
IovpTrackingDataCreateAndLock();
IovpTrackingDataDereference();
IovpTrackingDataFindAndLock();
IovpTrackingDataFindPointer();
IovpTrackingDataFree();
IovpTrackingDataGetCurrentSessionData();
IovpTrackingDataInit();
IovpTrackingDataReference();
IovpTrackingDataReleaseLock();
IovpValidateDeviceObject();
IovpWatermarkIrp();
IsVolumeName();
KdClearSpecialCalls();
KdDeleteAllBreakpoints();
KdDisableDebugger();
KdEnableDebugger();
KdEnterDebugger();
KdExitDebugger();
KdGetDataBlock();
KdGetInternalBreakpoint();
KdGetTraceInformation();
KdInitSystem();
KdIsThisAKdTrap();
KdLogDbgPrint();
KdPollBreakIn();
KdQuerySpecialCalls();
KdRegisterDebuggerDataBlock();
KdSetInternalBreakpoint();
KdSetOwedBreakpoints();
KdSetSpecialCall();
KdUpdateDataBlock();
KdUpdateTimeSlipEvent();
KdpAddBreakpoint();
KdpCauseBugCheck();
KdpCheckLowMemory();
KdpCheckTracePoint();
KdpComputeChecksum();
KdpCopyDataToStack();
KdpDeleteBreakpoint();
KdpDeleteBreakpointRange();
KdpGetCallNextOffset();
KdpGetContext();
KdpGetReturnAddress();
KdpGetStateChange();
KdpGetVersion();
KdpIsSpecialCall();
KdpIsTryFinallyReturn();
KdpLevelChange();
KdpLowRestoreBreakpoint();
KdpLowWriteContent();
KdpMoveMemory();
KdpNotSupported();
KdpPollBreakInWithPortLock();
KdpPortLock();
KdpPortUnlock();
KdpPrintString();
KdpProcessInternalBreakpoint();
KdpPromptString();
KdpQueryPerformanceCounter();
KdpQuickMoveMemory();
KdpReadControlSpace();
KdpReadIoSpace();
KdpReadMachineSpecificRegister();
KdpReadPhysicalMemory();
KdpReadVirtualMemory();
KdpReboot();
KdpReceivePacket();
KdpReceivePacketLeader();
KdpReceiveString();
KdpReportExceptionStateChange();
KdpReportLoadSymbolsStateChange();
KdpRestoreAllBreakpoints();
KdpRestoreBreakPointEx();
KdpRestoreBreakpoint();
KdpSearchHammingDistance();
KdpSearchMemory();
KdpSearchPhysicalMemoryRequested();
KdpSearchPhysicalPage();
KdpSearchPhysicalPageRange();
KdpSendControlPacket();
KdpSendPacket();
KdpSendString();
KdpSendWaitContinue();
KdpSetContext();
KdpSetLoadState();
KdpSetStateChange();
KdpStub();
KdpSuspendAllBreakpoints();
KdpSuspendBreakpoint();
KdpSwitchProcessor();
KdpTimeSlipDpcRoutine();
KdpTimeSlipWork();
KdpTrap();
KdpWriteBreakPointEx();
KdpWriteBreakpoint();
KdpWriteControlSpace();
KdpWriteIoSpace();
KdpWriteMachineSpecificRegister();
KdpWritePhysicalMemory();
KdpWriteVirtualMemory();
Ke386CallBios();
Ke386ConfigureCyrixProcessor();
Ke386CyrixId();
Ke386GetGdtEntryThread();
Ke386IoSetAccessProcess();
Ke386QueryIoAccessMap();
Ke386SetDescriptorProcess();
Ke386SetIOPL();
Ke386SetIoAccessMap();
Ke386SetLdtProcess();
Ke386SetVdmInterruptHandler();
Ke386VdmClearApcObject();
Ke386VdmInsertQueueApc();
KeAcquireSpinLock();
KeAcquireSpinLockAtDpcLevel();
KeAddSystemServiceTable();
KeAlertResumeThread();
KeAlertThread();
KeAttachProcess();
KeBalanceSetManager();
KeBoostPriorityThread();
KeBugCheck();
KeBugCheckEx();
KeBugCheckUnicodeToAnsi();
KeCancelTimer();
KeCheckForTimer();
KeClearEvent();
KeConnectInterrupt();
KeContextFromKframes();
KeContextToKframes();
KeDelayExecutionThread();
KeDeregisterBugCheckCallback();
KeDetachProcess();
KeDisableApcQueuingThread();
KeDisconnectInterrupt();
KeEnableApcQueuingThread();
KeEnterCriticalRegion();
KeEnterKernelDebugger();
KeFindConfigurationEntry();
KeFindConfigurationNextEntry();
KeFlushCurrentTb();
KeFlushEntireTb();
KeFlushQueueApc();
KeForceAttachProcess();
KeForceResumeThread();
KeFreezeAllThreads();
KeFreezeExecution();
KeGetBugMessageText();
KeGetCurrentPrcb();
KeGetCurrentThread();
KeGetPcr();
KeGetPreviousMode();
KeI386AbiosCall();
KeI386AllocateGdtSelectors();
KeI386Call16BitCStyleFunction();
KeI386Call16BitFunction();
KeI386FlatToGdtSelector();
KeI386GetLid();
KeI386ReleaseGdtSelectors();
KeI386ReleaseLid();
KeI386SetGdtSelector();
KeI386VdmInitialize();
KeInitSystem();
KeInitializeApc();
KeInitializeDeviceQueue();
KeInitializeDpc();
KeInitializeEvent();
KeInitializeEventPair();
KeInitializeInterrupt();
KeInitializeMutant();
KeInitializeMutex();
KeInitializeProcess();
KeInitializeProfile();
KeInitializeQueue();
KeInitializeSemaphore();
KeInitializeSpinLock();
KeInitializeThread();
KeInitializeTimer();
KeInitializeTimerEx();
KeInsertByKeyDeviceQueue();
KeInsertDeviceQueue();
KeInsertHeadQueue();
KeInsertQueue();
KeInsertQueueApc();
KeInsertQueueDpc();
KeInterlockedSwapPte();
KeInvalidAccessAllowed();
KeInvalidateAllCaches();
KeIsExecutingDpc();
KeLeaveCriticalRegion();
KeLowerIrql();
KeOptimizeProcessorControlState();
KeProfileInterrupt();
KeProfileInterruptWithSource();
KePulseEvent();
KeQueryActiveProcessors();
KeQueryBasePriorityThread();
KeQueryInterruptTime();
KeQueryIntervalProfile();
KeQueryPriorityThread();
KeQuerySystemTime();
KeQueryTickCount();
KeQueryTimeIncrement();
KeQueryTimerDueTime();
KeRaiseIrql();
KeRaiseUserException();
KeReadStateEvent();
KeReadStateThread();
KeReadyThread();
KeRegisterBugCheckCallback();
KeReleaseMutant();
KeReleaseMutex();
KeReleaseSemaphore();
KeReleaseSpinLock();
KeReleaseSpinLockFromDpcLevel();
KeRemoveByKeyDeviceQueue();
KeRemoveDeviceQueue();
KeRemoveEntryDeviceQueue();
KeRemoveQueue();
KeRemoveQueueApc();
KeRemoveQueueDpc();
KeResetEvent();
KeRestoreFloatingPointState();
KeRestoreMtrr();
KeRestorePAT();
KeResumeThread();
KeReturnToFirmware();
KeRevertToUserAffinityThread();
KeRundownQueue();
KeRundownThread();
KeSaveFloatingPointState();
KeSaveStateForHibernate();
KeSetAffinityThread();
KeSetAutoAlignmentProcess();
KeSetAutoAlignmentThread();
KeSetBasePriorityThread();
KeSetDisableBoostThread();
KeSetDisableQuantumProcess();
KeSetDmaIoCoherency();
KeSetEvent();
KeSetEventBoostPriority();
KeSetIdealProcessorThread();
KeSetImportanceDpc();
KeSetIntervalProfile();
KeSetKernelStackSwapEnable();
KeSetPhysicalCacheTypeRange();
KeSetPriorityProcess();
KeSetPriorityThread();
KeSetProcess();
KeSetProfileIrql();
KeSetSwapContextNotifyRoutine();
KeSetSystemAffinityThread();
KeSetSystemTime();
KeSetTargetProcessorDpc();
KeSetThreadSelectNotifyRoutine();
KeSetTimeIncrement();
KeSetTimeUpdateNotifyRoutine();
KeSetTimer();
KeSetTimerEx();
KeSetup80387OrEmulate();
KeStackAttachProcess();
KeStartProfile();
KeStopProfile();
KeSuspendThread();
KeSwapProcessOrStack();
KeSwitchFrozenProcessor();
KeSwitchKernelStack();
KeSynchronizeExecution();
KeTerminateThread();
KeTestAlertThread();
KeTestSpinLock();
KeThawAllThreads();
KeThawExecution();
KeTryToAcquireSpinLock();
KeUnstackDetachProcess();
KeUpdateRunTime();
KeUpdateSystemTime();
KeUserModeCallback();
KeWaitForMultipleObjects();
KeWaitForSingleObject();
KeYieldProcessor();
KefAcquireSpinLockAtDpcLevel();
KefReleaseSpinLockFromDpcLevel();
Kei386EoiHelper();
KfAcquireSpinLock();
KfLowerIrql();
KfRaiseIrql();
KfReleaseSpinLock();
KfSanityCheckLowerIrql();
KfSanityCheckRaiseIrql();
Ki386AdjustEsp0();
Ki386AllocateContiguousMemory();
Ki386BiosCallReturnAddress();
Ki386BuildIdentityBuffer();
Ki386CheckDelayedNpxTrap();
Ki386CheckDivideByZeroTrap();
Ki386ClearIdentityMap();
Ki386ConvertPte();
Ki386CreateIdentityMap();
Ki386DispatchOpcode();
Ki386DispatchOpcodeV86();
Ki386EnableCurrentLargePage();
Ki386EnableCurrentLargePageEnd();
Ki386EnableFxsr();
Ki386EnableGlobalPage();
Ki386EnableTargetLargePage();
Ki386EnableXMMIExceptions();
Ki386GetSelectorParameters();
Ki386IdentityMapMakeValid();
Ki386InitializeGdtFreeList();
Ki386MapAddress();
Ki386SetupAndExitToV86Code();
Ki386VdmDispatchIo();
Ki386VdmDispatchStringIo();
Ki386VdmEnablePentiumExtentions();
Ki386VdmReflectException();
Ki386VdmReflectException_A();
Ki386VdmSegmentNotPresent();
KiAbiosGetGdt();
KiAcquireQueuedSpinLock();
KiAcquireSpinLock();
KiActivateWaiterQueue();
KiAddRange();
KiAdjustInterruptTime();
KiAdjustQuantumThread();
KiAmdK6AddRegion();
KiAmdK6FindFreeRegion();
KiAmdK6HandleWcRegionRequest();
KiAmdK6InitializeMTRR();
KiAmdK6MTRRAddRegionFromHW();
KiAmdK6MtrrCommitChanges();
KiAmdK6MtrrSetMemoryType();
KiAmdK6MtrrWRMSR();
KiAttachProcess();
KiBBTUnexpectedRange();
KiBugCheckDebugBreak();
KiCalibrateTimeAdjustment();
KiCallUserMode();
KiCallbackReturn();
KiChainedDispatch();
KiChainedDispatch2ndLvl();
KiCompleteEffectiveRangeChange();
KiComputeReciprocal();
KiComputeTimerTableIndex();
KiComputeWaitInterval();
KiConnectVectorAndInterruptObject();
KiContinue();
KiContinuePreviousModeUser();
KiCoprocessorError();
KiCopyInformation();
KiDebugService();
KiDeliverApc();
KiDisableInterrupts();
KiDispatchException();
KiDispatchInterrupt();
KiDumpParameterImages();
KiEm87StateToNpxFrame();
KiEndOfCode16();
KiEndUnexpectedRange();
KiEspFromTrapFrame();
KiEspToTrapFrame();
KiExceptionExit();
KiFastCallEntry();
KiFindFirstSetLeftBit();
KiFindFirstSetRightBit();
KiFindReadyThread();
KiFloatingDispatch();
KiFlushDcache();
KiFlushDescriptors();
KiFlushIcache();
KiFlushNPXState();
KiFlushSingleTb();
KiFreezeTargetExecution();
KiGetCacheInformation();
KiGetCpuVendor();
KiGetFeatureBits();
KiGetTickCount();
KiGetUserModeStackAddress();
KiGetVectorInfo();
KiI386CallAbios();
KiI386PentiumLockErrataFixup();
KiI386SelectorBase();
KiIdleLoop();
KiInSwapKernelStacks();
KiInSwapProcesses();
KiInitMachineDependent();
KiInitSystem();
KiInitializeAbios();
KiInitializeAbiosGdtEntry();
KiInitializeContextThread();
KiInitializeKernel();
KiInitializeMTRR();
KiInitializeMachineType();
KiInitializePAT();
KiInitializePcr();
KiInitializeTSS();
KiInitializeTSS2();
KiInitializeUserApc();
KiInsertQueue();
KiInsertQueueApc();
KiInsertTimerTable();
KiInsertTreeTimer();
KiInterruptDispatch();
KiInterruptDispatch2ndLvl();
KiInterruptTemplate();
KiInterruptTemplate2ndDispatch();
KiInterruptTemplateDispatch();
KiInterruptTemplateObject();
KiIpiGenericCall();
KiIpiSend();
KiIpiSendPacket();
KiIpiServiceRoutine();
KiIpiSignalPacketDone();
KiIpiSignalPacketDoneAndStall();
KiIsNpxPresent();
KiLengthToMask();
KiLoadLdtr();
KiLoadMTRR();
KiLoadPAT();
KiMaskToLength();
KiMoveApcState();
KiMoveRegTree();
KiNextIStreamByte();
KiNpxFrameToEm87State();
KiOutSwapKernelStacks();
KiOutSwapProcesses();
KiPassiveRelease();
KiPcToFileHeader();
KiPollFreezeExecution();
KiProcessDebugRegister();
KiQuantumEnd();
KiRaiseException();
KiRangeWeight();
KiReadyThread();
KiRecordDr7();
KiReinsertTreeTimer();
KiReleaseQueuedSpinLock();
KiReleaseSpinLock();
KiRemoveRange();
KiRestoreInterrupts();
KiRestoreProcessorControlState();
KiRestoreProcessorState();
KiRetireDpcList();
KiSaveProcessorControlState();
KiSaveProcessorState();
KiScanBugCheckCallbackList();
KiScanReadyQueues();
KiSegSsFromTrapFrame();
KiSegSsToTrapFrame();
KiSelectNextThread();
KiServiceExit();
KiServiceExit2();
KiSetCR0Bits();
KiSetDebugActive();
KiSetHardwareTrigger();
KiSetLowWaitHighThread();
KiSetPriorityThread();
KiSetProcessorType();
KiSetServerWaitClientEvent();
KiStartEffectiveRangeChange();
KiStartUnexpectedRange();
KiSuspendNop();
KiSuspendThread();
KiSwapIDT();
KiSwapProcess();
KiSwapThread();
KiSynchronizePATLoad();
KiSystemFatalException();
KiSystemService();
KiSystemStartup();
KiThreadStartup();
KiTimerExpiration();
KiTimerListExpire();
KiTrap00();
KiTrap01();
KiTrap02();
KiTrap03();
KiTrap04();
KiTrap05();
KiTrap06();
KiTrap07();
KiTrap08();
KiTrap09();
KiTrap0A();
KiTrap0B();
KiTrap0C();
KiTrap0D();
KiTrap0E();
KiTrap0F();
KiTrap10();
KiTrap11();
KiTrap13();
KiTryToAcquireQueuedSpinLock();
KiTryToAcquireSpinLock();
KiUnexpectedInterrupt();
KiUnexpectedInterrupt0();
KiUnexpectedInterrupt1();
KiUnexpectedInterrupt10();
KiUnexpectedInterrupt100();
KiUnexpectedInterrupt101();
KiUnexpectedInterrupt102();
KiUnexpectedInterrupt103();
KiUnexpectedInterrupt104();
KiUnexpectedInterrupt105();
KiUnexpectedInterrupt106();
KiUnexpectedInterrupt107();
KiUnexpectedInterrupt108();
KiUnexpectedInterrupt109();
KiUnexpectedInterrupt11();
KiUnexpectedInterrupt110();
KiUnexpectedInterrupt111();
KiUnexpectedInterrupt112();
KiUnexpectedInterrupt113();
KiUnexpectedInterrupt114();
KiUnexpectedInterrupt115();
KiUnexpectedInterrupt116();
KiUnexpectedInterrupt117();
KiUnexpectedInterrupt118();
KiUnexpectedInterrupt119();
KiUnexpectedInterrupt12();
KiUnexpectedInterrupt120();
KiUnexpectedInterrupt121();
KiUnexpectedInterrupt122();
KiUnexpectedInterrupt123();
KiUnexpectedInterrupt124();
KiUnexpectedInterrupt125();
KiUnexpectedInterrupt126();
KiUnexpectedInterrupt127();
KiUnexpectedInterrupt128();
KiUnexpectedInterrupt129();
KiUnexpectedInterrupt13();
KiUnexpectedInterrupt130();
KiUnexpectedInterrupt131();
KiUnexpectedInterrupt132();
KiUnexpectedInterrupt133();
KiUnexpectedInterrupt134();
KiUnexpectedInterrupt135();
KiUnexpectedInterrupt136();
KiUnexpectedInterrupt137();
KiUnexpectedInterrupt138();
KiUnexpectedInterrupt139();
KiUnexpectedInterrupt14();
KiUnexpectedInterrupt140();
KiUnexpectedInterrupt141();
KiUnexpectedInterrupt142();
KiUnexpectedInterrupt143();
KiUnexpectedInterrupt144();
KiUnexpectedInterrupt145();
KiUnexpectedInterrupt146();
KiUnexpectedInterrupt147();
KiUnexpectedInterrupt148();
KiUnexpectedInterrupt149();
KiUnexpectedInterrupt15();
KiUnexpectedInterrupt150();
KiUnexpectedInterrupt151();
KiUnexpectedInterrupt152();
KiUnexpectedInterrupt153();
KiUnexpectedInterrupt154();
KiUnexpectedInterrupt155();
KiUnexpectedInterrupt156();
KiUnexpectedInterrupt157();
KiUnexpectedInterrupt158();
KiUnexpectedInterrupt159();
KiUnexpectedInterrupt16();
KiUnexpectedInterrupt160();
KiUnexpectedInterrupt161();
KiUnexpectedInterrupt162();
KiUnexpectedInterrupt163();
KiUnexpectedInterrupt164();
KiUnexpectedInterrupt165();
KiUnexpectedInterrupt166();
KiUnexpectedInterrupt167();
KiUnexpectedInterrupt168();
KiUnexpectedInterrupt169();
KiUnexpectedInterrupt17();
KiUnexpectedInterrupt170();
KiUnexpectedInterrupt171();
KiUnexpectedInterrupt172();
KiUnexpectedInterrupt173();
KiUnexpectedInterrupt174();
KiUnexpectedInterrupt175();
KiUnexpectedInterrupt176();
KiUnexpectedInterrupt177();
KiUnexpectedInterrupt178();
KiUnexpectedInterrupt179();
KiUnexpectedInterrupt18();
KiUnexpectedInterrupt180();
KiUnexpectedInterrupt181();
KiUnexpectedInterrupt182();
KiUnexpectedInterrupt183();
KiUnexpectedInterrupt184();
KiUnexpectedInterrupt185();
KiUnexpectedInterrupt186();
KiUnexpectedInterrupt187();
KiUnexpectedInterrupt188();
KiUnexpectedInterrupt189();
KiUnexpectedInterrupt19();
KiUnexpectedInterrupt190();
KiUnexpectedInterrupt191();
KiUnexpectedInterrupt192();
KiUnexpectedInterrupt193();
KiUnexpectedInterrupt194();
KiUnexpectedInterrupt195();
KiUnexpectedInterrupt196();
KiUnexpectedInterrupt197();
KiUnexpectedInterrupt198();
KiUnexpectedInterrupt199();
KiUnexpectedInterrupt2();
KiUnexpectedInterrupt20();
KiUnexpectedInterrupt200();
KiUnexpectedInterrupt201();
KiUnexpectedInterrupt202();
KiUnexpectedInterrupt203();
KiUnexpectedInterrupt204();
KiUnexpectedInterrupt205();
KiUnexpectedInterrupt206();
KiUnexpectedInterrupt207();
KiUnexpectedInterrupt21();
KiUnexpectedInterrupt22();
KiUnexpectedInterrupt23();
KiUnexpectedInterrupt24();
KiUnexpectedInterrupt25();
KiUnexpectedInterrupt26();
KiUnexpectedInterrupt27();
KiUnexpectedInterrupt28();
KiUnexpectedInterrupt29();
KiUnexpectedInterrupt3();
KiUnexpectedInterrupt30();
KiUnexpectedInterrupt31();
KiUnexpectedInterrupt32();
KiUnexpectedInterrupt33();
KiUnexpectedInterrupt34();
KiUnexpectedInterrupt35();
KiUnexpectedInterrupt36();
KiUnexpectedInterrupt37();
KiUnexpectedInterrupt38();
KiUnexpectedInterrupt39();
KiUnexpectedInterrupt4();
KiUnexpectedInterrupt40();
KiUnexpectedInterrupt41();
KiUnexpectedInterrupt42();
KiUnexpectedInterrupt43();
KiUnexpectedInterrupt44();
KiUnexpectedInterrupt45();
KiUnexpectedInterrupt46();
KiUnexpectedInterrupt47();
KiUnexpectedInterrupt48();
KiUnexpectedInterrupt49();
KiUnexpectedInterrupt5();
KiUnexpectedInterrupt50();
KiUnexpectedInterrupt51();
KiUnexpectedInterrupt52();
KiUnexpectedInterrupt53();
KiUnexpectedInterrupt54();
KiUnexpectedInterrupt55();
KiUnexpectedInterrupt56();
KiUnexpectedInterrupt57();
KiUnexpectedInterrupt58();
KiUnexpectedInterrupt59();
KiUnexpectedInterrupt6();
KiUnexpectedInterrupt60();
KiUnexpectedInterrupt61();
KiUnexpectedInterrupt62();
KiUnexpectedInterrupt63();
KiUnexpectedInterrupt64();
KiUnexpectedInterrupt65();
KiUnexpectedInterrupt66();
KiUnexpectedInterrupt67();
KiUnexpectedInterrupt68();
KiUnexpectedInterrupt69();
KiUnexpectedInterrupt7();
KiUnexpectedInterrupt70();
KiUnexpectedInterrupt71();
KiUnexpectedInterrupt72();
KiUnexpectedInterrupt73();
KiUnexpectedInterrupt74();
KiUnexpectedInterrupt75();
KiUnexpectedInterrupt76();
KiUnexpectedInterrupt77();
KiUnexpectedInterrupt78();
KiUnexpectedInterrupt79();
KiUnexpectedInterrupt8();
KiUnexpectedInterrupt80();
KiUnexpectedInterrupt81();
KiUnexpectedInterrupt82();
KiUnexpectedInterrupt83();
KiUnexpectedInterrupt84();
KiUnexpectedInterrupt85();
KiUnexpectedInterrupt86();
KiUnexpectedInterrupt87();
KiUnexpectedInterrupt88();
KiUnexpectedInterrupt89();
KiUnexpectedInterrupt9();
KiUnexpectedInterrupt90();
KiUnexpectedInterrupt91();
KiUnexpectedInterrupt92();
KiUnexpectedInterrupt93();
KiUnexpectedInterrupt94();
KiUnexpectedInterrupt95();
KiUnexpectedInterrupt96();
KiUnexpectedInterrupt97();
KiUnexpectedInterrupt98();
KiUnexpectedInterrupt99();
KiUnexpectedInterruptTail();
KiUnlockDispatcherDatabase();
KiUnwaitThread();
KiUpdateDr7();
KiVdmSetUserCR0();
KiWaitSatisfyAll();
KiWaitTest();
KiXMMIZeroPage();
KiXMMIZeroPageNoSave();
KiZeroPage();
Kii386SpinOnSpinLock();
LZNT1CompressChunk();
LZNT1CompressChunkHiber();
LZNT1DecompressChunk();
LZNT1FindMatchMaximum();
LZNT1FindMatchStandard();
LdrAccessResource();
LdrEnumResources();
LdrFindResourceDirectory_U();
LdrFindResource_U();
LdrProcessRelocationBlock();
LdrRelocateImage();
LdrVerifyMappedImageMatchesChecksum();
LdrpAccessResourceData();
LdrpCompareResourceNames_U();
LdrpSearchResourceSection_U();
LookupEntryPoint();
LpcExitThread();
LpcInitSystem();
LpcRequestPort();
LpcRequestWaitReplyPort();
LpcRequestWaitReplyPortEx();
LpcpAllocateFromPortZone();
LpcpClosePort();
LpcpCopyRequestData();
LpcpCreatePort();
LpcpDeletePort();
LpcpDestroyPortQueue();
LpcpFindDataInfoMessage();
LpcpFreeConMsg();
LpcpFreeDataInfoMessage();
LpcpFreePortClientSecurity();
LpcpFreeToPortZone();
LpcpInitializePortQueue();
LpcpInitializePortZone();
LpcpMoveMessage();
LpcpPrepareToWakeClient();
LpcpReplyToValidPort();
LpcpRequestWaitReplyPort();
LpcpSaveDataInfoMessage();
LsaCallAuthenticationPackage();
LsaDeregisterLogonProcess();
LsaFreeReturnBuffer();
LsaLogonUser();
LsaLookupAuthenticationPackage();
LsaRegisterLogonProcess();
MapperAdjustResourceList();
MapperCallback();
MapperConstructRootEnumTree();
MapperFindIdentMatch();
MapperFreeList();
MapperMarkKey();
MapperPeripheralCallback();
MapperPhantomizeDetectedComPorts();
MapperProcessFirmwareTree();
MapperSeedKey();
MapperTranslatePnPId();
MiAccessCheck();
MiAddMappedPtes();
MiAddMdlTracker();
MiAddSystemPtes();
MiAddValidPageToWorkingSet();
MiAddViewsForSection();
MiAddViewsForSectionWithPfn();
MiAddWorkingSetPage();
MiAddWsleHash();
MiAdjustClaimParameters();
MiAdjustWorkingSetManagerParameters();
MiAgeAndEstimateAvailableInWorkingSet();
MiAgePagesAndEstimateClaims();
MiAllocateContiguousMemory();
MiAllocatePoolPages();
MiAllocateSpecialPool();
MiAllocateVad();
MiAppendSubsectionChain();
MiApplyDriverVerifier();
MiAttachSession();
MiAttemptPageFileExtension();
MiAttemptPageFileReduction();
MiBuildForkPageTable();
MiBuildImportsForBootDrivers();
MiBuildPagedPool();
MiCalculatePageCommitment();
MiCallDllUnloadAndUnloadDll();
MiCanFileBeTruncatedInternal();
MiCancelWriteOfMappedPfn();
MiCaptureSystemPte();
MiCaptureWriteWatchDirtyBit();
MiCauseOverCommitPopup();
MiChangeNoAccessForkPte();
MiChargeCommitment();
MiChargeCommitmentCantExpand();
MiChargePageFileQuota();
MiCheckAndSetSystemTrimCriteria();
MiCheckControlArea();
MiCheckControlAreaStatus();
MiCheckDosCalls();
MiCheckForConflictingNode();
MiCheckForContiguousMemory();
MiCheckForControlAreaDeletion();
MiCheckForCrashDump();
MiCheckForUserStackOverflow();
MiCheckPageFileMapping();
MiCheckPageFilePath();
MiCheckPdeForPagedPool();
MiCheckPdeForSessionSpace();
MiCheckProcessTrimCriteria();
MiCheckProtoPtePageState();
MiCheckPurgeAndUpMapCount();
MiCheckSecuredVad();
MiCheckSessionPoolAllocations();
MiCheckSystemTrimEndCriteria();
MiCheckVirtualAddress();
MiCleanPhysicalProcessPages();
MiCleanSection();
MiClearImports();
MiCloneProcessAddressSpace();
MiCompleteProtoPteFault();
MiContractPagingFiles();
MiConvertStaticSubsections();
MiCopyOnWrite();
MiCrashDumpWorker();
MiCreateDataFileMap();
MiCreateImageFileMap();
MiCreatePageTablesForPhysicalRange();
MiCreatePagingFileMap();
MiCreatePebOrTeb();
MiDecommitPages();
MiDecrementCloneBlockReference();
MiDecrementReferenceCount();
MiDecrementShareCount();
MiDecrementSubsections();
MiDeleteAddressesInWorkingSet();
MiDeleteFreeVm();
MiDeletePageTablesForPhysicalRange();
MiDeletePte();
MiDeleteSystemPagableVm();
MiDeleteValidAddress();
MiDeleteVirtualAddresses();
MiDereferenceControlArea();
MiDereferenceImports();
MiDereferenceSegmentThread();
MiDereferenceSession();
MiDetachSession();
MiDetermineUserGlobalPteMask();
MiDetermineWsTrimAmount();
MiDispatchFault();
MiDoMappedCopy();
MiDoPoolCopy();
MiDoReplacement();
MiDoesPdeExistAndMakeValid();
MiDoneWithThisPageGetAnother();
MiDownPfnReferenceCount();
MiDownShareCountFlushEntireTb();
MiEliminateWorkingSetEntry();
MiEmptyAllWorkingSets();
MiEmptyAllWorkingSetsWorker();
MiEmptyWorkingSet();
MiEnableKernelVerifier();
MiEnablePagingOfDriver();
MiEnablePagingOfDriverAtInit();
MiEnablePagingTheExecutive();
MiEnableVerifier();
MiEndingOffset();
MiEnsureAvailablePageOrWait();
MiExtendPagingFileMaximum();
MiExtendPagingFiles();
MiFeedSysPtePool();
MiFillSystemPageDirectory();
MiFindActualFaultingPte();
MiFindContiguousMemory();
MiFindEmptyAddressRange();
MiFindEmptyAddressRangeDownTree();
MiFindEmptyAddressRangeInTree();
MiFindEmptySectionBaseDown();
MiFindExportedRoutineByName();
MiFindImageSectionObject();
MiFindInitializationCode();
MiFlushAcquire();
MiFlushAllPages();
MiFlushDataSection();
MiFlushDirtyBitsToPfn();
MiFlushEventCounter();
MiFlushInPageSupportBlock();
MiFlushPteList();
MiFlushRangeFilter();
MiFlushRelease();
MiFlushSectionInternal();
MiFlushTbAndCapture();
MiFlushUserPhysicalPteList();
MiFreeAllExpansionNonPagedPool();
MiFreeEventCounter();
MiFreeInPageSupportBlock();
MiFreeInitializationCode();
MiFreeMdlTracker();
MiFreeNonPagedPool();
MiFreePoolPages();
MiFreeSessionPoolBitMaps();
MiFreeSessionSpaceMap();
MiFreeWsle();
MiGatherMappedPages();
MiGatherPagefilePages();
MiGetEventCounter();
MiGetExceptionInfo();
MiGetFirstNode();
MiGetHighestPteConsumer();
MiGetImageProtection();
MiGetInPageSupportBlock();
MiGetNextNode();
MiGetPageForHeader();
MiGetPageProtection();
MiGetPreviousNode();
MiGetProtoPteAddressExtended();
MiGetSubsectionAndProtoFromPte();
MiGetSystemCacheSubsection();
MiGetSystemPteAvailability();
MiGetSystemPteListCount();
MiGetWorkingSetInfo();
MiGetWritablePagesInSection();
MiGrowWsleHash();
MiHandleBankedSection();
MiHandleForkTransitionPte();
MiInitMachineDependent();
MiInitializeCopyOnWritePfn();
MiInitializeDriverVerifierList();
MiInitializeIoTrackers();
MiInitializeLoadedModuleList();
MiInitializeNonPagedPool();
MiInitializePfn();
MiInitializePfnForOtherProcess();
MiInitializeReadInProgressPfn();
MiInitializeSessionIds();
MiInitializeSessionPool();
MiInitializeSessionWsSupport();
MiInitializeSpecialPool();
MiInitializeSystemCache();
MiInitializeSystemPtes();
MiInitializeSystemSpaceMap();
MiInitializeTransitionPfn();
MiInitializeWorkingSetList();
MiInsertBasedSection();
MiInsertConflictInList();
MiInsertDeadPteTrackingBlock();
MiInsertImageSectionObject();
MiInsertInSystemSpace();
MiInsertNode();
MiInsertPageFileInList();
MiInsertPageInList();
MiInsertPteTracker();
MiInsertStandbyListAtFront();
MiInsertVad();
MiInsertWsle();
MiIsEntireRangeCommitted();
MiIsProtectionCompatible();
MiIsPteDecommittedPage();
MiIsPteProtectionCompatible();
MiIssuePageExtendRequest();
MiIssuePageExtendRequestNoWait();
MiLoadImageSection();
MiLoadSystemImage();
MiLocateAddress();
MiLocateAddressInTree();
MiLocateAndReserveWsle();
MiLocateExportName();
MiLocateKernelSections();
MiLocateSubsection();
MiLocateWsle();
MiLockCode();
MiLockPagedAddress();
MiLookupDataTableEntry();
MiMakeOutswappedPageResident();
MiMakePdeExistAndMakeValid();
MiMakeProtectionMask();
MiMakeSpecialPoolPagable();
MiMakeSystemAddressValid();
MiMakeSystemAddressValidPfn();
MiMakeSystemAddressValidPfnSystemWs();
MiMakeSystemAddressValidPfnWs();
MiMapBBTMemory();
MiMapCacheExceptionFilter();
MiMapLockedPagesInUserSpace();
MiMapPageInHyperSpace();
MiMapPageToZeroInHyperSpace();
MiMapSinglePage();
MiMapViewInSystemSpace();
MiMapViewOfDataSection();
MiMapViewOfImageSection();
MiMapViewOfPhysicalSection();
MiMappedPageWriter();
MiMarkProcessAsWriteWatch();
MiModifiedPageWriter();
MiModifiedPageWriterTimerDispatch();
MiModifiedPageWriterWorker();
MiObtainFreePages();
MiPageFileFull();
MiPhysicalViewAdjuster();
MiPhysicalViewInserter();
MiPhysicalViewRemover();
MiProcessValidPteList();
MiProtectFreeNonPagedPool();
MiProtectSpecialPool();
MiProtectVirtualMemory();
MiProtectedPoolInsertList();
MiProtectedPoolRemoveEntryList();
MiPurgeImageSection();
MiQueryAddressState();
MiReApplyVerifierToLoadedModules();
MiReEnableVerifier();
MiRearrangeWorkingSetExpansionList();
MiReferenceSubsection();
MiReleaseDeadPteTrackers();
MiReleaseModifiedWriter();
MiReleasePageFileSpace();
MiReleaseProcessReferenceToSessionDataPage();
MiReleaseSystemPtes();
MiReleaseWsle();
MiReloadBootLoadedDrivers();
MiRememberUnloadedDriver();
MiRemoveAnyPage();
MiRemoveBasedSection();
MiRemoveConflictFromList();
MiRemoveFromSystemSpace();
MiRemoveImageHeaderPage();
MiRemoveImageSectionObject();
MiRemoveImageSessionWide();
MiRemoveMappedPtes();
MiRemoveMappedView();
MiRemoveNode();
MiRemovePageByColor();
MiRemovePageFromList();
MiRemovePageFromWorkingSet();
MiRemovePhysicalPages();
MiRemovePteTracker();
MiRemoveUnusedSegments();
MiRemoveUserPhysicalPagesVad();
MiRemoveVad();
MiRemoveViewsFromSection();
MiRemoveViewsFromSectionWithPfn();
MiRemoveWorkingSetPages();
MiRemoveWsle();
MiRemoveWsleFromFreeList();
MiRemoveZeroPage();
MiReorderTree();
MiReplaceWorkingSetEntryUsingClaim();
MiRepointWsleHashIndex();
MiReserveSystemPtes();
MiReserveSystemPtes2();
MiResetVirtualMemory();
MiResolveDemandZeroFault();
MiResolveImageReferences();
MiResolveMappedFileFault();
MiResolvePageFileFault();
MiResolveProtoPteFault();
MiResolveTransitionFault();
MiRestoreTransitionPte();
MiReturnCommitment();
MiReturnPageFileQuota();
MiReturnPageTablePageCommitment();
MiSectionDelete();
MiSectionInitialization();
MiSegmentDelete();
MiSessionAddProcess();
MiSessionCommitImagePages();
MiSessionCommitPageTables();
MiSessionCopyOnWrite();
MiSessionCreateInternal();
MiSessionDeletePde();
MiSessionInSwapProcess();
MiSessionInitializeWorkingSetList();
MiSessionInsertImage();
MiSessionLookupImage();
MiSessionOutSwapProcess();
MiSessionPoolAllocated();
MiSessionPoolFreed();
MiSessionPoolVector();
MiSessionRemoveImage();
MiSessionRemoveProcess();
MiSessionUnloadAllImages();
MiSessionWideDereferenceImage();
MiSessionWideGetImageSize();
MiSessionWideInitializeAddresses();
MiSessionWideInsertImageAddress();
MiSessionWideReserveImageAddress();
MiSetImageProtect();
MiSetPageModified();
MiSetPagingOfDriver();
MiSetProtectionOnSection();
MiSetProtectionOnTransitionPte();
MiSetSystemCodeProtection();
MiShareSessionImage();
MiSnapThunk();
MiStartingOffset();
MiSwapWslEntries();
MiTriageAddDrivers();
MiTriageSystem();
MiTrimSegmentCache();
MiTrimWorkingSet();
MiUnProtectFreeNonPagedPool();
MiUnlinkFreeOrZeroedPage();
MiUnlinkPageFromList();
MiUnlockPagedAddress();
MiUnmapLockedPagesInUserSpace();
MiUnmapSinglePage();
MiUnmapViewInSystemSpace();
MiUpCloneProcessRefCount();
MiUpCloneProtoRefCount();
MiUpControlAreaRefs();
MiUpForkPageShareCount();
MiUpPfnReferenceCount();
MiUpdateImageHeaderPage();
MiUpdateModifiedWriterMdls();
MiUpdateThunks();
MiUpdateVadPhysicalPages();
MiUpdateWsle();
MiValidateUserTransfer();
MiVerifierCheckThunks();
MiVerifyImageHeader();
MiVerifyingDriverUnloading();
MiWaitForForkToComplete();
MiWaitForInPageComplete();
MiWriteComplete();
MiWriteProtectSystemImage();
MiZeroPhysicalPage();
MmAccessFault();
MmAddPhysicalMemory();
MmAddVerifierThunks();
MmAdjustWorkingSetSize();
MmAdjustWorkingSetSizeEx2();
MmAllocateContiguousMemory();
MmAllocateContiguousMemorySpecifyCache();
MmAllocateIndependentPages();
MmAllocateMappingAddress();
MmAllocateNonCachedMemory();
MmAllocatePagesForMdl();
MmAllocateSpecialPool();
MmAllowWorkingSetExpansion();
MmAssignProcessToJob();
MmBuildMdlForNonPagedPool();
MmCallDllInitialize();
MmCanFileBeTruncated();
MmCheckCachedPageState();
MmCheckSystemImage();
MmCleanProcessAddressSpace();
MmCommitSessionMappedView();
MmCopyToCachedPage();
MmCopyVirtualMemory();
MmCreateKernelStack();
MmCreateMdl();
MmCreatePeb();
MmCreateProcessAddressSpace();
MmCreateSection();
MmCreateTeb();
MmDbgReadCheck();
MmDbgReleaseAddress();
MmDbgTranslatePhysicalAddress64();
MmDbgWriteCheck();
MmDeleteKernelStack();
MmDeleteProcessAddressSpace();
MmDeleteTeb();
MmDeterminePoolType();
MmDisableModifiedWriteOfSection();
MmDispatchWin32Callout();
MmEnablePAT();
MmEnforceWorkingSetLimit();
MmExtendSection();
MmFlushImageSection();
MmFlushSection();
MmFlushVirtualMemory();
MmForceSectionClosed();
MmFreeContiguousMemory();
MmFreeContiguousMemorySpecifyCache();
MmFreeDriverInitialization();
MmFreeLoaderBlock();
MmFreeMappingAddress();
MmFreeNonCachedMemory();
MmFreePagesFromMdl();
MmFreeSpecialPool();
MmGatherMemoryForHibernate();
MmGetCrashDumpInformation();
MmGetCrashDumpStateInformation();
MmGetFileNameForSection();
MmGetPageFileInformation();
MmGetPhysicalAddress();
MmGetPhysicalMemoryRanges();
MmGetSectionRange();
MmGetSystemRoutineAddress();
MmGetVerifierInformation();
MmGetVirtualForPhysical();
MmGrowKernelStack();
MmHibernateInformation();
MmInPageKernelStack();
MmInSwapProcess();
MmInitSystem();
MmInitializeMemoryLimits();
MmInitializeProcessAddressSpace();
MmIsAddressValid();
MmIsDriverVerifying();
MmIsFileObjectAPagingFile();
MmIsHydraAddress();
MmIsNonPagedSystemAddressValid();
MmIsRecursiveIoFault();
MmIsSpecialPoolAddressFree();
MmIsSystemAddressLocked();
MmIsThisAnNtAsSystem();
MmIsVerifierEnabled();
MmLoadAndLockSystemImage();
MmLoadSystemImage();
MmLocateUnloadedDriver();
MmLockPagableDataSection();
MmLockPagableSectionByHandle();
MmLockPagedPool();
MmMakeKernelResourceSectionWritable();
MmMapIoSpace();
MmMapLockedPages();
MmMapLockedPagesSpecifyCache();
MmMapLockedPagesWithReservedMapping();
MmMapMemoryDumpMdl();
MmMapUserAddressesToPage();
MmMapVideoDisplay();
MmMapViewInSessionSpace();
MmMapViewInSystemCache();
MmMapViewInSystemSpace();
MmMapViewOfSection();
MmOutPageKernelStack();
MmOutSwapProcess();
MmPageEntireDriver();
MmProbeAndLockPages();
MmProbeAndLockProcessPages();
MmProbeAndLockSelectedPages();
MmProtectSpecialPool();
MmPurgeSection();
MmQuerySpecialPoolBlockSize();
MmQuerySystemSize();
MmRaisePoolQuota();
MmReleaseDumpAddresses();
MmRemovePhysicalMemory();
MmResetDriverPaging();
MmResourcesAvailable();
MmReturnMemoryForHibernate();
MmReturnPoolQuota();
MmSecureVirtualMemory();
MmSessionCreate();
MmSessionDelete();
MmSessionLeader();
MmSessionSetUnloadAddress();
MmSetAddressRangeModified();
MmSetBankedSection();
MmSetKernelDumpRange();
MmSetMemoryPriorityProcess();
MmSetPageFaultNotifyRoutine();
MmSetPageProtection();
MmSetVerifierInformation();
MmShutdownSystem();
MmSizeOfMdl();
MmSizeOfTriageInformation();
MmSizeOfUnloadedDriverInformation();
MmTrimAllSystemPagableMemory();
MmUnloadSystemImage();
MmUnlockCachedPage();
MmUnlockPagableImageSection();
MmUnlockPagedPool();
MmUnlockPages();
MmUnmapIoSpace();
MmUnmapLockedPages();
MmUnmapReservedMapping();
MmUnmapVideoDisplay();
MmUnmapViewInSessionSpace();
MmUnmapViewInSystemCache();
MmUnmapViewInSystemSpace();
MmUnmapViewOfSection();
MmUnsecureVirtualMemory();
MmWorkingSetManager();
MmWriteTriageInformation();
MmWriteUnloadedDriverInformation();
MmZeroPageThread();
NTFastDOSIO();
NtAcceptConnectPort();
NtAccessCheck();
NtAccessCheckAndAuditAlarm();
NtAccessCheckByType();
NtAccessCheckByTypeAndAuditAlarm();
NtAccessCheckByTypeResultList();
NtAccessCheckByTypeResultListAndAuditAlarm();
NtAccessCheckByTypeResultListAndAuditAlarmByHandle();
NtAddAtom();
NtAdjustGroupsToken();
NtAdjustPrivilegesToken();
NtAlertResumeThread();
NtAlertThread();
NtAllocateLocallyUniqueId();
NtAllocateUserPhysicalPages();
NtAllocateUuids();
NtAllocateVirtualMemory();
NtAreMappedFilesTheSame();
NtAssignProcessToJobObject();
NtCallbackReturn();
NtCancelDeviceWakeupRequest();
NtCancelIoFile();
NtCancelTimer();
NtClearEvent();
NtClose();
NtCloseObjectAuditAlarm();
NtCompleteConnectPort();
NtConnectPort();
NtContinue();
NtCreateChannel();
NtCreateDirectoryObject();
NtCreateEvent();
NtCreateEventPair();
NtCreateFile();
NtCreateIoCompletion();
NtCreateJobObject();
NtCreateKey();
NtCreateMailslotFile();
NtCreateMutant();
NtCreateNamedPipeFile();
NtCreatePagingFile();
NtCreatePort();
NtCreateProcess();
NtCreateProfile();
NtCreateSection();
NtCreateSemaphore();
NtCreateSymbolicLinkObject();
NtCreateThread();
NtCreateTimer();
NtCreateToken();
NtCreateWaitablePort();
NtDelayExecution();
NtDeleteAtom();
NtDeleteFile();
NtDeleteKey();
NtDeleteObjectAuditAlarm();
NtDeleteValueKey();
NtDeviceIoControlFile();
NtDisplayString();
NtDuplicateObject();
NtDuplicateToken();
NtEnumerateKey();
NtEnumerateValueKey();
NtExtendSection();
NtFilterToken();
NtFindAtom();
NtFlushBuffersFile();
NtFlushInstructionCache();
NtFlushKey();
NtFlushVirtualMemory();
NtFlushWriteBuffer();
NtFreeUserPhysicalPages();
NtFreeVirtualMemory();
NtFsControlFile();
NtGetContextThread();
NtGetDevicePowerState();
NtGetPlugPlayEvent();
NtGetTickCount();
NtGetWriteWatch();
NtImpersonateAnonymousToken();
NtImpersonateClientOfPort();
NtImpersonateThread();
NtInitializeRegistry();
NtInitiatePowerAction();
NtIsSystemResumeAutomatic();
NtListenPort();
NtLoadDriver();
NtLoadKey();
NtLoadKey2();
NtLockFile();
NtLockVirtualMemory();
NtMakeTemporaryObject();
NtMapUserPhysicalPages();
NtMapUserPhysicalPagesScatter();
NtMapViewOfSection();
NtNotifyChangeDirectoryFile();
NtNotifyChangeKey();
NtNotifyChangeMultipleKeys();
NtOpenDirectoryObject();
NtOpenEvent();
NtOpenEventPair();
NtOpenFile();
NtOpenIoCompletion();
NtOpenJobObject();
NtOpenKey();
NtOpenMutant();
NtOpenObjectAuditAlarm();
NtOpenProcess();
NtOpenProcessToken();
NtOpenSection();
NtOpenSemaphore();
NtOpenSymbolicLinkObject();
NtOpenThread();
NtOpenThreadToken();
NtOpenTimer();
NtPlugPlayControl();
NtPowerInformation();
NtPrivilegeCheck();
NtPrivilegeObjectAuditAlarm();
NtPrivilegedServiceAuditAlarm();
NtProtectVirtualMemory();
NtPulseEvent();
NtQueryAttributesFile();
NtQueryDefaultLocale();
NtQueryDefaultUILanguage();
NtQueryDirectoryFile();
NtQueryDirectoryObject();
NtQueryEaFile();
NtQueryEvent();
NtQueryFullAttributesFile();
NtQueryInformationAtom();
NtQueryInformationFile();
NtQueryInformationJobObject();
NtQueryInformationPort();
NtQueryInformationProcess();
NtQueryInformationThread();
NtQueryInformationToken();
NtQueryInstallUILanguage();
NtQueryIntervalProfile();
NtQueryIoCompletion();
NtQueryKey();
NtQueryMultipleValueKey();
NtQueryMutant();
NtQueryObject();
NtQueryOpenSubKeys();
NtQueryPerformanceCounter();
NtQueryQuotaInformationFile();
NtQuerySection();
NtQuerySecurityObject();
NtQuerySemaphore();
NtQuerySymbolicLinkObject();
NtQuerySystemEnvironmentValue();
NtQuerySystemInformation();
NtQuerySystemTime();
NtQueryTimer();
NtQueryTimerResolution();
NtQueryValueKey();
NtQueryVirtualMemory();
NtQueryVolumeInformationFile();
NtQueueApcThread();
NtRaiseException();
NtRaiseHardError();
NtReadFile();
NtReadFileScatter();
NtReadRequestData();
NtReadVirtualMemory();
NtRegisterThreadTerminatePort();
NtReleaseMutant();
NtReleaseSemaphore();
NtRemoveIoCompletion();
NtReplaceKey();
NtReplyPort();
NtReplyWaitReceivePort();
NtReplyWaitReceivePortEx();
NtReplyWaitReplyPort();
NtReplyWaitSendChannel();
NtRequestDeviceWakeup();
NtRequestPort();
NtRequestWaitReplyPort();
NtRequestWakeupLatency();
NtResetEvent();
NtResetWriteWatch();
NtRestoreKey();
NtResumeThread();
NtSaveKey();
NtSaveMergedKeys();
NtSecureConnectPort();
NtSendWaitReplyChannel();
NtSetContextThread();
NtSetDefaultHardErrorPort();
NtSetDefaultLocale();
NtSetDefaultUILanguage();
NtSetEaFile();
NtSetEvent();
NtSetHighEventPair();
NtSetHighWaitLowEventPair();
NtSetInformationFile();
NtSetInformationJobObject();
NtSetInformationKey();
NtSetInformationObject();
NtSetInformationProcess();
NtSetInformationThread();
NtSetInformationToken();
NtSetIntervalProfile();
NtSetIoCompletion();
NtSetLdtEntries();
NtSetLowEventPair();
NtSetLowWaitHighEventPair();
NtSetQuotaInformationFile();
NtSetSecurityObject();
NtSetSystemEnvironmentValue();
NtSetSystemInformation();
NtSetSystemPowerState();
NtSetSystemTime();
NtSetThreadExecutionState();
NtSetTimer();
NtSetTimerResolution();
NtSetUuidSeed();
NtSetValueKey();
NtSetVolumeInformationFile();
NtShutdownSystem();
NtSignalAndWaitForSingleObject();
NtStartProfile();
NtStopProfile();
NtSuspendThread();
NtSystemDebugControl();
NtTerminateJobObject();
NtTerminateProcess();
NtTerminateThread();
NtTestAlert();
NtUnloadDriver();
NtUnloadKey();
NtUnlockFile();
NtUnlockVirtualMemory();
NtUnmapViewOfSection();
NtVdmControl();
NtWaitForMultipleObjects();
NtWaitForSingleObject();
NtWaitHighEventPair();
NtWaitLowEventPair();
NtWriteFile();
NtWriteFileGather();
NtWriteRequestData();
NtWriteVirtualMemory();
NtYieldExecution();
ObAssignObjectSecurityDescriptor();
ObAssignSecurity();
ObAuditInheritedHandleProcedure();
ObCheckCreateObjectAccess();
ObCheckObjectAccess();
ObCreateObject();
ObCreateObjectType();
ObDeassignSecurity();
ObDeleteCapturedInsertInfo();
ObDereferenceDeviceMap();
ObDereferenceObject();
ObDereferenceObjectDeferDelete();
ObDestroyHandleProcedure();
ObDupHandleProcedure();
ObFindHandleForObject();
ObFreeObjectCreateInfoBuffer();
ObGetHandleInformation();
ObGetObjectInformation();
ObGetObjectPointerCount();
ObGetObjectSecurity();
ObGetSecurityMode();
ObInheritDeviceMap();
ObInitProcess();
ObInitSystem();
ObInsertObject();
ObKillProcess();
ObMakeTemporaryObject();
ObOpenObjectByName();
ObOpenObjectByPointer();
ObQueryDeviceMapInformation();
ObQueryNameString();
ObQueryObjectAuditingByHandle();
ObQuerySecurityDescriptorInfo();
ObQueryTypeInfo();
ObQueryTypeName();
ObReferenceObjectByHandle();
ObReferenceObjectByName();
ObReferenceObjectByPointer();
ObReleaseObjectSecurity();
ObSetDeviceMap();
ObSetSecurityDescriptorInfo();
ObSetSecurityObjectByPointer();
ObValidateSecurityQuota();
ObWaitForSingleObject();
ObfDereferenceObject();
ObfReferenceObject();
ObpAcquireDescriptorCacheReadLock();
ObpAcquireDescriptorCacheWriteLock();
ObpAllocateObject();
ObpAllocateObjectNameBuffer();
ObpCaptureHandleInformation();
ObpCaptureObjectCreateInformation();
ObpCaptureObjectName();
ObpChargeQuotaForObject();
ObpCheckObjectReference();
ObpCheckTraverseAccess();
ObpCompareSecurityDescriptors();
ObpCreateCacheEntry();
ObpCreateDosDevicesDirectory();
ObpCreateHandle();
ObpCreateSymbolicLinkName();
ObpCreateTypeArray();
ObpCreateUnnamedHandle();
ObpDecrementHandleCount();
ObpDeferObjectDeletion();
ObpDeleteDirectoryEntry();
ObpDeleteNameCheck();
ObpDeleteSymbolicLink();
ObpDeleteSymbolicLinkName();
ObpDereferenceNameInfo();
ObpDereferenceSecurityDescriptor();
ObpDestroySecurityDescriptorHeader();
ObpDestroyTypeArray();
ObpEnumFindHandleProcedure();
ObpFreeDosDevicesProtection();
ObpFreeObject();
ObpFreeObjectNameBuffer();
ObpGetDosDevicesProtection();
ObpHashBuffer();
ObpHashSecurityDescriptor();
ObpIncrementHandleCount();
ObpIncrementHandleDataBase();
ObpIncrementUnnamedHandleCount();
ObpInitSecurityDescriptorCache();
ObpInsertDirectoryEntry();
ObpInsertHandleCount();
ObpIsUnsecureName();
ObpLogSecurityDescriptor();
ObpLookupDirectoryEntry();
ObpLookupObjectName();
ObpParseSymbolicLink();
ObpProcessDosDeviceSymbolicLink();
ObpProcessRemoveObjectQueue();
ObpReferenceNameInfo();
ObpReferenceSecurityDescriptor();
ObpReleaseDescriptorCacheLock();
ObpRemoveObjectRoutine();
ObpSetHandleAttributes();
ObpValidateAccessMask();
ObpValidateDesiredAccess();
Opcode0F();
Opcode0FV86();
OpcodeADDR32Prefix();
OpcodeADDR32PrefixV86();
OpcodeCLI();
OpcodeCLIV86();
OpcodeCSPrefix();
OpcodeCSPrefixV86();
OpcodeDSPrefix();
OpcodeDSPrefixV86();
OpcodeESPrefix();
OpcodeESPrefixV86();
OpcodeFSPrefix();
OpcodeFSPrefixV86();
OpcodeGSPrefix();
OpcodeGSPrefixV86();
OpcodeGenericPrefix();
OpcodeGenericPrefixV86();
OpcodeHLTV86();
OpcodeINB();
OpcodeINBV86();
OpcodeINBimm();
OpcodeINBimmV86();
OpcodeINSB();
OpcodeINSBV86();
OpcodeINSW();
OpcodeINSWV86();
OpcodeINTO();
OpcodeINTOV86();
OpcodeINTnn();
OpcodeINTnnV86();
OpcodeINW();
OpcodeINWV86();
OpcodeINWimm();
OpcodeINWimmV86();
OpcodeIRETV86();
OpcodeInvalid();
OpcodeInvalidV86();
OpcodeLOCKPrefix();
OpcodeLOCKPrefixV86();
OpcodeNPXV86();
OpcodeOPER32Prefix();
OpcodeOPER32PrefixV86();
OpcodeOUTB();
OpcodeOUTBV86();
OpcodeOUTBimm();
OpcodeOUTBimmV86();
OpcodeOUTSB();
OpcodeOUTSBV86();
OpcodeOUTSW();
OpcodeOUTSWV86();
OpcodeOUTW();
OpcodeOUTWV86();
OpcodeOUTWimm();
OpcodeOUTWimmV86();
OpcodePOPFV86();
OpcodePUSHFV86();
OpcodeREPNEPrefix();
OpcodeREPNEPrefixV86();
OpcodeREPPrefix();
OpcodeREPPrefixV86();
OpcodeSSPrefix();
OpcodeSSPrefixV86();
OpcodeSTI();
OpcodeSTIV86();
OpenDeviceReparseIndex();
PbAddDependentResourcesToList();
PbAddress32ToAddress16();
PbBiosDmaToIoDescriptor();
PbBiosIrqToIoDescriptor();
PbBiosMemoryToIoDescriptor();
PbBiosPortFixedToIoDescriptor();
PbBiosPortToIoDescriptor();
PbCallPnpBiosWorker();
PbCmDmaToBiosDescriptor();
PbCmIrqToBiosDescriptor();
PbCmMemoryToBiosDescriptor();
PbCmPortToBiosDescriptor();
PbHardwareService();
PfxFindPrefix();
PfxInitialize();
PfxInsertPrefix();
PfxRemovePrefix();
Phase1Initialization();
PiCompareGuid();
PiDetectResourceConflict();
PiDeviceClassAssociation();
PiDeviceRegistration();
PiDeviceRelationType();
PiFindAllDockNodesCallback();
PiFindDevInstMatch();
PiForEachDriverQueryRoutine();
PiGenerateLegacyDeviceInstance();
PiGetDeviceDepth();
PiGetDeviceRegistryProperty();
PiGetInterfaceDeviceAlias();
PiGetInterfaceDeviceList();
PiGetOrSetDeviceStatus();
PiGetRelatedDevice();
PiGetRelatedEjectionDepth();
PiInitPhase0();
PiInitializeDevice();
PiInsertEventInQueue();
PiMapFlagFromStatus();
PiMapFlagToStatus();
PiNotifyUserMode();
PiNotifyUserModeDeviceRemoval();
PiNotifyUserModeKernelInitiatedEject();
PiNotifyUserModeRemoveVetoed();
PiNotifyUserModeRemoveVetoedByList();
PiProcessCustomDeviceEvent();
PiProcessDriverInstance();
PiProcessQueryRemoveAndEject();
PiProcessTargetDeviceEvent();
PiProperty();
PiQueryConflictList();
PiQueryDeviceRelations();
PiQueryInstallList();
PiQueryTargetDeviceRelation();
PiQueueDeviceRequest();
PiQueueQueryAndRemoveEvent();
PiRegSzToString();
PiRequestDockToEject();
PiResizeTargetDeviceBlock();
PiUserResponse();
PiWalkDeviceList();
PiWalkDevnodeTree();
PnPBiosCheckForExclusion();
PnPBiosCheckForHardwareDisabled();
PnPBiosCollectLegacyDeviceResources();
PnPBiosCopyDeviceParamKey();
PnPBiosCopyIoDecode();
PnPBiosEliminateDupes();
PnPBiosExamineBiosDeviceInstanceKey();
PnPBiosExamineBiosDeviceKey();
PnPBiosExamineDeviceKeys();
PnPBiosExpandProductId();
PnPBiosExtractCompatibleIDs();
PnPBiosExtractInfo();
PnPBiosFindMatchingDevNode();
PnPBiosFreeDevNodeInfo();
PnPBiosGetBiosHandleFromDeviceKey();
PnPBiosGetBiosInfo();
PnPBiosGetDescription();
PnPBiosIgnoreNode();
PnPBiosInitializePnPBios();
PnPBiosIoResourceListToCmResourceList();
PnPBiosMapper();
PnPBiosReserveLegacyDeviceResources();
PnPBiosSetDeviceNodes();
PnPBiosShutdownSystem();
PnPBiosTranslateInfo();
PnPBiosWriteInfo();
PnPCheckFixedIoOverrideDecodes();
PnPGetDevnodeExcludeList();
PoCallDriver();
PoCancelDeviceNotify();
PoGetLightestSystemStateForEject();
PoInitDriverServices();
PoInitHiberServices();
PoInitSystem();
PoInitializeDeviceObject();
PoInitializePrcb();
PoInvalidateDevicePowerRelations();
PoNotifySystemTimeSet();
PoRegisterDeviceForIdleDetection();
PoRegisterDeviceNotify();
PoRegisterSystemState();
PoRequestPowerIrp();
PoRunDownDeviceObject();
PoSetHiberRange();
PoSetPowerState();
PoSetSystemState();
PoShutdownBugCheck();
PoSimpleCheck();
PoStartNextPowerIrp();
PoSystemIdleWorker();
PoUnregisterSystemState();
PoVolumeDevice();
PopAcquirePolicyLock();
PopActionRetrieveInitialState();
PopAddPagesToCompressedPageSet();
PopAdvanceSystemPowerState();
PopAllocateDevState();
PopAllocateHiberContext();
PopAllocatePages();
PopApplyAdminPolicy();
PopApplyAttributeState();
PopApplyPolicy();
PopApplyThermalThrottle();
PopAttribNop();
PopBuildMemoryImageHeader();
PopBuildPowerChannel();
PopChangeCapability();
PopCheckForWork();
PopCheckSystemPowerIrpStatus();
PopCleanupDevState();
PopCleanupPowerState();
PopClearHiberFileSignature();
PopCloneRange();
PopCloneStack();
PopCompareActions();
PopCompleteAction();
PopCompleteFindIrp();
PopCompletePolicyIrp();
PopCompleteRequestIrp();
PopCompleteSystemPowerIrp();
PopCompositeBatteryDeviceHandler();
PopCompressPage();
PopComputeCBTime();
PopConnectToPolicyDevice();
PopConvertUsToPerfCount();
PopCreateDumpMdl();
PopCreateHiberFile();
PopCreateHiberLinkFile();
PopCriticalShutdown();
PopCurrentPowerState();
PopDefaultPolicy();
PopDemoteIdleness();
PopDiscardRange();
PopDispatchAcDcCallback();
PopDispatchCallback();
PopDispatchCallout();
PopDispatchDisplayRequired();
PopDispatchEventCodes();
PopDispatchFullWake();
PopDispatchPolicyCallout();
PopDispatchSetStateFailure();
PopDisplayRequired();
PopDumpSystemIrp();
PopEnableHiberFile();
PopEndCompressedPageSet();
PopEnterNotification();
PopEventCalloutDispatch();
PopExceptionFilter();
PopFilterCapabilities();
PopFindIrpByDeviceObject();
PopFindIrpByInrush();
PopFindPowerDependencies();
PopFlushVolumeWorker();
PopFlushVolumes();
PopFreeHiberContext();
PopGatherMemoryForHibernate();
PopGetDope();
PopGetHiberFlags();
PopGetNextRange();
PopGetPolicyWorker();
PopGetRangeCount();
PopHandleNextState();
PopHiberComplete();
PopIdle0();
PopInitProcessorStateHandlers();
PopInitSIdle();
PopInitializePowerPolicySimulate();
PopInvokeStateHandlerTargetProcessor();
PopInvokeSystemStateHandler();
PopIssueActionRequest();
PopIssueNextState();
PopLockGetDoDevicePowerState();
PopMapInternalActionToIrpAction();
PopNotifyDevice();
PopNotifyDeviceList();
PopNotifyPolicyDevice();
PopOpenPowerKey();
PopPassivePowerCall();
PopPolicySystemIdle();
PopPolicyTimeChange();
PopPolicyWorkerAction();
PopPolicyWorkerActionPromote();
PopPolicyWorkerMain();
PopPolicyWorkerNotify();
PopPolicyWorkerThread();
PopPresentIrp();
PopPresentNotify();
PopPreserveRange();
PopProcessorIdle();
PopProcessorInformation();
PopPromoteActionFlag();
PopPromoteFromIdle0();
PopPromoteIdleness();
PopRecalculateCBTriggerLevels();
PopRegisterForDeviceNotification();
PopReleasePolicyLock();
PopReportDevState();
PopResetActionDefaults();
PopResetCBTriggers();
PopResetCurrentPolicies();
PopResetRangeEnum();
PopResetSwitchTriggers();
PopRestartSetSystemState();
PopReturnMemoryForHibernate();
PopRunDownSourceTargetList();
PopSaveHeuristics();
PopSaveHiberContext();
PopScanIdleList();
PopSetDevicesSystemState();
PopSetNotificationWork();
PopSetPowerAction();
PopSetRange();
PopShutdownHandler();
PopShutdownSystem();
PopSleepSystem();
PopSplitMdl();
PopSqrt();
PopStateChangeNotify();
PopSystemButtonHandler();
PopSystemIrpDispatchWorker();
PopSystemRequiredSet();
PopSystemStateString();
PopThermalDeviceHandler();
PopThermalUpdateThrottle();
PopThermalZoneCleanup();
PopThermalZoneDpc();
PopTimeString();
PopTriggerSwitch();
PopUpdateHiberComplete();
PopUpdateThrottleLimit();
PopUserPresentSet();
PopVerifyHiber();
PopVerifyPowerActionPolicy();
PopVerifyPowerPolicy();
PopVerifySystemPowerState();
PopVerifyThrottle();
PopWaitForSystemPowerIrp();
PopWriteHiberImage();
PopWriteHiberPages();
PopZeroHiberFile();
PotentialNewSymbol();
PpBiosResourcesSetToDisabled();
PpBiosResourcesToNtResources();
PpCmResourcesToBiosResources();
PpCompleteDeviceEvent();
PpCreateLegacyDeviceIds();
PpDeviceRegistration();
PpFilterNtResource();
PpForEachDeviceInstanceDriver();
PpInitSystem();
PpInitializeNotification();
PpNotifyUserModeRemovalSafe();
PpSetCustomTargetEvent();
PpSetDeviceClassChange();
PpSetDeviceRemovalSafe();
PpSetHwProfileChangeEvent();
PpSetPlugPlayEvent();
PpSetPowerEvent();
PpSetPowerVetoEvent();
PpSetTargetDeviceRemove();
PpShutdownSystem();
PpSynchronizeDeviceEventQueue();
ProbeForRead();
ProbeForWrite();
Ps386GetVdmIoHandler();
PsAssignImpersonationToken();
PsCallImageNotifyRoutines();
PsChangeJobMemoryUsage();
PsChangeQuantumTable();
PsChargePoolQuota();
PsChargeProcessNonPagedPoolQuota();
PsChargeSharedPoolQuota();
PsConvertToGuiThread();
PsCreateSystemProcess();
PsCreateSystemThread();
PsDisableImpersonation();
PsEnforceExecutionTimeLimits();
PsEstablishWin32Callouts();
PsExitSpecialApc();
PsGetCurrentProcessId();
PsGetCurrentThreadId();
PsGetProcessExitTime();
PsGetProcessId();
PsGetProcessImageFileName();
PsGetVersion();
PsImpersonateClient();
PsInitSystem();
PsIsThreadTerminating();
PsLocateSystemDll();
PsLockProcess();
PsLookupProcessByProcessId();
PsLookupProcessThreadByCid();
PsLookupThreadByThreadId();
PsOpenTokenOfProcess();
PsReferenceEffectiveToken();
PsReferenceImpersonationToken();
PsReferencePrimaryToken();
PsReportProcessMemoryLimitViolation();
PsRestoreImpersonation();
PsReturnPoolQuota();
PsReturnSharedPoolQuota();
PsRevertToSelf();
PsSetCreateProcessNotifyRoutine();
PsSetCreateThreadNotifyRoutine();
PsSetLdtEntries();
PsSetLegoNotifyRoutine();
PsSetLoadImageNotifyRoutine();
PsSetNewKSecDD();
PsSetProcessPriorityByClass();
PsTerminateSystemThread();
PsUnlockProcess();
PsWatchWorkingSet();
Psp386CreateVdmIoListHead();
Psp386GetVdmIoHandler();
Psp386InsertVdmIoHandlerBlock();
Psp386InstallIoHandler();
Psp386RemoveIoHandler();
PspAddProcessToJob();
PspApplyJobLimitsToProcess();
PspApplyJobLimitsToProcessSet();
PspAssignPrimaryToken();
PspCaptureTokenFilter();
PspCreateLdt();
PspCreateProcess();
PspCreateThread();
PspDeleteLdt();
PspDeleteProcessSecurity();
PspDeleteThreadSecurity();
PspDeleteVdmObjects();
PspDereferenceQuota();
PspExitNormalApc();
PspExitProcess();
PspExitProcessFromJob();
PspExitThread();
PspFoldProcessAccountingIntoJob();
PspGetContext();
PspGetSetContextSpecialApc();
PspInheritQuota();
PspInitPhase0();
PspInitPhase1();
PspInitializeProcessSecurity();
PspInitializeSystemDll();
PspInitializeThreadSecurity();
PspIsDescriptorValid();
PspJobClose();
PspJobDelete();
PspLdtInitialize();
PspLookupKernelUserEntryPoints();
PspLookupSystemDllEntryPoint();
PspMapSystemDll();
PspMarkProcessIdValid();
PspNullSpecialApc();
PspProcessDelete();
PspQueryDescriptorThread();
PspQueryLdtInformation();
PspQueryPooledQuotaLimits();
PspQueryQuotaLimits();
PspQueryWorkingSetWatch();
PspQueueApcSpecialApc();
PspReaper();
PspRemoveProcessFromJob();
PspSetContext();
PspSetLdtInformation();
PspSetLdtSize();
PspSetPrimaryToken();
PspSetProcessIoHandlers();
PspSetQuotaLimits();
PspSinglePrivCheck();
PspSinglePrivCheckAudit();
PspSystemThreadStartup();
PspTerminateAllProcessesInJob();
PspTerminateProcess();
PspTerminateThreadByPointer();
PspThreadDelete();
PspUnhandledExceptionInSystemThread();
PspUserThreadStartup();
PspVdmInitialize();
PushException();
PushInt();
PushPmInterrupt();
PushRmInterrupt();
QueryDeviceNameForPath();
QuerySymbolicLink();
RDMSR();
RDTSC();
READ_REGISTER_BUFFER_UCHAR();
READ_REGISTER_BUFFER_ULONG();
READ_REGISTER_BUFFER_USHORT();
READ_REGISTER_UCHAR();
READ_REGISTER_ULONG();
READ_REGISTER_USHORT();
RawCheckForDismount();
RawCleanup();
RawClose();
RawCompletionRoutine();
RawCreate();
RawDispatch();
RawFileSystemControl();
RawInitialize();
RawInitializeVcb();
RawMountVolume();
RawQueryFsAttributeInfo();
RawQueryFsDeviceInfo();
RawQueryFsSizeInfo();
RawQueryFsVolumeInfo();
RawQueryInformation();
RawQueryVolumeInformation();
RawReadWriteDeviceControl();
RawSetInformation();
RawUserFsCtrl();
RawVerifyVolume();
RestartDelayedInterrupts();
RtlAbsoluteToSelfRelativeSD();
RtlAcquirePebLock();
RtlAddAccessAllowedAce();
RtlAddAccessAllowedAceEx();
RtlAddAce();
RtlAddAtomToAtomTable();
RtlAddAuditAccessAce();
RtlAddRange();
RtlAddressInSectionTable();
RtlAllocateHeap();
RtlAllocateHeapSlowly();
RtlAnsiCharToUnicodeChar();
RtlAnsiStringToUnicodeString();
RtlAppendAsciizToString();
RtlAppendStringToString();
RtlAppendUnicodeStringToString();
RtlAppendUnicodeToString();
RtlAreAllAccessesGranted();
RtlAreAnyAccessesGranted();
RtlAreBitsClear();
RtlAreBitsSet();
RtlAssert();
RtlCaptureContext();
RtlCaptureStackBackTrace();
RtlCharToInteger();
RtlCheckRegistryKey();
RtlClearAllBits();
RtlClearBits();
RtlCompareMemory();
RtlCompareMemoryUlong();
RtlCompareString();
RtlCompareUnicodeString();
RtlCompressBuffer();
RtlCompressBufferLZNT1();
RtlCompressBufferLZNT1_HIBER();
RtlCompressBufferNS();
RtlCompressChunks();
RtlCompressWorkSpaceSizeLZNT1();
RtlCompressWorkSpaceSizeNS();
RtlComputeLfnChecksum();
RtlConvertLongToLargeInteger();
RtlConvertSidToUnicodeString();
RtlConvertUlongToLargeInteger();
RtlCopyLuid();
RtlCopyLuidAndAttributesArray();
RtlCopyRangeList();
RtlCopySid();
RtlCopySidAndAttributesArray();
RtlCopyString();
RtlCopyUnicodeString();
RtlCreateAcl();
RtlCreateAtomTable();
RtlCreateHeap();
RtlCreateRegistryKey();
RtlCreateSecurityDescriptorRelative();
RtlCreateUnicodeString();
RtlCreateUnicodeStringFromAsciiz();
RtlCreateUserProcess();
RtlCreateUserThread();
RtlCustomCPToUnicodeN();
RtlCutoverTimeToSystemTime();
RtlDeNormalizeProcessParams();
RtlDecompressBuffer();
RtlDecompressBufferLZNT1();
RtlDecompressBufferNS();
RtlDecompressChunks();
RtlDecompressFragment();
RtlDecompressFragmentLZNT1();
RtlDecompressFragmentNS();
RtlDelete();
RtlDeleteAce();
RtlDeleteAtomFromAtomTable();
RtlDeleteElementGenericTable();
RtlDeleteNoSplay();
RtlDeleteOwnersRanges();
RtlDeleteRange();
RtlDeleteRegistryValue();
RtlDescribeChunk();
RtlDescribeChunkLZNT1();
RtlDestroyAtomTable();
RtlDestroyHeap();
RtlDispatchException();
RtlDnsHostNameToComputerName();
RtlDowncaseUnicodeString();
RtlEmptyAtomTable();
RtlEnumerateGenericTable();
RtlEnumerateGenericTableWithoutSplaying();
RtlEqualLuid();
RtlEqualPrefixSid();
RtlEqualSid();
RtlEqualString();
RtlEqualUnicodeString();
RtlExpandEnvironmentStrings_U();
RtlExtendedIntegerMultiply();
RtlExtendedLargeIntegerDivide();
RtlExtendedMagicDivide();
RtlFillMemory();
RtlFillMemoryUlong();
RtlFillMemoryUlonglong();
RtlFindClearBits();
RtlFindClearBitsAndSet();
RtlFindClearRuns();
RtlFindFirstRunClear();
RtlFindLastBackwardRunClear();
RtlFindLeastSignificantBit();
RtlFindLongestRunClear();
RtlFindMessage();
RtlFindMostSignificantBit();
RtlFindNextForwardRunClear();
RtlFindRange();
RtlFindSetBits();
RtlFindSetBitsAndClear();
RtlFindUnicodePrefix();
RtlFirstFreeAce();
RtlFormatCurrentUserKeyPath();
RtlFreeHeap();
RtlFreeHeapSlowly();
RtlFreeOemString();
RtlFreeRangeList();
RtlFreeUnicodeString();
RtlGUIDFromString();
RtlGenerate8dot3Name();
RtlGetAce();
RtlGetCallersAddress();
RtlGetCompressionWorkSpaceSize();
RtlGetDaclSecurityDescriptor();
RtlGetDefaultCodePage();
RtlGetElementGenericTable();
RtlGetFirstRange();
RtlGetGroupSecurityDescriptor();
RtlGetLastRange();
RtlGetNextRange();
RtlGetNtGlobalFlags();
RtlGetOwnerSecurityDescriptor();
RtlGetSaclSecurityDescriptor();
RtlImageDirectoryEntryToData();
RtlImageNtHeader();
RtlInitAnsiString();
RtlInitCodePageTable();
RtlInitNlsTables();
RtlInitString();
RtlInitUnicodeString();
RtlInitializeAtomPackage();
RtlInitializeBitMap();
RtlInitializeContext();
RtlInitializeExceptionLog();
RtlInitializeGenericTable();
RtlInitializeRangeList();
RtlInitializeRangeListPackage();
RtlInitializeSid();
RtlInitializeUnicodePrefix();
RtlInsertElementGenericTable();
RtlInsertElementGenericTableFull();
RtlInsertUnicodePrefix();
RtlIntegerToChar();
RtlIntegerToUnicode();
RtlIntegerToUnicodeString();
RtlInvertRangeList();
RtlIsGenericTableEmpty();
RtlIsNameLegalDOS8Dot3();
RtlIsRangeAvailable();
RtlIsValidOemCharacter();
RtlLargeIntegerAdd();
RtlLargeIntegerArithmeticShift();
RtlLargeIntegerDivide();
RtlLargeIntegerNegate();
RtlLargeIntegerShiftLeft();
RtlLargeIntegerShiftRight();
RtlLargeIntegerSubtract();
RtlLargeIntegerToUnicode();
RtlLengthRequiredSid();
RtlLengthSecurityDescriptor();
RtlLengthSid();
RtlLengthSidAsUnicodeString();
RtlLookupAtomInAtomTable();
RtlLookupElementGenericTable();
RtlLookupElementGenericTableFull();
RtlMakeSelfRelativeSD();
RtlMapGenericMask();
RtlMergeRangeLists();
RtlMoveMemory();
RtlMultiByteToUnicodeN();
RtlMultiByteToUnicodeSize();
RtlNextUnicodePrefix();
RtlNtStatusToDosError();
RtlNtStatusToDosErrorNoTeb();
RtlNumberGenericTableElements();
RtlNumberOfClearBits();
RtlNumberOfSetBits();
RtlOemStringToCountedUnicodeString();
RtlOemStringToUnicodeString();
RtlOemToUnicodeN();
RtlOpenCurrentUser();
RtlPinAtomInAtomTable();
RtlPrefetchMemoryNonTemporal();
RtlPrefixString();
RtlPrefixUnicodeString();
RtlQueryAtomInAtomTable();
RtlQueryAtomsInAtomTable();
RtlQueryEnvironmentVariable_U();
RtlQueryInformationAcl();
RtlQueryRegistryValues();
RtlQueryTimeZoneInformation();
RtlRaiseException();
RtlRaiseStatus();
RtlRandom();
RtlRealPredecessor();
RtlRealSuccessor();
RtlReleasePebLock();
RtlRemoveUnicodePrefix();
RtlReserveChunk();
RtlReserveChunkLZNT1();
RtlReserveChunkNS();
RtlResetRtlTranslations();
RtlSecondsSince1970ToTime();
RtlSecondsSince1980ToTime();
RtlSectionTableFromVirtualAddress();
RtlSelfRelativeToAbsoluteSD();
RtlSelfRelativeToAbsoluteSD2();
RtlSetActiveTimeBias();
RtlSetAllBits();
RtlSetBits();
RtlSetDaclSecurityDescriptor();
RtlSetGroupSecurityDescriptor();
RtlSetOwnerSecurityDescriptor();
RtlSetSaclSecurityDescriptor();
RtlSetTimeZoneInformation();
RtlSizeHeap();
RtlSplay();
RtlStringFromGUID();
RtlSubAuthorityCountSid();
RtlSubAuthoritySid();
RtlSubtreePredecessor();
RtlSubtreeSuccessor();
RtlTimeFieldsToTime();
RtlTimeToSecondsSince1970();
RtlTimeToSecondsSince1980();
RtlTimeToTimeFields();
RtlTraceDatabaseAdd();
RtlTraceDatabaseCreate();
RtlTraceDatabaseDestroy();
RtlTraceDatabaseEnumerate();
RtlTraceDatabaseFind();
RtlTraceDatabaseLock();
RtlTraceDatabaseUnlock();
RtlTraceDatabaseValidate();
RtlUlongByteSwap();
RtlUlonglongByteSwap();
RtlUnicodeStringToAnsiString();
RtlUnicodeStringToCountedOemString();
RtlUnicodeStringToInteger();
RtlUnicodeStringToOemString();
RtlUnicodeToCustomCPN();
RtlUnicodeToMultiByteN();
RtlUnicodeToMultiByteSize();
RtlUnicodeToOemN();
RtlUnwind();
RtlUpcaseUnicodeChar();
RtlUpcaseUnicodeString();
RtlUpcaseUnicodeStringToAnsiString();
RtlUpcaseUnicodeStringToCountedOemString();
RtlUpcaseUnicodeStringToOemString();
RtlUpcaseUnicodeToCustomCPN();
RtlUpcaseUnicodeToMultiByteN();
RtlUpcaseUnicodeToOemN();
RtlUpperChar();
RtlUpperString();
RtlUshortByteSwap();
RtlValidAcl();
RtlValidRelativeSecurityDescriptor();
RtlValidSecurityDescriptor();
RtlValidSid();
RtlVolumeDeviceToDosName();
RtlWalkFrameChain();
RtlWriteRegistryValue();
RtlZeroHeap();
RtlZeroMemory();
RtlpAddData();
RtlpAddIntersectingRanges();
RtlpAddKnownAce();
RtlpAddRange();
RtlpAddToMergedRange();
RtlpAllocDeallocQueryBuffer();
RtlpAllocateAtom();
RtlpApplyAclToObject();
RtlpAtomMapAtomToHandleEntry();
RtlpBreakWithStatusInstruction();
RtlpCallQueryRegistryRoutine();
RtlpCaptureContext();
RtlpCoalesceFreeBlocks();
RtlpCompareAces();
RtlpCompareKnownAces();
RtlpCompareKnownObjectAces();
RtlpComputeMergedAcl();
RtlpComputeMergedAcl2();
RtlpConvertToMergedRange();
RtlpCopyAces();
RtlpCopyEffectiveAce();
RtlpCopyRangeListEntry();
RtlpCreateHandleForAtom();
RtlpCreateRangeListEntry();
RtlpCreateServerAcl();
RtlpCreateStack();
RtlpCreateUnCommittedRange();
RtlpDeCommitFreeBlock();
RtlpDeleteData();
RtlpDeleteFromMergedRange();
RtlpDeleteRangeListEntry();
RtlpDestroyHandleTableForAtomTable();
RtlpDestroyHeapSegment();
RtlpDestroyUnCommittedRange();
RtlpDidUnicodeToOemWork();
RtlpExecuteHandlerForException();
RtlpExecuteHandlerForUnwind();
RtlpExtendHeap();
RtlpFindAndCommitPages();
RtlpFreeHandleForAtom();
RtlpFreeStack();
RtlpGenerateInheritAcl();
RtlpGenerateInheritedAce();
RtlpGetExtraStuffPointer();
RtlpGetIntegerAtom();
RtlpGetRegistrationHead();
RtlpGetRegistryHandle();
RtlpGetReturnAddress();
RtlpGetSizeOfBigBlock();
RtlpGetStackLimits();
RtlpGetTimeZoneInfoHandle();
RtlpHashStringToAtom();
RtlpImageDirectoryEntryToData32();
RtlpImageDirectoryEntryToData64();
RtlpInheritAcl();
RtlpInheritAcl2();
RtlpInitUpcaseTable();
RtlpInitializeHandleTableForAtomTable();
RtlpInitializeHeapSegment();
RtlpInitializeLockAtomTable();
RtlpInsertFreeBlock();
RtlpInsertUnCommittedPages();
RtlpIsDuplicateAce();
RtlpIsRangeAvailable();
RtlpLockAtomTable();
RtlpLogExceptionHandler();
RtlpLogLastExceptionDisposition();
RtlpNewSecurityObject();
RtlpOpenImageFile();
RtlpQueryRegistryDirect();
RtlpQuerySecurityDescriptor();
RtlpSetSecurityObject();
RtlpTraceDatabaseAcquireLock();
RtlpTraceDatabaseAllocate();
RtlpTraceDatabaseFree();
RtlpTraceDatabaseInitializeLock();
RtlpTraceDatabaseInternalAdd();
RtlpTraceDatabaseInternalFind();
RtlpTraceDatabaseReleaseLock();
RtlpTraceDatabaseUninitializeLock();
RtlpTraceSegmentCreate();
RtlpTraceStandardHashFunction();
RtlpUnlinkHandler();
RtlpUnlockAtomTable();
RtlpValidateSDOffsetAndSize();
RtlxOemStringToUnicodeSize();
RtlxUnicodeStringToOemSize();
SeAccessCheck();
SeAccessCheckByType();
SeAppendPrivileges();
SeAssignPrimaryToken();
SeAssignSecurity();
SeAssignSecurityEx();
SeAssignWorldSecurityDescriptor();
SeAuditHandleCreation();
SeAuditHandleDuplication();
SeAuditHardLinkCreation();
SeAuditProcessCreation();
SeAuditProcessExit();
SeAuditingFileEvents();
SeAuditingFileOrGlobalEvents();
SeAuditingHardLinkEvents();
SeCaptureAcl();
SeCaptureLuidAndAttributesArray();
SeCaptureObjectTypeList();
SeCaptureSecurityDescriptor();
SeCaptureSecurityQos();
SeCaptureSid();
SeCaptureSidAndAttributesArray();
SeCaptureSubjectContext();
SeCaptureSubjectContextEx();
SeCheckAuditPrivilege();
SeCheckPrivilegedObject();
SeCloseObjectAuditAlarm();
SeComputeQuotaInformationSize();
SeCopyClientToken();
SeCreateAccessState();
SeCreateAccessStateEx();
SeCreateClientSecurity();
SeCreateClientSecurityFromSubjectContext();
SeDeassignPrimaryToken();
SeDeassignSecurity();
SeDefaultObjectMethod();
SeDeleteAccessState();
SeDeleteObjectAuditAlarm();
SeExchangePrimaryToken();
SeFastFilterToken();
SeFastTraverseCheck();
SeFreeCapturedObjectTypeList();
SeFreeCapturedSecurityQos();
SeFreePrivileges();
SeGetTokenControlInformation();
SeImpersonateClient();
SeImpersonateClientEx();
SeInitSystem();
SeIsChildTokenByPointer();
SeLockSubjectContext();
SeMakeAnonymousLogonToken();
SeMakeSystemToken();
SeMarkLogonSessionForTerminationNotification();
SeObjectReferenceAuditAlarm();
SeOpenObjectAuditAlarm();
SeOpenObjectForDeleteAuditAlarm();
SePrivilegeCheck();
SePrivilegeObjectAuditAlarm();
SePrivilegePolicyCheck();
SePrivilegedServiceAuditAlarm();
SeQueryAuthenticationIdToken();
SeQueryInformationToken();
SeQuerySecurityAccessMask();
SeQuerySecurityDescriptorInfo();
SeQuerySessionIdToken();
SeRegisterLogonSessionTerminatedRoutine();
SeReleaseSecurityDescriptor();
SeReleaseSidAndAttributesArray();
SeReleaseSubjectContext();
SeRmInitPhase1();
SeSetAccessStateGenericMapping();
SeSetSecurityAccessMask();
SeSetSecurityDescriptorInfo();
SeSetSecurityDescriptorInfoEx();
SeSetSessionIdToken();
SeSinglePrivilegeCheck();
SeSubProcessToken();
SeTokenCanImpersonate();
SeTokenImpersonationLevel();
SeTokenIsAdmin();
SeTokenIsRestricted();
SeTokenType();
SeTraverseAuditAlarm();
SeUnlockSubjectContext();
SeUnregisterLogonSessionTerminatedRoutine();
SeValidSecurityDescriptor();
SepAccessCheck();
SepAccessCheckAndAuditAlarm();
SepAddAccessTypeList();
SepAdjustGroups();
SepAdjustPrivileges();
SepAdtCloseObjectAuditAlarm();
SepAdtCopyToLsaSharedMemory();
SepAdtDeleteObjectAuditAlarm();
SepAdtGenerateDiscardAudit();
SepAdtInitializeAuditingOptions();
SepAdtInitializeBounds();
SepAdtInitializeCrashOnFail();
SepAdtInitializePhase1();
SepAdtInitializePrivilegeAuditing();
SepAdtLogAuditRecord();
SepAdtMarshallAuditRecord();
SepAdtObjectReferenceAuditAlarm();
SepAdtOpenObjectAuditAlarm();
SepAdtOpenObjectForDeleteAuditAlarm();
SepAdtPrivilegeObjectAuditAlarm();
SepAdtPrivilegedServiceAuditAlarm();
SepAdtValidateAuditBounds();
SepAppendDefaultDacl();
SepAppendPrimaryGroup();
SepAssemblePrivileges();
SepAuditFailed();
SepAuditTypeList();
SepCheckAcl();
SepConcatenatePrivileges();
SepCopyProxyData();
SepCreateClientSecurity();
SepCreateImpersonationTokenDacl();
SepCreateLogonSessionTrack();
SepCreateToken();
SepDeReferenceLogonSession();
SepDefaultDeleteMethod();
SepDeleteLogonSessionTrack();
SepDequeueWorkItem();
SepDuplicateToken();
SepExamineSacl();
SepExamineSaclEx();
SepFilterPrivilegeAudits();
SepFilterToken();
SepFreeDefaultDacl();
SepFreePrimaryGroup();
SepFreeProxyData();
SepGetDefaultsSubjectContext();
SepIdAssignableAsGroup();
SepIdAssignableAsOwner();
SepInformFileSystemsOfDeletedLogon();
SepInformLsaOfDeletedLogon();
SepInitSystemDacls();
SepInitializationPhase0();
SepInitializationPhase1();
SepInitializePrivilegeFilter();
SepInitializePrivilegeSets();
SepInitializeWorkList();
SepMakeTokenEffectiveOnly();
SepMaximumAccessCheck();
SepNormalAccessCheck();
SepNotifyFileSystems();
SepObjectInTypeList();
SepOpenTokenOfThread();
SepPrivilegeCheck();
SepProbeAndCaptureQosData();
SepProbeAndCaptureString_U();
SepQueryNameString();
SepQueryTypeString();
SepQueueWorkItem();
SepReferenceLogonSession();
SepRemoveDisabledGroupsAndPrivileges();
SepRmCallLsa();
SepRmCommandServerThread();
SepRmCommandServerThreadInit();
SepRmComponentTestCommandWrkr();
SepRmCreateLogonSessionWrkr();
SepRmDbInitialization();
SepRmDeleteLogonSessionWrkr();
SepRmInitPhase0();
SepRmSendCommandToLsaWrkr();
SepRmSetAuditEventWrkr();
SepSetAuditInfoForObjectType();
SepSidInSidAndAttributes();
SepSidInToken();
SepSidInTokenEx();
SepSinglePrivilegeCheck();
SepTokenDeleteMethod();
SepTokenInitialization();
SepTokenIsOwner();
SepUpdateParentTypeList();
SepValidOwnerSubjectContext();
SepVariableInitialization();
SetVirtualBits();
SkippingWhichBP();
SsToLinear();
SwapContext();
SwapSplayLinks();
SwitchToHandlerStack();
SymNumFor();
TraceDataRecordCallInfo();
TriageActUpon();
TriageGetBugcheckData();
TriageGetDriverCount();
TriageGetLoaderEntry();
TriageGetMmInformation();
TriagepGetPageSize();
TriagepGetTriagePointer();
TriagepVerifyDump();
V86_kids_a();
V86_kit0_a();
V86_kit10_a();
V86_kit11_a();
V86_kit13_a();
V86_kit1_a();
V86_kit3_a();
V86_kit4_a();
V86_kit5_a();
V86_kit6_a();
V86_kit7_a();
V86_kit9_a();
V86_kit_a();
V86_kita_a();
V86_kitb_a();
V86_kitc_a();
V86_kitd_a();
V86_kite_a();
V86_kitf_a();
V86_kitx_a();
V86_kui_a();
VdmCallStringIoHandler();
VdmConvertToLinearAddress();
VdmDecodeOperand();
VdmDispatchBop();
VdmDispatchException();
VdmDispatchIRQ13();
VdmDispatchIntAck();
VdmDispatchInterrupts();
VdmDispatchIoToHandler();
VdmDispatchOpcodeV86_try();
VdmDispatchOpcode_try();
VdmDispatchPageFault();
VdmDispatchStringIoToHandler();
VdmDispatchUnalignedIoToHandler();
VdmEndExecution();
VdmFetchBop1();
VdmFetchBop4();
VdmFetchULONG();
VdmFlushPrinterWriteData();
VdmOpcode0f();
VdmOpcodeClts();
VdmOpcodeGetCrx();
VdmOpcodeGetDrx();
VdmOpcodeLmsw();
VdmOpcodeSetCrx();
VdmOpcodeSetDrx();
VdmPrinterStatus();
VdmPrinterWriteData();
VdmQueryDirectoryFile();
VdmRundownDpcs();
VdmSegParams();
VdmSkipNpxInstruction();
VdmSwapContexts();
VdmTraceEvent();
VdmpDelayIntApcRoutine();
VdmpDelayIntDpcRoutine();
VdmpDelayInterrupt();
VdmpDispatchableIntPending();
VdmpEnterIcaLock();
VdmpExceptionHandler();
VdmpGetVdmTib();
VdmpInitialize();
VdmpIsThreadTerminating();
VdmpLeaveIcaLock();
VdmpNullRundownRoutine();
VdmpPrinterDirectIoClose();
VdmpPrinterDirectIoOpen();
VdmpPrinterInitialize();
VdmpQueryVdmProcess();
VdmpQueueIntApcRoutine();
VdmpQueueIntNormalRoutine();
VdmpQueueInterrupt();
VdmpStartExecution();
VeAllocatePoolWithTagPriority();
VerifierAllocatePool();
VerifierAllocatePoolWithQuota();
VerifierAllocatePoolWithQuotaTag();
VerifierAllocatePoolWithTag();
VerifierAllocatePoolWithTagPriority();
VerifierExAcquireFastMutex();
VerifierExAcquireFastMutexUnsafe();
VerifierExAcquireResourceExclusive();
VerifierExReleaseFastMutex();
VerifierExReleaseFastMutexUnsafe();
VerifierExReleaseResource();
VerifierExTryToAcquireFastMutex();
VerifierFreePool();
VerifierFreePoolWithTag();
VerifierFreeTrackedPool();
VerifierKeAcquireSpinLock();
VerifierKeInitializeTimer();
VerifierKeInitializeTimerEx();
VerifierKeLowerIrql();
VerifierKeRaiseIrql();
VerifierKeReleaseSpinLock();
VerifierKfAcquireSpinLock();
VerifierKfLowerIrql();
VerifierKfRaiseIrql();
VerifierKfReleaseSpinLock();
VerifierMapIoSpace();
VerifierMapLockedPages();
VerifierMapLockedPagesSpecifyCache();
VerifierProbeAndLockPages();
VerifierProbeAndLockProcessPages();
VerifierSetEvent();
VerifierSynchronizeExecution();
VerifierUnlockPages();
VerifierUnmapIoSpace();
VerifierUnmapLockedPages();
ViAddBadMapper();
ViCancelPoolAllocation();
ViInitializeEntry();
ViInjectResourceFailure();
ViInsertPoolAllocation();
ViInsertVerifierEntry();
ViLocateVerifierEntry();
ViPostPoolAllocation();
ViPrintString();
ViReleasePoolAllocation();
ViReservePoolAllocation();
ViTrimAllSystemPagableMemory();
VidBitBlt();
VidBufferToScreenBlt();
VidCleanUp();
VidDisplayString();
VidInitialize();
VidResetDisplay();
VidScreenToBufferBlt();
VidSetScrollRegion();
VidSetTextColor();
VidSolidColorFill();
WMIInitialize();
WRITE_REGISTER_BUFFER_UCHAR();
WRITE_REGISTER_BUFFER_ULONG();
WRITE_REGISTER_BUFFER_USHORT();
WRITE_REGISTER_UCHAR();
WRITE_REGISTER_ULONG();
WRITE_REGISTER_USHORT();
WRMSR();
WmiReserveWithSystemHeader();
WmiTraceEvent();
WmiTraceFastEvent();
WmiTraceKernelEvent();
WmipAcquireLoggerContext();
WmipAcquireLoggerContextByLoggerId();
WmipAcquireLoggerContextByLoggerName();
WmipAddLogHeader();
WmipAlloc();
WmipAllocRegEntry();
WmipAllocateTraceBufferPool();
WmipBuildInternalNotification();
WmipCancelPendingIrps();
WmipCheckGuidAccess();
WmipCheckHandleAccess();
WmipCheckLoggerContextAccess();
WmipCleanup();
WmipClose();
WmipCreateDirectoryFile();
WmipCreateGuidObject();
WmipCreateLogFile();
WmipCreateNtFileName();
WmipDecrementIrpCount();
WmipDelayCreate();
WmipDeregisterDevice();
WmipDisableKernelTrace();
WmipDockUndockEventCallback();
WmipDriverEntry();
WmipEnableKernelTrace();
WmipEnterNotificationCritSect();
WmipEventNotification();
WmipFastIoDeviceControl();
WmipFileObjectToPDO();
WmipFindGuid();
WmipFindRegEntryByDevice();
WmipFindSMBiosEPSHeader();
WmipFindSMBiosTable();
WmipFlushBuffer();
WmipFlushNotificationQueue();
WmipForwardWmiIrp();
WmipFreeLoggerContext();
WmipFreeTraceBufferPool();
WmipGetAllRegInfo();
WmipGetFreeBuffer();
WmipGetGuidSecurityDescriptor();
WmipGetLoggerInfoFromContext();
WmipGetNotificationOrPendIrp();
WmipGetSMBiosTableData();
WmipHexStringToDword();
WmipInitContext();
WmipInitLoggerTable();
WmipInitializeNotifications();
WmipInitializeRegistration();
WmipInitializeSecurity();
WmipIoControl();
WmipIsKernelLoggerOn();
WmipIsSMBiosKey();
WmipLogger();
WmipNSAlloc();
WmipNSFree();
WmipNotificationCancel();
WmipNotifyUserMode();
WmipOpen();
WmipOpenGuidObject();
WmipPDOToDeviceInstanceName();
WmipProbeWnodeAllData();
WmipProbeWnodeMethodItem();
WmipProbeWnodeSingleInstance();
WmipProbeWnodeSingleItem();
WmipProbeWnodeWorker();
WmipQueryGLRegistryRoutine();
WmipQueryLogger();
WmipQueryWmiDataBlock();
WmipQueryWmiRegInfo();
WmipReadNotification();
WmipRegisterDevice();
WmipReleaseLoggerContext();
WmipReserveTraceBuffer();
WmipSDRegistryQueryRoutine();
WmipSMBiosDataRegQueryRoutine();
WmipSMBiosIdentifierRegQueryRoutine();
WmipSaveGuidSecurityDescriptor();
WmipSecurityMethod();
WmipSendNotification();
WmipSetTraceNotify();
WmipStartGlobalLogger();
WmipStartLogger();
WmipStopLogger();
WmipStopLoggerInstance();
WmipSwitchBuffer();
WmipSystemControl();
WmipTraceFile();
WmipTraceIo();
WmipTraceLoadImage();
WmipTracePageFault();
WmipTraceProcess();
WmipTraceRegistry();
WmipTraceThread();
WmipTranslateFileHandle();
WmipTranslatePDOInstanceNames();
WmipUnpendNotificationIrpOrQueue();
WmipUnreferenceRegEntry();
WmipUpdateDeviceStackSize();
WmipUpdateLogger();
WmipUpdateRegistration();
WmipUuidFromString();
WmipValidateLoggerInfo();
WmipWaitForIrpCompletion();
WmipWmiIrpCompletion();
X86PaeEnabled();
ZwAcceptConnectPort();
ZwAccessCheck();
ZwAccessCheckAndAuditAlarm();
ZwAccessCheckByType();
ZwAccessCheckByTypeAndAuditAlarm();
ZwAccessCheckByTypeResultList();
ZwAccessCheckByTypeResultListAndAuditAlarm();
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle();
ZwAddAtom();
ZwAdjustGroupsToken();
ZwAdjustPrivilegesToken();
ZwAlertResumeThread();
ZwAlertThread();
ZwAllocateLocallyUniqueId();
ZwAllocateUserPhysicalPages();
ZwAllocateUuids();
ZwAllocateVirtualMemory();
ZwAreMappedFilesTheSame();
ZwAssignProcessToJobObject();
ZwCallbackReturn();
ZwCancelDeviceWakeupRequest();
ZwCancelIoFile();
ZwCancelTimer();
ZwClearEvent();
ZwClose();
ZwCloseObjectAuditAlarm();
ZwCompleteConnectPort();
ZwConnectPort();
ZwContinue();
ZwCreateChannel();
ZwCreateDirectoryObject();
ZwCreateEvent();
ZwCreateEventPair();
ZwCreateFile();
ZwCreateIoCompletion();
ZwCreateJobObject();
ZwCreateKey();
ZwCreateMailslotFile();
ZwCreateMutant();
ZwCreateNamedPipeFile();
ZwCreatePagingFile();
ZwCreatePort();
ZwCreateProcess();
ZwCreateProfile();
ZwCreateSection();
ZwCreateSemaphore();
ZwCreateSymbolicLinkObject();
ZwCreateThread();
ZwCreateTimer();
ZwCreateToken();
ZwCreateWaitablePort();
ZwDelayExecution();
ZwDeleteAtom();
ZwDeleteFile();
ZwDeleteKey();
ZwDeleteObjectAuditAlarm();
ZwDeleteValueKey();
ZwDeviceIoControlFile();
ZwDisplayString();
ZwDuplicateObject();
ZwDuplicateToken();
ZwEnumerateKey();
ZwEnumerateValueKey();
ZwExtendSection();
ZwFilterToken();
ZwFindAtom();
ZwFlushBuffersFile();
ZwFlushInstructionCache();
ZwFlushKey();
ZwFlushVirtualMemory();
ZwFlushWriteBuffer();
ZwFreeUserPhysicalPages();
ZwFreeVirtualMemory();
ZwFsControlFile();
ZwGetContextThread();
ZwGetDevicePowerState();
ZwGetPlugPlayEvent();
ZwGetTickCount();
ZwGetWriteWatch();
ZwImpersonateAnonymousToken();
ZwImpersonateClientOfPort();
ZwImpersonateThread();
ZwInitializeRegistry();
ZwInitiatePowerAction();
ZwIsSystemResumeAutomatic();
ZwListenChannel();
ZwListenPort();
ZwLoadDriver();
ZwLoadKey();
ZwLoadKey2();
ZwLockFile();
ZwLockVirtualMemory();
ZwMakeTemporaryObject();
ZwMapUserPhysicalPages();
ZwMapUserPhysicalPagesScatter();
ZwMapViewOfSection();
ZwNotifyChangeDirectoryFile();
ZwNotifyChangeKey();
ZwNotifyChangeMultipleKeys();
ZwOpenChannel();
ZwOpenDirectoryObject();
ZwOpenEvent();
ZwOpenEventPair();
ZwOpenFile();
ZwOpenIoCompletion();
ZwOpenJobObject();
ZwOpenKey();
ZwOpenMutant();
ZwOpenObjectAuditAlarm();
ZwOpenProcess();
ZwOpenProcessToken();
ZwOpenSection();
ZwOpenSemaphore();
ZwOpenSymbolicLinkObject();
ZwOpenThread();
ZwOpenThreadToken();
ZwOpenTimer();
ZwPlugPlayControl();
ZwPowerInformation();
ZwPrivilegeCheck();
ZwPrivilegeObjectAuditAlarm();
ZwPrivilegedServiceAuditAlarm();
ZwProtectVirtualMemory();
ZwPulseEvent();
ZwQueryAttributesFile();
ZwQueryDefaultLocale();
ZwQueryDefaultUILanguage();
ZwQueryDirectoryFile();
ZwQueryDirectoryObject();
ZwQueryEaFile();
ZwQueryEvent();
ZwQueryFullAttributesFile();
ZwQueryInformationAtom();
ZwQueryInformationFile();
ZwQueryInformationJobObject();
ZwQueryInformationPort();
ZwQueryInformationProcess();
ZwQueryInformationThread();
ZwQueryInformationToken();
ZwQueryInstallUILanguage();
ZwQueryIntervalProfile();
ZwQueryIoCompletion();
ZwQueryKey();
ZwQueryMultipleValueKey();
ZwQueryMutant();
ZwQueryObject();
ZwQueryOpenSubKeys();
ZwQueryPerformanceCounter();
ZwQueryQuotaInformationFile();
ZwQuerySection();
ZwQuerySecurityObject();
ZwQuerySemaphore();
ZwQuerySymbolicLinkObject();
ZwQuerySystemEnvironmentValue();
ZwQuerySystemInformation();
ZwQuerySystemTime();
ZwQueryTimer();
ZwQueryTimerResolution();
ZwQueryValueKey();
ZwQueryVirtualMemory();
ZwQueryVolumeInformationFile();
ZwQueueApcThread();
ZwRaiseException();
ZwRaiseHardError();
ZwReadFile();
ZwReadFileScatter();
ZwReadRequestData();
ZwReadVirtualMemory();
ZwRegisterThreadTerminatePort();
ZwReleaseMutant();
ZwReleaseSemaphore();
ZwRemoveIoCompletion();
ZwReplaceKey();
ZwReplyPort();
ZwReplyWaitReceivePort();
ZwReplyWaitReceivePortEx();
ZwReplyWaitReplyPort();
ZwReplyWaitSendChannel();
ZwRequestDeviceWakeup();
ZwRequestPort();
ZwRequestWaitReplyPort();
ZwRequestWakeupLatency();
ZwResetEvent();
ZwResetWriteWatch();
ZwRestoreKey();
ZwResumeThread();
ZwSaveKey();
ZwSaveMergedKeys();
ZwSecureConnectPort();
ZwSendWaitReplyChannel();
ZwSetContextChannel();
ZwSetContextThread();
ZwSetDefaultHardErrorPort();
ZwSetDefaultLocale();
ZwSetDefaultUILanguage();
ZwSetEaFile();
ZwSetEvent();
ZwSetHighEventPair();
ZwSetHighWaitLowEventPair();
ZwSetInformationFile();
ZwSetInformationJobObject();
ZwSetInformationKey();
ZwSetInformationObject();
ZwSetInformationProcess();
ZwSetInformationThread();
ZwSetInformationToken();
ZwSetIntervalProfile();
ZwSetIoCompletion();
ZwSetLdtEntries();
ZwSetLowEventPair();
ZwSetLowWaitHighEventPair();
ZwSetQuotaInformationFile();
ZwSetSecurityObject();
ZwSetSystemEnvironmentValue();
ZwSetSystemInformation();
ZwSetSystemPowerState();
ZwSetSystemTime();
ZwSetThreadExecutionState();
ZwSetTimer();
ZwSetTimerResolution();
ZwSetUuidSeed();
ZwSetValueKey();
ZwSetVolumeInformationFile();
ZwShutdownSystem();
ZwSignalAndWaitForSingleObject();
ZwStartProfile();
ZwStopProfile();
ZwSuspendThread();
ZwSystemDebugControl();
ZwTerminateJobObject();
ZwTerminateProcess();
ZwTerminateThread();
ZwTestAlert();
ZwUnloadDriver();
ZwUnloadKey();
ZwUnlockFile();
ZwUnlockVirtualMemory();
ZwUnmapViewOfSection();
ZwVdmControl();
ZwWaitForMultipleObjects();
ZwWaitForSingleObject();
ZwWaitHighEventPair();
ZwWaitLowEventPair();
ZwWriteFile();
ZwWriteFileGather();
ZwWriteRequestData();
ZwWriteVirtualMemory();
ZwYieldExecution();
_NLG_Dispatch();
_NLG_Notify();
_NLG_Notify1();
_NLG_Return2();
_PopInternalError();
_RtlEnlargedIntegerMultiply();
_RtlEnlargedUnsignedDivide();
_RtlEnlargedUnsignedMultiply();
__from_strstr_to_strchr();
_abnormal_termination();
_alldiv();
_allmul();
_alloca_probe();
_allrem();
_allshl();
_allshr();
_amsg_exit();
_aulldiv();
_aullrem();
_aullshr();
_chkstk();
_except_handler2();
_except_handler3();
_flsbuf();
_flswbuf();
_fptrap();
_global_unwind2();
_isctype();
_itoa();
_itow();
_local_unwind2();
_mbstrlen();
_output();
_purecall();
_seh_longjmp_unwind();
_snprintf();
_snwprintf();
_strcmpi();
_stricmp();
_strlwr();
_strnicmp();
_strnset();
_strrev();
_strset();
_strupr();
_vsnprintf();
_wcsicmp();
_wcslwr();
_wcsnicmp();
_wcsnset();
_wcsrev();
_wcsupr();
_woutput();
_wtol();
atoi();
atol();
fputwc();
htonl();
isalpha();
isdigit();
islower();
isprint();
isspace();
isupper();
iswctype();
isxdigit();
main();
mbstowcs();
mbtowc();
memchr();
memcpy();
memmove();
memset();
pIoQueryBusDescription();
pIoQueryDeviceDescription();
qsort();
rand();
regValue();
sprintf();
srand();
strcat();
strchr();
strcmp();
strcpy();
strlen();
strncat();
strncmp();
strncpy();
strrchr();
strspn();
strstr();
strtoul();
swprintf();
tcpxsum();
tcpxsum_xmmi();
tolower();
toupper();
towlower();
towupper();
vdmDebugPoint();
vsprintf();
wcscat();
wcschr();
wcscmp();
wcscpy();
wcscspn();
wcslen();
wcsncat();
wcsncmp();
wcsncpy();
wcsrchr();
wcsspn();
wcsstr();
wcstombs();
wctomb();
xHalAssignSlotResources();
xHalExamineMBR();
xHalGetInterruptTranslator();
xHalGetPartialGeometry();
xHalHaltSystem();
xHalHandlerForBus();
xHalInitPnpDriver();
xHalInitPowerManagement();
xHalIoAssignDriveLetters();
xHalIoReadPartitionTable();
xHalIoSetPartitionInformation();
xHalIoWritePartitionTable();
xHalQueryBusSlots();
xHalQuerySystemInformation();
xHalRegisterBusHandler();
xHalSetSystemInformation();
xHalSetWakeAlarm();
xHalSetWakeEnable();
xHalTranslateBusAddress();
